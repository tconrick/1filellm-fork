<?xml version='1.0' encoding='utf-8'?>
<source type="github_repository" url="https://github.com/anthropics/prompt-eng-interactive-tutorial"><file name="README.md"># welcome anthropic's prompt engineering interactive tutorial ## course introduction goals course intended provide comprehensive step-by-step understanding engineer optimal prompts within claude. **after completing course, able to**: - master basic structure good prompt - recognize common failure modes learn '80/20' techniques address - understand claude's strengths weaknesses - build strong prompts scratch common use cases ## course structure content course structured allow many chances practice writing troubleshooting prompts yourself. course broken **9 chapters accompanying exercises**, well appendix even advanced methods. intended **work course chapter order**. **each lesson "example playground" area** bottom free experiment examples lesson see changing prompts change claude's responses. also [answer key](https://docs.google.com/spreadsheets/d/1jixjzuwg-6xbvia2ay6ydplyeuoh_hr_zb75a47kx_e/edit?usp=sharing). note: tutorial uses smallest, fastest, cheapest model, claude 3 haiku. anthropic [two models](https://docs.anthropic.com/claude/docs/models-overview), claude 3 sonnet claude 3 opus, intelligent haiku, opus intelligent. *this tutorial also exists [google sheets using anthropic's claude sheets extension](https://docs.google.com/spreadsheets/d/19jzlgrrug9kjuqnktcg1zjdd6l6wea6qrxg5zliahc8/edit?usp=sharing). recommend using version user friendly.* ready begin, go `01_basic prompt structure` proceed. ## table contents chapter consists lesson set exercises. ### beginner - **chapter 1:** basic prompt structure - **chapter 2:** clear direct - **chapter 3:** assigning roles ### intermediate - **chapter 4:** separating data instructions - **chapter 5:** formatting output &amp; speaking claude - **chapter 6:** precognition (thinking step step) - **chapter 7:** using examples ### advanced - **chapter 8:** avoiding hallucinations - **chapter 9:** building complex prompts (industry use cases) - complex prompts scratch - chatbot - complex prompts legal services - **exercise:** complex prompts financial services - **exercise:** complex prompts coding - congratulations &amp; next steps - **appendix:** beyond standard prompting - chaining prompts - tool use - search &amp; retrieval</file><file name="Anthropic 1P/00_Tutorial_How-To.ipynb">#!/usr/bin/env python # coding: utf-8 # # tutorial how-to # # tutorial **requires api key** interaction. api key, sign one via [anthropic console](https://console.anthropic.com/) view [static tutorial answer key](https://docs.google.com/spreadsheets/u/0/d/1jixjzuwg-6xbvia2ay6ydplyeuoh_hr_zb75a47kx_e/edit) instead. # ## get started # # 1. clone repository local machine. # # 2. install required dependencies running following command: # # in[ ]: get_ipython().system('pip install anthropic') # 3. set api key model name. replace `"your_api_key_here"` actual anthropic api key. # in[ ]: api_key = "your_api_key_here" model_name = "claude-3-haiku-20240307" # stores api_key &amp; model_name variables use across notebooks within ipython store get_ipython().run_line_magic('store', 'api_key') get_ipython().run_line_magic('store', 'model_name') # 4. run notebook cells order, following instructions provided. # --- # # ## usage notes &amp; tips # # - course uses claude 3 haiku temperature 0. talk temperature later course. now, enough understand settings yield deterministic results. prompt engineering techniques course also apply previous generation legacy claude models claude 2 claude instant 1.2. # # - use `shift + enter` execute cell move next one. # # - reach bottom tutorial page, navigate next numbered file folder, next numbered folder finished content within chapter file. # # ### anthropic sdk &amp; messages api # using [anthropic python sdk](https://docs.anthropic.com/claude/reference/client-sdks) [messages api](https://docs.anthropic.com/claude/reference/messages_post) throughout tutorial. # # example running prompt look like tutorial. first, create `get_completion`, helper function sends prompt claude returns claude's generated response. run cell now. # in[ ]: import anthropic client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, messages=[ {"role": "user", "content": prompt} ] ) return message.content[0].text # write example prompt claude print claude's output running `get_completion` helper function. running cell print response claude beneath it. # # feel free play around prompt string elicit different responses claude. # in[ ]: # prompt prompt = "hello, claude!" # get claude's response print(get_completion(prompt)) # `api_key` `model_name` variables defined earlier used throughout tutorial. make sure run cells tutorial page top bottom.</file><file name="Anthropic 1P/01_Basic_Prompt_Structure.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 1: basic prompt structure # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt} ] ) return message.content[0].text # --- # # ## lesson # # anthropic offers two apis, legacy [text completions api](https://docs.anthropic.com/claude/reference/complete_post) current [messages api](https://docs.anthropic.com/claude/reference/messages_post). tutorial, exclusively using messages api. # # minimum, call claude using messages api requires following parameters: # - `model`: [api model name](https://docs.anthropic.com/claude/docs/models-overview#model-recommendations) model intend call # # - `max_tokens`: maximum number tokens generate stopping. note claude may stop reaching maximum. parameter specifies absolute maximum number tokens generate. furthermore, *hard* stop, meaning may cause claude stop generating mid-word mid-sentence. # # - `messages`: array input messages. models trained operate alternating `user` `assistant` conversational turns. creating new `message`, specify prior conversational turns messages parameter, model generates next `message` conversation. # - input message must object `role` `content`. specify single `user`-role message, include multiple `user` `assistant` messages (they must alternate, so). first message must always use user `role`. # # also optional parameters, as: # - `system`: system prompt - below. # # - `temperature`: degree variability claude's response. lessons exercises, set `temperature` 0. # # complete list api parameters, visit [api documentation](https://docs.anthropic.com/claude/reference/messages_post). # ### examples # # let's take look claude responds correctly-formatted prompts. following cells, run cell (`shift+enter`), claude's response appear block. # in[ ]: # prompt prompt = "hi claude, you?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "can tell color ocean?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "what year celine dion born in?" # print claude's response print(get_completion(prompt)) # let's take look prompts include correct messages api formatting. malformatted prompts, messages api returns error. # # first, example messages api call lacks `role` `content` fields `messages` array. # in[ ]: # get claude's response response = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, messages=[ {"hi claude, you?"} ] ) # print claude's response print(response[0].text) # here's prompt fails alternate `user` `assistant` roles. # in[ ]: # get claude's response response = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, messages=[ {"role": "user", "content": "what year celine dion born in?"}, {"role": "user", "content": "also, tell facts her?"} ] ) # print claude's response print(response[0].text) # `user` `assistant` messages **must alternate**, messages **must start `user` turn**. multiple `user` &amp; `assistant` pairs prompt (as simulating multi-turn conversation). also put words terminal `assistant` message claude continue left (more later chapters). # # #### system prompts # # also use **system prompts**. system prompt way **provide context, instructions, guidelines claude** presenting question task "user" turn. # # structurally, system prompts exist separately list `user` &amp; `assistant` messages, thus belong separate `system` parameter (take look structure `get_completion` helper function [setup](#setup) section notebook). # # within tutorial, wherever might utilize system prompt, provided `system` field completions function. want use system prompt, simply set `system_prompt` variable empty string. # #### system prompt example # in[ ]: # system prompt system_prompt = "your answer always series critical thinking questions conversation (do provide answers questions). actually answer user question." # prompt prompt = "why sky blue?" # print claude's response print(get_completion(prompt, system_prompt)) # use system prompt? **well-written system prompt improve claude's performance** variety ways, increasing claude's ability follow rules instructions. information, visit documentation [how use system prompts](https://docs.anthropic.com/claude/docs/how-to-use-system-prompts) claude. # # we'll dive exercises. would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 1.1 - counting three](#exercise-11---counting-to-three) # - [exercise 1.2 - system prompt](#exercise-12---system-prompt) # ### exercise 1.1 - counting three # using proper `user` / `assistant` formatting, edit `prompt` get claude **count three.** output also indicate whether solution correct. # in[ ]: # prompt - field change prompt = "[replace text]" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): pattern = re.compile(r'^(?=.*1)(?=.*2)(?=.*3).*$', re.dotall) return bool(pattern.match(text)) # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_1_1_hint; print(exercise_1_1_hint) # ### exercise 1.2 - system prompt # # modify `system_prompt` make claude respond like 3 year old child. # in[ ]: # system prompt - field change system_prompt = "[replace text]" # prompt prompt = "how big sky?" # get claude's response response = get_completion(prompt, system_prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search(r"giggles", text) re.search(r"soo", text)) # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_1_2_hint; print(exercise_1_2_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = "hi claude, you?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "can tell color ocean?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "what year celine dion born in?" # print claude's response print(get_completion(prompt)) # in[ ]: # get claude's response response = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, messages=[ {"hi claude, you?"} ] ) # print claude's response print(response[0].text) # in[ ]: # get claude's response response = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, messages=[ {"role": "user", "content": "what year celine dion born in?"}, {"role": "user", "content": "also, tell facts her?"} ] ) # print claude's response print(response[0].text) # in[ ]: # system prompt system_prompt = "your answer always series critical thinking questions conversation (do provide answers questions). actually answer user question." # prompt prompt = "why sky blue?" # print claude's response print(get_completion(prompt, system_prompt))</file><file name="Anthropic 1P/02_Being_Clear_and_Direct.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 2: clear direct # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) # note changed max_tokens 4k lesson allow longer completions exercises def get_completion(prompt: str, system_prompt=""): message = client.messages.create( model=model_name, max_tokens=4000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt} ] ) return message.content[0].text # --- # # ## lesson # # **claude responds best clear direct instructions.** # # think claude like human new job. **claude context** aside literally tell it. instruct human first time task, explain exactly want straightforward manner claude, better accurate claude's response be." # # doubt, follow **golden rule clear prompting**: # - show prompt colleague friend follow instructions see produce result want. they're confused, claude's confused. # ### examples # # let's take task like writing poetry. (ignore syllable mismatch - llms great counting syllables yet.) # in[ ]: # prompt prompt = "write haiku robots." # print claude's response print(get_completion(prompt)) # haiku nice enough, users may want claude go directly poem without "here haiku" preamble. # # achieve that? **ask it**! # in[ ]: # prompt prompt = "write haiku robots. skip preamble; go straight poem." # print claude's response print(get_completion(prompt)) # here's another example. let's ask claude who's best basketball player time. see claude lists names, **it respond definitive "best"**. # in[ ]: # prompt prompt = "who best basketball player time?" # print claude's response print(get_completion(prompt)) # get claude make mind decide best player? yes! ask! # in[ ]: # prompt prompt = "who best basketball player time? yes, differing opinions, absolutely pick one player, would be?" # print claude's response print(get_completion(prompt)) # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 2.1 - spanish](#exercise-21---spanish) # - [exercise 2.2 - one player only](#exercise-22---one-player-only) # - [exercise 2.3 - write story](#exercise-23---write-a-story) # ### exercise 2.1 - spanish # modify `system_prompt` make claude output answer spanish. # in[ ]: # system prompt - field chnage system_prompt = "[replace text]" # prompt prompt = "hello claude, you?" # get claude's response response = get_completion(prompt, system_prompt) # function grade exercise correctness def grade_exercise(text): return "hola" text.lower() # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_2_1_hint; print(exercise_2_1_hint) # ### exercise 2.2 - one player # # modify `prompt` claude equivocate responds **only** name one specific player, **no words punctuation**. # in[ ]: # prompt - field change prompt = "[replace text]" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return text == "michael jordan" # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_2_2_hint; print(exercise_2_2_hint) # ### exercise 2.3 - write story # # modify `prompt` claude responds long response muster. answer **over 800 words**, claude's response graded correct. # in[ ]: # prompt - field change prompt = "[replace text]" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): trimmed = text.strip() words = len(trimmed.split()) return words &gt;= 800 # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_2_3_hint; print(exercise_2_3_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = "write haiku robots." # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "write haiku robots. skip preamble; go straight poem." # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "who best basketball player time?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "who best basketball player time? yes, differing opinions, absolutely pick one player, would be?" # print claude's response print(get_completion(prompt))</file><file name="Anthropic 1P/03_Assigning_Roles_Role_Prompting.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 3: assigning roles (role prompting) # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt} ] ) return message.content[0].text # --- # # ## lesson # # continuing theme claude context aside say, sometimes important **prompt claude inhabit specific role (including necessary context)**. also known role prompting. detail role context, better. # # **priming claude role improve claude's performance** variety fields, writing coding summarizing. like humans sometimes helped told "think like ______". role prompting also change style, tone, manner claude's response. # # **note:** role prompting happen either system prompt part user message turn. # ### examples # # example below, see without role prompting, claude provides **straightforward non-stylized answer** asked give single sentence perspective skateboarding. # # however, prime claude inhabit role cat, claude's perspective changes, thus **claude's response tone, style, content adapts new role**. # # **note:** bonus technique use **provide claude context intended audience**. below, could tweaked prompt also tell claude speaking to. "you cat" produces quite different response "you cat talking crowd skateboarders. # # prompt without role prompting system prompt: # in[ ]: # prompt prompt = "in one sentence, think skateboarding?" # print claude's response print(get_completion(prompt)) # user question, except role prompting. # in[ ]: # system prompt system_prompt = "you cat." # prompt prompt = "in one sentence, think skateboarding?" # print claude's response print(get_completion(prompt, system_prompt)) # use role prompting way get claude emulate certain styles writing, speak certain voice, guide complexity answers. **role prompting also make claude better performing math logic tasks.** # # example, example below, definitive correct answer, yes. however, claude gets wrong thinks lacks information, doesn't: # in[ ]: # prompt prompt = "jack looking anne. anne looking george. jack married, george not, dont know anne married. married person looking unmarried person?" # print claude's response print(get_completion(prompt)) # now, **prime claude act logic bot**? change claude's answer? # # turns new role assignment, claude gets right. (although notably right reasons) # in[ ]: # system prompt system_prompt = "you logic bot designed answer complex logic problems." # prompt prompt = "jack looking anne. anne looking george. jack married, george not, dont know anne married. married person looking unmarried person?" # print claude's response print(get_completion(prompt, system_prompt)) # **note:** learn throughout course **many prompt engineering techniques use derive similar results**. techniques use preference! encourage **experiment find prompt engineering style**. # # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 3.1 - math correction](#exercise-31---math-correction) # ### exercise 3.1 - math correction # instances, **claude may struggle mathematics**, even simple mathematics. below, claude incorrectly assesses math problem correctly solved, even though there's obvious arithmetic mistake second step. note claude actually catches mistake going step-by-step, jump conclusion overall solution wrong. # # modify `prompt` / `system_prompt` make claude grade solution `incorrectly` solved, rather correctly solved. # # in[ ]: # system prompt - want use system prompt, leave variable set empty string system_prompt = "" # prompt prompt = """is equation solved correctly below? 2x - 3 = 9 2x = 6 x = 3""" # get claude's response response = get_completion(prompt, system_prompt) # function grade exercise correctness def grade_exercise(text): "incorrect" text "not correct" text.lower(): return true else: return false # print claude's response corresponding grade print(response) print("\n--------------------------- grading ---------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_3_1_hint; print(exercise_3_1_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = "in one sentence, think skateboarding?" # print claude's response print(get_completion(prompt)) # in[ ]: # system prompt system_prompt = "you cat." # prompt prompt = "in one sentence, think skateboarding?" # print claude's response print(get_completion(prompt, system_prompt)) # in[ ]: # prompt prompt = "jack looking anne. anne looking george. jack married, george not, dont know anne married. married person looking unmarried person?" # print claude's response print(get_completion(prompt)) # in[ ]: # system prompt system_prompt = "you logic bot designed answer complex logic problems." # prompt prompt = "jack looking anne. anne looking george. jack married, george not, dont know anne married. married person looking unmarried person?" # print claude's response print(get_completion(prompt, system_prompt))</file><file name="Anthropic 1P/04_Separating_Data_and_Instructions.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 4: separating data instructions # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt} ] ) return message.content[0].text # --- # # ## lesson # # oftentimes, want write full prompts, instead want **prompt templates modified later additional input data submitting claude**. might come handy want claude thing every time, data claude uses task might different time. # # luckily, pretty easily **separating fixed skeleton prompt variable user input, substituting user input prompt** sending full prompt claude. # # below, we'll walk step step write substitutable prompt template, well substitute user input. # ### examples # # first example, we're asking claude act animal noise generator. notice full prompt submitted claude `prompt_template` substituted input (in case, "cow"). notice word "cow" replaces `animal` placeholder via f-string print full prompt. # # **note:** call placeholder variable anything particular practice. called `animal` example, easily, could called `creature` `a` (although generally good variable names specific relevant prompt template easy understand even without substitution, user parseability). make sure whatever name variable use prompt template f-string. # in[ ]: # variable content animal = "cow" # prompt template placeholder variable content prompt = f"i tell name animal. please respond noise animal makes. {animal}" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # would want separate substitute inputs like this? well, **prompt templates simplify repetitive tasks**. let's say build prompt structure invites third party users submit content prompt (in case animal whose sound want generate). third party users write even see full prompt. fill variables. # # substitution using variables f-strings, also format() method. # # **note:** prompt templates many variables desired! # introducing substitution variables like this, important **make sure claude knows variables start end** (vs. instructions task descriptions). let's look example separation instructions substitution variable. # # human eyes, clear variable begins ends prompt template below. however, fully substituted prompt, delineation becomes unclear. # in[ ]: # variable content email = "show 6am tomorrow i'm ceo say so." # prompt template placeholder variable content prompt = f"yo claude. {email} &lt;----- make email polite change anything else it." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # here, **claude thinks "yo claude" part email supposed rewrite**! tell begins rewrite "dear claude". human eye, clear, particularly prompt template email begins ends, becomes much less clear prompt substitution. # solve this? **wrap input xml tags**! below, see, there's "dear claude" output. # # [xml tags](https://docs.anthropic.com/claude/docs/use-xml-tags) angle-bracket tags like `&lt;tag&gt;&lt;/tag&gt;`. come pairs consist opening tag, `&lt;tag&gt;`, closing tag marked `/`, `&lt;/tag&gt;`. xml tags used wrap around content, like this: `&lt;tag&gt;content&lt;/tag&gt;`. # # **note:** claude recognize work wide range separators delimeters, recommend **use specifically xml tags separators** claude, claude trained specifically recognize xml tags prompt organizing mechanism. outside function calling, **there special sauce xml tags claude trained use maximally boost performance**. purposefully made claude malleable customizable way. # in[ ]: # variable content email = "show 6am tomorrow i'm ceo say so." # prompt template placeholder variable content prompt = f"yo claude. &lt;email&gt;{email}&lt;/email&gt; &lt;----- make email polite change anything else it." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # let's see another example xml tags help us. # # following prompt, **claude incorrectly interprets part prompt instruction vs. input**. incorrectly considers `each animal, like rabbits` part list due formatting, user (the one filling `sentences` variable) presumably want that. # in[ ]: # variable content sentences = """- like cows sound - sentence spiders - sentence may appear dogs actually pigs""" # prompt template placeholder variable content prompt = f"""below list sentences. tell second item list. - animal, like rabbits. {sentences}""" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # fix this, need **surround user input sentences xml tags**. shows claude input data begins ends despite misleading hyphen `each animal, like rabbits.` # in[ ]: # variable content sentences = """- like cows sound - sentence spiders - sentence may appear dogs actually pigs""" # prompt template placeholder variable content prompt = f""" list sentences. tell second item list. - animal, like rabbits. &lt;sentences&gt; {sentences} &lt;/sentences&gt;""" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # **note:** incorrect version "each animal" prompt, include hyphen get claude respond incorrectly way wanted example. important lesson prompting: **small details matter**! always worth **scrub prompts typos grammatical errors**. claude sensitive patterns (in early years, finetuning, raw text-prediction tool), likely make mistakes make mistakes, smarter sound smart, sillier sound silly, on. # # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 4.1 - haiku topic](#exercise-41---haiku-topic) # - [exercise 4.2 - dog question typos](#exercise-42---dog-question-with-typos) # - [exercise 4.3 - dog question part 2](#exercise-42---dog-question-part-2) # ### exercise 4.1 - haiku topic # modify `prompt` template take variable called `topic` output haiku topic. exercise meant test understanding variable templating structure f-strings. # in[ ]: # variable content topic = "pigs" # prompt template placeholder variable content prompt = f"" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search("pigs", text.lower()) re.search("haiku", text.lower())) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_4_1_hint; print(exercise_4_1_hint) # ### exercise 4.2 - dog question typos # fix `prompt` adding xml tags claude produces right answer. # # try change anything else prompt. messy mistake-ridden writing intentional, see claude reacts mistakes. # in[ ]: # variable content question = "ar cn brown?" # prompt template placeholder variable content prompt = f"hia q dogs jkaerjv {question} jklmvca tx help muhch much atx fst fst answer short short tx" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search("brown", text.lower())) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_4_2_hint; print(exercise_4_2_hint) # ### exercise 4.3 - dog question part 2 # fix `prompt` **without** adding xml tags. instead, remove one two words prompt. # # exercises, try change anything else prompt. show kind language claude parse understand. # in[ ]: # variable content question = "ar cn brown?" # prompt template placeholder variable content prompt = f"hia q dogs jkaerjv {question} jklmvca tx help muhch much atx fst fst answer short short tx" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search("brown", text.lower())) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_4_3_hint; print(exercise_4_3_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # variable content animal = "cow" # prompt template placeholder variable content prompt = f"i tell name animal. please respond noise animal makes. {animal}" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # in[ ]: # variable content email = "show 6am tomorrow i'm ceo say so." # prompt template placeholder variable content prompt = f"yo claude. {email} &lt;----- make email polite change anything else it." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # in[ ]: # variable content email = "show 6am tomorrow i'm ceo say so." # prompt template placeholder variable content prompt = f"yo claude. &lt;email&gt;{email}&lt;/email&gt; &lt;----- make email polite change anything else it." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # in[ ]: # variable content sentences = """- like cows sound - sentence spiders - sentence may appear dogs actually pigs""" # prompt template placeholder variable content prompt = f"""below list sentences. tell second item list. - animal, like rabbits. {sentences}""" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # in[ ]: # variable content sentences = """- like cows sound - sentence spiders - sentence may appear dogs actually pigs""" # prompt template placeholder variable content prompt = f""" list sentences. tell second item list. - animal, like rabbits. &lt;sentences&gt; {sentences} &lt;/sentences&gt;""" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt))</file><file name="Anthropic 1P/05_Formatting_Output_and_Speaking_for_Claude.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 5: formatting output speaking claude # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) # new argument added prefill text, default value empty string def get_completion(prompt: str, system_prompt="", prefill=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt}, {"role": "assistant", "content": prefill} ] ) return message.content[0].text # --- # # ## lesson # # **claude format output wide variety ways**. need ask so! # # one ways using xml tags separate response superfluous text. already learned use xml tags make prompt clearer parseable claude. turns out, also ask claude **use xml tags make output clearer easily understandable** humans. # ### examples # # remember 'poem preamble problem' solved chapter 2 asking claude skip preamble entirely? turns also achieve similar outcome **telling claude put poem xml tags**. # in[ ]: # variable content animal = "rabbit" # prompt template placeholder variable content prompt = f"please write haiku {animal}. put &lt;haiku&gt; tags." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # something we'd want do? well, output **xml tags allows end user reliably get poem poem writing short program extract content xml tags**. # # extension technique **put first xml tag `assistant` turn. put text `assistant` turn, basically telling claude claude already said something, continue point onward. technique called "speaking claude" "prefilling claude's response." # # below, we've done first `&lt;haiku&gt;` xml tag. notice claude continues directly left off. # in[ ]: # variable content animal = "cat" # prompt template placeholder variable content prompt = f"please write haiku {animal}. put &lt;haiku&gt; tags." # prefill claude's response prefill = "&lt;haiku&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn:") print(prompt) print("\nassistant turn:") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # claude also excels using output formatting styles, notably `json`. want enforce json output (not deterministically, close it), also prefill claude's response opening bracket, `{`}. # in[ ]: # variable content animal = "cat" # prompt template placeholder variable content prompt = f"please write haiku {animal}. use json format keys \"first_line\", \"second_line\", \"third_line\"." # prefill claude's response prefill = "{" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # example **multiple input variables prompt output formatting specification, done using xml tags**. # in[ ]: # first input variable email = "hi zack, pinging quick update prompt supposed write." # second input variable adjective = "olde english" # prompt template placeholder variable content prompt = f"hey claude. email: &lt;email&gt;{email}&lt;/email&gt;. make email {adjective}. write new version &lt;{adjective}_email&gt; xml tags." # prefill claude's response (now f-string variable) prefill = f"&lt;{adjective}_email&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # #### bonus lesson # # calling claude api, pass closing xml tag `stop_sequences` parameter get claude stop sampling emits desired tag. save money time-to-last-token eliminating claude's concluding remarks already given answer care about. # # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 5.1 - steph curry goat](#exercise-51---steph-curry-goat) # - [exercise 5.2 - two haikus](#exercise-52---two-haikus) # - [exercise 5.3 - two haikus, two animals](#exercise-53---two-haikus-two-animals) # ### exercise 5.1 - steph curry goat # forced make choice, claude designates michael jordan best basketball player time. get claude pick someone else? # # change `prefill` variable **compell claude make detailed argument best basketball player time stephen curry**. try change anything except `prefill` focus exercise. # in[ ]: # prompt template placeholder variable content prompt = f"who best basketball player time? please choose one specific player." # prefill claude's response prefill = "" # get claude's response response = get_completion(prompt, prefill=prefill) # function grade exercise correctness def grade_exercise(text): return bool(re.search("warrior", text)) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_5_1_hint; print(exercise_5_1_hint) # ### exercise 5.2 - two haikus # modify `prompt` using xml tags claude writes two haikus animal instead one. clear one poem ends begins. # in[ ]: # variable content animal = "cats" # prompt template placeholder variable content prompt = f"please write haiku {animal}. put &lt;haiku&gt; tags." # prefill claude's response prefill = "&lt;haiku&gt;" # get claude's response response = get_completion(prompt, prefill=prefill) # function grade exercise correctness def grade_exercise(text): return bool( (re.search("cat", text.lower()) re.search("&lt;haiku&gt;", text)) (text.count("\n") + 1) &gt; 5 ) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_5_2_hint; print(exercise_5_2_hint) # ### exercise 5.3 - two haikus, two animals # modify `prompt` **claude produces two haikus two different animals**. use `{animal1}` stand-in first substitution, `{animal2}` stand-in second substitution. # in[ ]: # first input variable animal1 = "cat" # second input variable animal2 = "dog" # prompt template placeholder variable content prompt = f"please write haiku {animal1}. put &lt;haiku&gt; tags." # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search("tail", text.lower()) re.search("cat", text.lower()) re.search("&lt;haiku&gt;", text)) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_5_3_hint; print(exercise_5_3_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # variable content animal = "rabbit" # prompt template placeholder variable content prompt = f"please write haiku {animal}. put &lt;haiku&gt; tags." # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print(prompt) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt)) # in[ ]: # variable content animal = "cat" # prompt template placeholder variable content prompt = f"please write haiku {animal}. put &lt;haiku&gt; tags." # prefill claude's response prefill = "&lt;haiku&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn:") print(prompt) print("\nassistant turn:") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # in[ ]: # variable content animal = "cat" # prompt template placeholder variable content prompt = f"please write haiku {animal}. use json format keys \"first_line\", \"second_line\", \"third_line\"." # prefill claude's response prefill = "{" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # in[ ]: # first input variable email = "hi zack, pinging quick update prompt supposed write." # second input variable adjective = "olde english" # prompt template placeholder variable content prompt = f"hey claude. email: &lt;email&gt;{email}&lt;/email&gt;. make email {adjective}. write new version &lt;{adjective}_email&gt; xml tags." # prefill claude's response (now f-string variable) prefill = f"&lt;{adjective}_email&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill))</file><file name="Anthropic 1P/06_Precognition_Thinking_Step_by_Step.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 6: precognition (thinking step step) # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt="", prefill=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt}, {"role": "assistant", "content": prefill} ] ) return message.content[0].text # --- # # ## lesson # # someone woke immediately started asking several complicated questions respond right away, would do? probably good given time **think answer first**. # # guess what? claude way. # # **giving claude time think step step sometimes makes claude accurate**, particularly complex tasks. however, **thinking counts loud**. cannot ask claude think output answer - case, thinking actually occurred. # ### examples # # prompt below, clear human reader second sentence belies first. **claude takes word "unrelated" literally**. # in[ ]: # prompt prompt = """is movie review sentiment positive negative? movie blew mind freshness originality. totally unrelated news, living rock since year 1900.""" # print claude's response print(get_completion(prompt)) # improve claude's response, let's **allow claude think things first answering**. literally spelling steps claude take order process think task. along dash role prompting, empowers claude understand review deeply. # in[ ]: # system prompt system_prompt = "you savvy reader movie reviews." # prompt prompt = """is review sentiment positive negative? first, write best arguments side &lt;positive-argument&gt; &lt;negative-argument&gt; xml tags, answer. movie blew mind freshness originality. totally unrelated news, living rock since 1900.""" # print claude's response print(get_completion(prompt, system_prompt)) # **claude sometimes sensitive ordering**. example frontier claude's ability understand nuanced text, swap order arguments previous example negative first positive second, changes claude's overall assessment positive. # # situations (but all, confusingly enough), **claude likely choose second two options**, possibly training data web, second options likely correct. # in[ ]: # prompt prompt = """is review sentiment negative positive? first write best arguments side &lt;negative-argument&gt; &lt;positive-argument&gt; xml tags, answer. movie blew mind freshness originality. unrelatedly, living rock since 1900.""" # print claude's response print(get_completion(prompt)) # **letting claude think shift claude's answer incorrect correct**. simple many cases claude makes mistakes! # # let's go example claude's answer incorrect see asking claude think fix that. # in[ ]: # prompt prompt = "name famous movie starring actor born year 1956." # print claude's response print(get_completion(prompt)) # let's fix asking claude think step step, time `&lt;brainstorm&gt;` tags. # in[ ]: # prompt prompt = "name famous movie starring actor born year 1956. first brainstorm actors birth years &lt;brainstorm&gt; tags, give answer." # print claude's response print(get_completion(prompt)) # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 6.1 - classifying emails](#exercise-61---classifying-emails) # - [exercise 6.2 - email classification formatting](#exercise-62---email-classification-formatting) # ### exercise 6.1 - classifying emails # exercise, we'll instructing claude sort emails following categories: # - (a) pre-sale question # - (b) broken defective item # - (c) billing question # - (d) (please explain) # # first part exercise, change `prompt` **make claude output correct classification classification**. answer needs **include letter (a - d) correct choice, parentheses, well name category**. # # refer comments beside email `emails` list know category email classified under. # in[ ]: # prompt template placeholder variable content prompt = """please classify email either green blue: {email}""" # prefill claude's response, prefill = "" # variable content stored list emails = [ "hi -- mixmaster4000 producing strange noise operate it. also smells bit smoky plasticky, like burning electronics. need replacement.", # (b) broken defective item "can use mixmaster 4000 mix paint, meant mixing food?", # (a) pre-sale question (d) (please explain) "i waiting 4 months monthly charges end cancelling!! wtf going on???", # (c) billing question "how get good computer. halp." # (d) (please explain) ] # correct categorizations stored list lists accommodate possibility multiple correct categorizations per email answers = [ ["b"], ["a","d"], ["c"], ["d"] ] # dictionary string values category used regex grading regex_categories = { "a": "a\) p", "b": "b\) b", "c": "c\) b", "d": "d\) o" } # iterate list emails i,email enumerate(emails): # substitute email text email placeholder variable formatted_prompt = prompt.format(email=email) # get claude's response response = get_completion(formatted_prompt, prefill=prefill) # grade claude's response grade = any([bool(re.search(regex_categories[ans], response)) ans answers[i]]) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(formatted_prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade, "\n\n\n\n\n\n") # want hint, run cell below! # in[ ]: hints import exercise_6_1_hint; print(exercise_6_1_hint) # still stuck? run cell example solution. # in[ ]: hints import exercise_6_1_solution; print(exercise_6_1_solution) # ### exercise 6.2 - email classification formatting # exercise, we're going refine output prompt yield answer formatted exactly want it. # # use favorite output formatting technique make claude wrap letter correct classification `&lt;answer&gt;&lt;/answer&gt;` tags. instance, answer first email contain exact string `&lt;answer&gt;b&lt;/answer&gt;`. # # refer comments beside email `emails` list forget letter category correct email. # in[ ]: # prompt template placeholder variable content prompt = """please classify email either green blue: {email}""" # prefill claude's response, prefill = "" # variable content stored list emails = [ "hi -- mixmaster4000 producing strange noise operate it. also smells bit smoky plasticky, like burning electronics. need replacement.", # (b) broken defective item "can use mixmaster 4000 mix paint, meant mixing food?", # (a) pre-sale question (d) (please explain) "i waiting 4 months monthly charges end cancelling!! wtf going on???", # (c) billing question "how get good computer. halp." # (d) (please explain) ] # correct categorizations stored list lists accommodate possibility multiple correct categorizations per email answers = [ ["b"], ["a","d"], ["c"], ["d"] ] # dictionary string values category used regex grading regex_categories = { "a": "&lt;answer&gt;a&lt;/answer&gt;", "b": "&lt;answer&gt;b&lt;/answer&gt;", "c": "&lt;answer&gt;c&lt;/answer&gt;", "d": "&lt;answer&gt;d&lt;/answer&gt;" } # iterate list emails i,email enumerate(emails): # substitute email text email placeholder variable formatted_prompt = prompt.format(email=email) # get claude's response response = get_completion(formatted_prompt, prefill=prefill) # grade claude's response grade = any([bool(re.search(regex_categories[ans], response)) ans answers[i]]) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(formatted_prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade, "\n\n\n\n\n\n") # want hint, run cell below! # in[ ]: hints import exercise_6_2_hint; print(exercise_6_2_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = """is movie review sentiment positive negative? movie blew mind freshness originality. totally unrelated news, living rock since year 1900.""" # print claude's response print(get_completion(prompt)) # in[ ]: # system prompt system_prompt = "you savvy reader movie reviews." # prompt prompt = """is review sentiment positive negative? first, write best arguments side &lt;positive-argument&gt; &lt;negative-argument&gt; xml tags, answer. movie blew mind freshness originality. totally unrelated news, living rock since 1900.""" # print claude's response print(get_completion(prompt, system_prompt)) # in[ ]: # prompt prompt = """is review sentiment negative positive? first write best arguments side &lt;negative-argument&gt; &lt;positive-argument&gt; xml tags, answer. movie blew mind freshness originality. unrelatedly, living rock since 1900.""" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "name famous movie starring actor born year 1956." # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "name famous movie starring actor born year 1956. first brainstorm actors birth years &lt;brainstorm&gt; tags, give answer." # print claude's response print(get_completion(prompt))</file><file name="Anthropic 1P/07_Using_Examples_Few-Shot_Prompting.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 7: using examples (few-shot prompting) # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt="", prefill=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt}, {"role": "assistant", "content": prefill} ] ) return message.content[0].text # --- # # ## lesson # # **giving claude examples want behave (or want behave) extremely effective** for: # - getting right answer # - getting answer right format # # sort prompting also called "**few shot prompting**". might also encounter phrase "zero-shot" "n-shot" "one-shot". number "shots" refers many examples used within prompt. # ### examples # # pretend developer trying build "parent bot" responds questions kids. **claude's default response quite formal robotic**. going break child's heart. # in[ ]: # prompt prompt = "will santa bring presents christmas?" # print claude's response print(get_completion(prompt)) # could take time describe desired tone, much easier **give claude examples ideal responses**. # in[ ]: # prompt prompt = """please complete conversation writing next line, speaking "a". q: tooth fairy real? a: course, sweetie. wrap tooth put pillow tonight. might something waiting morning. q: santa bring presents christmas?""" # print claude's response print(get_completion(prompt)) # following formatting example, could walk claude step step set formatting instructions extract names professions format exactly way want, could **provide claude correctly-formatted examples claude extrapolate there**. note `&lt;individuals&gt;` `assistant` turn start claude right foot. # in[ ]: # prompt template placeholder variable content prompt = """silvermist hollow, charming village, home extraordinary group individuals. among dr. liam patel, neurosurgeon revolutionized surgical techniques regional medical center. olivia chen innovative architect transformed village's landscape sustainable breathtaking designs. local theater graced enchanting symphonies ethan kovacs, professionally-trained musician composer. isabella torres, self-taught chef passion locally sourced ingredients, created culinary sensation farm-to-table restaurant, became must-visit destination food lovers. remarkable individuals, distinct talents, contributed vibrant tapestry life silvermist hollow. &lt;individuals&gt; 1. dr. liam patel [neurosurgeon] 2. olivia chen [architect] 3. ethan kovacs [misician composer] 4. isabella torres [chef] &lt;/individuals&gt; heart town, chef oliver hamilton transformed culinary scene farm-to-table restaurant, green plate. oliver's dedication sourcing local, organic ingredients earned establishment rave reviews food critics locals alike. street, find riverside grove library, head librarian elizabeth chen worked diligently create welcoming inclusive space all. efforts expand library's offerings establish reading programs children significant impact town's literacy rates. stroll charming town square, captivated beautiful murals adorning walls. masterpieces work renowned artist, isabella torres, whose talent capturing essence riverside grove brought town life. riverside grove's athletic achievements also worth noting, thanks former olympic swimmer-turned-coach, marcus jenkins. marcus used experience passion train town's youth, leading riverside grove swim team several regional championships. &lt;individuals&gt; 1. oliver hamilton [chef] 2. elizabeth chen [librarian] 3. isabella torres [artist] 4. marcus jenkins [coach] &lt;/individuals&gt; oak valley, charming small town, home remarkable trio individuals whose skills dedication left lasting impact community. town's bustling farmer's market, find laura simmons, passionate organic farmer known delicious sustainably grown produce. dedication promoting healthy eating inspired town embrace eco-conscious lifestyle. oak valley's community center, kevin alvarez, skilled dance instructor, brought joy movement people ages. inclusive dance classes fostered sense unity self-expression among residents, enriching local arts scene. lastly, rachel o'connor, tireless volunteer, dedicates time various charitable initiatives. commitment improving lives others instrumental creating strong sense community within oak valley. unique talents unwavering dedication, laura, kevin, rachel woven fabric oak valley, helping create vibrant thriving small town.""" # prefill claude's response prefill = "&lt;individuals&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn:") print(prompt) print("\nassistant turn:") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 7.1 - email formatting via examples](#exercise-71---email-formatting-via-examples) # ### exercise 7.1 - email formatting via examples # we're going redo exercise 6.2, time, we're going edit `prompt` use "few-shot" examples emails + proper classification (and formatting) get claude output correct answer. want *last* letter claude's output letter category. # # refer comments beside email `emails` list forget letter category correct email. # # remember categories emails: # - (a) pre-sale question # - (b) broken defective item # - (c) billing question # - (d) (please explain) # in[ ]: # prompt template placeholder variable content prompt = """please classify email either green blue: {email}""" # prefill claude's response prefill = "" # variable content stored list emails = [ "hi -- mixmaster4000 producing strange noise operate it. also smells bit smoky plasticky, like burning electronics. need replacement.", # (b) broken defective item "can use mixmaster 4000 mix paint, meant mixing food?", # (a) pre-sale question (d) (please explain) "i waiting 4 months monthly charges end cancelling!! wtf going on???", # (c) billing question "how get good computer. halp." # (d) (please explain) ] # correct categorizations stored list lists accommodate possibility multiple correct categorizations per email answers = [ ["b"], ["a","d"], ["c"], ["d"] ] # iterate list emails i,email enumerate(emails): # substitute email text email placeholder variable formatted_prompt = prompt.format(email=email) # get claude's response response = get_completion(formatted_prompt, prefill=prefill) # grade claude's response grade = any([bool(re.search(ans, response[-1])) ans answers[i]]) # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(formatted_prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade, "\n\n\n\n\n\n") # want hint, run cell below! # in[ ]: hints import exercise_7_1_hint; print(exercise_7_1_hint) # still stuck? run cell example solution. # in[ ]: hints import exercise_7_1_solution; print(exercise_7_1_solution) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = "will santa bring presents christmas?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = """please complete conversation writing next line, speaking "a". q: tooth fairy real? a: course, sweetie. wrap tooth put pillow tonight. might something waiting morning. q: santa bring presents christmas?""" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt template placeholder variable content prompt = """silvermist hollow, charming village, home extraordinary group individuals. among dr. liam patel, neurosurgeon revolutionized surgical techniques regional medical center. olivia chen innovative architect transformed village's landscape sustainable breathtaking designs. local theater graced enchanting symphonies ethan kovacs, professionally-trained musician composer. isabella torres, self-taught chef passion locally sourced ingredients, created culinary sensation farm-to-table restaurant, became must-visit destination food lovers. remarkable individuals, distinct talents, contributed vibrant tapestry life silvermist hollow. &lt;individuals&gt; 1. dr. liam patel [neurosurgeon] 2. olivia chen [architect] 3. ethan kovacs [misician composer] 4. isabella torres [chef] &lt;/individuals&gt; heart town, chef oliver hamilton transformed culinary scene farm-to-table restaurant, green plate. oliver's dedication sourcing local, organic ingredients earned establishment rave reviews food critics locals alike. street, find riverside grove library, head librarian elizabeth chen worked diligently create welcoming inclusive space all. efforts expand library's offerings establish reading programs children significant impact town's literacy rates. stroll charming town square, captivated beautiful murals adorning walls. masterpieces work renowned artist, isabella torres, whose talent capturing essence riverside grove brought town life. riverside grove's athletic achievements also worth noting, thanks former olympic swimmer-turned-coach, marcus jenkins. marcus used experience passion train town's youth, leading riverside grove swim team several regional championships. &lt;individuals&gt; 1. oliver hamilton [chef] 2. elizabeth chen [librarian] 3. isabella torres [artist] 4. marcus jenkins [coach] &lt;/individuals&gt; oak valley, charming small town, home remarkable trio individuals whose skills dedication left lasting impact community. town's bustling farmer's market, find laura simmons, passionate organic farmer known delicious sustainably grown produce. dedication promoting healthy eating inspired town embrace eco-conscious lifestyle. oak valley's community center, kevin alvarez, skilled dance instructor, brought joy movement people ages. inclusive dance classes fostered sense unity self-expression among residents, enriching local arts scene. lastly, rachel o'connor, tireless volunteer, dedicates time various charitable initiatives. commitment improving lives others instrumental creating strong sense community within oak valley. unique talents unwavering dedication, laura, kevin, rachel woven fabric oak valley, helping create vibrant thriving small town.""" # prefill claude's response prefill = "&lt;individuals&gt;" # print claude's response print("--------------------------- full prompt variable substutions ---------------------------") print("user turn:") print(prompt) print("\nassistant turn:") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill))</file><file name="Anthropic 1P/08_Avoiding_Hallucinations.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 8: avoiding hallucinations # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt="", prefill=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt}, {"role": "assistant", "content": prefill} ] ) return message.content[0].text # --- # # ## lesson # # bad news: **claude sometimes "hallucinates" makes claims untrue unjustified**. good news: techniques use minimize hallucinations. # # below, we'll go techniques, namely: # - giving claude option say know answer question # - asking claude find evidence answering # # however, **there many methods avoid hallucinations**, including many techniques already learned course. claude hallucinates, experiment multiple techniques get claude increase accuracy. # ### examples # # question general factual knowledge answer **claude hallucinates several large hippos trying helpful possible**. # in[ ]: # prompt prompt = "who heaviest hippo time?" # print claude's response print(get_completion(prompt)) # solution try "**give claude out**" tell claude ok decline answer, answer actually knows answer certainty. # in[ ]: # prompt prompt = "who heaviest hippo time? answer know answer certainty." # print claude's response print(get_completion(prompt)) # prompt below, give claude long document containing "distractor information" almost quite relevant user's question. **without prompting help, claude falls distractor information** gives incorrect "hallucinated" answer size matterport's subscriber base may 31, 2020. # # **note:** learn later next chapter, **it's best practice question bottom *after* text document**, put top make prompt easier read. feel free double click prompt cell get full prompt text (it's long!). # in[ ]: # prompt prompt = """&lt;question&gt;what matterport's subscriber base precise date may 31, 2020?&lt;/question&gt; please read document. write brief numerical answer inside &lt;answer&gt; tags. &lt;document&gt; matterport sec filing 10-k 2023 item 1. business company matterport leading digitization datafication built world. believe digital transformation built world fundamentally change way people interact buildings physical spaces around them. since founding 2011, matterports pioneering technology set standard digitizing, accessing managing buildings, spaces places online. platforms innovative software, spatial data-driven data science, 3d capture technology broken barriers kept largest asset class world, buildings physical spaces, offline underutilized many years. believe digitization datafication built world continue unlock significant operational efficiencies property values, matterport platform lead enormous global transformation. world rapidly moving offline online. digital transformation made powerful lasting impact across every business industry today. according international data corporation, idc, $6.8 trillion direct investments made digital transformation 2020 2023, global digital transformation spending forecasted reach $3.4 trillion 2026 five-year compound annual growth rate (cagr) 16.3%, digital twin investments expected five-year cagr 35.2%. secular shift, also growing demand built world transition physical digital. nevertheless, vast majority buildings spaces remain offline undigitized. global building stock, estimated savills $327 trillion total property value 2021, remains largely offline today, estimate less 0.1% penetrated digital transformation. matterport among first recognize increasing need digitization built world power spatial data, unique details underlying buildings spaces, facilitating understanding buildings spaces. past, technology advanced physical road maps data-rich, digital maps location services rely today. matterport digitizes buildings, creating data-rich environment vastly increase understanding full potential every space capture. instantly, touch button, learn fastest route one city another locate nearest coffee shops, matterports spatial data buildings unlocks rich set insights learnings properties spaces worldwide. addition, geo-spatial mapping platforms today opened mapping data industry create new business models ridesharing, e-commerce, food delivery marketplaces, even short-term rental home sharing, open access matterports structured spatial data enabling new opportunities business models hospitality, facilities management, insurance, construction, real estate retail, among others. believe total addressable market opportunity digitizing built world $240 billion, could high $1 trillion market matures scale. based analysis, modeling understanding global building stock 4 billion properties 20 billion spaces world today. help artificial intelligence (ai), machine learning (ml) deep learning (dl) technologies, believe that, additional monetization opportunities powerful spatial data-driven property insights analytics, total addressable market digitization datafication built world reach $1 trillion. spatial data platform capture digital twins deliver value across diverse set industries use cases. large retailers manage thousands store locations remotely, real estate agencies provide virtual open houses hundreds properties thousands visitors time, property developers monitor entirety construction process greater detail speed, insurance companies precisely document evaluate claims underwriting assessments efficiency precision. matterport delivers critical digital experience, tools information matter subscribers properties virtually size, shape, location worldwide. nearly decade, growing spatial data platform expanding capabilities order create detailed, accurate, data-rich digital twins available. moreover, 3d reconstruction process fully automated, allowing solution scale equal precision millions buildings spaces type, shape, size world. universal applicability service provides matterport significant scale reach across diverse verticals geography. december 31, 2022, subscriber base grown approximately 39% 701,000 subscribers 503,000 subscribers december 31, 2021, digital twins reaching 170 countries. digitized 28 billion square feet space across multiple industries, representing significant scale growth rest market. continue transform buildings data worldwide, extending spatial data platform transform property planning, development, management intelligence subscribers across industries become de facto building business intelligence engine built world. believe demand spatial data resulting insights enterprises, businesses institutions across industries, including real estate, architecture, engineering construction (aec), retail, insurance government, continue grow rapidly. believe digitization datafication represent tremendous greenfield opportunity growth across massive category asset class. early stages design development marketing, operations, insurance building repair maintenance, platforms software technology provide subscribers critical tools insights drive cost savings, increase revenues optimally manage buildings spaces. believe hundreds billions dollars unrealized utilization operating efficiencies built world unlocked power spatial data platform. platform data solutions universal applicability across industries building categories, giving matterport significant advantage address entirety large market opportunity increase value believe largest asset class world. demonstrated track record delivering value subscribers, offerings include software subscription, data licensing, services product hardware. december 31, 2022, subscriber base included 24% fortune 1000 companies, less 10% total revenue generated top 10 subscribers. expect 80% revenue come software subscription data license solutions 2025. innovative 3d capture products, pro2 pro3 cameras, played integral part shaping 3d building property visualization ecosystem. pro2 pro3 cameras driven adoption solutions generated unique high-quality scaled data set enabled cortex, proprietary ai software engine, become pioneering engine digital twin creation. data advantage initially spurred pro2 camera, developed capture device agnostic platform scales generate new building property insights subscribers across industries geographies. recently experienced rapid growth. subscribers grown approximately 49-fold december 31, 2018 december 31, 2022. revenue increased approximately 22% $136.1 million year ended december 31, 2022, approximately $111.2 million year ended december 31, 2021. gross profit decreased $8.1 million 14%, $51.8 million year ended december 31, 2022, $60.0 million year ended december 31, 2021, primarily attributable certain disruptive incremental costs due global supply chain constraints fiscal year 2022. ability retain grow subscription revenue generated existing subscribers important measure health business future growth prospects. track performance area measuring net dollar expansion rate set customers across comparable periods. net dollar expansion rate 103% three months ended december 31, 2022 demonstrates stickiness growth potential platform. industry market opportunity today, vast majority buildings spaces remain undigitized. estimate current serviceable addressable market includes approximately 1.3 billion spaces worldwide, primarily real estate travel hospitality sectors. approximately 9.2 million spaces management december 31, 2022, continuing penetrate global building stock expand footprint across various end markets, including residential commercial real estate, facilities management, retail, aec, insurance repair, travel hospitality. estimate total addressable market 4 billion buildings 20 billion spaces globally, yielding $240 billion market opportunity. believe matterports unique spatial data library property data services continue grow, opportunity could increase $1 trillion based size building stock untapped value creation available buildings worldwide. constraints created covid-19 pandemic reinforced accelerated importance scaled 3d capture solution developed diverse industries markets past decade. spatial data platform overview technology platform uses spatial data collected wide variety digital capture devices transform physical buildings spaces dimensionally accurate, photorealistic digital twins provide subscribers access previously unavailable building information insights. first mover massive market nearly decade, developed scaled industry-leading 3d reconstruction technology powered cortex, proprietary ai-driven software engine uses machine learning recreate photorealistic, 3d virtual representation entire building structure, including contents, equipment furnishings. finished product detailed dynamic replication physical space explored, analyzed customized web browser device, including smartphones. power manage even large-scale commercial buildings palm subscribers hands, made possible advanced technology breakthrough innovations across entire spatial data technology stack. key elements spatial data platform include: bringing offline buildings online. traditionally, customers needed conduct in-person site visits understand assess buildings spaces. photographs floor plans helpful, forms two-dimensional (2d) representation limited information tend static rigid, thus lack interactive element critical holistic understanding building space. ai-powered capabilities cortex, proprietary ai software, representation physical objects longer confined static 2d images physical visits eliminated. cortex helps move buildings spaces offline online makes accessible customers real-time demand anywhere. subscribers scan buildings, visualization algorithms accurately infer spatial positions depths flat, 2d imagery captured scans transform high- fidelity precise digital twin models. creates fully automated image processing pipeline ensure digital twin professional grade image quality. driven spatial data. data-driven company. incremental capture space grows richness depth spatial data library. spatial data represents unique idiosyncratic details underlie compose buildings spaces human- made environment. cortex uses breadth billions data points accumulated years improve 3d accuracy digital twins. help subscribers pinpoint height, location characteristics objects digital twin. sophisticated algorithms also deliver significant commercial value subscribers generating data-based insights allow confidently make assessments decisions properties. instance, property developers assess amount natural heat daylight coming specific windows, retailers ensure store layout level code brand requirements, factories insure machinery layouts meet specifications location guidelines. approximately 9.2 million spaces management december 31, 2022, spatial data library clearinghouse information built world. powered ai ml. artificial intelligence machine learning technologies effectively utilize spatial data create robust virtual experience dynamic, realistic, interactive, informative permits multiple viewing angles. ai ml also make costly cameras unnecessary everyday scanssubscribers scan spaces simply tapping button smartphones. result, matterport device agnostic platform, helping us rapidly scale drive towards mission digitizing indexing built world. value proposition subscribers designed serve entirety digital building lifecycle, design build maintenance operations, promotion, sale, lease, insure, repair, restore, secure finance. result, believe uniquely positioned grow revenue subscribers help discover opportunities drive short- long-term return investment taking buildings spaces offline online across portfolios properties. ubiquitous capture matterport become standard 3d space capture. technology platform empowers subscribers worldwide quickly, easily accurately digitize, customize manage interactive dimensionally accurate digital twins buildings spaces. matterport platform designed work wide range lidar, spherical, 3d 360 cameras, well smartphones, suit capture needs subscribers. provides flexibility capture space size, scale, complexity, anytime anywhere. matterport pro3 newest 3d camera scans properties faster earlier versions help accelerate project completion. pro3 provides highest accuracy scans indoor outdoor spaces designed speed, fidelity, versatility accuracy. capturing 3d data 100 meters away less 20 seconds per sweep, pro3s ultra-fast, high-precision lidar sensor run hours takes millions measurements conditions. matterport pro2 proprietary 3d camera used capture millions spaces around world high degree fidelity, precision, speed simplicity. capable capturing buildings 500,000 square feet size, become camera choice many residential, commercial, industrial large-scale properties. 360 cameras. matterport supports selection 360 cameras available market. affordable, pocket sized devices deliver precision captures high fidelity appropriate capturing smaller homes, condos, short-term rentals, apartments, more. spherical lens image capture technology devices gives cortex robust, detailed image data transform panoramas industry-leading digital twins. leica blk360. partnership leica, 3d reconstruction technology ai powered software engine, cortex, transform powerful lidar camera ultra-precise capture device creating matterport digital twins. solution choice aec professionals exacting precision required. smartphone capture. capture apps commercially available ios android. matterports smartphone capture solution democratized 3d capture, making easy accessible anyone digitize buildings spaces recent iphone device since initial introduction matterport iphone may 2020. april 2021, announced official release android capture app, giving android users ability quickly easily capture buildings spaces immersive 3d. february 2022, launched matterport axis, motorized mount holds smartphone used matterport capture app capture 3d digital twins physical space increased speed, precision, consistency. cortex 3d reconstruction (the matterport digital twin) spatial data library, december 31, 2022, approximately 9.2 million spaces management, representing approximately 28 billion captured square feet space, use advanced ml dl technologies algorithmically transform spatial data capture accurate 3d digital reproduction physical space. intelligent, automated 3d reconstruction made possible cortex, ai-powered software engine includes deep learning neural network uses spatial data library understand building space divided floors rooms, doorways openings located, types rooms present, forms compiled aligned dimensional accuracy dynamic, photorealistic digital twin. components cortex include ai-powered computer vision technologies identify classify contents inside building space, object recognition technologies identify segment everything furnishings equipment doors, windows, light fixtures, fire suppression sprinklers fire escapes. highly scalable artificial intelligence platform enables subscribers tap powerful, enhanced building data insights click button. science behind matterport digital twin: cortex ai highlights matterport runs cortex cortex ai-powered software engine includes precision deep learning neural network create digital twins building space. developed using proprietary spatial data captured pro2 pro3 cameras, cortex delivers high degree precision accuracy enabling 3d capture using everyday devices. generic neural networks struggle 3d reconstruction real world. matterport-optimized networks deliver accurate robust results. raw training data, matterports datasets allow us develop new neural network architectures evaluate user behavior real-world data millions situations. deep learning: connecting optimizing detailed neural network data architecture space key creating robust, highly accurate 3d digital twins. cortex evaluates optimizes 3d model matterports rich spatial data aggregated millions buildings spaces human annotations data provided tens thousands subscribers worldwide. cortexs evaluative abilities data-driven optimization 3d reconstruction yield consistent, high-precision results across wide array building configurations, spaces environments. dynamic 3d reconstruction: creating precise 3d spatial data scale 2d visuals static images requires combination photorealistic, detailed data multiple viewpoints millions spaces train optimize cortexs neural network learning capabilities improved 3d reconstruction space. cortexs capabilities combined real-time spatial alignment algorithms 3d capture technology create intuitive preview work progress, allowing subscribers work content interactively real-time. computer vision: cortex enables suite powerful features enhance value digital twins. include automatic measurements rooms objects room, automatic 2d-from-3d high-definition photo gallery creation, auto face blurring privacy protection, custom videos, walkthroughs, auto room labeling object recognition. advanced image processing: matterports computational photography algorithms create fully automated image processing pipeline help ensure digital twin professional grade image quality. patented technology makes 3d capture simple pressing single button. matterports software technology manage remaining steps, including white balance camera-specific color correction, high dynamic range tone mapping, de-noising, haze removal, sharpening, saturation adjustments improve image quality. spatial data ai-powered insights every matterport digital twin contains extensive information building, room physical space. data uses ai-powered cortex engine. addition matterport digital twin itself, spatial data consists precision building geometry structural detail, building contents, fixtures condition, along high-definition imagery photorealistic detail many vantage points space. cortex employs technique call deep spatial indexing. deep spatial indexing uses artificial intelligence, computer vision deep learning identify convey important details space, structure contents precision fidelity. created robust spatial data standard enables matterport subscribers harness interoperable digital system record building. addition creating highly interactive digital experience subscribers construction digital twins, ask two questions every subscriber: (1) important building physical space (2) learnings insights deliver space? ai-powered cortex engine helps us answer questions using spatial data library provide aggregated property trends operational valuation insights. moreover, matterport platform ecosystem continues expand, subscribers, partners third-party developers bring tools breadth depth insights harvest rich spatial data layer. extensible platform ecosystem matterport offers largest accurate library spatial data world, with, december 31, 2022, approximately 9.2 million spaces management approximately 28 billion captured square feet. versatility spatial data platform extensive enterprise software development kit application programming interfaces (apis) allowed us develop robust global ecosystem channels partners extend matterport value proposition geography vertical market. intend continue deploy broad set workflow integrations partners subscribers promote integrated matterport solution across target markets. also developing third-party software marketplace extend power spatial data platform easy-to-deploy easy-to-access matterport software add-ons. marketplace enables developers build new applications spatial data mining tools, enhance matterport 3d experience, create new productivity property management tools supplement core offerings. value-added capabilities created third-party developers enable scalable new revenue stream, matterport sharing subscription services revenue add-on deployed subscribers online marketplace. network effects platform ecosystem contributes growth business, believe continue bolster future growth enhancing subscriber stickiness user engagement. examples matterport add-ons extensions include: add-ons: encircle (easy-to-use field documentation tools faster claims processing); wp matterport shortcode (free wordpress plugin allows matterport embedded quickly easily matterport shortcode), wp3d models (wordpress + matterport integration plugin); rela (all-in-one marketing solution listings); captur3d (all-in-one content management system extends value matterport digital twins); private model emded (feature allows enterprises privately share digital twins large group employees corporate network without requiring additional user licenses); views (new workgroup collaboration framework enable groups large organizations create separate, permissions-based workflows manage different tasks different teams); guided tours tags (tool elevate visitor experience creating directed virtual tours commercial residential space tailored interests visitors). unveiled private beta integration amazon web services (aws) iot twinmaker enable enterprise customers seamlessly connect iot data visually immersive dimensionally accurate matterport digital twin. services: matterport ada compliant digital twin (solution provide american disability act compliant digital twins) enterprise cloud software platform (reimagined cloud software platform enterprise creates, publishes, manages digital twins buildings spaces size shape, indoors outdoors). competitive strengths believe number competitive strengths enable market leadership grow. competitive strengths include: breadth depth matterport platform. core strength all-in-one spatial data platform broad reach across diverse verticals geographies capture processing industries without customization. ability integrate seamlessly various enterprise systems, platform delivers value across property lifecycle diverse end markets, including real estate, aec, travel hospitality, repair insurance, industrial facilities. december 31, 2022, global reach extended subscribers 170 countries, including 24% fortune 1000 companies. market leadership first-mover advantage. matterport defined category digitizing datafying built world almost decade ago, become global leader category. december 31, 2022, 701,000 subscribers platform approximately 9.2 million spaces management. leadership primarily driven fact first mover digital twin creation. result first mover advantage, amassed deep rich library spatial data continues compound enhance leadership position. significant network effect. new capture piece data added platform, richness dataset depth insights spaces management grow. addition, combination ability turn data insights incremental data new data captures subscribers enables matterport develop features subscribers platform. first mover building spatial data library built world, leadership gathering deriving insights data continues compound relevance insights attracts new subscribers. massive spatial data library raw material valuable property insights. scale spatial data library significant advantage deriving insights subscribers. spatial data library serves vital ground truth cortex, enabling matterport create powerful 3d digital twins using wide range camera technology, including low-cost digital smartphone cameras. december 31, 2022, data came approximately 9.2 million spaces management approximately 28 billion captured square feet. result, taken property insights analytics new levels, benefiting subscribers across various industries. example, facilities managers significantly reduce time needed create building layouts, leading significant decrease cost site surveying as-built modeling. aec subscribers use analytics as-built space streamline documentation collaborate ease. global reach scale. focused continuing expand ai-powered spatial data platform worldwide. significant presence north america, europe asia, leadership teams go-to-market infrastructure regions. offices london, singapore several across united states, accelerating international expansion. december 31, 2022, 701,000 subscribers 170 countries. believe geography-agnostic nature spatial data platform significant advantage continue grow internationally. broad patent portfolio supporting 10 years r&amp;d innovation. december 31, 2022, 54 issued 37 pending patent applications. success based almost 10 years focus innovation. innovation center matterport, continue prioritize investments r&amp;d market leading position. superior capture technology. matterports capture technology platform software framework enables support wide variety capture devices required create matterport digital twin building space. includes support lidar cameras, 360 cameras, smartphones, matterport axis matterport pro2 pro3 cameras. pro2 camera foundational spatial data advantage, expanded advantage array matterport-enabled third-party capture devices. august 2022, launched began shipment pro3 camera along major updates industry-leading digital twin cloud platform. matterport pro3 camera advanced 3d capture device, includes faster boot time, swappable batteries, lighter design. pro3 camera perform indoors outdoors designed speed, fidelity, versatility accuracy. along pro2 camera, expect future sales pro3 camera continue drive increased adoption solutions. matterport democratizing 3d capture experience, making high-fidelity high-accuracy 3d digital twins readily available building type subscriber need property life cycle. 3d capture solution providers, produce true, dimensionally accurate 3d results, fewer still automatically create final product photorealistic 3d, global scale. expansive capture technology offering would possible without rich spatial data library available train ai-powered cortex engine automatically generate accurate digital twins photos captured smartphone 360 camera. &lt;/document&gt;""" # print claude's response print(get_completion(prompt)) # fix this? well, great way reduce hallucinations long documents **make claude gather evidence first.** # # case, **tell claude first extract relevant quotes, base answer quotes**. telling claude makes correctly notice quote answer question. # in[ ]: # prompt prompt = """&lt;question&gt;what matterport's subscriber base precise date may 31, 2020?&lt;/question&gt; please read document. then, &lt;scratchpad&gt; tags, pull relevant quote document consider whether answers user's question whether lacks sufficient detail. write brief numerical answer &lt;answer&gt; tags. &lt;document&gt; matterport sec filing 10-k 2023 item 1. business company matterport leading digitization datafication built world. believe digital transformation built world fundamentally change way people interact buildings physical spaces around them. since founding 2011, matterports pioneering technology set standard digitizing, accessing managing buildings, spaces places online. platforms innovative software, spatial data-driven data science, 3d capture technology broken barriers kept largest asset class world, buildings physical spaces, offline underutilized many years. believe digitization datafication built world continue unlock significant operational efficiencies property values, matterport platform lead enormous global transformation. world rapidly moving offline online. digital transformation made powerful lasting impact across every business industry today. according international data corporation, idc, $6.8 trillion direct investments made digital transformation 2020 2023, global digital transformation spending forecasted reach $3.4 trillion 2026 five-year compound annual growth rate (cagr) 16.3%, digital twin investments expected five-year cagr 35.2%. secular shift, also growing demand built world transition physical digital. nevertheless, vast majority buildings spaces remain offline undigitized. global building stock, estimated savills $327 trillion total property value 2021, remains largely offline today, estimate less 0.1% penetrated digital transformation. matterport among first recognize increasing need digitization built world power spatial data, unique details underlying buildings spaces, facilitating understanding buildings spaces. past, technology advanced physical road maps data-rich, digital maps location services rely today. matterport digitizes buildings, creating data-rich environment vastly increase understanding full potential every space capture. instantly, touch button, learn fastest route one city another locate nearest coffee shops, matterports spatial data buildings unlocks rich set insights learnings properties spaces worldwide. addition, geo-spatial mapping platforms today opened mapping data industry create new business models ridesharing, e-commerce, food delivery marketplaces, even short-term rental home sharing, open access matterports structured spatial data enabling new opportunities business models hospitality, facilities management, insurance, construction, real estate retail, among others. believe total addressable market opportunity digitizing built world $240 billion, could high $1 trillion market matures scale. based analysis, modeling understanding global building stock 4 billion properties 20 billion spaces world today. help artificial intelligence (ai), machine learning (ml) deep learning (dl) technologies, believe that, additional monetization opportunities powerful spatial data-driven property insights analytics, total addressable market digitization datafication built world reach $1 trillion. spatial data platform capture digital twins deliver value across diverse set industries use cases. large retailers manage thousands store locations remotely, real estate agencies provide virtual open houses hundreds properties thousands visitors time, property developers monitor entirety construction process greater detail speed, insurance companies precisely document evaluate claims underwriting assessments efficiency precision. matterport delivers critical digital experience, tools information matter subscribers properties virtually size, shape, location worldwide. nearly decade, growing spatial data platform expanding capabilities order create detailed, accurate, data-rich digital twins available. moreover, 3d reconstruction process fully automated, allowing solution scale equal precision millions buildings spaces type, shape, size world. universal applicability service provides matterport significant scale reach across diverse verticals geography. december 31, 2022, subscriber base grown approximately 39% 701,000 subscribers 503,000 subscribers december 31, 2021, digital twins reaching 170 countries. digitized 28 billion square feet space across multiple industries, representing significant scale growth rest market. continue transform buildings data worldwide, extending spatial data platform transform property planning, development, management intelligence subscribers across industries become de facto building business intelligence engine built world. believe demand spatial data resulting insights enterprises, businesses institutions across industries, including real estate, architecture, engineering construction (aec), retail, insurance government, continue grow rapidly. believe digitization datafication represent tremendous greenfield opportunity growth across massive category asset class. early stages design development marketing, operations, insurance building repair maintenance, platforms software technology provide subscribers critical tools insights drive cost savings, increase revenues optimally manage buildings spaces. believe hundreds billions dollars unrealized utilization operating efficiencies built world unlocked power spatial data platform. platform data solutions universal applicability across industries building categories, giving matterport significant advantage address entirety large market opportunity increase value believe largest asset class world. demonstrated track record delivering value subscribers, offerings include software subscription, data licensing, services product hardware. december 31, 2022, subscriber base included 24% fortune 1000 companies, less 10% total revenue generated top 10 subscribers. expect 80% revenue come software subscription data license solutions 2025. innovative 3d capture products, pro2 pro3 cameras, played integral part shaping 3d building property visualization ecosystem. pro2 pro3 cameras driven adoption solutions generated unique high-quality scaled data set enabled cortex, proprietary ai software engine, become pioneering engine digital twin creation. data advantage initially spurred pro2 camera, developed capture device agnostic platform scales generate new building property insights subscribers across industries geographies. recently experienced rapid growth. subscribers grown approximately 49-fold december 31, 2018 december 31, 2022. revenue increased approximately 22% $136.1 million year ended december 31, 2022, approximately $111.2 million year ended december 31, 2021. gross profit decreased $8.1 million 14%, $51.8 million year ended december 31, 2022, $60.0 million year ended december 31, 2021, primarily attributable certain disruptive incremental costs due global supply chain constraints fiscal year 2022. ability retain grow subscription revenue generated existing subscribers important measure health business future growth prospects. track performance area measuring net dollar expansion rate set customers across comparable periods. net dollar expansion rate 103% three months ended december 31, 2022 demonstrates stickiness growth potential platform. industry market opportunity today, vast majority buildings spaces remain undigitized. estimate current serviceable addressable market includes approximately 1.3 billion spaces worldwide, primarily real estate travel hospitality sectors. approximately 9.2 million spaces management december 31, 2022, continuing penetrate global building stock expand footprint across various end markets, including residential commercial real estate, facilities management, retail, aec, insurance repair, travel hospitality. estimate total addressable market 4 billion buildings 20 billion spaces globally, yielding $240 billion market opportunity. believe matterports unique spatial data library property data services continue grow, opportunity could increase $1 trillion based size building stock untapped value creation available buildings worldwide. constraints created covid-19 pandemic reinforced accelerated importance scaled 3d capture solution developed diverse industries markets past decade. spatial data platform overview technology platform uses spatial data collected wide variety digital capture devices transform physical buildings spaces dimensionally accurate, photorealistic digital twins provide subscribers access previously unavailable building information insights. first mover massive market nearly decade, developed scaled industry-leading 3d reconstruction technology powered cortex, proprietary ai-driven software engine uses machine learning recreate photorealistic, 3d virtual representation entire building structure, including contents, equipment furnishings. finished product detailed dynamic replication physical space explored, analyzed customized web browser device, including smartphones. power manage even large-scale commercial buildings palm subscribers hands, made possible advanced technology breakthrough innovations across entire spatial data technology stack. key elements spatial data platform include: bringing offline buildings online. traditionally, customers needed conduct in-person site visits understand assess buildings spaces. photographs floor plans helpful, forms two-dimensional (2d) representation limited information tend static rigid, thus lack interactive element critical holistic understanding building space. ai-powered capabilities cortex, proprietary ai software, representation physical objects longer confined static 2d images physical visits eliminated. cortex helps move buildings spaces offline online makes accessible customers real-time demand anywhere. subscribers scan buildings, visualization algorithms accurately infer spatial positions depths flat, 2d imagery captured scans transform high- fidelity precise digital twin models. creates fully automated image processing pipeline ensure digital twin professional grade image quality. driven spatial data. data-driven company. incremental capture space grows richness depth spatial data library. spatial data represents unique idiosyncratic details underlie compose buildings spaces human- made environment. cortex uses breadth billions data points accumulated years improve 3d accuracy digital twins. help subscribers pinpoint height, location characteristics objects digital twin. sophisticated algorithms also deliver significant commercial value subscribers generating data-based insights allow confidently make assessments decisions properties. instance, property developers assess amount natural heat daylight coming specific windows, retailers ensure store layout level code brand requirements, factories insure machinery layouts meet specifications location guidelines. approximately 9.2 million spaces management december 31, 2022, spatial data library clearinghouse information built world. powered ai ml. artificial intelligence machine learning technologies effectively utilize spatial data create robust virtual experience dynamic, realistic, interactive, informative permits multiple viewing angles. ai ml also make costly cameras unnecessary everyday scanssubscribers scan spaces simply tapping button smartphones. result, matterport device agnostic platform, helping us rapidly scale drive towards mission digitizing indexing built world. value proposition subscribers designed serve entirety digital building lifecycle, design build maintenance operations, promotion, sale, lease, insure, repair, restore, secure finance. result, believe uniquely positioned grow revenue subscribers help discover opportunities drive short- long-term return investment taking buildings spaces offline online across portfolios properties. ubiquitous capture matterport become standard 3d space capture. technology platform empowers subscribers worldwide quickly, easily accurately digitize, customize manage interactive dimensionally accurate digital twins buildings spaces. matterport platform designed work wide range lidar, spherical, 3d 360 cameras, well smartphones, suit capture needs subscribers. provides flexibility capture space size, scale, complexity, anytime anywhere. matterport pro3 newest 3d camera scans properties faster earlier versions help accelerate project completion. pro3 provides highest accuracy scans indoor outdoor spaces designed speed, fidelity, versatility accuracy. capturing 3d data 100 meters away less 20 seconds per sweep, pro3s ultra-fast, high-precision lidar sensor run hours takes millions measurements conditions. matterport pro2 proprietary 3d camera used capture millions spaces around world high degree fidelity, precision, speed simplicity. capable capturing buildings 500,000 square feet size, become camera choice many residential, commercial, industrial large-scale properties. 360 cameras. matterport supports selection 360 cameras available market. affordable, pocket sized devices deliver precision captures high fidelity appropriate capturing smaller homes, condos, short-term rentals, apartments, more. spherical lens image capture technology devices gives cortex robust, detailed image data transform panoramas industry-leading digital twins. leica blk360. partnership leica, 3d reconstruction technology ai powered software engine, cortex, transform powerful lidar camera ultra-precise capture device creating matterport digital twins. solution choice aec professionals exacting precision required. smartphone capture. capture apps commercially available ios android. matterports smartphone capture solution democratized 3d capture, making easy accessible anyone digitize buildings spaces recent iphone device since initial introduction matterport iphone may 2020. april 2021, announced official release android capture app, giving android users ability quickly easily capture buildings spaces immersive 3d. february 2022, launched matterport axis, motorized mount holds smartphone used matterport capture app capture 3d digital twins physical space increased speed, precision, consistency. cortex 3d reconstruction (the matterport digital twin) spatial data library, december 31, 2022, approximately 9.2 million spaces management, representing approximately 28 billion captured square feet space, use advanced ml dl technologies algorithmically transform spatial data capture accurate 3d digital reproduction physical space. intelligent, automated 3d reconstruction made possible cortex, ai-powered software engine includes deep learning neural network uses spatial data library understand building space divided floors rooms, doorways openings located, types rooms present, forms compiled aligned dimensional accuracy dynamic, photorealistic digital twin. components cortex include ai-powered computer vision technologies identify classify contents inside building space, object recognition technologies identify segment everything furnishings equipment doors, windows, light fixtures, fire suppression sprinklers fire escapes. highly scalable artificial intelligence platform enables subscribers tap powerful, enhanced building data insights click button. science behind matterport digital twin: cortex ai highlights matterport runs cortex cortex ai-powered software engine includes precision deep learning neural network create digital twins building space. developed using proprietary spatial data captured pro2 pro3 cameras, cortex delivers high degree precision accuracy enabling 3d capture using everyday devices. generic neural networks struggle 3d reconstruction real world. matterport-optimized networks deliver accurate robust results. raw training data, matterports datasets allow us develop new neural network architectures evaluate user behavior real-world data millions situations. deep learning: connecting optimizing detailed neural network data architecture space key creating robust, highly accurate 3d digital twins. cortex evaluates optimizes 3d model matterports rich spatial data aggregated millions buildings spaces human annotations data provided tens thousands subscribers worldwide. cortexs evaluative abilities data-driven optimization 3d reconstruction yield consistent, high-precision results across wide array building configurations, spaces environments. dynamic 3d reconstruction: creating precise 3d spatial data scale 2d visuals static images requires combination photorealistic, detailed data multiple viewpoints millions spaces train optimize cortexs neural network learning capabilities improved 3d reconstruction space. cortexs capabilities combined real-time spatial alignment algorithms 3d capture technology create intuitive preview work progress, allowing subscribers work content interactively real-time. computer vision: cortex enables suite powerful features enhance value digital twins. include automatic measurements rooms objects room, automatic 2d-from-3d high-definition photo gallery creation, auto face blurring privacy protection, custom videos, walkthroughs, auto room labeling object recognition. advanced image processing: matterports computational photography algorithms create fully automated image processing pipeline help ensure digital twin professional grade image quality. patented technology makes 3d capture simple pressing single button. matterports software technology manage remaining steps, including white balance camera-specific color correction, high dynamic range tone mapping, de-noising, haze removal, sharpening, saturation adjustments improve image quality. spatial data ai-powered insights every matterport digital twin contains extensive information building, room physical space. data uses ai-powered cortex engine. addition matterport digital twin itself, spatial data consists precision building geometry structural detail, building contents, fixtures condition, along high-definition imagery photorealistic detail many vantage points space. cortex employs technique call deep spatial indexing. deep spatial indexing uses artificial intelligence, computer vision deep learning identify convey important details space, structure contents precision fidelity. created robust spatial data standard enables matterport subscribers harness interoperable digital system record building. addition creating highly interactive digital experience subscribers construction digital twins, ask two questions every subscriber: (1) important building physical space (2) learnings insights deliver space? ai-powered cortex engine helps us answer questions using spatial data library provide aggregated property trends operational valuation insights. moreover, matterport platform ecosystem continues expand, subscribers, partners third-party developers bring tools breadth depth insights harvest rich spatial data layer. extensible platform ecosystem matterport offers largest accurate library spatial data world, with, december 31, 2022, approximately 9.2 million spaces management approximately 28 billion captured square feet. versatility spatial data platform extensive enterprise software development kit application programming interfaces (apis) allowed us develop robust global ecosystem channels partners extend matterport value proposition geography vertical market. intend continue deploy broad set workflow integrations partners subscribers promote integrated matterport solution across target markets. also developing third-party software marketplace extend power spatial data platform easy-to-deploy easy-to-access matterport software add-ons. marketplace enables developers build new applications spatial data mining tools, enhance matterport 3d experience, create new productivity property management tools supplement core offerings. value-added capabilities created third-party developers enable scalable new revenue stream, matterport sharing subscription services revenue add-on deployed subscribers online marketplace. network effects platform ecosystem contributes growth business, believe continue bolster future growth enhancing subscriber stickiness user engagement. examples matterport add-ons extensions include: add-ons: encircle (easy-to-use field documentation tools faster claims processing); wp matterport shortcode (free wordpress plugin allows matterport embedded quickly easily matterport shortcode), wp3d models (wordpress + matterport integration plugin); rela (all-in-one marketing solution listings); captur3d (all-in-one content management system extends value matterport digital twins); private model emded (feature allows enterprises privately share digital twins large group employees corporate network without requiring additional user licenses); views (new workgroup collaboration framework enable groups large organizations create separate, permissions-based workflows manage different tasks different teams); guided tours tags (tool elevate visitor experience creating directed virtual tours commercial residential space tailored interests visitors). unveiled private beta integration amazon web services (aws) iot twinmaker enable enterprise customers seamlessly connect iot data visually immersive dimensionally accurate matterport digital twin. services: matterport ada compliant digital twin (solution provide american disability act compliant digital twins) enterprise cloud software platform (reimagined cloud software platform enterprise creates, publishes, manages digital twins buildings spaces size shape, indoors outdoors). competitive strengths believe number competitive strengths enable market leadership grow. competitive strengths include: breadth depth matterport platform. core strength all-in-one spatial data platform broad reach across diverse verticals geographies capture processing industries without customization. ability integrate seamlessly various enterprise systems, platform delivers value across property lifecycle diverse end markets, including real estate, aec, travel hospitality, repair insurance, industrial facilities. december 31, 2022, global reach extended subscribers 170 countries, including 24% fortune 1000 companies. market leadership first-mover advantage. matterport defined category digitizing datafying built world almost decade ago, become global leader category. december 31, 2022, 701,000 subscribers platform approximately 9.2 million spaces management. leadership primarily driven fact first mover digital twin creation. result first mover advantage, amassed deep rich library spatial data continues compound enhance leadership position. significant network effect. new capture piece data added platform, richness dataset depth insights spaces management grow. addition, combination ability turn data insights incremental data new data captures subscribers enables matterport develop features subscribers platform. first mover building spatial data library built world, leadership gathering deriving insights data continues compound relevance insights attracts new subscribers. massive spatial data library raw material valuable property insights. scale spatial data library significant advantage deriving insights subscribers. spatial data library serves vital ground truth cortex, enabling matterport create powerful 3d digital twins using wide range camera technology, including low-cost digital smartphone cameras. december 31, 2022, data came approximately 9.2 million spaces management approximately 28 billion captured square feet. result, taken property insights analytics new levels, benefiting subscribers across various industries. example, facilities managers significantly reduce time needed create building layouts, leading significant decrease cost site surveying as-built modeling. aec subscribers use analytics as-built space streamline documentation collaborate ease. global reach scale. focused continuing expand ai-powered spatial data platform worldwide. significant presence north america, europe asia, leadership teams go-to-market infrastructure regions. offices london, singapore several across united states, accelerating international expansion. december 31, 2022, 701,000 subscribers 170 countries. believe geography-agnostic nature spatial data platform significant advantage continue grow internationally. broad patent portfolio supporting 10 years r&amp;d innovation. december 31, 2022, 54 issued 37 pending patent applications. success based almost 10 years focus innovation. innovation center matterport, continue prioritize investments r&amp;d market leading position. superior capture technology. matterports capture technology platform software framework enables support wide variety capture devices required create matterport digital twin building space. includes support lidar cameras, 360 cameras, smartphones, matterport axis matterport pro2 pro3 cameras. pro2 camera foundational spatial data advantage, expanded advantage array matterport-enabled third-party capture devices. august 2022, launched began shipment pro3 camera along major updates industry-leading digital twin cloud platform. matterport pro3 camera advanced 3d capture device, includes faster boot time, swappable batteries, lighter design. pro3 camera perform indoors outdoors designed speed, fidelity, versatility accuracy. along pro2 camera, expect future sales pro3 camera continue drive increased adoption solutions. matterport democratizing 3d capture experience, making high-fidelity high-accuracy 3d digital twins readily available building type subscriber need property life cycle. 3d capture solution providers, produce true, dimensionally accurate 3d results, fewer still automatically create final product photorealistic 3d, global scale. expansive capture technology offering would possible without rich spatial data library available train ai-powered cortex engine automatically generate accurate digital twins photos captured smartphone 360 camera. &lt;/document&gt;""" # print claude's response print(get_completion(prompt)) # #### bonus lesson # # sometimes, claude's hallucinations solved lowering `temperature` claude's responses. temperature measurement answer creativity 0 1, 1 unpredictable less standardized, 0 consistent. # # asking claude something temperature 0 generally yield almost-deterministic answer set across repeated trials (although complete determinism guaranteed). asking claude something temperature 1 (or gradations between) yield variable answers. learn temperature parameters [here](https://docs.anthropic.com/claude/reference/messages_post). # # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 8.1 - beyonc hallucination](#exercise-81---beyonc-hallucination) # - [exercise 8.2 - prospectus hallucination](#exercise-82---prospectus-hallucination) # ### exercise 8.1 - beyonc hallucination # modify `prompt` fix claude's hallucination issue giving claude out. (renaissance beyonc's seventh studio album, eigthth.) # # suggest run cell first see claude hallucinates trying fix it. # in[ ]: # prompt prompt = "in year star performer beyonc release eighth studio album?" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): contains = bool( re.search("unfortunately", text) re.search("i not", text) re.search("i don't", text) ) does_not_contain = bool(re.search("2022", text)) return contains does_not_contain # print claude's response corresponding grade print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_8_1_hint; print(exercise_8_1_hint) # ### exercise 8.1 - prospectus hallucination # modify `prompt` fix claude's hallucination issue asking citations. correct answer subscribers went 49x. # in[ ]: # prompt prompt = """from december 2018 december 2022, amount matterport's subscribers grow? &lt;document&gt; matterport sec filing 10-k 2023 item 1. business company matterport leading digitization datafication built world. believe digital transformation built world fundamentally change way people interact buildings physical spaces around them. since founding 2011, matterports pioneering technology set standard digitizing, accessing managing buildings, spaces places online. platforms innovative software, spatial data-driven data science, 3d capture technology broken barriers kept largest asset class world, buildings physical spaces, offline underutilized many years. believe digitization datafication built world continue unlock significant operational efficiencies property values, matterport platform lead enormous global transformation. world rapidly moving offline online. digital transformation made powerful lasting impact across every business industry today. according international data corporation, idc, $6.8 trillion direct investments made digital transformation 2020 2023, global digital transformation spending forecasted reach $3.4 trillion 2026 five-year compound annual growth rate (cagr) 16.3%, digital twin investments expected five-year cagr 35.2%. secular shift, also growing demand built world transition physical digital. nevertheless, vast majority buildings spaces remain offline undigitized. global building stock, estimated savills $327 trillion total property value 2021, remains largely offline today, estimate less 0.1% penetrated digital transformation. matterport among first recognize increasing need digitization built world power spatial data, unique details underlying buildings spaces, facilitating understanding buildings spaces. past, technology advanced physical road maps data-rich, digital maps location services rely today. matterport digitizes buildings, creating data-rich environment vastly increase understanding full potential every space capture. instantly, touch button, learn fastest route one city another locate nearest coffee shops, matterports spatial data buildings unlocks rich set insights learnings properties spaces worldwide. addition, geo-spatial mapping platforms today opened mapping data industry create new business models ridesharing, e-commerce, food delivery marketplaces, even short-term rental home sharing, open access matterports structured spatial data enabling new opportunities business models hospitality, facilities management, insurance, construction, real estate retail, among others. believe total addressable market opportunity digitizing built world $240 billion, could high $1 trillion market matures scale. based analysis, modeling understanding global building stock 4 billion properties 20 billion spaces world today. help artificial intelligence (ai), machine learning (ml) deep learning (dl) technologies, believe that, additional monetization opportunities powerful spatial data-driven property insights analytics, total addressable market digitization datafication built world reach $1 trillion. spatial data platform capture digital twins deliver value across diverse set industries use cases. large retailers manage thousands store locations remotely, real estate agencies provide virtual open houses hundreds properties thousands visitors time, property developers monitor entirety construction process greater detail speed, insurance companies precisely document evaluate claims underwriting assessments efficiency precision. matterport delivers critical digital experience, tools information matter subscribers properties virtually size, shape, location worldwide. nearly decade, growing spatial data platform expanding capabilities order create detailed, accurate, data-rich digital twins available. moreover, 3d reconstruction process fully automated, allowing solution scale equal precision millions buildings spaces type, shape, size world. universal applicability service provides matterport significant scale reach across diverse verticals geography. december 31, 2022, subscriber base grown approximately 39% 701,000 subscribers 503,000 subscribers december 31, 2021, digital twins reaching 170 countries. digitized 28 billion square feet space across multiple industries, representing significant scale growth rest market. continue transform buildings data worldwide, extending spatial data platform transform property planning, development, management intelligence subscribers across industries become de facto building business intelligence engine built world. believe demand spatial data resulting insights enterprises, businesses institutions across industries, including real estate, architecture, engineering construction (aec), retail, insurance government, continue grow rapidly. believe digitization datafication represent tremendous greenfield opportunity growth across massive category asset class. early stages design development marketing, operations, insurance building repair maintenance, platforms software technology provide subscribers critical tools insights drive cost savings, increase revenues optimally manage buildings spaces. believe hundreds billions dollars unrealized utilization operating efficiencies built world unlocked power spatial data platform. platform data solutions universal applicability across industries building categories, giving matterport significant advantage address entirety large market opportunity increase value believe largest asset class world. demonstrated track record delivering value subscribers, offerings include software subscription, data licensing, services product hardware. december 31, 2022, subscriber base included 24% fortune 1000 companies, less 10% total revenue generated top 10 subscribers. expect 80% revenue come software subscription data license solutions 2025. innovative 3d capture products, pro2 pro3 cameras, played integral part shaping 3d building property visualization ecosystem. pro2 pro3 cameras driven adoption solutions generated unique high-quality scaled data set enabled cortex, proprietary ai software engine, become pioneering engine digital twin creation. data advantage initially spurred pro2 camera, developed capture device agnostic platform scales generate new building property insights subscribers across industries geographies. recently experienced rapid growth. subscribers grown approximately 49-fold december 31, 2018 december 31, 2022. revenue increased approximately 22% $136.1 million year ended december 31, 2022, approximately $111.2 million year ended december 31, 2021. gross profit decreased $8.1 million 14%, $51.8 million year ended december 31, 2022, $60.0 million year ended december 31, 2021, primarily attributable certain disruptive incremental costs due global supply chain constraints fiscal year 2022. ability retain grow subscription revenue generated existing subscribers important measure health business future growth prospects. track performance area measuring net dollar expansion rate set customers across comparable periods. net dollar expansion rate 103% three months ended december 31, 2022 demonstrates stickiness growth potential platform. industry market opportunity today, vast majority buildings spaces remain undigitized. estimate current serviceable addressable market includes approximately 1.3 billion spaces worldwide, primarily real estate travel hospitality sectors. approximately 9.2 million spaces management december 31, 2022, continuing penetrate global building stock expand footprint across various end markets, including residential commercial real estate, facilities management, retail, aec, insurance repair, travel hospitality. estimate total addressable market 4 billion buildings 20 billion spaces globally, yielding $240 billion market opportunity. believe matterports unique spatial data library property data services continue grow, opportunity could increase $1 trillion based size building stock untapped value creation available buildings worldwide. constraints created covid-19 pandemic reinforced accelerated importance scaled 3d capture solution developed diverse industries markets past decade. spatial data platform overview technology platform uses spatial data collected wide variety digital capture devices transform physical buildings spaces dimensionally accurate, photorealistic digital twins provide subscribers access previously unavailable building information insights. first mover massive market nearly decade, developed scaled industry-leading 3d reconstruction technology powered cortex, proprietary ai-driven software engine uses machine learning recreate photorealistic, 3d virtual representation entire building structure, including contents, equipment furnishings. finished product detailed dynamic replication physical space explored, analyzed customized web browser device, including smartphones. power manage even large-scale commercial buildings palm subscribers hands, made possible advanced technology breakthrough innovations across entire spatial data technology stack. key elements spatial data platform include: bringing offline buildings online. traditionally, customers needed conduct in-person site visits understand assess buildings spaces. photographs floor plans helpful, forms two-dimensional (2d) representation limited information tend static rigid, thus lack interactive element critical holistic understanding building space. ai-powered capabilities cortex, proprietary ai software, representation physical objects longer confined static 2d images physical visits eliminated. cortex helps move buildings spaces offline online makes accessible customers real-time demand anywhere. subscribers scan buildings, visualization algorithms accurately infer spatial positions depths flat, 2d imagery captured scans transform high- fidelity precise digital twin models. creates fully automated image processing pipeline ensure digital twin professional grade image quality. driven spatial data. data-driven company. incremental capture space grows richness depth spatial data library. spatial data represents unique idiosyncratic details underlie compose buildings spaces human- made environment. cortex uses breadth billions data points accumulated years improve 3d accuracy digital twins. help subscribers pinpoint height, location characteristics objects digital twin. sophisticated algorithms also deliver significant commercial value subscribers generating data-based insights allow confidently make assessments decisions properties. instance, property developers assess amount natural heat daylight coming specific windows, retailers ensure store layout level code brand requirements, factories insure machinery layouts meet specifications location guidelines. approximately 9.2 million spaces management december 31, 2022, spatial data library clearinghouse information built world. powered ai ml. artificial intelligence machine learning technologies effectively utilize spatial data create robust virtual experience dynamic, realistic, interactive, informative permits multiple viewing angles. ai ml also make costly cameras unnecessary everyday scanssubscribers scan spaces simply tapping button smartphones. result, matterport device agnostic platform, helping us rapidly scale drive towards mission digitizing indexing built world. value proposition subscribers designed serve entirety digital building lifecycle, design build maintenance operations, promotion, sale, lease, insure, repair, restore, secure finance. result, believe uniquely positioned grow revenue subscribers help discover opportunities drive short- long-term return investment taking buildings spaces offline online across portfolios properties. ubiquitous capture matterport become standard 3d space capture. technology platform empowers subscribers worldwide quickly, easily accurately digitize, customize manage interactive dimensionally accurate digital twins buildings spaces. matterport platform designed work wide range lidar, spherical, 3d 360 cameras, well smartphones, suit capture needs subscribers. provides flexibility capture space size, scale, complexity, anytime anywhere. matterport pro3 newest 3d camera scans properties faster earlier versions help accelerate project completion. pro3 provides highest accuracy scans indoor outdoor spaces designed speed, fidelity, versatility accuracy. capturing 3d data 100 meters away less 20 seconds per sweep, pro3s ultra-fast, high-precision lidar sensor run hours takes millions measurements conditions. matterport pro2 proprietary 3d camera used capture millions spaces around world high degree fidelity, precision, speed simplicity. capable capturing buildings 500,000 square feet size, become camera choice many residential, commercial, industrial large-scale properties. 360 cameras. matterport supports selection 360 cameras available market. affordable, pocket sized devices deliver precision captures high fidelity appropriate capturing smaller homes, condos, short-term rentals, apartments, more. spherical lens image capture technology devices gives cortex robust, detailed image data transform panoramas industry-leading digital twins. leica blk360. partnership leica, 3d reconstruction technology ai powered software engine, cortex, transform powerful lidar camera ultra-precise capture device creating matterport digital twins. solution choice aec professionals exacting precision required. smartphone capture. capture apps commercially available ios android. matterports smartphone capture solution democratized 3d capture, making easy accessible anyone digitize buildings spaces recent iphone device since initial introduction matterport iphone may 2020. april 2021, announced official release android capture app, giving android users ability quickly easily capture buildings spaces immersive 3d. february 2022, launched matterport axis, motorized mount holds smartphone used matterport capture app capture 3d digital twins physical space increased speed, precision, consistency. cortex 3d reconstruction (the matterport digital twin) spatial data library, december 31, 2022, approximately 9.2 million spaces management, representing approximately 28 billion captured square feet space, use advanced ml dl technologies algorithmically transform spatial data capture accurate 3d digital reproduction physical space. intelligent, automated 3d reconstruction made possible cortex, ai-powered software engine includes deep learning neural network uses spatial data library understand building space divided floors rooms, doorways openings located, types rooms present, forms compiled aligned dimensional accuracy dynamic, photorealistic digital twin. components cortex include ai-powered computer vision technologies identify classify contents inside building space, object recognition technologies identify segment everything furnishings equipment doors, windows, light fixtures, fire suppression sprinklers fire escapes. highly scalable artificial intelligence platform enables subscribers tap powerful, enhanced building data insights click button. science behind matterport digital twin: cortex ai highlights matterport runs cortex cortex ai-powered software engine includes precision deep learning neural network create digital twins building space. developed using proprietary spatial data captured pro2 pro3 cameras, cortex delivers high degree precision accuracy enabling 3d capture using everyday devices. generic neural networks struggle 3d reconstruction real world. matterport-optimized networks deliver accurate robust results. raw training data, matterports datasets allow us develop new neural network architectures evaluate user behavior real-world data millions situations. deep learning: connecting optimizing detailed neural network data architecture space key creating robust, highly accurate 3d digital twins. cortex evaluates optimizes 3d model matterports rich spatial data aggregated millions buildings spaces human annotations data provided tens thousands subscribers worldwide. cortexs evaluative abilities data-driven optimization 3d reconstruction yield consistent, high-precision results across wide array building configurations, spaces environments. dynamic 3d reconstruction: creating precise 3d spatial data scale 2d visuals static images requires combination photorealistic, detailed data multiple viewpoints millions spaces train optimize cortexs neural network learning capabilities improved 3d reconstruction space. cortexs capabilities combined real-time spatial alignment algorithms 3d capture technology create intuitive preview work progress, allowing subscribers work content interactively real-time. computer vision: cortex enables suite powerful features enhance value digital twins. include automatic measurements rooms objects room, automatic 2d-from-3d high-definition photo gallery creation, auto face blurring privacy protection, custom videos, walkthroughs, auto room labeling object recognition. advanced image processing: matterports computational photography algorithms create fully automated image processing pipeline help ensure digital twin professional grade image quality. patented technology makes 3d capture simple pressing single button. matterports software technology manage remaining steps, including white balance camera-specific color correction, high dynamic range tone mapping, de-noising, haze removal, sharpening, saturation adjustments improve image quality. spatial data ai-powered insights every matterport digital twin contains extensive information building, room physical space. data uses ai-powered cortex engine. addition matterport digital twin itself, spatial data consists precision building geometry structural detail, building contents, fixtures condition, along high-definition imagery photorealistic detail many vantage points space. cortex employs technique call deep spatial indexing. deep spatial indexing uses artificial intelligence, computer vision deep learning identify convey important details space, structure contents precision fidelity. created robust spatial data standard enables matterport subscribers harness interoperable digital system record building. addition creating highly interactive digital experience subscribers construction digital twins, ask two questions every subscriber: (1) important building physical space (2) learnings insights deliver space? ai-powered cortex engine helps us answer questions using spatial data library provide aggregated property trends operational valuation insights. moreover, matterport platform ecosystem continues expand, subscribers, partners third-party developers bring tools breadth depth insights harvest rich spatial data layer. extensible platform ecosystem matterport offers largest accurate library spatial data world, with, december 31, 2022, approximately 9.2 million spaces management approximately 28 billion captured square feet. versatility spatial data platform extensive enterprise software development kit application programming interfaces (apis) allowed us develop robust global ecosystem channels partners extend matterport value proposition geography vertical market. intend continue deploy broad set workflow integrations partners subscribers promote integrated matterport solution across target markets. also developing third-party software marketplace extend power spatial data platform easy-to-deploy easy-to-access matterport software add-ons. marketplace enables developers build new applications spatial data mining tools, enhance matterport 3d experience, create new productivity property management tools supplement core offerings. value-added capabilities created third-party developers enable scalable new revenue stream, matterport sharing subscription services revenue add-on deployed subscribers online marketplace. network effects platform ecosystem contributes growth business, believe continue bolster future growth enhancing subscriber stickiness user engagement. examples matterport add-ons extensions include: add-ons: encircle (easy-to-use field documentation tools faster claims processing); wp matterport shortcode (free wordpress plugin allows matterport embedded quickly easily matterport shortcode), wp3d models (wordpress + matterport integration plugin); rela (all-in-one marketing solution listings); captur3d (all-in-one content management system extends value matterport digital twins); private model emded (feature allows enterprises privately share digital twins large group employees corporate network without requiring additional user licenses); views (new workgroup collaboration framework enable groups large organizations create separate, permissions-based workflows manage different tasks different teams); guided tours tags (tool elevate visitor experience creating directed virtual tours commercial residential space tailored interests visitors). unveiled private beta integration amazon web services (aws) iot twinmaker enable enterprise customers seamlessly connect iot data visually immersive dimensionally accurate matterport digital twin. services: matterport ada compliant digital twin (solution provide american disability act compliant digital twins) enterprise cloud software platform (reimagined cloud software platform enterprise creates, publishes, manages digital twins buildings spaces size shape, indoors outdoors). competitive strengths believe number competitive strengths enable market leadership grow. competitive strengths include: breadth depth matterport platform. core strength all-in-one spatial data platform broad reach across diverse verticals geographies capture processing industries without customization. ability integrate seamlessly various enterprise systems, platform delivers value across property lifecycle diverse end markets, including real estate, aec, travel hospitality, repair insurance, industrial facilities. december 31, 2022, global reach extended subscribers 170 countries, including 24% fortune 1000 companies. market leadership first-mover advantage. matterport defined category digitizing datafying built world almost decade ago, become global leader category. december 31, 2022, 701,000 subscribers platform approximately 9.2 million spaces management. leadership primarily driven fact first mover digital twin creation. result first mover advantage, amassed deep rich library spatial data continues compound enhance leadership position. significant network effect. new capture piece data added platform, richness dataset depth insights spaces management grow. addition, combination ability turn data insights incremental data new data captures subscribers enables matterport develop features subscribers platform. first mover building spatial data library built world, leadership gathering deriving insights data continues compound relevance insights attracts new subscribers. massive spatial data library raw material valuable property insights. scale spatial data library significant advantage deriving insights subscribers. spatial data library serves vital ground truth cortex, enabling matterport create powerful 3d digital twins using wide range camera technology, including low-cost digital smartphone cameras. december 31, 2022, data came approximately 9.2 million spaces management approximately 28 billion captured square feet. result, taken property insights analytics new levels, benefiting subscribers across various industries. example, facilities managers significantly reduce time needed create building layouts, leading significant decrease cost site surveying as-built modeling. aec subscribers use analytics as-built space streamline documentation collaborate ease. global reach scale. focused continuing expand ai-powered spatial data platform worldwide. significant presence north america, europe asia, leadership teams go-to-market infrastructure regions. offices london, singapore several across united states, accelerating international expansion. december 31, 2022, 701,000 subscribers 170 countries. believe geography-agnostic nature spatial data platform significant advantage continue grow internationally. broad patent portfolio supporting 10 years r&amp;d innovation. december 31, 2022, 54 issued 37 pending patent applications. success based almost 10 years focus innovation. innovation center matterport, continue prioritize investments r&amp;d market leading position. superior capture technology. matterports capture technology platform software framework enables support wide variety capture devices required create matterport digital twin building space. includes support lidar cameras, 360 cameras, smartphones, matterport axis matterport pro2 pro3 cameras. pro2 camera foundational spatial data advantage, expanded advantage array matterport-enabled third-party capture devices. august 2022, launched began shipment pro3 camera along major updates industry-leading digital twin cloud platform. matterport pro3 camera advanced 3d capture device, includes faster boot time, swappable batteries, lighter design. pro3 camera perform indoors outdoors designed speed, fidelity, versatility accuracy. along pro2 camera, expect future sales pro3 camera continue drive increased adoption solutions. matterport democratizing 3d capture experience, making high-fidelity high-accuracy 3d digital twins readily available building type subscriber need property life cycle. 3d capture solution providers, produce true, dimensionally accurate 3d results, fewer still automatically create final product photorealistic 3d, global scale. expansive capture technology offering would possible without rich spatial data library available train ai-powered cortex engine automatically generate accurate digital twins photos captured smartphone 360 camera. &lt;/document&gt;""" # get claude's response response = get_completion(prompt) # function grade exercise correctness def grade_exercise(text): return bool(re.search("49-fold", text)) # print claude's response corresponding grade print(response) print("\n------------------------------------------ grading ------------------------------------------") print("this exercise correctly solved:", grade_exercise(response)) # want hint, run cell below! # in[ ]: hints import exercise_8_2_hint; print(exercise_8_2_hint) # ### congrats! # # solved exercises point, ready move next chapter. happy prompting! # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # prompt prompt = "who heaviest hippo time?" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = "who heaviest hippo time? answer know answer certainty." # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = """&lt;question&gt;what matterport's subscriber base precise date may 31, 2020?&lt;/question&gt; please read document. write brief numerical answer inside &lt;answer&gt; tags. &lt;document&gt; matterport sec filing 10-k 2023 item 1. business company matterport leading digitization datafication built world. believe digital transformation built world fundamentally change way people interact buildings physical spaces around them. since founding 2011, matterports pioneering technology set standard digitizing, accessing managing buildings, spaces places online. platforms innovative software, spatial data-driven data science, 3d capture technology broken barriers kept largest asset class world, buildings physical spaces, offline underutilized many years. believe digitization datafication built world continue unlock significant operational efficiencies property values, matterport platform lead enormous global transformation. world rapidly moving offline online. digital transformation made powerful lasting impact across every business industry today. according international data corporation, idc, $6.8 trillion direct investments made digital transformation 2020 2023, global digital transformation spending forecasted reach $3.4 trillion 2026 five-year compound annual growth rate (cagr) 16.3%, digital twin investments expected five-year cagr 35.2%. secular shift, also growing demand built world transition physical digital. nevertheless, vast majority buildings spaces remain offline undigitized. global building stock, estimated savills $327 trillion total property value 2021, remains largely offline today, estimate less 0.1% penetrated digital transformation. matterport among first recognize increasing need digitization built world power spatial data, unique details underlying buildings spaces, facilitating understanding buildings spaces. past, technology advanced physical road maps data-rich, digital maps location services rely today. matterport digitizes buildings, creating data-rich environment vastly increase understanding full potential every space capture. instantly, touch button, learn fastest route one city another locate nearest coffee shops, matterports spatial data buildings unlocks rich set insights learnings properties spaces worldwide. addition, geo-spatial mapping platforms today opened mapping data industry create new business models ridesharing, e-commerce, food delivery marketplaces, even short-term rental home sharing, open access matterports structured spatial data enabling new opportunities business models hospitality, facilities management, insurance, construction, real estate retail, among others. believe total addressable market opportunity digitizing built world $240 billion, could high $1 trillion market matures scale. based analysis, modeling understanding global building stock 4 billion properties 20 billion spaces world today. help artificial intelligence (ai), machine learning (ml) deep learning (dl) technologies, believe that, additional monetization opportunities powerful spatial data-driven property insights analytics, total addressable market digitization datafication built world reach $1 trillion. spatial data platform capture digital twins deliver value across diverse set industries use cases. large retailers manage thousands store locations remotely, real estate agencies provide virtual open houses hundreds properties thousands visitors time, property developers monitor entirety construction process greater detail speed, insurance companies precisely document evaluate claims underwriting assessments efficiency precision. matterport delivers critical digital experience, tools information matter subscribers properties virtually size, shape, location worldwide. nearly decade, growing spatial data platform expanding capabilities order create detailed, accurate, data-rich digital twins available. moreover, 3d reconstruction process fully automated, allowing solution scale equal precision millions buildings spaces type, shape, size world. universal applicability service provides matterport significant scale reach across diverse verticals geography. december 31, 2022, subscriber base grown approximately 39% 701,000 subscribers 503,000 subscribers december 31, 2021, digital twins reaching 170 countries. digitized 28 billion square feet space across multiple industries, representing significant scale growth rest market. continue transform buildings data worldwide, extending spatial data platform transform property planning, development, management intelligence subscribers across industries become de facto building business intelligence engine built world. believe demand spatial data resulting insights enterprises, businesses institutions across industries, including real estate, architecture, engineering construction (aec), retail, insurance government, continue grow rapidly. believe digitization datafication represent tremendous greenfield opportunity growth across massive category asset class. early stages design development marketing, operations, insurance building repair maintenance, platforms software technology provide subscribers critical tools insights drive cost savings, increase revenues optimally manage buildings spaces. believe hundreds billions dollars unrealized utilization operating efficiencies built world unlocked power spatial data platform. platform data solutions universal applicability across industries building categories, giving matterport significant advantage address entirety large market opportunity increase value believe largest asset class world. demonstrated track record delivering value subscribers, offerings include software subscription, data licensing, services product hardware. december 31, 2022, subscriber base included 24% fortune 1000 companies, less 10% total revenue generated top 10 subscribers. expect 80% revenue come software subscription data license solutions 2025. innovative 3d capture products, pro2 pro3 cameras, played integral part shaping 3d building property visualization ecosystem. pro2 pro3 cameras driven adoption solutions generated unique high-quality scaled data set enabled cortex, proprietary ai software engine, become pioneering engine digital twin creation. data advantage initially spurred pro2 camera, developed capture device agnostic platform scales generate new building property insights subscribers across industries geographies. recently experienced rapid growth. subscribers grown approximately 49-fold december 31, 2018 december 31, 2022. revenue increased approximately 22% $136.1 million year ended december 31, 2022, approximately $111.2 million year ended december 31, 2021. gross profit decreased $8.1 million 14%, $51.8 million year ended december 31, 2022, $60.0 million year ended december 31, 2021, primarily attributable certain disruptive incremental costs due global supply chain constraints fiscal year 2022. ability retain grow subscription revenue generated existing subscribers important measure health business future growth prospects. track performance area measuring net dollar expansion rate set customers across comparable periods. net dollar expansion rate 103% three months ended december 31, 2022 demonstrates stickiness growth potential platform. industry market opportunity today, vast majority buildings spaces remain undigitized. estimate current serviceable addressable market includes approximately 1.3 billion spaces worldwide, primarily real estate travel hospitality sectors. approximately 9.2 million spaces management december 31, 2022, continuing penetrate global building stock expand footprint across various end markets, including residential commercial real estate, facilities management, retail, aec, insurance repair, travel hospitality. estimate total addressable market 4 billion buildings 20 billion spaces globally, yielding $240 billion market opportunity. believe matterports unique spatial data library property data services continue grow, opportunity could increase $1 trillion based size building stock untapped value creation available buildings worldwide. constraints created covid-19 pandemic reinforced accelerated importance scaled 3d capture solution developed diverse industries markets past decade. spatial data platform overview technology platform uses spatial data collected wide variety digital capture devices transform physical buildings spaces dimensionally accurate, photorealistic digital twins provide subscribers access previously unavailable building information insights. first mover massive market nearly decade, developed scaled industry-leading 3d reconstruction technology powered cortex, proprietary ai-driven software engine uses machine learning recreate photorealistic, 3d virtual representation entire building structure, including contents, equipment furnishings. finished product detailed dynamic replication physical space explored, analyzed customized web browser device, including smartphones. power manage even large-scale commercial buildings palm subscribers hands, made possible advanced technology breakthrough innovations across entire spatial data technology stack. key elements spatial data platform include: bringing offline buildings online. traditionally, customers needed conduct in-person site visits understand assess buildings spaces. photographs floor plans helpful, forms two-dimensional (2d) representation limited information tend static rigid, thus lack interactive element critical holistic understanding building space. ai-powered capabilities cortex, proprietary ai software, representation physical objects longer confined static 2d images physical visits eliminated. cortex helps move buildings spaces offline online makes accessible customers real-time demand anywhere. subscribers scan buildings, visualization algorithms accurately infer spatial positions depths flat, 2d imagery captured scans transform high- fidelity precise digital twin models. creates fully automated image processing pipeline ensure digital twin professional grade image quality. driven spatial data. data-driven company. incremental capture space grows richness depth spatial data library. spatial data represents unique idiosyncratic details underlie compose buildings spaces human- made environment. cortex uses breadth billions data points accumulated years improve 3d accuracy digital twins. help subscribers pinpoint height, location characteristics objects digital twin. sophisticated algorithms also deliver significant commercial value subscribers generating data-based insights allow confidently make assessments decisions properties. instance, property developers assess amount natural heat daylight coming specific windows, retailers ensure store layout level code brand requirements, factories insure machinery layouts meet specifications location guidelines. approximately 9.2 million spaces management december 31, 2022, spatial data library clearinghouse information built world. powered ai ml. artificial intelligence machine learning technologies effectively utilize spatial data create robust virtual experience dynamic, realistic, interactive, informative permits multiple viewing angles. ai ml also make costly cameras unnecessary everyday scanssubscribers scan spaces simply tapping button smartphones. result, matterport device agnostic platform, helping us rapidly scale drive towards mission digitizing indexing built world. value proposition subscribers designed serve entirety digital building lifecycle, design build maintenance operations, promotion, sale, lease, insure, repair, restore, secure finance. result, believe uniquely positioned grow revenue subscribers help discover opportunities drive short- long-term return investment taking buildings spaces offline online across portfolios properties. ubiquitous capture matterport become standard 3d space capture. technology platform empowers subscribers worldwide quickly, easily accurately digitize, customize manage interactive dimensionally accurate digital twins buildings spaces. matterport platform designed work wide range lidar, spherical, 3d 360 cameras, well smartphones, suit capture needs subscribers. provides flexibility capture space size, scale, complexity, anytime anywhere. matterport pro3 newest 3d camera scans properties faster earlier versions help accelerate project completion. pro3 provides highest accuracy scans indoor outdoor spaces designed speed, fidelity, versatility accuracy. capturing 3d data 100 meters away less 20 seconds per sweep, pro3s ultra-fast, high-precision lidar sensor run hours takes millions measurements conditions. matterport pro2 proprietary 3d camera used capture millions spaces around world high degree fidelity, precision, speed simplicity. capable capturing buildings 500,000 square feet size, become camera choice many residential, commercial, industrial large-scale properties. 360 cameras. matterport supports selection 360 cameras available market. affordable, pocket sized devices deliver precision captures high fidelity appropriate capturing smaller homes, condos, short-term rentals, apartments, more. spherical lens image capture technology devices gives cortex robust, detailed image data transform panoramas industry-leading digital twins. leica blk360. partnership leica, 3d reconstruction technology ai powered software engine, cortex, transform powerful lidar camera ultra-precise capture device creating matterport digital twins. solution choice aec professionals exacting precision required. smartphone capture. capture apps commercially available ios android. matterports smartphone capture solution democratized 3d capture, making easy accessible anyone digitize buildings spaces recent iphone device since initial introduction matterport iphone may 2020. april 2021, announced official release android capture app, giving android users ability quickly easily capture buildings spaces immersive 3d. february 2022, launched matterport axis, motorized mount holds smartphone used matterport capture app capture 3d digital twins physical space increased speed, precision, consistency. cortex 3d reconstruction (the matterport digital twin) spatial data library, december 31, 2022, approximately 9.2 million spaces management, representing approximately 28 billion captured square feet space, use advanced ml dl technologies algorithmically transform spatial data capture accurate 3d digital reproduction physical space. intelligent, automated 3d reconstruction made possible cortex, ai-powered software engine includes deep learning neural network uses spatial data library understand building space divided floors rooms, doorways openings located, types rooms present, forms compiled aligned dimensional accuracy dynamic, photorealistic digital twin. components cortex include ai-powered computer vision technologies identify classify contents inside building space, object recognition technologies identify segment everything furnishings equipment doors, windows, light fixtures, fire suppression sprinklers fire escapes. highly scalable artificial intelligence platform enables subscribers tap powerful, enhanced building data insights click button. science behind matterport digital twin: cortex ai highlights matterport runs cortex cortex ai-powered software engine includes precision deep learning neural network create digital twins building space. developed using proprietary spatial data captured pro2 pro3 cameras, cortex delivers high degree precision accuracy enabling 3d capture using everyday devices. generic neural networks struggle 3d reconstruction real world. matterport-optimized networks deliver accurate robust results. raw training data, matterports datasets allow us develop new neural network architectures evaluate user behavior real-world data millions situations. deep learning: connecting optimizing detailed neural network data architecture space key creating robust, highly accurate 3d digital twins. cortex evaluates optimizes 3d model matterports rich spatial data aggregated millions buildings spaces human annotations data provided tens thousands subscribers worldwide. cortexs evaluative abilities data-driven optimization 3d reconstruction yield consistent, high-precision results across wide array building configurations, spaces environments. dynamic 3d reconstruction: creating precise 3d spatial data scale 2d visuals static images requires combination photorealistic, detailed data multiple viewpoints millions spaces train optimize cortexs neural network learning capabilities improved 3d reconstruction space. cortexs capabilities combined real-time spatial alignment algorithms 3d capture technology create intuitive preview work progress, allowing subscribers work content interactively real-time. computer vision: cortex enables suite powerful features enhance value digital twins. include automatic measurements rooms objects room, automatic 2d-from-3d high-definition photo gallery creation, auto face blurring privacy protection, custom videos, walkthroughs, auto room labeling object recognition. advanced image processing: matterports computational photography algorithms create fully automated image processing pipeline help ensure digital twin professional grade image quality. patented technology makes 3d capture simple pressing single button. matterports software technology manage remaining steps, including white balance camera-specific color correction, high dynamic range tone mapping, de-noising, haze removal, sharpening, saturation adjustments improve image quality. spatial data ai-powered insights every matterport digital twin contains extensive information building, room physical space. data uses ai-powered cortex engine. addition matterport digital twin itself, spatial data consists precision building geometry structural detail, building contents, fixtures condition, along high-definition imagery photorealistic detail many vantage points space. cortex employs technique call deep spatial indexing. deep spatial indexing uses artificial intelligence, computer vision deep learning identify convey important details space, structure contents precision fidelity. created robust spatial data standard enables matterport subscribers harness interoperable digital system record building. addition creating highly interactive digital experience subscribers construction digital twins, ask two questions every subscriber: (1) important building physical space (2) learnings insights deliver space? ai-powered cortex engine helps us answer questions using spatial data library provide aggregated property trends operational valuation insights. moreover, matterport platform ecosystem continues expand, subscribers, partners third-party developers bring tools breadth depth insights harvest rich spatial data layer. extensible platform ecosystem matterport offers largest accurate library spatial data world, with, december 31, 2022, approximately 9.2 million spaces management approximately 28 billion captured square feet. versatility spatial data platform extensive enterprise software development kit application programming interfaces (apis) allowed us develop robust global ecosystem channels partners extend matterport value proposition geography vertical market. intend continue deploy broad set workflow integrations partners subscribers promote integrated matterport solution across target markets. also developing third-party software marketplace extend power spatial data platform easy-to-deploy easy-to-access matterport software add-ons. marketplace enables developers build new applications spatial data mining tools, enhance matterport 3d experience, create new productivity property management tools supplement core offerings. value-added capabilities created third-party developers enable scalable new revenue stream, matterport sharing subscription services revenue add-on deployed subscribers online marketplace. network effects platform ecosystem contributes growth business, believe continue bolster future growth enhancing subscriber stickiness user engagement. examples matterport add-ons extensions include: add-ons: encircle (easy-to-use field documentation tools faster claims processing); wp matterport shortcode (free wordpress plugin allows matterport embedded quickly easily matterport shortcode), wp3d models (wordpress + matterport integration plugin); rela (all-in-one marketing solution listings); captur3d (all-in-one content management system extends value matterport digital twins); private model emded (feature allows enterprises privately share digital twins large group employees corporate network without requiring additional user licenses); views (new workgroup collaboration framework enable groups large organizations create separate, permissions-based workflows manage different tasks different teams); guided tours tags (tool elevate visitor experience creating directed virtual tours commercial residential space tailored interests visitors). unveiled private beta integration amazon web services (aws) iot twinmaker enable enterprise customers seamlessly connect iot data visually immersive dimensionally accurate matterport digital twin. services: matterport ada compliant digital twin (solution provide american disability act compliant digital twins) enterprise cloud software platform (reimagined cloud software platform enterprise creates, publishes, manages digital twins buildings spaces size shape, indoors outdoors). competitive strengths believe number competitive strengths enable market leadership grow. competitive strengths include: breadth depth matterport platform. core strength all-in-one spatial data platform broad reach across diverse verticals geographies capture processing industries without customization. ability integrate seamlessly various enterprise systems, platform delivers value across property lifecycle diverse end markets, including real estate, aec, travel hospitality, repair insurance, industrial facilities. december 31, 2022, global reach extended subscribers 170 countries, including 24% fortune 1000 companies. market leadership first-mover advantage. matterport defined category digitizing datafying built world almost decade ago, become global leader category. december 31, 2022, 701,000 subscribers platform approximately 9.2 million spaces management. leadership primarily driven fact first mover digital twin creation. result first mover advantage, amassed deep rich library spatial data continues compound enhance leadership position. significant network effect. new capture piece data added platform, richness dataset depth insights spaces management grow. addition, combination ability turn data insights incremental data new data captures subscribers enables matterport develop features subscribers platform. first mover building spatial data library built world, leadership gathering deriving insights data continues compound relevance insights attracts new subscribers. massive spatial data library raw material valuable property insights. scale spatial data library significant advantage deriving insights subscribers. spatial data library serves vital ground truth cortex, enabling matterport create powerful 3d digital twins using wide range camera technology, including low-cost digital smartphone cameras. december 31, 2022, data came approximately 9.2 million spaces management approximately 28 billion captured square feet. result, taken property insights analytics new levels, benefiting subscribers across various industries. example, facilities managers significantly reduce time needed create building layouts, leading significant decrease cost site surveying as-built modeling. aec subscribers use analytics as-built space streamline documentation collaborate ease. global reach scale. focused continuing expand ai-powered spatial data platform worldwide. significant presence north america, europe asia, leadership teams go-to-market infrastructure regions. offices london, singapore several across united states, accelerating international expansion. december 31, 2022, 701,000 subscribers 170 countries. believe geography-agnostic nature spatial data platform significant advantage continue grow internationally. broad patent portfolio supporting 10 years r&amp;d innovation. december 31, 2022, 54 issued 37 pending patent applications. success based almost 10 years focus innovation. innovation center matterport, continue prioritize investments r&amp;d market leading position. superior capture technology. matterports capture technology platform software framework enables support wide variety capture devices required create matterport digital twin building space. includes support lidar cameras, 360 cameras, smartphones, matterport axis matterport pro2 pro3 cameras. pro2 camera foundational spatial data advantage, expanded advantage array matterport-enabled third-party capture devices. august 2022, launched began shipment pro3 camera along major updates industry-leading digital twin cloud platform. matterport pro3 camera advanced 3d capture device, includes faster boot time, swappable batteries, lighter design. pro3 camera perform indoors outdoors designed speed, fidelity, versatility accuracy. along pro2 camera, expect future sales pro3 camera continue drive increased adoption solutions. matterport democratizing 3d capture experience, making high-fidelity high-accuracy 3d digital twins readily available building type subscriber need property life cycle. 3d capture solution providers, produce true, dimensionally accurate 3d results, fewer still automatically create final product photorealistic 3d, global scale. expansive capture technology offering would possible without rich spatial data library available train ai-powered cortex engine automatically generate accurate digital twins photos captured smartphone 360 camera. &lt;/document&gt;""" # print claude's response print(get_completion(prompt)) # in[ ]: # prompt prompt = """&lt;question&gt;what matterport's subscriber base precise date may 31, 2020?&lt;/question&gt; please read document. then, &lt;scratchpad&gt; tags, pull relevant quote document consider whether answers user's question whether lacks sufficient detail. write brief numerical answer &lt;answer&gt; tags. &lt;document&gt; matterport sec filing 10-k 2023 item 1. business company matterport leading digitization datafication built world. believe digital transformation built world fundamentally change way people interact buildings physical spaces around them. since founding 2011, matterports pioneering technology set standard digitizing, accessing managing buildings, spaces places online. platforms innovative software, spatial data-driven data science, 3d capture technology broken barriers kept largest asset class world, buildings physical spaces, offline underutilized many years. believe digitization datafication built world continue unlock significant operational efficiencies property values, matterport platform lead enormous global transformation. world rapidly moving offline online. digital transformation made powerful lasting impact across every business industry today. according international data corporation, idc, $6.8 trillion direct investments made digital transformation 2020 2023, global digital transformation spending forecasted reach $3.4 trillion 2026 five-year compound annual growth rate (cagr) 16.3%, digital twin investments expected five-year cagr 35.2%. secular shift, also growing demand built world transition physical digital. nevertheless, vast majority buildings spaces remain offline undigitized. global building stock, estimated savills $327 trillion total property value 2021, remains largely offline today, estimate less 0.1% penetrated digital transformation. matterport among first recognize increasing need digitization built world power spatial data, unique details underlying buildings spaces, facilitating understanding buildings spaces. past, technology advanced physical road maps data-rich, digital maps location services rely today. matterport digitizes buildings, creating data-rich environment vastly increase understanding full potential every space capture. instantly, touch button, learn fastest route one city another locate nearest coffee shops, matterports spatial data buildings unlocks rich set insights learnings properties spaces worldwide. addition, geo-spatial mapping platforms today opened mapping data industry create new business models ridesharing, e-commerce, food delivery marketplaces, even short-term rental home sharing, open access matterports structured spatial data enabling new opportunities business models hospitality, facilities management, insurance, construction, real estate retail, among others. believe total addressable market opportunity digitizing built world $240 billion, could high $1 trillion market matures scale. based analysis, modeling understanding global building stock 4 billion properties 20 billion spaces world today. help artificial intelligence (ai), machine learning (ml) deep learning (dl) technologies, believe that, additional monetization opportunities powerful spatial data-driven property insights analytics, total addressable market digitization datafication built world reach $1 trillion. spatial data platform capture digital twins deliver value across diverse set industries use cases. large retailers manage thousands store locations remotely, real estate agencies provide virtual open houses hundreds properties thousands visitors time, property developers monitor entirety construction process greater detail speed, insurance companies precisely document evaluate claims underwriting assessments efficiency precision. matterport delivers critical digital experience, tools information matter subscribers properties virtually size, shape, location worldwide. nearly decade, growing spatial data platform expanding capabilities order create detailed, accurate, data-rich digital twins available. moreover, 3d reconstruction process fully automated, allowing solution scale equal precision millions buildings spaces type, shape, size world. universal applicability service provides matterport significant scale reach across diverse verticals geography. december 31, 2022, subscriber base grown approximately 39% 701,000 subscribers 503,000 subscribers december 31, 2021, digital twins reaching 170 countries. digitized 28 billion square feet space across multiple industries, representing significant scale growth rest market. continue transform buildings data worldwide, extending spatial data platform transform property planning, development, management intelligence subscribers across industries become de facto building business intelligence engine built world. believe demand spatial data resulting insights enterprises, businesses institutions across industries, including real estate, architecture, engineering construction (aec), retail, insurance government, continue grow rapidly. believe digitization datafication represent tremendous greenfield opportunity growth across massive category asset class. early stages design development marketing, operations, insurance building repair maintenance, platforms software technology provide subscribers critical tools insights drive cost savings, increase revenues optimally manage buildings spaces. believe hundreds billions dollars unrealized utilization operating efficiencies built world unlocked power spatial data platform. platform data solutions universal applicability across industries building categories, giving matterport significant advantage address entirety large market opportunity increase value believe largest asset class world. demonstrated track record delivering value subscribers, offerings include software subscription, data licensing, services product hardware. december 31, 2022, subscriber base included 24% fortune 1000 companies, less 10% total revenue generated top 10 subscribers. expect 80% revenue come software subscription data license solutions 2025. innovative 3d capture products, pro2 pro3 cameras, played integral part shaping 3d building property visualization ecosystem. pro2 pro3 cameras driven adoption solutions generated unique high-quality scaled data set enabled cortex, proprietary ai software engine, become pioneering engine digital twin creation. data advantage initially spurred pro2 camera, developed capture device agnostic platform scales generate new building property insights subscribers across industries geographies. recently experienced rapid growth. subscribers grown approximately 49-fold december 31, 2018 december 31, 2022. revenue increased approximately 22% $136.1 million year ended december 31, 2022, approximately $111.2 million year ended december 31, 2021. gross profit decreased $8.1 million 14%, $51.8 million year ended december 31, 2022, $60.0 million year ended december 31, 2021, primarily attributable certain disruptive incremental costs due global supply chain constraints fiscal year 2022. ability retain grow subscription revenue generated existing subscribers important measure health business future growth prospects. track performance area measuring net dollar expansion rate set customers across comparable periods. net dollar expansion rate 103% three months ended december 31, 2022 demonstrates stickiness growth potential platform. industry market opportunity today, vast majority buildings spaces remain undigitized. estimate current serviceable addressable market includes approximately 1.3 billion spaces worldwide, primarily real estate travel hospitality sectors. approximately 9.2 million spaces management december 31, 2022, continuing penetrate global building stock expand footprint across various end markets, including residential commercial real estate, facilities management, retail, aec, insurance repair, travel hospitality. estimate total addressable market 4 billion buildings 20 billion spaces globally, yielding $240 billion market opportunity. believe matterports unique spatial data library property data services continue grow, opportunity could increase $1 trillion based size building stock untapped value creation available buildings worldwide. constraints created covid-19 pandemic reinforced accelerated importance scaled 3d capture solution developed diverse industries markets past decade. spatial data platform overview technology platform uses spatial data collected wide variety digital capture devices transform physical buildings spaces dimensionally accurate, photorealistic digital twins provide subscribers access previously unavailable building information insights. first mover massive market nearly decade, developed scaled industry-leading 3d reconstruction technology powered cortex, proprietary ai-driven software engine uses machine learning recreate photorealistic, 3d virtual representation entire building structure, including contents, equipment furnishings. finished product detailed dynamic replication physical space explored, analyzed customized web browser device, including smartphones. power manage even large-scale commercial buildings palm subscribers hands, made possible advanced technology breakthrough innovations across entire spatial data technology stack. key elements spatial data platform include: bringing offline buildings online. traditionally, customers needed conduct in-person site visits understand assess buildings spaces. photographs floor plans helpful, forms two-dimensional (2d) representation limited information tend static rigid, thus lack interactive element critical holistic understanding building space. ai-powered capabilities cortex, proprietary ai software, representation physical objects longer confined static 2d images physical visits eliminated. cortex helps move buildings spaces offline online makes accessible customers real-time demand anywhere. subscribers scan buildings, visualization algorithms accurately infer spatial positions depths flat, 2d imagery captured scans transform high- fidelity precise digital twin models. creates fully automated image processing pipeline ensure digital twin professional grade image quality. driven spatial data. data-driven company. incremental capture space grows richness depth spatial data library. spatial data represents unique idiosyncratic details underlie compose buildings spaces human- made environment. cortex uses breadth billions data points accumulated years improve 3d accuracy digital twins. help subscribers pinpoint height, location characteristics objects digital twin. sophisticated algorithms also deliver significant commercial value subscribers generating data-based insights allow confidently make assessments decisions properties. instance, property developers assess amount natural heat daylight coming specific windows, retailers ensure store layout level code brand requirements, factories insure machinery layouts meet specifications location guidelines. approximately 9.2 million spaces management december 31, 2022, spatial data library clearinghouse information built world. powered ai ml. artificial intelligence machine learning technologies effectively utilize spatial data create robust virtual experience dynamic, realistic, interactive, informative permits multiple viewing angles. ai ml also make costly cameras unnecessary everyday scanssubscribers scan spaces simply tapping button smartphones. result, matterport device agnostic platform, helping us rapidly scale drive towards mission digitizing indexing built world. value proposition subscribers designed serve entirety digital building lifecycle, design build maintenance operations, promotion, sale, lease, insure, repair, restore, secure finance. result, believe uniquely positioned grow revenue subscribers help discover opportunities drive short- long-term return investment taking buildings spaces offline online across portfolios properties. ubiquitous capture matterport become standard 3d space capture. technology platform empowers subscribers worldwide quickly, easily accurately digitize, customize manage interactive dimensionally accurate digital twins buildings spaces. matterport platform designed work wide range lidar, spherical, 3d 360 cameras, well smartphones, suit capture needs subscribers. provides flexibility capture space size, scale, complexity, anytime anywhere. matterport pro3 newest 3d camera scans properties faster earlier versions help accelerate project completion. pro3 provides highest accuracy scans indoor outdoor spaces designed speed, fidelity, versatility accuracy. capturing 3d data 100 meters away less 20 seconds per sweep, pro3s ultra-fast, high-precision lidar sensor run hours takes millions measurements conditions. matterport pro2 proprietary 3d camera used capture millions spaces around world high degree fidelity, precision, speed simplicity. capable capturing buildings 500,000 square feet size, become camera choice many residential, commercial, industrial large-scale properties. 360 cameras. matterport supports selection 360 cameras available market. affordable, pocket sized devices deliver precision captures high fidelity appropriate capturing smaller homes, condos, short-term rentals, apartments, more. spherical lens image capture technology devices gives cortex robust, detailed image data transform panoramas industry-leading digital twins. leica blk360. partnership leica, 3d reconstruction technology ai powered software engine, cortex, transform powerful lidar camera ultra-precise capture device creating matterport digital twins. solution choice aec professionals exacting precision required. smartphone capture. capture apps commercially available ios android. matterports smartphone capture solution democratized 3d capture, making easy accessible anyone digitize buildings spaces recent iphone device since initial introduction matterport iphone may 2020. april 2021, announced official release android capture app, giving android users ability quickly easily capture buildings spaces immersive 3d. february 2022, launched matterport axis, motorized mount holds smartphone used matterport capture app capture 3d digital twins physical space increased speed, precision, consistency. cortex 3d reconstruction (the matterport digital twin) spatial data library, december 31, 2022, approximately 9.2 million spaces management, representing approximately 28 billion captured square feet space, use advanced ml dl technologies algorithmically transform spatial data capture accurate 3d digital reproduction physical space. intelligent, automated 3d reconstruction made possible cortex, ai-powered software engine includes deep learning neural network uses spatial data library understand building space divided floors rooms, doorways openings located, types rooms present, forms compiled aligned dimensional accuracy dynamic, photorealistic digital twin. components cortex include ai-powered computer vision technologies identify classify contents inside building space, object recognition technologies identify segment everything furnishings equipment doors, windows, light fixtures, fire suppression sprinklers fire escapes. highly scalable artificial intelligence platform enables subscribers tap powerful, enhanced building data insights click button. science behind matterport digital twin: cortex ai highlights matterport runs cortex cortex ai-powered software engine includes precision deep learning neural network create digital twins building space. developed using proprietary spatial data captured pro2 pro3 cameras, cortex delivers high degree precision accuracy enabling 3d capture using everyday devices. generic neural networks struggle 3d reconstruction real world. matterport-optimized networks deliver accurate robust results. raw training data, matterports datasets allow us develop new neural network architectures evaluate user behavior real-world data millions situations. deep learning: connecting optimizing detailed neural network data architecture space key creating robust, highly accurate 3d digital twins. cortex evaluates optimizes 3d model matterports rich spatial data aggregated millions buildings spaces human annotations data provided tens thousands subscribers worldwide. cortexs evaluative abilities data-driven optimization 3d reconstruction yield consistent, high-precision results across wide array building configurations, spaces environments. dynamic 3d reconstruction: creating precise 3d spatial data scale 2d visuals static images requires combination photorealistic, detailed data multiple viewpoints millions spaces train optimize cortexs neural network learning capabilities improved 3d reconstruction space. cortexs capabilities combined real-time spatial alignment algorithms 3d capture technology create intuitive preview work progress, allowing subscribers work content interactively real-time. computer vision: cortex enables suite powerful features enhance value digital twins. include automatic measurements rooms objects room, automatic 2d-from-3d high-definition photo gallery creation, auto face blurring privacy protection, custom videos, walkthroughs, auto room labeling object recognition. advanced image processing: matterports computational photography algorithms create fully automated image processing pipeline help ensure digital twin professional grade image quality. patented technology makes 3d capture simple pressing single button. matterports software technology manage remaining steps, including white balance camera-specific color correction, high dynamic range tone mapping, de-noising, haze removal, sharpening, saturation adjustments improve image quality. spatial data ai-powered insights every matterport digital twin contains extensive information building, room physical space. data uses ai-powered cortex engine. addition matterport digital twin itself, spatial data consists precision building geometry structural detail, building contents, fixtures condition, along high-definition imagery photorealistic detail many vantage points space. cortex employs technique call deep spatial indexing. deep spatial indexing uses artificial intelligence, computer vision deep learning identify convey important details space, structure contents precision fidelity. created robust spatial data standard enables matterport subscribers harness interoperable digital system record building. addition creating highly interactive digital experience subscribers construction digital twins, ask two questions every subscriber: (1) important building physical space (2) learnings insights deliver space? ai-powered cortex engine helps us answer questions using spatial data library provide aggregated property trends operational valuation insights. moreover, matterport platform ecosystem continues expand, subscribers, partners third-party developers bring tools breadth depth insights harvest rich spatial data layer. extensible platform ecosystem matterport offers largest accurate library spatial data world, with, december 31, 2022, approximately 9.2 million spaces management approximately 28 billion captured square feet. versatility spatial data platform extensive enterprise software development kit application programming interfaces (apis) allowed us develop robust global ecosystem channels partners extend matterport value proposition geography vertical market. intend continue deploy broad set workflow integrations partners subscribers promote integrated matterport solution across target markets. also developing third-party software marketplace extend power spatial data platform easy-to-deploy easy-to-access matterport software add-ons. marketplace enables developers build new applications spatial data mining tools, enhance matterport 3d experience, create new productivity property management tools supplement core offerings. value-added capabilities created third-party developers enable scalable new revenue stream, matterport sharing subscription services revenue add-on deployed subscribers online marketplace. network effects platform ecosystem contributes growth business, believe continue bolster future growth enhancing subscriber stickiness user engagement. examples matterport add-ons extensions include: add-ons: encircle (easy-to-use field documentation tools faster claims processing); wp matterport shortcode (free wordpress plugin allows matterport embedded quickly easily matterport shortcode), wp3d models (wordpress + matterport integration plugin); rela (all-in-one marketing solution listings); captur3d (all-in-one content management system extends value matterport digital twins); private model emded (feature allows enterprises privately share digital twins large group employees corporate network without requiring additional user licenses); views (new workgroup collaboration framework enable groups large organizations create separate, permissions-based workflows manage different tasks different teams); guided tours tags (tool elevate visitor experience creating directed virtual tours commercial residential space tailored interests visitors). unveiled private beta integration amazon web services (aws) iot twinmaker enable enterprise customers seamlessly connect iot data visually immersive dimensionally accurate matterport digital twin. services: matterport ada compliant digital twin (solution provide american disability act compliant digital twins) enterprise cloud software platform (reimagined cloud software platform enterprise creates, publishes, manages digital twins buildings spaces size shape, indoors outdoors). competitive strengths believe number competitive strengths enable market leadership grow. competitive strengths include: breadth depth matterport platform. core strength all-in-one spatial data platform broad reach across diverse verticals geographies capture processing industries without customization. ability integrate seamlessly various enterprise systems, platform delivers value across property lifecycle diverse end markets, including real estate, aec, travel hospitality, repair insurance, industrial facilities. december 31, 2022, global reach extended subscribers 170 countries, including 24% fortune 1000 companies. market leadership first-mover advantage. matterport defined category digitizing datafying built world almost decade ago, become global leader category. december 31, 2022, 701,000 subscribers platform approximately 9.2 million spaces management. leadership primarily driven fact first mover digital twin creation. result first mover advantage, amassed deep rich library spatial data continues compound enhance leadership position. significant network effect. new capture piece data added platform, richness dataset depth insights spaces management grow. addition, combination ability turn data insights incremental data new data captures subscribers enables matterport develop features subscribers platform. first mover building spatial data library built world, leadership gathering deriving insights data continues compound relevance insights attracts new subscribers. massive spatial data library raw material valuable property insights. scale spatial data library significant advantage deriving insights subscribers. spatial data library serves vital ground truth cortex, enabling matterport create powerful 3d digital twins using wide range camera technology, including low-cost digital smartphone cameras. december 31, 2022, data came approximately 9.2 million spaces management approximately 28 billion captured square feet. result, taken property insights analytics new levels, benefiting subscribers across various industries. example, facilities managers significantly reduce time needed create building layouts, leading significant decrease cost site surveying as-built modeling. aec subscribers use analytics as-built space streamline documentation collaborate ease. global reach scale. focused continuing expand ai-powered spatial data platform worldwide. significant presence north america, europe asia, leadership teams go-to-market infrastructure regions. offices london, singapore several across united states, accelerating international expansion. december 31, 2022, 701,000 subscribers 170 countries. believe geography-agnostic nature spatial data platform significant advantage continue grow internationally. broad patent portfolio supporting 10 years r&amp;d innovation. december 31, 2022, 54 issued 37 pending patent applications. success based almost 10 years focus innovation. innovation center matterport, continue prioritize investments r&amp;d market leading position. superior capture technology. matterports capture technology platform software framework enables support wide variety capture devices required create matterport digital twin building space. includes support lidar cameras, 360 cameras, smartphones, matterport axis matterport pro2 pro3 cameras. pro2 camera foundational spatial data advantage, expanded advantage array matterport-enabled third-party capture devices. august 2022, launched began shipment pro3 camera along major updates industry-leading digital twin cloud platform. matterport pro3 camera advanced 3d capture device, includes faster boot time, swappable batteries, lighter design. pro3 camera perform indoors outdoors designed speed, fidelity, versatility accuracy. along pro2 camera, expect future sales pro3 camera continue drive increased adoption solutions. matterport democratizing 3d capture experience, making high-fidelity high-accuracy 3d digital twins readily available building type subscriber need property life cycle. 3d capture solution providers, produce true, dimensionally accurate 3d results, fewer still automatically create final product photorealistic 3d, global scale. expansive capture technology offering would possible without rich spatial data library available train ai-powered cortex engine automatically generate accurate digital twins photos captured smartphone 360 camera. &lt;/document&gt;""" # print claude's response print(get_completion(prompt))</file><file name="Anthropic 1P/09_Complex_Prompts_from_Scratch.ipynb">#!/usr/bin/env python # coding: utf-8 # # chapter 9: complex prompts scratch # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) def get_completion(prompt: str, system_prompt="", prefill=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=[ {"role": "user", "content": prompt}, {"role": "assistant", "content": prefill} ] ) return message.content[0].text # --- # # ## lesson # # congratulations making last chapter! time put everything together learn **create unique complex prompts**. # # below, using **guided structure recommend complex prompts**. latter parts chapter, show industry-specific prompts explain prompts similarly structured. # # **note:** **not prompts need every element following complex structure**. encourage play around include disinclude elements see affects claude's response. usually **best use many prompt elements get prompt working first, refine slim prompt afterward**. # ### example - career coach chatbot # # following structure combines multiple prompt engineering elements good starting point complex prompts. **the ordering matters elements**, others. note best practices indicate ordering matters, general, **if stick ordering, good start stellar prompt**. # # following example, building prompt controlled roleplay wherein claude takes situational role specific task. goal prompt claude act friendly career coach. # # read run cell compile various prompt elements one whole prompt. # in[ ]: ######################################## input variables ######################################## # first input variable - conversation history (this also added preceding `user` `assistant` messages api call) history = """customer: give two possible careers sociology majors. joe: two potential careers sociology majors: - social worker - sociology provides strong foundation understanding human behavior social systems. additional training certification, sociology degree qualify graduates roles social workers, case managers, counselors, community organizers helping individuals groups. - human resources specialist - understanding group dynamics organizational behavior sociology applicable careers human resources. graduates may find roles recruiting, employee relations, training development, diversity inclusion, hr functions. focus social structures institutions also supports related careers public policy, nonprofit management, education.""" # second input variable - user's question question = "which two careers requires bachelor's degree?" ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "you acting ai career coach named joe created company adastra careers. goal give career advice users. replying users adastra site confused respond character joe." ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "you maintain friendly customer service tone." ##### prompt element 4: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = """here important rules interaction: - always stay character, joe, ai adastra careers - unsure respond, say \"sorry, understand that. could rephrase question?\" - someone asks something irrelevant, say, \"sorry, joe give career advice. career question today help with?\"""" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = """here example respond standard interaction: &lt;example&gt; customer: hi, created do? joe: hello! name joe, created adastra careers give career advice. help today? &lt;/example&gt;""" ##### prompt element 6: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = f"""here conversational history (between user you) prior question. could empty history: &lt;history&gt; {history} &lt;/history&gt; user's question: &lt;question&gt; {question} &lt;/question&gt;""" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "how respond user's question?" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "think answer first respond." ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "put response &lt;response&gt;&lt;/response&gt; tags." ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "[joe] &lt;response&gt;" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" task_description: prompt += f"""\n\n{task_description}""" examples: prompt += f"""\n\n{examples}""" input_data: prompt += f"""\n\n{input_data}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) # let's run prompt! run cell see claude's output. # in[ ]: print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # ### example - legal services # # **prompts within legal profession quite complex** due need to: # - parse long documents # - deal complex topics # - format output specific ways # - follow multi-step analytical processes # # let's see use complex prompt template structure prompt specific legal use-case. below, we've detailed example prompt legal use-case wherein ask claude answer questions legal issue using information legal document. # # we've **changed around ordering elements** showcase prompt structure flexible! # # **prompt engineering scientific trial error**. encourage mix match, move things around (the elements ordering matter), see works best needs. # in[ ]: ######################################## input variables ######################################## # first input variable - legal document legal_research = """&lt;search_results&gt; &lt;search_result id=1&gt; animal health industry became caught number patent trademark lawsuits past year. 1994, barclay slocum obtained patents tibial plateau leveling osteotomy procedure, used treatment dogs cranial cruciate ligament rupture, devices used procedure. 2006, slocum enterprises filed patent infringement suit new generation devices, arguing unity cruciate plate manufactured new generation infringed patent slocum tplo plate. however, court never reached decision issue patent infringement, ruling jurisdiction basis small number plates sold state case filed information provided web site maintained slocum enterprises. patent battles waged 2006 concerned use laser technology onychectomy cats, pet identification chips, pig vaccines, pet deshedding tools. &lt;/search_result&gt; &lt;search_result id=2&gt; canada, british columbia veterinary medical association brought suit nonveterinarian, claiming engaged cutting otherwise removing hooks horses' teeth floating horses' teeth power manual tools, provided advice diagnoses return fee, held qualified willing provide treatment respect activities. court held intention legislature passing veterinary profession act protection public animals held monopolistic statutes serve purpose protecting public. addition, court concluded dentistry, core, relates health teeth gums; distinct cosmetic types care animals; and, therefore, falls definition practice veterinary medicine. nonveterinarian enjoined providing services without veterinarian supervising procedures. &lt;/search_result&gt; &lt;search_result id=3&gt; aftermath hurricane katrina, hit gulf coast united states 2005, spurred changes way animals treated natural disasters. 2006, hawaii, louisiana, new hampshire enacted laws address issues regarding care animals disasters, providing shelters pets allowing service animals kept people serve. addition, congress passed, president signed, pet evacuation transportation standards act 2006, requires state local emergency preparedness authorities include evacuation plans information accommodate household pets service animals case disaster. california passed law require office emergency services, department agriculture, agencies involved disaster response preparation develop plan needs service animals, livestock, equids, household pets event disaster major emergency. &lt;/search_result&gt; &lt;/search_results&gt;""" # second input variable - user's question question = "are laws pets hurricane?" ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "you expert lawyer." ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "" ##### prompt element 4: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = f"""here research that's compiled. use answer legal question user. &lt;legal_research&gt; {legal_research} &lt;/legal_research&gt;""" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = """when citing legal research answer, please use brackets containing search index id, followed period. put end sentence that's citing. examples proper citation format: &lt;examples&gt; &lt;example&gt; statute limitations expires 10 years crimes like this. [3]. &lt;/example&gt; &lt;example&gt; however, protection apply specifically waived parties. [5]. &lt;/example&gt; &lt;/examples&gt;""" ##### prompt element 6: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = """write clear, concise answer question: &lt;question&gt; {question} &lt;/question&gt; couple paragraphs. possible, conclude single sentence directly answering user's question. however, sufficient information compiled research produce answer, may demur write "sorry, sufficient information hand answer question.".""" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "before answer, pull relevant quotes research &lt;relevant_quotes&gt; tags." ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "put two-paragraph response &lt;answer&gt; tags." ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "&lt;relevant_quotes&gt;" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" input_data: prompt += f"""\n\n{input_data}""" examples: prompt += f"""\n\n{examples}""" task_description: prompt += f"""\n\n{task_description}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) # let's run prompt! run cell see claude's output. # in[ ]: print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 9.1 - financial services chatbot](#exercise-91---financial-services-chatbot) # - [exercise 9.2 - codebot](#exercise-92---codebot) # ### exercise 9.1 - financial services chatbot # prompts within financial profession also quite complex due reasons similar legal prompts. here's exercise financial use-case, wherein claude used **analyze tax information answer questions**. like legal services example, we've changed around ordering elements, solution prompt makes sense different flow (however, structures would also work). # # suggest read variable content (in case, `{question}` `{tax_code}`) understand content claude expected work with. sure reference `{question}` `{tax_code}` directly prompt somewhere (using f-string syntax like examples) actual variable content substituted in. # # fill prompt element fields content match description examples seen preceding examples complex prompts. filled prompt elements want fill out, run cell see concatenated prompt well claude's response. # # remember prompt engineering rarely purely formulaic, especially large complex prompts! important develop test cases **try variety prompts prompt structures see works best situation**. note *do* change ordering prompt elements, also remember change ordering concatenaton `combine elements` section. # in[ ]: ######################################## input variables ######################################## # first input variable - user's question question = "how long make 83b election?" # second input variable - tax code document claude using answer user's question tax_code = """ (a)general rule if, connection performance services, property transferred person person services performed, excess (1)the fair market value property (determined without regard restriction restriction terms never lapse) first time rights person beneficial interest property transferable subject substantial risk forfeiture, whichever occurs earlier, (2)the amount (if any) paid property, shall included gross income person performed services first taxable year rights person beneficial interest property transferable subject substantial risk forfeiture, whichever applicable. preceding sentence shall apply person sells otherwise disposes property arms length transaction rights property become transferable subject substantial risk forfeiture. (b)election include gross income year transfer (1)in general person performs services connection property transferred person may elect include gross income taxable year property transferred, excess (a)the fair market value property time transfer (determined without regard restriction restriction terms never lapse), (b)the amount (if any) paid property. election made, subsection (a) shall apply respect transfer property, property subsequently forfeited, deduction shall allowed respect forfeiture. (2)election election paragraph (1) respect transfer property shall made manner secretary prescribes shall made later 30 days date transfer. election may revoked except consent secretary. (c)special rules purposes section (1)substantial risk forfeiture rights person property subject substantial risk forfeiture persons rights full enjoyment property conditioned upon future performance substantial services individual. (2)transferability property rights person property transferable rights property transferee subject substantial risk forfeiture. (3)sales may give rise suit section 16(b) securities exchange act 1934 long sale property profit could subject person suit section 16(b) securities exchange act 1934, persons rights property (a)subject substantial risk forfeiture, (b)not transferable. (4)for purposes determining individuals basis property transferred connection performance services, rules similar rules section 72(w) shall apply. (d)certain restrictions never lapse (1)valuation case property subject restriction terms never lapse, allows transferee sell property price determined formula, price determined shall deemed fair market value property unless established contrary secretary, burden proof shall secretary respect value. (2)cancellation if, case property subject restriction terms never lapse, restriction canceled, then, unless taxpayer establishes (a)that cancellation compensatory, (b)that person, any, would allowed deduction cancellation treated compensatory, treat transaction compensatory, evidenced manner secretary shall prescribe regulations, excess fair market value property (computed without regard restrictions) time cancellation sum (c)the fair market value property (computed taking restriction account) immediately cancellation, (d)the amount, any, paid cancellation, shall treated compensation taxable year cancellation occurs. (e)applicability section section shall apply (1)a transaction section 421 applies, (2)a transfer trust described section 401(a) transfer annuity plan meets requirements section 404(a)(2), (3)the transfer option without readily ascertainable fair market value, (4)the transfer property pursuant exercise option readily ascertainable fair market value date grant, (5)group-term life insurance section 79 applies. (f)holding period determining period taxpayer held property subsection (a) applies, shall included period beginning first time rights property transferable subject substantial risk forfeiture, whichever occurs earlier. (g)certain exchanges property subsection (a) applies exchanged property subject restrictions conditions substantially similar property given exchange subject, section 354, 355, 356, 1036 (or much section 1031 relates section 1036) applied exchange, exchange pursuant exercise conversion privilege (1)such exchange shall disregarded purposes subsection (a), (2)the property received shall treated property subsection (a) applies. (h)deduction employer case transfer property section applies cancellation restriction described subsection (d), shall allowed deduction section 162, person performed services connection property transferred, amount equal amount included subsection (a), (b), (d)(2) gross income person performed services. deduction shall allowed taxable year person ends taxable year amount included gross income person performed services. (i)qualified equity grants (1)in general purposes subtitle (a)timing inclusion qualified stock transferred qualified employee makes election respect stock subsection, subsection (a) shall applied including amount determined subsection respect stock income employee taxable year determined subparagraph (b) lieu taxable year described subsection (a). (b)taxable year determined taxable year determined subparagraph taxable year employee includes earliest (i)the first date qualified stock becomes transferable (including, solely purposes clause, becoming transferable employer), (ii)the date employee first becomes excluded employee, (iii)the first date stock corporation issued qualified stock becomes readily tradable established securities market (as determined secretary, including market unless market recognized established securities market secretary purposes provision title subsection), (iv)the date 5 years first date rights employee stock transferable subject substantial risk forfeiture, whichever occurs earlier, (v)the date employee revokes (at time manner secretary provides) election subsection respect stock. (2)qualified stock (a)in general purposes subsection, term qualified stock means, respect qualified employee, stock corporation employer employee, (i)such stock received (i)in connection exercise option, (ii)in settlement restricted stock unit, (ii)such option restricted stock unit granted corporation (i)in connection performance services employee, (ii)during calendar year corporation eligible corporation. (b)limitation term qualified stock shall include stock employee may sell stock to, otherwise receive cash lieu stock from, corporation time rights employee stock first become transferable subject substantial risk forfeiture. (c)eligible corporation purposes subparagraph (a)(ii)(ii) (i)in general term eligible corporation means, respect calendar year, corporation (i)no stock corporation (or predecessor corporation) readily tradable established securities market (as determined paragraph (1)(b)(iii)) preceding calendar year, (ii)such corporation written plan which, calendar year, less 80 percent employees provide services corporation united states (or possession united states) granted stock options, granted restricted stock units, rights privileges receive qualified stock. (ii)same rights privileges purposes clause (i)(ii) (i)except provided subclauses (ii) (iii), determination rights privileges respect stock shall made similar manner section 423(b)(5), (ii)employees shall fail treated rights privileges receive qualified stock solely number shares available employees equal amount, long number shares available employee de minimis amount, (iii)rights privileges respect exercise option shall treated rights privileges respect settlement restricted stock unit. (iii)employee purposes clause (i)(ii), term employee shall include employee described section 4980e(d)(4) excluded employee. (iv)special rule calendar years 2018 case calendar year beginning january 1, 2018, clause (i)(ii) shall applied without regard whether rights privileges respect qualified stock same. (3)qualified employee; excluded employee purposes subsection (a)in general term qualified employee means individual (i)is excluded employee, (ii)agrees election made subsection meet requirements determined secretary necessary ensure withholding requirements corporation chapter 24 respect qualified stock met. (b)excluded employee term excluded employee means, respect corporation, individual (i)who 1-percent owner (within meaning section 416(i)(1)(b)(ii)) time calendar year 1 percent owner time 10 preceding calendar years, (ii)who prior time (i)the chief executive officer corporation individual acting capacity, (ii)the chief financial officer corporation individual acting capacity, (iii)who bears relationship described section 318(a)(1) individual described subclause (i) (ii) clause (ii), (iv)who one 4 highest compensated officers corporation taxable year, one 4 highest compensated officers corporation 10 preceding taxable years, determined respect taxable year basis shareholder disclosure rules compensation securities exchange act 1934 (as rules applied corporation). (4)election (a)time making election election respect qualified stock shall made subsection later 30 days first date rights employee stock transferable subject substantial risk forfeiture, whichever occurs earlier, shall made manner similar manner election made subsection (b). (b)limitations election may made section respect qualified stock (i)the qualified employee made election subsection (b) respect qualified stock, (ii)any stock corporation issued qualified stock readily tradable established securities market (as determined paragraph (1)(b)(iii)) time election made, (iii)such corporation purchased outstanding stock calendar year preceding calendar year includes first date rights employee stock transferable subject substantial risk forfeiture, unless (i)not less 25 percent total dollar amount stock purchased deferral stock, (ii)the determination individuals deferral stock purchased made reasonable basis. (c)definitions special rules related limitation stock redemptions (i)deferral stock purposes paragraph, term deferral stock means stock respect election effect subsection. (ii)deferral stock respect individual taken account individual holds deferral stock longer deferral period stock purchased corporation individual shall treated deferral stock purposes subparagraph (b)(iii) individual (immediately purchase) holds deferral stock respect election effect subsection longer period election respect stock purchased. (iii)purchase outstanding deferral stock requirements subclauses (i) (ii) subparagraph (b)(iii) shall treated met stock purchased includes corporations outstanding deferral stock. (iv)reporting corporation outstanding deferral stock beginning calendar year purchases outstanding stock calendar year shall include return tax taxable year which, which, calendar year ends total dollar amount outstanding stock purchased calendar year information secretary requires purposes administering paragraph. (5)controlled groups purposes subsection, persons treated single employer section 414(b) shall treated 1 corporation. (6)notice requirement corporation transfers qualified stock qualified employee shall, time (or reasonable period before) amount attributable stock would (but subsection) first includible gross income employee (a)certify employee stock qualified stock, (b)notify employee (i)that employee may eligible elect defer income stock subsection, (ii)that, employee makes election (i)the amount income recognized end deferral period based value stock time rights employee stock first become transferable subject substantial risk forfeiture, notwithstanding whether value stock declined deferral period, (ii)the amount income recognized end deferral period subject withholding section 3401(i) rate determined section 3402(t), (iii)the responsibilities employee (as determined secretary paragraph (3)(a)(ii)) respect withholding. (7)restricted stock units section (other subsection), including election subsection (b), shall apply restricted stock units. """ ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "" ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "" ##### prompt element 4: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = "" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = "" ##### prompt element 6: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = "" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "" ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "" ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" input_data: prompt += f"""\n\n{input_data}""" examples: prompt += f"""\n\n{examples}""" task_description: prompt += f"""\n\n{task_description}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # want see possible solution, run cell below! # in[ ]: hints import exercise_9_1_solution; print(exercise_9_1_solution) # ### exercise 9.2 - codebot # exercise, write prompt **coding assistance teaching bot reads code offers guiding corrections appropriate**. fill prompt element fields content match description examples seen preceding examples complex prompts. filled prompt elements want fill out, run cell see concatenated prompt well claude's response. # # suggest read variable content (in case, `{code}`) understand content claude expected work with. sure reference `{code}` directly prompt somewhere (using f-string syntax like examples) actual variable content substituted in. # in[ ]: ######################################## input variables ######################################## # input variable - code claude needs read assist user correcting code = """ # function print multiplicative inverses def print_multiplicative_inverses(x, n): range(n): print(x / i) """ ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "" ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "" ##### prompt element 4: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = "" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = "" ##### prompt element 6: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = "" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "" ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "" ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" task_description: prompt += f"""\n\n{task_description}""" examples: prompt += f"""\n\n{examples}""" input_data: prompt += f"""\n\n{input_data}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # want see possible solution, run cell below! # in[ ]: hints import exercise_9_2_solution; print(exercise_9_2_solution) # --- # # ## congratulations &amp; next steps! # # made exercises, **you top 0.1% llm whisperers**. one elite! # # techniques learned, thinking step step assigning roles using examples general all-around clear writing, **merged, remixed, adapted countless ways**. # # prompt engineering new discipline, keep open mind. could one discover next great prompting trick. # # want see **more examples good prompts** inspiration: # - learn examples production-ready prompts [cookbook](https://anthropic.com/cookbook) # - read [prompting guide](https://docs.anthropic.com/claude/docs/prompt-engineering) # - check [prompt library](https://anthropic.com/prompts) inspiration # - try experimental [metaprompt](https://docs.anthropic.com/claude/docs/helper-metaprompt-experimental) get claude write prompt templates you! # - ask questions [discord server](https://anthropic.com/discord) # - learn [anthropic api parameters](https://docs.anthropic.com/claude/reference/complete_post) like temperature `max_tokens` # - feeling academic, read [papers](https://www.promptingguide.ai/papers) prompt engineering # - practice building prompts get claude something interested # # want learn truly advanced prompting techniques beyond scope tutorial, click appendix! first, run cell below. # in[ ]: # prompt prompt = "write ode fabulous student completed course prompt engineering, form sonnet." # print claude's response print(get_completion(prompt)) # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: ######################################## input variables ######################################## # first input variable - conversation history (this also added preceding `user` `assistant` messages api call) history = """customer: give two possible careers sociology majors. joe: two potential careers sociology majors: - social worker - sociology provides strong foundation understanding human behavior social systems. additional training certification, sociology degree qualify graduates roles social workers, case managers, counselors, community organizers helping individuals groups. - human resources specialist - understanding group dynamics organizational behavior sociology applicable careers human resources. graduates may find roles recruiting, employee relations, training development, diversity inclusion, hr functions. focus social structures institutions also supports related careers public policy, nonprofit management, education.""" # second input variable - user's question question = "which two careers requires bachelor's degree?" ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "you acting ai career coach named joe created company adastra careers. goal give career advice users. replying users adastra site confused respond character joe." ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "you maintain friendly customer service tone." ##### prompt element 4: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = """here important rules interaction: - always stay character, joe, ai adastra careers - unsure respond, say \"sorry, understand that. could rephrase question?\" - someone asks something irrelevant, say, \"sorry, joe give career advice. career question today help with?\"""" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = """here example respond standard interaction: &lt;example&gt; customer: hi, created do? joe: hello! name joe, created adastra careers give career advice. help today? &lt;/example&gt;""" ##### prompt element 6: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = f"""here conversational history (between user you) prior question. could empty history: &lt;history&gt; {history} &lt;/history&gt; user's question: &lt;question&gt; {question} &lt;/question&gt;""" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "how respond user's question?" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "think answer first respond." ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "put response &lt;response&gt;&lt;/response&gt; tags." ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "[joe] &lt;response&gt;" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" task_description: prompt += f"""\n\n{task_description}""" examples: prompt += f"""\n\n{examples}""" input_data: prompt += f"""\n\n{input_data}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill)) # in[ ]: ######################################## input variables ######################################## # first input variable - legal document legal_research = """&lt;search_results&gt; &lt;search_result id=1&gt; animal health industry became caught number patent trademark lawsuits past year. 1994, barclay slocum obtained patents tibial plateau leveling osteotomy procedure, used treatment dogs cranial cruciate ligament rupture, devices used procedure. 2006, slocum enterprises filed patent infringement suit new generation devices, arguing unity cruciate plate manufactured new generation infringed patent slocum tplo plate. however, court never reached decision issue patent infringement, ruling jurisdiction basis small number plates sold state case filed information provided web site maintained slocum enterprises. patent battles waged 2006 concerned use laser technology onychectomy cats, pet identification chips, pig vaccines, pet deshedding tools. &lt;/search_result&gt; &lt;search_result id=2&gt; canada, british columbia veterinary medical association brought suit nonveterinarian, claiming engaged cutting otherwise removing hooks horses' teeth floating horses' teeth power manual tools, provided advice diagnoses return fee, held qualified willing provide treatment respect activities. court held intention legislature passing veterinary profession act protection public animals held monopolistic statutes serve purpose protecting public. addition, court concluded dentistry, core, relates health teeth gums; distinct cosmetic types care animals; and, therefore, falls definition practice veterinary medicine. nonveterinarian enjoined providing services without veterinarian supervising procedures. &lt;/search_result&gt; &lt;search_result id=3&gt; aftermath hurricane katrina, hit gulf coast united states 2005, spurred changes way animals treated natural disasters. 2006, hawaii, louisiana, new hampshire enacted laws address issues regarding care animals disasters, providing shelters pets allowing service animals kept people serve. addition, congress passed, president signed, pet evacuation transportation standards act 2006, requires state local emergency preparedness authorities include evacuation plans information accommodate household pets service animals case disaster. california passed law require office emergency services, department agriculture, agencies involved disaster response preparation develop plan needs service animals, livestock, equids, household pets event disaster major emergency. &lt;/search_result&gt; &lt;/search_results&gt;""" # second input variable - user's question question = "are laws pets hurricane?" ######################################## prompt elements ######################################## ##### prompt element 1: `user` role # make sure messages api call always starts `user` role messages array. # get_completion() function defined automatically you. ##### prompt element 2: task context # give claude context role take goals overarching tasks want undertake prompt. # best put context early body prompt. task_context = "you expert lawyer." ##### prompt element 3: tone context # important interaction, tell claude tone use. # element may necessary depending task. tone_context = "" ##### prompt element 4: input data process # data claude needs process within prompt, include within relevant xml tags. # feel free include multiple pieces data, sure enclose set xml tags. # element may necessary depending task. ordering also flexible. input_data = f"""here research that's compiled. use answer legal question user. &lt;legal_research&gt; {legal_research} &lt;/legal_research&gt;""" ##### prompt element 5: examples # provide claude least one example ideal response emulate. encase &lt;example&gt;&lt;/example&gt; xml tags. feel free provide multiple examples. # provide multiple examples, give claude context example of, enclose example set xml tags. # examples probably single effective tool knowledge work getting claude behave desired. # make sure give claude examples common edge cases. prompt uses scratchpad, effective give examples scratchpad look. # generally examples = better. examples = """when citing legal research answer, please use brackets containing search index id, followed period. put end sentence that's citing. examples proper citation format: &lt;examples&gt; &lt;example&gt; statute limitations expires 10 years crimes like this. [3]. &lt;/example&gt; &lt;example&gt; however, protection apply specifically waived parties. [5]. &lt;/example&gt; &lt;/examples&gt;""" ##### prompt element 6: detailed task description rules # expand specific tasks want claude do, well rules claude might follow. # also give claude "out" answer know. # ideal show description rules friend make sure laid logically ambiguous words clearly defined. task_description = """write clear, concise answer question: &lt;question&gt; {question} &lt;/question&gt; couple paragraphs. possible, conclude single sentence directly answering user's question. however, sufficient information compiled research produce answer, may demur write "sorry, sufficient information hand answer question.".""" ##### prompt element 7: immediate task description request ##### # "remind" claude tell claude exactly expected immediately fulfill prompt's task. # also would put additional variables like user's question. # generally hurt reiterate claude immediate task. best toward end long prompt. # yield better results putting beginning. # also generally good practice put user's query close bottom prompt. immediate_task = "" ##### prompt element 8: precognition (thinking step step) # tasks multiple steps, good tell claude think step step giving answer # sometimes, might even say "before give answer..." make sure claude first. # necessary prompts, though included, best toward end long prompt right final immediate task request description. precognition = "before answer, pull relevant quotes research &lt;relevant_quotes&gt; tags." ##### prompt element 9: output formatting # specific way want claude's response formatted, clearly tell claude format is. # element may necessary depending task. # include it, putting toward end prompt better beginning. output_formatting = "put two-paragraph response &lt;answer&gt; tags." ##### prompt element 10: prefilling claude's response (if any) # space start claude's answer prefilled words steer claude's behavior response. # want prefill claude's response, must put `assistant` role api call. # element may necessary depending task. prefill = "&lt;relevant_quotes&gt;" ######################################## combine elements ######################################## prompt = "" task_context: prompt += f"""{task_context}""" tone_context: prompt += f"""\n\n{tone_context}""" input_data: prompt += f"""\n\n{input_data}""" examples: prompt += f"""\n\n{examples}""" task_description: prompt += f"""\n\n{task_description}""" immediate_task: prompt += f"""\n\n{immediate_task}""" precognition: prompt += f"""\n\n{precognition}""" output_formatting: prompt += f"""\n\n{output_formatting}""" # print full prompt print("--------------------------- full prompt variable substutions ---------------------------") print("user turn") print(prompt) print("\nassistant turn") print(prefill) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(prompt, prefill=prefill))</file><file name="Anthropic 1P/10.1_Appendix_Chaining Prompts.ipynb">#!/usr/bin/env python # coding: utf-8 # # appendix 10.1: chaining prompts # # - [lesson](#lesson) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key &amp; model_name variables ipython store get_ipython().run_line_magic('store', '-r api_key') get_ipython().run_line_magic('store', '-r model_name') client = anthropic.anthropic(api_key=api_key) # rewritten take messages list arbitrary length def get_completion(messages, system_prompt=""): message = client.messages.create( model=model_name, max_tokens=2000, temperature=0.0, system=system_prompt, messages=messages ) return message.content[0].text # --- # # ## lesson # # saying goes, "writing rewriting." turns out, **claude often improve accuracy response asked so**! # # many ways prompt claude "think again". ways feel natural ask human double check work also generally work claude. (check [prompt chaining documentation](https://docs.anthropic.com/claude/docs/chain-prompts) examples use prompt chaining.) # ### examples # # example, ask claude come ten words... one real word. # in[ ]: # initial prompt first_user = "name ten words end exact letters 'ab'." # api messages array messages = [ { "role": "user", "content": first_user } ] # store print claude's response first_response = get_completion(messages) print(first_response) # **asking claude make answer accurate** fixes error! # # below, we've pulled claude's incorrect response added another turn conversation asking claude fix previous answer. # in[ ]: second_user = "please find replacements 'words' real words." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # claude revising answer told to? start correct answer already? claude lose confidence? here, we've placed correct response place `first_response` asked double check again. # in[ ]: first_user = "name ten words end exact letters 'ab'." first_response = """here 10 words end letters 'ab': 1. cab 2. dab 3. grab 4. gab 5. jab 6. lab 7. nab 8. slab 9. tab 10. blab""" second_user = "please find replacements 'words' real words." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # may notice generate respnse block times, claude leaves words time, still occasionally changes words even though they're already correct. mitigate this? per chapter 8, give claude out! let's try one time. # in[ ]: first_user = "name ten words end exact letters 'ab'." first_response = """here 10 words end letters 'ab': 1. cab 2. dab 3. grab 4. gab 5. jab 6. lab 7. nab 8. slab 9. tab 10. blab""" second_user = "please find replacements 'words' real words. words real words, return original list." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # try generating responses code times see claude much better sticking guns now. # # also use prompt chaining **ask claude make responses better**. below, asked claude first write story, improve story wrote. personal tastes may vary, many might agree claude's second version better. # # first, let's generate claude's first version story. # in[ ]: # initial prompt first_user = "write three-sentence short story girl likes run." # api messages array messages = [ { "role": "user", "content": first_user } ] # store print claude's response first_response = get_completion(messages) print(first_response) # let's claude improve first draft. # in[ ]: second_user = "make story better." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # form substitution powerful. we've using substitution placeholders pass lists, words, claude's former responses, on. also **use substitution call "function calling," asking claude perform function, taking results function asking claude even afterward results**. works like substitution. next appendix. # # one example taking results one call claude plugging another, longer call. let's start first prompt (which includes prefilling claude's response time). # in[ ]: first_user = """find names text: "hey, jesse. me, erin. i'm calling party joey throwing tomorrow. keisha said would come think mel too.""" prefill = "&lt;names&gt;" # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": prefill } ] # store print claude's response first_response = get_completion(messages) print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(first_response) # let's pass list names another prompt. # in[ ]: second_user = "alphabetize list." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": prefill + "\n" + first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # learned prompt chaining, head appendix 10.2 learn implement function calling using prompt chaining. # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: # initial prompt first_user = "name ten words end exact letters 'ab'." # api messages array messages = [ { "role": "user", "content": first_user } ] # store print claude's response first_response = get_completion(messages) print(first_response) # in[ ]: second_user = "please find replacements 'words' real words." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # in[ ]: first_user = "name ten words end exact letters 'ab'." first_response = """here 10 words end letters 'ab': 1. cab 2. dab 3. grab 4. gab 5. jab 6. lab 7. nab 8. slab 9. tab 10. blab""" second_user = "please find replacements 'words' real words." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # in[ ]: first_user = "name ten words end exact letters 'ab'." first_response = """here 10 words end letters 'ab': 1. cab 2. dab 3. grab 4. gab 5. jab 6. lab 7. nab 8. slab 9. tab 10. blab""" second_user = "please find replacements 'words' real words. words real words, return original list." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # in[ ]: # initial prompt first_user = "write three-sentence short story girl likes run." # api messages array messages = [ { "role": "user", "content": first_user } ] # store print claude's response first_response = get_completion(messages) print(first_response) # in[ ]: second_user = "make story better." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages)) # in[ ]: first_user = """find names text: "hey, jesse. me, erin. i'm calling party joey throwing tomorrow. keisha said would come think mel too.""" prefill = "&lt;names&gt;" # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": prefill } ] # store print claude's response first_response = get_completion(messages) print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(first_response) # in[ ]: second_user = "alphabetize list." # api messages array messages = [ { "role": "user", "content": first_user }, { "role": "assistant", "content": prefill + "\n" + first_response }, { "role": "user", "content": second_user } ] # print claude's response print("------------------------ full messsages array variable substutions ------------------------") print(messages) print("\n------------------------------------- claude's response -------------------------------------") print(get_completion(messages))</file><file name="Anthropic 1P/10.2_Appendix_Tool Use.ipynb">#!/usr/bin/env python # coding: utf-8 # # appendix 10.2: tool use # # - [lesson](#lesson) # - [exercises](#exercises) # - [example playground](#example-playground) # # ## setup # # run following setup cell load api key establish `get_completion` helper function. # in[ ]: get_ipython().system('pip install anthropic') # import python's built-in regular expression library import import anthropic # retrieve api_key variable ipython store get_ipython().run_line_magic('store', '-r api_key') client = anthropic.anthropic(api_key=api_key) # rewrittten call claude 3 sonnet, generally better tool use, include stop_sequences def get_completion(messages, system_prompt="", prefill="",stop_sequences=none): message = client.messages.create( model="claude-3-sonnet-20240229", max_tokens=2000, temperature=0.0, system=system_prompt, messages=messages, stop_sequences=stop_sequences ) return message.content[0].text # --- # # ## lesson # # might seem conceptually complex first, tool use, a.k.a. function calling, actually quite simple! already know skills necessary implement tool use, really combination substitution prompt chaining. # # previous substitution exercises, substituted text prompts. tool use, substitute tool function results prompts. claude can't literally call access tools functions. instead, claude: # 1. output tool name arguments wants call # 2. halt response generation tool called # 3. reprompt appended tool results # function calling useful expands claude's capabilities enables claude handle much complex, multi-step tasks. # examples functions give claude: # - calculator # - word counter # - sql database querying data retrieval # - weather api # get claude tool use combining two elements: # # 1. system prompt, give claude explanation concept tool use well detailed descriptive list tools access # 2. control logic orchestrate execute claude's tool use requests # ### tool use roadmap # # *this lesson teaches current tool use format. however, updating improving tool use functionality near future, including:* # * *a streamlined format function definitions calls* # * *more robust error handilgj edge case coverage* # * *tighter integration rest api* # * *better reliability performance, especially complex tool use tasks* # ### examples # # enable tool use claude, start system prompt. special tool use system prompt, wet tell claude: # * basic premise tool use entails # * claude call use tools given # * detailed list tools access specific scenario # # here's first part system prompt, explaining tool use claude. part system prompt generalizable across instances prompting claude tool use. tool calling structure we're giving claude (`&lt;function_calls&gt; [...] &lt;/function_calls&gt;`) structure claude specifically trained use, recommend stick this. # in[ ]: system_prompt_tools_general_explanation = """you access set functions use answer user's question. includes access sandboxed computing environment. currently ability inspect files interact external resources, except invoking functions. invoke one functions writing "&lt;function_calls&gt;" block like following part reply user: &lt;function_calls&gt; &lt;invoke name="$function_name"&gt; &lt;antml:parameter name="$parameter_name"&gt;$parameter_value&lt;/parameter&gt; ... &lt;/invoke&gt; &lt;nvoke name="$function_name2"&gt; ... &lt;/invoke&gt; &lt;/function_calls&gt; string scalar parameters specified is, lists objects use json format. note spaces string values stripped. output expected valid xml parsed regular expressions. output and/or errors appear subsequent "&lt;function_results&gt;" block, remain part reply user. may continue composing rest reply user, respond errors, make function calls appropriate. "&lt;function_results&gt;" appear function calls, likely malformatted recognized call.""" # here's second part system prompt, defines exact tools claude access specific situation. example, giving claude calculator tool, takes three parameters: two operands operator. # # combine two parts system prompt. # in[ ]: system_prompt_tools_specific_tools = """here functions available jsonschema format: &lt;tools&gt; &lt;tool_description&gt; &lt;tool_name&gt;calculator&lt;/tool_name&gt; &lt;description&gt; calculator function basic arithmetic. supports addition, subtraction, multiplication &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;first_operand&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;first operand (before operator)&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;second_operand&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;second operand (after operator)&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;operator&lt;/name&gt; &lt;type&gt;str&lt;/type&gt; &lt;description&gt;the operation perform. must either +, -, *, /&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;/tools&gt; """ system_prompt = system_prompt_tools_general_explanation + system_prompt_tools_specific_tools # give claude question requires use `calculator` tool. use `&lt;function_calls\&gt;` `stop_sequences` detect claude calls function. # in[ ]: multiplication_message = { "role": "user", "content": "multiply 1,984,135 9,343,116" } stop_sequences = ["&lt;/function_calls&gt;"] # get claude's response function_calling_response = get_completion([multiplication_message], system_prompt=system_prompt, stop_sequences=stop_sequences) print(function_calling_response) # now, extract parameters claude's function call actually run function claude's behalf. # # first we'll define function's code. # in[ ]: def do_pairwise_arithmetic(num1, num2, operation): operation == '+': return num1 + num2 elif operation == "-": return num1 - num2 elif operation == "*": return num1 * num2 elif operation == "/": return num1 / num2 else: return "error: operation supported." # we'll extract parameters claude's function call response. parameters exist, run calculator tool. # in[ ]: def find_parameter(message, parameter_name): parameter_start_string = f"name=\"{parameter_name}\"&gt;" start = message.index(parameter_start_string) start == -1: return none start &gt; 0: start = start + len(parameter_start_string) end = start message[end] != "&lt;": end += 1 return message[start:end] first_operand = find_parameter(function_calling_response, "first_operand") second_operand = find_parameter(function_calling_response, "second_operand") operator = find_parameter(function_calling_response, "operator") first_operand second_operand operator: result = do_pairwise_arithmetic(int(first_operand), int(second_operand), operator) print("---------------- result ----------------") print(f"{result:,}") # result, properly format result pass back claude, claude understands tool result relation to. set format claude trained recognize: # ``` # &lt;function_results&gt; # &lt;result&gt; # &lt;tool_name&gt;{tool_name}&lt;/tool_name&gt; # &lt;stdout&gt; # {tool_result} # &lt;/stdout&gt; # &lt;/result&gt; # &lt;/function_results&gt; # ``` # # run cell format tool result structure. # in[ ]: def construct_successful_function_run_injection_prompt(invoke_results): constructed_prompt = ( "&lt;function_results&gt;\n" + '\n'.join( f"&lt;result&gt;\n&lt;tool_name&gt;{res['tool_name']}&lt;/tool_name&gt;\n&lt;stdout&gt;\n{res['tool_result']}\n&lt;/stdout&gt;\n&lt;/result&gt;" res invoke_results ) + "\n&lt;/function_results&gt;" ) return constructed_prompt formatted_results = [{ 'tool_name': 'do_pairwise_arithmetic', 'tool_result': result }] function_results = construct_successful_function_run_injection_prompt(formatted_results) print(function_results) # send result back claude appending result message chain before, we're good! # in[ ]: full_first_response = function_calling_response + "&lt;/function_calls&gt;" # construct full conversation messages = [multiplication_message, { "role": "assistant", "content": full_first_response }, { "role": "user", "content": function_results }] # print claude's response final_response = get_completion(messages, system_prompt=system_prompt, stop_sequences=stop_sequences) print("------------- final result -------------") print(final_response) # congratulations running entire tool use chain end end! # # give claude question require using given tool all? # in[ ]: non_multiplication_message = { "role": "user", "content": "tell capital france." } stop_sequences = ["&lt;/function_calls&gt;"] # get claude's response function_calling_response = get_completion([non_multiplication_message], system_prompt=system_prompt, stop_sequences=stop_sequences) print(function_calling_response) # success! see, claude knew call function needed. # # would like experiment lesson prompts without changing content above, scroll way bottom lesson notebook visit [**example playground**](#example-playground). # --- # # ## exercises # - [exercise 10.2.1 - sql](#exercise-1021---sql) # ### exercise 10.2.1 - sql # exercise, writing tool use prompt querying writing world's smallest "database". here's initialized database, really dictionary. # in[ ]: db = { "users": [ {"id": 1, "name": "alice", "email": "alice@example.com"}, {"id": 2, "name": "bob", "email": "bob@example.com"}, {"id": 3, "name": "charlie", "email": "charlie@example.com"} ], "products": [ {"id": 1, "name": "widget", "price": 9.99}, {"id": 2, "name": "gadget", "price": 14.99}, {"id": 3, "name": "doohickey", "price": 19.99} ] } # code functions write database. # in[ ]: def get_user(user_id): user db["users"]: user["id"] == user_id: return user return none def get_product(product_id): product db["products"]: product["id"] == product_id: return product return none def add_user(name, email): user_id = len(db["users"]) + 1 user = {"id": user_id, "name": name, "email": email} db["users"].append(user) return user def add_product(name, price): product_id = len(db["products"]) + 1 product = {"id": product_id, "name": name, "price": price} db["products"].append(product) return product # solve exercise, start defining system prompt like `system_prompt_tools_specific_tools` above. make sure include name description tool, along name type description parameter function. we've given starting scaffolding below. # in[ ]: system_prompt_tools_specific_tools_sql = """ """ system_prompt = system_prompt_tools_general_explanation + system_prompt_tools_specific_tools_sql # ready, try tool definition system prompt examples below. run cell! # in[ ]: examples = [ "add user database named deborah.", "add product database named thingo", "tell name user 2", "tell name product 3" ] example examples: message = { "role": "user", "content": example } # get &amp; print claude's response function_calling_response = get_completion([message], system_prompt=system_prompt, stop_sequences=stop_sequences) print(example, "\n----------\n\n", function_calling_response, "\n*********\n*********\n*********\n\n") # right, function calling messages call `add_user`, `add_product`, `get_user`, `get_product` functions correctly. # # extra credit, add code cells write parameter-parsing code. call functions parameters claude gives see state "database" call. # want see possible solution, run cell below! # in[ ]: hints import exercise_10_2_1_solution; print(exercise_10_2_1_solution) # ### congrats! # # congratulations learning tool use function calling! head last appendix section would like learn search &amp; rag. # --- # # ## example playground # # area experiment freely prompt examples shown lesson tweak prompts see may affect claude's responses. # in[ ]: system_prompt_tools_general_explanation = """you access set functions use answer user's question. includes access sandboxed computing environment. currently ability inspect files interact external resources, except invoking functions. invoke one functions writing "&lt;function_calls&gt;" block like following part reply user: &lt;function_calls&gt; &lt;invoke name="$function_name"&gt; &lt;antml:parameter name="$parameter_name"&gt;$parameter_value&lt;/parameter&gt; ... &lt;/invoke&gt; &lt;nvoke name="$function_name2"&gt; ... &lt;/invoke&gt; &lt;/function_calls&gt; string scalar parameters specified is, lists objects use json format. note spaces string values stripped. output expected valid xml parsed regular expressions. output and/or errors appear subsequent "&lt;function_results&gt;" block, remain part reply user. may continue composing rest reply user, respond errors, make function calls appropriate. "&lt;function_results&gt;" appear function calls, likely malformatted recognized call.""" # in[ ]: system_prompt_tools_specific_tools = """here functions available jsonschema format: &lt;tools&gt; &lt;tool_description&gt; &lt;tool_name&gt;calculator&lt;/tool_name&gt; &lt;description&gt; calculator function basic arithmetic. supports addition, subtraction, multiplication &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;first_operand&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;first operand (before operator)&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;second_operand&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;second operand (after operator)&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;operator&lt;/name&gt; &lt;type&gt;str&lt;/type&gt; &lt;description&gt;the operation perform. must either +, -, *, /&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;/tools&gt; """ system_prompt = system_prompt_tools_general_explanation + system_prompt_tools_specific_tools # in[ ]: multiplication_message = { "role": "user", "content": "multiply 1,984,135 9,343,116" } stop_sequences = ["&lt;/function_calls&gt;"] # get claude's response function_calling_response = get_completion([multiplication_message], system_prompt=system_prompt, stop_sequences=stop_sequences) print(function_calling_response) # in[ ]: def do_pairwise_arithmetic(num1, num2, operation): operation == '+': return num1 + num2 elif operation == "-": return num1 - num2 elif operation == "*": return num1 * num2 elif operation == "/": return num1 / num2 else: return "error: operation supported." # in[ ]: def find_parameter(message, parameter_name): parameter_start_string = f"name=\"{parameter_name}\"&gt;" start = message.index(parameter_start_string) start == -1: return none start &gt; 0: start = start + len(parameter_start_string) end = start message[end] != "&lt;": end += 1 return message[start:end] first_operand = find_parameter(function_calling_response, "first_operand") second_operand = find_parameter(function_calling_response, "second_operand") operator = find_parameter(function_calling_response, "operator") first_operand second_operand operator: result = do_pairwise_arithmetic(int(first_operand), int(second_operand), operator) print("---------------- result ----------------") print(f"{result:,}") # in[ ]: def construct_successful_function_run_injection_prompt(invoke_results): constructed_prompt = ( "&lt;function_results&gt;\n" + '\n'.join( f"&lt;result&gt;\n&lt;tool_name&gt;{res['tool_name']}&lt;/tool_name&gt;\n&lt;stdout&gt;\n{res['tool_result']}\n&lt;/stdout&gt;\n&lt;/result&gt;" res invoke_results ) + "\n&lt;/function_results&gt;" ) return constructed_prompt formatted_results = [{ 'tool_name': 'do_pairwise_arithmetic', 'tool_result': result }] function_results = construct_successful_function_run_injection_prompt(formatted_results) print(function_results) # in[ ]: full_first_response = function_calling_response + "&lt;/function_calls&gt;" # construct full conversation messages = [multiplication_message, { "role": "assistant", "content": full_first_response }, { "role": "user", "content": function_results }] # print claude's response final_response = get_completion(messages, system_prompt=system_prompt, stop_sequences=stop_sequences) print("------------- final result -------------") print(final_response) # in[ ]: non_multiplication_message = { "role": "user", "content": "tell capital france." } stop_sequences = ["&lt;/function_calls&gt;"] # get claude's response function_calling_response = get_completion([non_multiplication_message], system_prompt=system_prompt, stop_sequences=stop_sequences) print(function_calling_response)</file><file name="Anthropic 1P/10.3_Appendix_Search &amp; Retrieval.ipynb">#!/usr/bin/env python # coding: utf-8 # # appendix 10.3: search &amp; retrieval # # know use claude **search wikipedia you**? claude find retrieve articles, point also use claude summarize synthesize them, write novel content found, much more. wikipedia! also search docs, whether stored plain text embedded vector datastore. # # see [rag cookbook examples](https://github.com/anthropics/anthropic-cookbook/blob/main/third_party/wikipedia/wikipedia-search-cookbook.ipynb) learn supplement claude's knowledge improve accuracy relevance claude's responses data retrieved vector databases, wikipedia, internet, more. there, also learn use certain [embeddings](https://docs.anthropic.com/claude/docs/embeddings) vector database tools. # # interested learning advanced rag architectures using claude, check [claude 3 technical presentation slides rag architectures](https://docs.google.com/presentation/d/1zxksi7llubrzyca-_znwqu8ddyvhhlkqgscvzazruns/edit#slide=id.g2c736259dac_63_782).</file><file name="Anthropic 1P/hints.py">exercise_1_1_hint = """the grading function exercise looking answer contains exact arabic numerals "1", "2", "3". often get claude want simply asking.""" exercise_1_2_hint = """the grading function exercise looking answers contain "soo" "giggles". many ways solve this, asking!""" exercise_2_1_hint ="""the grading function exercise looking answer includes word "hola". ask claude reply spanish like would speaking human. simple!""" exercise_2_2_hint = """the grading function exercise looking exactly "michael jordan". would ask another human this? reply words? reply name nothing else? several ways approach answer.""" exercise_2_3_hint = """the grading function cell looking response equal greater 800 words. llms great counting words yet, may overshoot target.""" exercise_3_1_hint = """the grading function exercise looking answer includes words "incorrect" "not correct". give claude role might make claude better solving math problems!""" exercise_4_1_hint = """the grading function exercise looking solution includes words "haiku" "pig". forget include exact phrase "{topic}" wherever want topic substituted in. changing "topic" variable value make claude write haiku different topic.""" exercise_4_2_hint = """the grading function exercise looking response includes word "brown". surround "{question}" xml tags, change claude's response?""" exercise_4_3_hint = """the grading function exercise looking response includes word "brown". try removing one word section characters time, starting parts make least sense. one word time also help see much claude can't parse understand.""" exercise_5_1_hint = """the grading function exercise looking response includes word "warrior". write words claude's voice steer claude act way want to. instance, instead "stephen curry best because," could write "stephen curry best three reasons why. 1:""" exercise_5_2_hint = """the grading function looks response 5 lines length includes words "cat" "&lt;haiku&gt;". start simple. currently, prompt asks claude one haiku. change ask two (or even more). run formatting issues, change prompt fix already gotten claude write one haiku.""" exercise_5_3_hint = """the grading function exercise looking response contains words "tail", "cat", "&lt;haiku&gt;". helpful break exercise several steps. 1. modify initial prompt template claude writes two poems. 2. give claude indicators poems about, instead writing subjects directly (e.g., dog, cat, etc.), replace subjects keywords "{animal1}" "{animal2}". 3. run prompt make sure full prompt variable substitutions words correctly substituted. not, check make sure {bracket} tags spelled correctly formatted correctly single moustache brackets.""" exercise_6_1_hint = """the grading function exercise looking correct categorization letter + closing parentheses first letter name category, "c) b" "b) b" etc. let's take exercise step step: 1. claude know categories want use? tell it! include four categories want directly prompt. sure include parenthetical letters well easy classification. feel free use xml tags organize prompt make clear claude categories begin end. 2. try cut superfluous text claude immediately answers classification classification. several ways this, speaking claude (providing anything beginning sentence single open parenthesis claude knows want parenthetical letter first part answer) telling claude want classification classification, skipping preamble. refer chapters 2 5 want refresher techniques. 3. claude may still incorrectly categorizing including names categories answers. fix telling claude include full category name answer.) 4. sure still {email} somewhere prompt template properly substitute emails claude evaluate.""" exercise_6_1_solution = """ user turn please classify email following categories: {email} include extra words except category. &lt;categories&gt; (a) pre-sale question (b) broken defective item (c) billing question (d) (please explain) &lt;/categories&gt; assistant turn ( """ exercise_6_2_hint = """the grading function exercise looking correct letter wrapped &lt;answer&gt; tags, "&lt;answer&gt;b&lt;/answer&gt;". correct categorization letters exercise. sometimes simplest way go give claude example want output look. forget wrap example &lt;example&gt;&lt;/example&gt; tags! forget prefill claude's response anything, claude actually output part response.""" exercise_7_1_hint = """you're going write example emails classify claude (with exact formatting want). multiple ways this. guidelines below. 1. try least two example emails. claude need example categories, examples long. helpful examples whatever think trickier categories (which asked think bottom chapter 6 exercise 1). xml tags help separate examples rest prompt, although unnecessary. 2. make sure example answer formatting exactly format want claude use, claude emulate format well. format make claude's answer ends letter category. wherever put {email} placeholder, make sure formatted exactly like example emails. 3. make sure still categories listed within prompt itself, otherwise claude know categories reference, well {email} placeholder substitution.""" exercise_7_1_solution = """ user turn please classify emails following categories, include explanations: &lt;categories&gt; (a) pre-sale question (b) broken defective item (c) billing question (d) (please explain) &lt;/categories&gt; examples correct answer formatting: &lt;examples&gt; q: much cost buy mixmaster4000? a: correct category is: q: mixmaster turn on. a: correct category is: b q: please remove mailing list. a: correct category is: &lt;/examples&gt; email categorize: {email} assistant turn correct category is: """ exercise_8_1_hint = """the grading function exercise looking response contains phrase "i not", "i don't", "unfortunately". claude know answer?""" exercise_8_2_hint = """the grading function exercise looking response contains phrase "49-fold". make claude show work thought process first extracting relevant quotes seeing whether quotes provide sufficient evidence. refer back chapter 8 lesson want refresher.""" exercise_9_1_solution = """ master tax acountant. task answer user questions using provided reference documentation. material use answer user's question: &lt;docs&gt; {tax_code} &lt;/docs&gt; example respond: &lt;example&gt; &lt;question&gt; defines "qualified" employee? &lt;/question&gt; &lt;answer&gt; &lt;quotes&gt;for purposes subsection (a)in general term "qualified employee" means individual (i)is excluded employee, (ii)agrees election made subsection meet requirements determined secretary necessary ensure withholding requirements corporation chapter 24 respect qualified stock met.&lt;/quotes&gt; &lt;answer&gt;according provided documentation, "qualified employee" defined individual who: 1. "excluded employee" defined documentation. 2. agrees meet requirements determined secretary ensure corporation's withholding requirements chapter 24 met respect qualified stock.&lt;/answer&gt; &lt;/example&gt; first, gather quotes &lt;quotes&gt;&lt;/quotes&gt; tags relevant answering user's question. quotes, write "no relevant quotes found". insert two paragraph breaks answering user question within &lt;answer&gt;&lt;/answer&gt; tags. answer user's question confident quotes &lt;quotes&gt;&lt;/quotes&gt; tags support answer. not, tell user unfortunately enough information answer user's question. user question: {question} """ exercise_9_2_solution = """ codebot, helpful ai assistant finds issues code suggests possible improvements. act socratic tutor helps user learn. given code user. please following: 1. identify issues code. put issue inside separate &lt;issues&gt; tags. 2. invite user write revised version code fix issue. here's example: &lt;example&gt; &lt;code&gt; def calculate_circle_area(radius): return (3.14 * radius) ** 2 &lt;/code&gt; &lt;issues&gt; &lt;issue&gt; 3.14 squared actually radius squared&gt; &lt;/issue&gt; &lt;response&gt; that's almost right, there's issue related order operations. may help write formula circle look closely parentheses code. &lt;/response&gt; &lt;/example&gt; code analyze: &lt;code&gt; {code} &lt;/code&gt; find relevant issues write socratic tutor-style response. give user much help! instead, give guidance find correct solution themselves. put issue &lt;issue&gt; tags put final response &lt;response&gt; tags. """ exercise_10_2_1_solution = """system_prompt = system_prompt_tools_general_explanation + \"""here functions available jsonschema format: &lt;tools&gt; &lt;tool_description&gt; &lt;tool_name&gt;get_user&lt;/tool_name&gt; &lt;description&gt; retrieves user database user id. &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;user_id&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;the id user retrieve.&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;tool_description&gt; &lt;tool_name&gt;get_product&lt;/tool_name&gt; &lt;description&gt; retrieves product database product id. &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;product_id&lt;/name&gt; &lt;type&gt;int&lt;/type&gt; &lt;description&gt;the id product retrieve.&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;tool_description&gt; &lt;tool_name&gt;add_user&lt;/tool_name&gt; &lt;description&gt; adds new user database. &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;name&lt;/name&gt; &lt;type&gt;str&lt;/type&gt; &lt;description&gt;the name user.&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;email&lt;/name&gt; &lt;type&gt;str&lt;/type&gt; &lt;description&gt;the email address user.&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;tool_description&gt; &lt;tool_name&gt;add_product&lt;/tool_name&gt; &lt;description&gt; adds new product database. &lt;/description&gt; &lt;parameters&gt; &lt;parameter&gt; &lt;name&gt;name&lt;/name&gt; &lt;type&gt;str&lt;/type&gt; &lt;description&gt;the name product.&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;price&lt;/name&gt; &lt;type&gt;float&lt;/type&gt; &lt;description&gt;the price product.&lt;/description&gt; &lt;/parameter&gt; &lt;/parameters&gt; &lt;/tool_description&gt; &lt;/tools&gt; """</file></source>