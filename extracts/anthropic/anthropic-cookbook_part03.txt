                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#why-chain-prompts\"]",
              "prompt": "What are two key advantages of prompt engineering over fine-tuning when it comes to model comprehension and general knowledge preservation?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are two key advantages of prompt engineering over fine-tuning when it comes to model comprehension and general knowledge preservation?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #68"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]",
            "What are two key advantages of prompt engineering over fine-tuning when it comes to model comprehension and general knowledge preservation?"
          ]
        },
        {
          "description": "Row #69",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#api-model-names\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#model-availability\"]",
              "prompt": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1395,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#accessing-bedrock\",\"https://docs.anthropic.com/en/docs/welcome#get-started\",\"https://docs.anthropic.com/en/docs/quickstart#prerequisites\"]",
              "prompt": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1426,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#subscribe-to-anthropic-models\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\",\"https://docs.anthropic.com/en/docs/quickstart#prerequisites\"]",
              "prompt": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 4005,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-and-configure-the-aws-cli\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #69"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-and-configure-the-aws-cli\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\"]",
            "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?"
          ]
        },
        {
          "description": "Row #70",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#model-availability\",\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\"]",
              "prompt": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1334,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#model-availability\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-names\"]",
              "prompt": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1312,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#api-model-names\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#model-availability\"]",
              "prompt": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 8622,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#subscribe-to-anthropic-models\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #70"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#subscribe-to-anthropic-models\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\"]",
            "How can you check which Claude models are available in a specific AWS region using the AWS CLI?"
          ]
        },
        {
          "description": "Row #71",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\"]",
              "prompt": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1482,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\"]",
              "prompt": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1355,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\"]",
              "prompt": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 1,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #71"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\"]",
            "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?"
          ]
        },
        {
          "description": "Row #72",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\"]",
              "prompt": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1537,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\"]",
              "prompt": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1577,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\"]",
              "prompt": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3352,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #72"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\"]",
            "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?"
          ]
        },
        {
          "description": "Row #73",
          "outputs": [
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#evaluate-image-size\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#ensuring-image-quality\"]",
              "prompt": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1222,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\",\"https://docs.anthropic.com/en/api/rate-limits#about-our-limits\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#ensuring-image-quality\"]",
              "prompt": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1250,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\",\"https://docs.anthropic.com/en/api/rate-limits#about-our-limits\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#ensuring-image-quality\"]",
              "prompt": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #73"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\"]",
            "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?"
          ]
        },
        {
          "description": "Row #74",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\",\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\"]",
              "prompt": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1368,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\"]",
              "prompt": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1295,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#choosing-the-right-model\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\"]",
              "prompt": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3757,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #74"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\"]",
            "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?"
          ]
        },
        {
          "description": "Row #75",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\"]",
              "prompt": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1295,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\"]",
              "prompt": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1291,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\"]",
              "prompt": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 1,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #75"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\"]",
            "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?"
          ]
        },
        {
          "description": "Row #76",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#anthropic-cookbook\"]",
              "prompt": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1373,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/quickstart#next-steps\",\"https://docs.anthropic.com/en/api/#accessing-the-api\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\"]",
              "prompt": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1494,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#anthropic-cookbook\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\"]",
              "prompt": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 4931,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #76"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\"]",
            "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?"
          ]
        },
        {
          "description": "Row #77",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\",\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#use-retrieval-for-contextual-consistency\"]",
              "prompt": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1607,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\",\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/resources/glossary#tokens\"]",
              "prompt": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1554,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\",\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#2-optimize-prompt-and-output-length\"]",
              "prompt": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 9206,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #77"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\"]",
            "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?"
          ]
        },
        {
          "description": "Row #78",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/intro-to-claude#implementing-claude\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#why-use-claude-for-sheets\"]",
              "prompt": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1316,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#more-resources\"]",
              "prompt": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1334,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#more-resources\"]",
              "prompt": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 1,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #78"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases\"]",
            "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?"
          ]
        },
        {
          "description": "Row #79",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\"]",
              "prompt": "Which Claude model has the fastest comparative latency according to the comparison tables?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1229,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\",\"https://docs.anthropic.com/en/docs/welcome#models\"]",
              "prompt": "Which Claude model has the fastest comparative latency according to the comparison tables?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1253,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\",\"https://docs.anthropic.com/en/docs/welcome#models\"]",
              "prompt": "Which Claude model has the fastest comparative latency according to the comparison tables?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "Which Claude model has the fastest comparative latency according to the comparison tables?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #79"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\"]",
            "Which Claude model has the fastest comparative latency according to the comparison tables?"
          ]
        },
        {
          "description": "Row #80",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]",
              "prompt": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1414,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]",
              "prompt": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1410,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]",
              "prompt": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 5221,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #80"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\"]",
            "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?"
          ]
        },
        {
          "description": "Row #81",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#why-use-role-prompting\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#why-use-xml-tags\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]",
              "prompt": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1307,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#why-use-role-prompting\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#why-use-xml-tags\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]",
              "prompt": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1296,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#why-use-role-prompting\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#why-use-xml-tags\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]",
              "prompt": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 1,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #81"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]",
            "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?"
          ]
        },
        {
          "description": "Row #82",
          "outputs": [
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#choosing-a-model\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-family\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\"]",
              "prompt": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1328,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#choosing-a-model\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-family\"]",
              "prompt": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1248,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#choosing-a-model\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-family\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\"]",
              "prompt": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #82"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples\"]",
            "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?"
          ]
        },
        {
          "description": "Row #83",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#introduction\"]",
              "prompt": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1513,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#introduction\"]",
              "prompt": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1449,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#defining-the-task\"]",
              "prompt": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3533,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #83"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]",
            "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?"
          ]
        },
        {
          "description": "Row #84",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#evaluation-metrics\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology\"]",
              "prompt": "How should you evaluate a model's performance on a ticket routing classifier?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 6594,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\"]",
              "prompt": "How should you evaluate a model's performance on a ticket routing classifier?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1315,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#implement-claude-for-classification\"]",
              "prompt": "How should you evaluate a model's performance on a ticket routing classifier?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3437,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How should you evaluate a model's performance on a ticket routing classifier?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #84"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]",
            "How should you evaluate a model's performance on a ticket routing classifier?"
          ]
        },
        {
          "description": "Row #85",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-workflow\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-interactive-tutorial\"]",
              "prompt": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1085,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-workflow\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-interactive-tutorial\"]",
              "prompt": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-workflow\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-interactive-tutorial\"]",
              "prompt": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #85"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\"]",
            "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?"
          ]
        },
        {
          "description": "Row #86",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/welcome#models\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#advantages-of-using-claude\"]",
              "prompt": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1370,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/welcome#models\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#advantages-of-using-claude\"]",
              "prompt": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1219,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#rlhf\"]",
              "prompt": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3803,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #86"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]",
            "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?"
          ]
        },
        {
          "description": "Row #87",
          "outputs": [
            {
              "pass": true,
              "score": 0.6666666666666666,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#before-you-try-to-reduce-prompt-leak\"]",
              "prompt": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1375,
              "gradingResult": {
                "pass": true,
                "score": 0.6666666666666666,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 0.6666666666666666 \n F1 Score: 0.6666666666666666 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Recall is 0.6666666666666666",
                        "named_scores": {
                          "Recall": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "F1 is 0.6666666666666666",
                        "named_scores": {
                          "F1": 0.6666666666666666
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Recall is 0.6666666666666666",
                    "named_scores": {
                      "Recall": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "F1 is 0.6666666666666666",
                    "named_scores": {
                      "F1": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.6666666666666666,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#before-you-try-to-reduce-prompt-leak\"]",
              "prompt": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1393,
              "gradingResult": {
                "pass": true,
                "score": 0.6666666666666666,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 0.6666666666666666 \n F1 Score: 0.6666666666666666 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Recall is 0.6666666666666666",
                        "named_scores": {
                          "Recall": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "F1 is 0.6666666666666666",
                        "named_scores": {
                          "F1": 0.6666666666666666
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Recall is 0.6666666666666666",
                    "named_scores": {
                      "Recall": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "F1 is 0.6666666666666666",
                    "named_scores": {
                      "F1": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.6666666666666666,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#before-you-try-to-reduce-prompt-leak\"]",
              "prompt": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.6666666666666666,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 0.6666666666666666 \n F1 Score: 0.6666666666666666 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Recall is 0.6666666666666666",
                        "named_scores": {
                          "Recall": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "F1 is 0.6666666666666666",
                        "named_scores": {
                          "F1": 0.6666666666666666
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Recall is 0.6666666666666666",
                    "named_scores": {
                      "Recall": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "F1 is 0.6666666666666666",
                    "named_scores": {
                      "F1": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #87"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]",
            "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?"
          ]
        },
        {
          "description": "Row #88",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/docs/about-claude/models#get-started-with-claude\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#api-model-names\"]",
              "prompt": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1721,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#accessing-vertex-ai\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/docs/about-claude/models#get-started-with-claude\"]",
              "prompt": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1621,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#install-an-sdk-for-accessing-vertex-ai\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#model-availability\"]",
              "prompt": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3309,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#accessing-vertex-ai\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #88"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#accessing-vertex-ai\"]",
            "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?"
          ]
        },
        {
          "description": "Row #89",
          "outputs": [
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#more-resources\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\",\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\"]",
              "prompt": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1471,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#more-resources\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\"]",
              "prompt": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1466,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#before-prompt-engineering\"]",
              "prompt": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3911,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #89"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\"]",
            "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?"
          ]
        },
        {
          "description": "Row #90",
          "outputs": [
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-5-family\"]",
              "prompt": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1367,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-5-family\"]",
              "prompt": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1388,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-5-family\"]",
              "prompt": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3867,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #90"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\"]",
            "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?"
          ]
        },
        {
          "description": "Row #91",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#controlling-claudes-output\",\"https://docs.anthropic.com/en/docs/resources/glossary#tokens\"]",
              "prompt": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1305,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.8,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\",\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\",\"https://docs.anthropic.com/en/docs/resources/glossary#tokens\"]",
              "prompt": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1243,
              "gradingResult": {
                "pass": true,
                "score": 0.8,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 1.0 \n F1 Score: 0.8 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.8,
                        "reason": "F1 is 0.8",
                        "named_scores": {
                          "F1": 0.8
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.8,
                    "reason": "F1 is 0.8",
                    "named_scores": {
                      "F1": 0.8
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\",\"https://docs.anthropic.com/en/api/rate-limits#rate-limits\",\"https://docs.anthropic.com/en/docs/resources/glossary#tokens\"]",
              "prompt": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 4162,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #91"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]",
            "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?"
          ]
        },
        {
          "description": "Row #92",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/welcome#models\",\"https://docs.anthropic.com/en/docs/resources/glossary#tokens\"]",
              "prompt": "What does the temperature parameter do when working with large language models?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1355,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#controlling-claudes-output\",\"https://docs.anthropic.com/en/docs/welcome#models\"]",
              "prompt": "What does the temperature parameter do when working with large language models?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1363,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#controlling-claudes-output\",\"https://docs.anthropic.com/en/docs/welcome#models\"]",
              "prompt": "What does the temperature parameter do when working with large language models?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What does the temperature parameter do when working with large language models?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#2-optimize-prompt-and-output-length\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #92"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#2-optimize-prompt-and-output-length\"]",
            "What does the temperature parameter do when working with large language models?"
          ]
        },
        {
          "description": "Row #93",
          "outputs": [
            {
              "pass": true,
              "score": 0.3333333333333333,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#claude-for-sheets-usage-examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#get-started-with-claude-for-sheets\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\"]",
              "prompt": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1675,
              "gradingResult": {
                "pass": true,
                "score": 0.3333333333333333,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.3333333333333333 \n F1 Score: 0.3333333333333333 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Recall is 0.3333333333333333",
                        "named_scores": {
                          "Recall": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "F1 is 0.3333333333333333",
                        "named_scores": {
                          "F1": 0.3333333333333333
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Recall is 0.3333333333333333",
                    "named_scores": {
                      "Recall": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "F1 is 0.3333333333333333",
                    "named_scores": {
                      "F1": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.3333333333333333,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#get-started-with-claude-for-sheets\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#optional-function-parameters\"]",
              "prompt": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1635,
              "gradingResult": {
                "pass": true,
                "score": 0.3333333333333333,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.3333333333333333 \n F1 Score: 0.3333333333333333 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Recall is 0.3333333333333333",
                        "named_scores": {
                          "Recall": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "F1 is 0.3333333333333333",
                        "named_scores": {
                          "F1": 0.3333333333333333
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Recall is 0.3333333333333333",
                    "named_scores": {
                      "Recall": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "F1 is 0.3333333333333333",
                    "named_scores": {
                      "F1": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.3333333333333333,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#optional-function-parameters\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#advanced-use\"]",
              "prompt": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3207,
              "gradingResult": {
                "pass": true,
                "score": 0.3333333333333333,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.3333333333333333 \n F1 Score: 0.3333333333333333 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Recall is 0.3333333333333333",
                        "named_scores": {
                          "Recall": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "F1 is 0.3333333333333333",
                        "named_scores": {
                          "F1": 0.3333333333333333
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Recall is 0.3333333333333333",
                    "named_scores": {
                      "Recall": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "F1 is 0.3333333333333333",
                    "named_scores": {
                      "F1": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#tips-for-effective-evaluation\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #93"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#tips-for-effective-evaluation\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\"]",
            "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?"
          ]
        },
        {
          "description": "Row #94",
          "outputs": [
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#prefill-claudes-response\"]",
              "prompt": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1347,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\"]",
              "prompt": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1293,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.5,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\"]",
              "prompt": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 4071,
              "gradingResult": {
                "pass": true,
                "score": 0.5,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 1.0 \n F1 Score: 0.5 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "F1 is 0.5",
                        "named_scores": {
                          "F1": 0.5
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "F1 is 0.5",
                    "named_scores": {
                      "F1": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #94"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\"]",
            "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?"
          ]
        },
        {
          "description": "Row #95",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/intro-to-claude#start-building-with-claude\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\"]",
              "prompt": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1530,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#prompt-examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\"]",
              "prompt": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1487,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#anthropic-cookbook\",\"https://docs.anthropic.com/en/api/messages-examples#vision\"]",
              "prompt": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 5134,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #95"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples\"]",
            "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?"
          ]
        },
        {
          "description": "Row #96",
          "outputs": [
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/docs/quickstart#set-your-api-key\",\"https://docs.anthropic.com/en/docs/quickstart#prerequisites\",\"https://docs.anthropic.com/en/api/#authentication\"]",
              "prompt": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1355,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/#authentication\",\"https://docs.anthropic.com/en/docs/quickstart#set-your-api-key\",\"https://docs.anthropic.com/en/api/client-sdks#typescript\"]",
              "prompt": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1357,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/#authentication\",\"https://docs.anthropic.com/en/docs/quickstart#set-your-api-key\",\"https://docs.anthropic.com/en/api/client-sdks#typescript\"]",
              "prompt": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 1,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/client-sdks#typescript\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #96"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/client-sdks#typescript\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]",
            "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?"
          ]
        },
        {
          "description": "Row #97",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#before-prompt-engineering\",\"https://docs.anthropic.com/en/docs/resources/glossary#hhh\"]",
              "prompt": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1538,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#before-prompt-engineering\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#more-resources\"]",
              "prompt": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1545,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#advantages-of-using-claude\",\"https://docs.anthropic.com/en/docs/about-claude/models#prompt-and-output-performance\"]",
              "prompt": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3868,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #97"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\"]",
            "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?"
          ]
        },
        {
          "description": "Row #98",
          "outputs": [
            {
              "pass": true,
              "score": 0.3333333333333333,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/welcome#models\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]",
              "prompt": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1350,
              "gradingResult": {
                "pass": true,
                "score": 0.3333333333333333,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.3333333333333333 \n F1 Score: 0.3333333333333333 \n MRR: 0.3333333333333333",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "MRR is 0.3333333333333333",
                        "named_scores": {
                          "MRR": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Recall is 0.3333333333333333",
                        "named_scores": {
                          "Recall": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "F1 is 0.3333333333333333",
                        "named_scores": {
                          "F1": 0.3333333333333333
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "MRR is 0.3333333333333333",
                    "named_scores": {
                      "MRR": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Recall is 0.3333333333333333",
                    "named_scores": {
                      "Recall": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "F1 is 0.3333333333333333",
                    "named_scores": {
                      "F1": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": false,
              "score": 0,
              "namedScores": {},
              "text": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0\n---\n[\"https://docs.anthropic.com/en/docs/welcome#models\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#advantages-of-using-claude\"]",
              "prompt": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1310,
              "gradingResult": {
                "pass": false,
                "score": 0,
                "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": false,
                    "score": 0,
                    "reason": "Precision: 0.0 \n Recall: 0.0 \n F1 Score: 0 \n MRR: 0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "MRR is 0",
                        "named_scores": {
                          "MRR": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Precision is 0.0",
                        "named_scores": {
                          "Precision": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "Recall is 0.0",
                        "named_scores": {
                          "Recall": 0
                        }
                      },
                      {
                        "pass": true,
                        "score": 0,
                        "reason": "F1 is 0",
                        "named_scores": {
                          "F1": 0
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "MRR is 0",
                    "named_scores": {
                      "MRR": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Precision is 0.0",
                    "named_scores": {
                      "Precision": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "Recall is 0.0",
                    "named_scores": {
                      "Recall": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0,
                    "reason": "F1 is 0",
                    "named_scores": {
                      "F1": 0
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.6666666666666666,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\"]",
              "prompt": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 3517,
              "gradingResult": {
                "pass": true,
                "score": 0.6666666666666666,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision: 0.6666666666666666 \n Recall: 0.6666666666666666 \n F1 Score: 0.6666666666666666 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Precision is 0.6666666666666666",
                        "named_scores": {
                          "Precision": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "Recall is 0.6666666666666666",
                        "named_scores": {
                          "Recall": 0.6666666666666666
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.6666666666666666,
                        "reason": "F1 is 0.6666666666666666",
                        "named_scores": {
                          "F1": 0.6666666666666666
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Precision is 0.6666666666666666",
                    "named_scores": {
                      "Precision": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "Recall is 0.6666666666666666",
                    "named_scores": {
                      "Recall": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.6666666666666666,
                    "reason": "F1 is 0.6666666666666666",
                    "named_scores": {
                      "F1": 0.6666666666666666
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #98"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]",
            "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?"
          ]
        },
        {
          "description": "Row #99",
          "outputs": [
            {
              "pass": true,
              "score": 1,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]",
              "prompt": "What is the IPv6 address range used by Anthropic?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1362,
              "gradingResult": {
                "pass": true,
                "score": 1,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision: 1.0 \n Recall: 1.0 \n F1 Score: 1.0 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Precision is 1.0",
                        "named_scores": {
                          "Precision": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "F1 is 1.0",
                        "named_scores": {
                          "F1": 1
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision is 1.0",
                    "named_scores": {
                      "Precision": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "F1 is 1.0",
                    "named_scores": {
                      "F1": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 1,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]",
              "prompt": "What is the IPv6 address range used by Anthropic?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1303,
              "gradingResult": {
                "pass": true,
                "score": 1,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision: 1.0 \n Recall: 1.0 \n F1 Score: 1.0 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Precision is 1.0",
                        "named_scores": {
                          "Precision": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "F1 is 1.0",
                        "named_scores": {
                          "F1": 1
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision is 1.0",
                    "named_scores": {
                      "Precision": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "F1 is 1.0",
                    "named_scores": {
                      "F1": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 1,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]",
              "prompt": "What is the IPv6 address range used by Anthropic?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 0,
              "gradingResult": {
                "pass": true,
                "score": 1,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision: 1.0 \n Recall: 1.0 \n F1 Score: 1.0 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Precision is 1.0",
                        "named_scores": {
                          "Precision": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "Recall is 1.0",
                        "named_scores": {
                          "Recall": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "F1 is 1.0",
                        "named_scores": {
                          "F1": 1
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Precision is 1.0",
                    "named_scores": {
                      "Precision": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "Recall is 1.0",
                    "named_scores": {
                      "Recall": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "F1 is 1.0",
                    "named_scores": {
                      "F1": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "What is the IPv6 address range used by Anthropic?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #99"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]",
            "What is the IPv6 address range used by Anthropic?"
          ]
        },
        {
          "description": "Row #100",
          "outputs": [
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/docs/quickstart#call-the-api\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#advanced-use\"]",
              "prompt": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
              "provider": "python:provider_retrieval.py:retrieve_base",
              "latencyMs": 1533,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 1.0",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 1,
                        "reason": "MRR is 1.0",
                        "named_scores": {
                          "MRR": 1
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 1,
                    "reason": "MRR is 1.0",
                    "named_scores": {
                      "MRR": 1
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/quickstart#set-your-api-key\",\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/client-sdks#typescript\"]",
              "prompt": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
              "provider": "python:provider_retrieval.py:retrieve_level_two",
              "latencyMs": 1535,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            },
            {
              "pass": true,
              "score": 0.4,
              "namedScores": {},
              "text": "[\"https://docs.anthropic.com/en/docs/quickstart#set-your-api-key\",\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/docs/quickstart#call-the-api\"]",
              "prompt": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
              "provider": "python:provider_retrieval.py:retrieve_level_three",
              "latencyMs": 4568,
              "gradingResult": {
                "pass": true,
                "score": 0.4,
                "reason": "All assertions passed",
                "namedScores": {},
                "tokensUsed": {
                  "total": 0,
                  "prompt": 0,
                  "completion": 0
                },
                "componentResults": [
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "Precision: 0.3333333333333333 \n Recall: 0.5 \n F1 Score: 0.4 \n MRR: 0.5",
                    "componentResults": [
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "MRR is 0.5",
                        "named_scores": {
                          "MRR": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.3333333333333333,
                        "reason": "Precision is 0.3333333333333333",
                        "named_scores": {
                          "Precision": 0.3333333333333333
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.5,
                        "reason": "Recall is 0.5",
                        "named_scores": {
                          "Recall": 0.5
                        }
                      },
                      {
                        "pass": true,
                        "score": 0.4,
                        "reason": "F1 is 0.4",
                        "named_scores": {
                          "F1": 0.4
                        }
                      }
                    ],
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "MRR is 0.5",
                    "named_scores": {
                      "MRR": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.3333333333333333,
                    "reason": "Precision is 0.3333333333333333",
                    "named_scores": {
                      "Precision": 0.3333333333333333
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.5,
                    "reason": "Recall is 0.5",
                    "named_scores": {
                      "Recall": 0.5
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  },
                  {
                    "pass": true,
                    "score": 0.4,
                    "reason": "F1 is 0.4",
                    "named_scores": {
                      "F1": 0.4
                    },
                    "assertion": {
                      "type": "python",
                      "value": "file://eval_retrieval.py"
                    }
                  }
                ],
                "assertion": null
              },
              "cost": 0
            }
          ],
          "test": {
            "vars": {
              "query": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
              "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]"
            },
            "assert": [
              {
                "type": "python",
                "value": "file://eval_retrieval.py"
              }
            ],
            "options": {},
            "description": "Row #100"
          },
          "vars": [
            "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]",
            "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?"
          ]
        }
      ]
    }
  },
  "config": {
    "description": "Retrieval - Base Eval",
    "prompts": [
      "{{ query }}"
    ],
    "providers": [
      "python:provider_retrieval.py:retrieve_base",
      "python:provider_retrieval.py:retrieve_level_two",
      "python:provider_retrieval.py:retrieve_level_three"
    ],
    "tests": [
      {
        "vars": {
          "query": "How can you create multiple test cases for an evaluation in the Anthropic Evaluation tool?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases\",\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#building-evals-and-test-cases\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #1"
      },
      {
        "vars": {
          "query": "What embeddings provider does Anthropic recommend for customized domain-specific models, and what capabilities does this provider offer?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#before-implementing-embeddings\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #2"
      },
      {
        "vars": {
          "query": "What are some key success metrics to consider when evaluating Claude's performance on a classification task, and how do they relate to choosing the right model to reduce latency?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#evaluation-metrics\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #3"
      },
      {
        "vars": {
          "query": "What are two ways that Claude for Sheets can improve prompt engineering workflows compared to using chained prompts?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#why-use-claude-for-sheets\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#how-to-chain-prompts\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #4"
      },
      {
        "vars": {
          "query": "What happens if a prompt for the Text Completions API is missing the \"\\n\\nHuman:\" and \"\\n\\nAssistant:\" turns?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#system-prompt\",\"https://docs.anthropic.com/en/api/prompt-validation#examples\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #5"
      },
      {
        "vars": {
          "query": "How do the additional tokens required for tool use in Claude API requests impact pricing compared to regular API requests?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#pricing\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #6"
      },
      {
        "vars": {
          "query": "When will the new Anthropic Developer Console features that show API usage, billing details, and rate limits be available?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#june-27th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #7"
      },
      {
        "vars": {
          "query": "When deciding whether to use chain-of-thought (CoT) for a task, what are two key factors to consider in order to strike the right balance between performance and latency?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought#why-not-let-claude-think\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought#before-implementing-cot\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #8"
      },
      {
        "vars": {
          "query": "How can I use Claude to more easily digest the content of long PDF documents?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#anthropic-cookbook\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#before-you-upload\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #9"
      },
      {
        "vars": {
          "query": "According to the documentation, where can you view your organization's current API rate limits in the Anthropic Console?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/rate-limits#about-our-limits\",\"https://docs.anthropic.com/en/release-notes/api#june-27th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #10"
      },
      {
        "vars": {
          "query": "How can we measure the performance of the ticket classification system implemented using Claude beyond just accuracy?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#prompting-claude-for-ticket-routing\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #11"
      },
      {
        "vars": {
          "query": "How can you specify a system prompt using the Text Completions API versus the Messages API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/prompt-validation#examples\",\"https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#system-prompt\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #12"
      },
      {
        "vars": {
          "query": "How can you combine XML tags with chain of thought reasoning to create high-performance prompts for Claude?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#tagging-best-practices\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #13"
      },
      {
        "vars": {
          "query": "When evaluating the Claude model's performance for ticket routing, what three key metrics are calculated and what are the results for the claude-3-haiku-20240307 model on the 91 test samples?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#example-data\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #14"
      },
      {
        "vars": {
          "query": "Before starting to engineer and improve a prompt in Claude, what key things does Anthropic recommend you have in place first?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/define-success#next-steps\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#before-prompt-engineering\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #15"
      },
      {
        "vars": {
          "query": "How does the Messages API handle mid-response prompting compared to the Text Completions API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#inputs-and-outputs\",\"https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#putting-words-in-claudes-mouth\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #16"
      },
      {
        "vars": {
          "query": "How does Claude's response differ when given a role through a system prompt compared to not having a specific role in the financial analysis example?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-2-financial-analysis\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #17"
      },
      {
        "vars": {
          "query": "What are some quantitative metrics that can be used to measure the success of a sentiment analysis model, and how might specific targets for those metrics be determined?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/define-success#building-strong-criteria\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #18"
      },
      {
        "vars": {
          "query": "What is a power user tip mentioned in the documentation for creating high-performance prompts using XML tags?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#tagging-best-practices\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #19"
      },
      {
        "vars": {
          "query": "How can you use an LLM like Claude to automatically grade the outputs of other LLMs based on a rubric?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#tips-for-llm-based-grading\",\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #20"
      },
      {
        "vars": {
          "query": "How can you access and deploy Voyage embeddings on AWS Marketplace?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-on-the-aws-marketplace\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #21"
      },
      {
        "vars": {
          "query": "When using tools just to get Claude to produce JSON output following a particular schema, what key things should you do in terms of tool setup and prompting?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#json-output\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #22"
      },
      {
        "vars": {
          "query": "What are the key differences between the legacy Claude Instant 1.2 model and the Claude 3 Haiku model in terms of capabilities and performance?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-models\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #23"
      },
      {
        "vars": {
          "query": "What is one key benefit of using examples when prompt engineering with Claude?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting#why-use-examples\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #24"
      },
      {
        "vars": {
          "query": "According to the Anthropic documentation, what is one key advantage of using prompt engineering instead of fine-tuning when it comes to adapting an AI model to new domains or tasks?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #25"
      },
      {
        "vars": {
          "query": "How can I quickly get started using the Claude for Sheets extension with a pre-made template?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#claude-for-sheets-workbook-template\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#get-started-with-claude-for-sheets\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #26"
      },
      {
        "vars": {
          "query": "How does the \"index\" field in the \"content_block_delta\" event relate to the text being streamed in a response?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#basic-streaming-request\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #27"
      },
      {
        "vars": {
          "query": "How can you include an image as part of a Claude API request, and what image formats are currently supported?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#vision\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #28"
      },
      {
        "vars": {
          "query": "What is the relationship between time to first token (TTFT) and latency when evaluating a language model's performance?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#ttft-time-to-first-token\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#how-to-measure-latency\",\"https://docs.anthropic.com/en/docs/resources/glossary#latency\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #29"
      },
      {
        "vars": {
          "query": "How can providing Claude with examples of handling certain edge cases like implicit requests or emotional prioritization help improve its performance in routing support tickets?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#adapting-to-common-scenarios\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#prompting-claude-for-ticket-routing\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #30"
      },
      {
        "vars": {
          "query": "How does the stop_reason of \"tool_use\" relate to the overall workflow of integrating external tools with Claude?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#tool-use-and-json-mode\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #31"
      },
      {
        "vars": {
          "query": "According to the documentation, what error event and corresponding HTTP error code may be sent during periods of high usage for the Anthropic API when using streaming responses?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#error-events\",\"https://docs.anthropic.com/en/api/streaming#error-event-types\",\"https://docs.anthropic.com/en/api/errors#http-errors\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #32"
      },
      {
        "vars": {
          "query": "What are the two types of deltas that can be contained in a content_block_delta event when streaming responses from the Anthropic API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #33"
      },
      {
        "vars": {
          "query": "On what date did Claude 3.5 Sonnet and tool use both become generally available across the Anthropic API, Amazon Bedrock, and Google Vertex AI?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/api#may-30th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #34"
      },
      {
        "vars": {
          "query": "In what order did Anthropic launch Claude.ai and the Claude iOS app in Canada and Europe?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/claude-apps#june-5th-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#may-13th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #35"
      },
      {
        "vars": {
          "query": "When the API response from Claude has a stop_reason of \"tool_use\", what does this indicate and what should be done next to continue the conversation?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#json-output\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #36"
      },
      {
        "vars": {
          "query": "What Python libraries are used in the example code snippet for evaluating tone and style in a customer service chatbot?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#example-evals\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #37"
      },
      {
        "vars": {
          "query": "What are the two main ways to authenticate when using the Anthropic Python SDK to access Claude models on Amazon Bedrock?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-an-sdk-for-accessing-bedrock\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #38"
      },
      {
        "vars": {
          "query": "When deciding whether to implement leak-resistant prompt engineering strategies, what two factors should be considered and balanced?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#strategies-to-reduce-prompt-leak\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#before-you-try-to-reduce-prompt-leak\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #39"
      },
      {
        "vars": {
          "query": "How can selecting the appropriate Claude model based on your specific requirements help reduce latency in your application?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\",\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #40"
      },
      {
        "vars": {
          "query": "How can you stream responses from the Anthropic API using the Python SDK?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#streaming-with-sdks\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #41"
      },
      {
        "vars": {
          "query": "How can you guide Claude's response by pre-filling part of the response, and what API parameter is used to generate a short response in this case?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\",\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #42"
      },
      {
        "vars": {
          "query": "What is more important when building an eval set for an AI system - having a larger number of test cases with automated grading, or having fewer high-quality test cases graded by humans?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#eval-design-principles\",\"https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#building-evals-and-test-cases\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #43"
      },
      {
        "vars": {
          "query": "What are the two required fields in a content_block_delta event for a text delta type?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #44"
      },
      {
        "vars": {
          "query": "What are two interactive ways to learn how to use Claude's capabilities, such as uploading PDFs and generating embeddings?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/quickstart#next-steps\",\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #45"
      },
      {
        "vars": {
          "query": "Why does breaking a task into distinct subtasks for chained prompts help improve Claude's accuracy on the overall task?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#how-to-chain-prompts\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#why-chain-prompts\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #46"
      },
      {
        "vars": {
          "query": "How does the streaming format for Messages responses differ from Text Completions streaming responses?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#streaming-format\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #47"
      },
      {
        "vars": {
          "query": "What are two ways to start experimenting with Claude as a user, according to Anthropic's documentation?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/models#get-started-with-claude\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #48"
      },
      {
        "vars": {
          "query": "How can using chain prompts help reduce errors and inconsistency in complex tasks handled by Claude?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#why-chain-prompts\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#chain-prompts-for-complex-tasks\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #49"
      },
      {
        "vars": {
          "query": "What HTTP status code does an overloaded_error event correspond to in a non-streaming context for the Anthropic API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/streaming#error-event-types\",\"https://docs.anthropic.com/en/api/messages-streaming#error-events\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #50"
      },
      {
        "vars": {
          "query": "What are the two ways to specify the format in which Voyage AI returns embeddings through its HTTP API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #51"
      },
      {
        "vars": {
          "query": "When streaming API requests that use tools, how are the input JSON deltas for tool_use content blocks sent, and how can they be accumulated and parsed by the client?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#streaming-request-with-tool-use\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #52"
      },
      {
        "vars": {
          "query": "What are the two interactive prompt engineering tutorials that Anthropic offers, and how do they differ?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-interactive-tutorial\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #53"
      },
      {
        "vars": {
          "query": "What are some of the key capabilities that make Claude suitable for enterprise use cases requiring integration with specialized applications and processing of large volumes of sensitive data?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/intro-to-claude#enterprise-considerations\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #54"
      },
      {
        "vars": {
          "query": "As of June 2024, in which regions are Anthropic's Claude.ai API and iOS app available?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/claude-apps#may-1st-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#june-5th-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#may-13th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #55"
      },
      {
        "vars": {
          "query": "What are the two main approaches for integrating Claude into a support ticket workflow, and how do they differ in terms of scalability and ease of implementation?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#introduction\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #56"
      },
      {
        "vars": {
          "query": "When did Anthropic release a prompt generator tool to help guide Claude in generating high-quality prompts, and through what interface is it available?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #57"
      },
      {
        "vars": {
          "query": "Which Claude 3 model provides the best balance of intelligence and speed for high-throughput tasks like sales forecasting and targeted marketing?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#api-model-names\",\"https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-family\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #58"
      },
      {
        "vars": {
          "query": "How can you calculate the similarity between two Voyage embedding vectors, and what is this equivalent to since Voyage embeddings are normalized to length 1?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#faq\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #59"
      },
      {
        "vars": {
          "query": "How can using examples in prompts improve Claude's performance on complex tasks?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting#why-use-examples\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#chain-prompts-for-complex-tasks\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #60"
      },
      {
        "vars": {
          "query": "What are the two types of content block deltas that can be emitted when streaming responses with tool use, and what does each delta type contain?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#streaming-request-with-tool-use\",\"https://docs.anthropic.com/en/api/messages-streaming#delta-types\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #61"
      },
      {
        "vars": {
          "query": "What are two key capabilities of Claude that enable it to build interactive systems and personalized user experiences?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/text-generation#text-capabilities-and-use-cases\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #62"
      },
      {
        "vars": {
          "query": "What are the key event types included in a raw HTTP stream response when using message streaming, and what is the typical order they occur in?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#event-types\",\"https://docs.anthropic.com/en/api/messages-streaming#raw-http-stream-response\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #63"
      },
      {
        "vars": {
          "query": "What is the maximum number of images that can be included in a single request using the Anthropic API compared to the claude.ai interface?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #64"
      },
      {
        "vars": {
          "query": "When Claude's response is cut off due to hitting the max_tokens limit and contains an incomplete tool use block, what should you do to get the full tool use?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#troubleshooting-errors\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #65"
      },
      {
        "vars": {
          "query": "What two steps are needed before running a classification evaluation on Claude according to the documentation?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#3-run-your-eval\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #66"
      },
      {
        "vars": {
          "query": "How can you use the content parameter in the messages list to influence Claude's response?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #67"
      },
      {
        "vars": {
          "query": "What are two key advantages of prompt engineering over fine-tuning when it comes to model comprehension and general knowledge preservation?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #68"
      },
      {
        "vars": {
          "query": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-and-configure-the-aws-cli\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #69"
      },
      {
        "vars": {
          "query": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#subscribe-to-anthropic-models\",\"https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #70"
      },
      {
        "vars": {
          "query": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #71"
      },
      {
        "vars": {
          "query": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-streaming#input-json-delta\",\"https://docs.anthropic.com/en/api/messages-streaming#text-delta\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #72"
      },
      {
        "vars": {
          "query": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#faq\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #73"
      },
      {
        "vars": {
          "query": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/intro-to-claude#model-options\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #74"
      },
      {
        "vars": {
          "query": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic\",\"https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #75"
      },
      {
        "vars": {
          "query": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/welcome#develop-with-claude\",\"https://docs.anthropic.com/en/docs/quickstart#next-steps\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #76"
      },
      {
        "vars": {
          "query": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#context-window\",\"https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #77"
      },
      {
        "vars": {
          "query": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #78"
      },
      {
        "vars": {
          "query": "Which Claude model has the fastest comparative latency according to the comparison tables?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/models#model-comparison\",\"https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #79"
      },
      {
        "vars": {
          "query": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/client-sdks#python\",\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #80"
      },
      {
        "vars": {
          "query": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#examples\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #81"
      },
      {
        "vars": {
          "query": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought\",\"https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #82"
      },
      {
        "vars": {
          "query": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #83"
      },
      {
        "vars": {
          "query": "How should you evaluate a model's performance on a ticket routing classifier?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier\",\"https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #84"
      },
      {
        "vars": {
          "query": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #85"
      },
      {
        "vars": {
          "query": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #86"
      },
      {
        "vars": {
          "query": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer\",\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #87"
      },
      {
        "vars": {
          "query": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests\",\"https://docs.anthropic.com/en/api/claude-on-vertex-ai#accessing-vertex-ai\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #88"
      },
      {
        "vars": {
          "query": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#may-10th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #89"
      },
      {
        "vars": {
          "query": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/release-notes/api#june-20th-2024\",\"https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #90"
      },
      {
        "vars": {
          "query": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response\",\"https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #91"
      },
      {
        "vars": {
          "query": "What does the temperature parameter do when working with large language models?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#temperature\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#2-optimize-prompt-and-output-length\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #92"
      },
      {
        "vars": {
          "query": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#tips-for-effective-evaluation\",\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response\",\"https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #93"
      },
      {
        "vars": {
          "query": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #94"
      },
      {
        "vars": {
          "query": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision\",\"https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #95"
      },
      {
        "vars": {
          "query": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/client-sdks#typescript\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #96"
      },
      {
        "vars": {
          "query": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases\",\"https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #97"
      },
      {
        "vars": {
          "query": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/docs/resources/glossary#pretraining\",\"https://docs.anthropic.com/en/docs/resources/glossary#llm\",\"https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #98"
      },
      {
        "vars": {
          "query": "What is the IPv6 address range used by Anthropic?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/ip-addresses#ipv6\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #99"
      },
      {
        "vars": {
          "query": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
          "correct_chunks": "[\"https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns\",\"https://docs.anthropic.com/en/api/client-sdks#python\"]"
        },
        "assert": [
          {
            "type": "python",
            "value": "file://eval_retrieval.py"
          }
        ],
        "options": {},
        "description": "Row #100"
      }
    ],
    "scenarios": [],
    "env": {},
    "sharing": true,
    "defaultTest": {
      "vars": {},
      "assert": [],
      "options": {}
    },
    "outputPath": [
      "../data/retrieval_results.json"
    ],
    "metadata": {}
  },
  "shareableUrl": null
}
</file>
<file name="skills/retrieval_augmented_generation/evaluation/README.md">
# Evaluations with Promptfoo

### Pre-requisities 
To use Promptfoo you will need to have node.js &amp; npm installed on your system. For more information follow [this guide](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  

You can install promptfoo using npm or run it directly using npx. In this guide we will use npx.  

*Note: For this example you will not need to run `npx promptfoo@latest init` there is already an initialized `promptfooconfig.yaml` file in this directory*  

See the official docs [here](https://www.promptfoo.dev/docs/getting-started)  


### Getting Started
The evaluation is orchestrated by the `promptfooconfig...` `.yaml` files. In our application we divide the evaluation logic between `promptfooconfig_retrieval.yaml` for evaluating the retrieval system and `promptfooconfig_end_to_end.yaml` to evaluate the end to end performance. In each of these files we define the following sections

### Retrieval Evaluations

- Prompts
    - Promptfoo enables you to import prompts in many different formats. You can read more about this [here](https://www.promptfoo.dev/docs/configuration/parameters).
    - In our case, we skip providing a new prompt each time, and merely pass through the `{{query}}` to each retrieval 'provider' for evaluation
- Providers
    - Instead of using a standard LLM provider, we wrote custom providers for each retrieval method found in `guide.ipynb`
- Tests
    - We will use the same data that was used in `guide.ipynb`. We split it into `end_to_end_dataset.csv` and `retrieval_dataset.csv` and added an `__expected` column to each dataset which allows us to automatically run assertions for each row
    - You can find our retrieval evaluation logic in `eval_end_to_end.py`

### End to End Evaluations

- Prompts
    - Promptfoo enables you to import prompts in many different formats. You can read more about this [here](https://www.promptfoo.dev/docs/configuration/parameters).
    - We have 3 prompts in our end to end evaluation config: each of which corresponds to a method use
        - The functions are identical to those used in `guide.ipynb` except that instead of calling the Anthropic API they just return the prompt. Promptfoo then handles the orchestration of calling the API and storing the results.
        - You can read more about prompt functions [here](https://www.promptfoo.dev/docs/configuration/parameters#prompt-functions). Using python allows us to reuse the VectorDB class which is necessary for RAG, this is defined in `vectordb.py`.
- Providers
    - With Promptfoo you can connect to many different LLMs from different platforms, see [here for more](https://www.promptfoo.dev/docs/providers). In `guide.ipynb` we used Haiku with default temperature 0.0. We will use Promptfoo to experiment with different models.
- Tests
    - We will use the same data that was used in `guide.ipynb`. We split it into `end_to_end_dataset.csv` and `retrieval_dataset.csv` and added an `__expected` column to each dataset which allows us to automatically run assertions for each row
    - Promptfoo has a wide array of built in tests which can be found [here](https://www.promptfoo.dev/docs/configuration/expected-outputs/deterministic).
    - You can find the test logic for the retrieval system in `eval_retrieval.py` and the test logic for the end to end system in `eval_end_to_end.py`
- Output
    - We define the path for the output file. Promptfoo can output results in many formats, [see here](https://www.promptfoo.dev/docs/configuration/parameters/#output-file). Alternatively you can use Promptfoo's web UI, [see here](https://www.promptfoo.dev/docs/usage/web-ui).


### Run the eval

To get started with Promptfoo open your terminal and navigate to this directory (`./evaluation`).

Before running your evaluation you must define the following enviroment variables:

`export ANTHROPIC_API_KEY=YOUR_API_KEY`  
`export VOYAGE_API_KEY=YOUR_API_KEY`

From the `evaluation` directory, run one of the following commands.  

- To evaluate the end to end system performance: `npx promptfoo@latest eval -c promptfooconfig_end_to_end.yaml --output ../data/end_to_end_results.json`

- To evaluate the retrieval system performance in isolation: `npx promptfoo@latest eval -c promptfooconfig_retrieval.yaml --output ../data/retrieval_results.json`

When the evaluation is complete the terminal will print the results for each row in the dataset. You can also run `npx promptfoo@latest view` to view outputs in the promptfoo UI viewer.
</file>
<file name="skills/retrieval_augmented_generation/evaluation/docs_evaluation_dataset.json">
[
    {
      "id": "efc09699",
      "question": "How can you create multiple test cases for an evaluation in the Anthropic Evaluation tool?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases",
        "https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#building-evals-and-test-cases"
      ],
      "correct_answer": "To create multiple test cases in the Anthropic Evaluation tool, click the 'Add Test Case' button, fill in values for each variable in your prompt, and repeat the process to create additional test case scenarios."
    },
    {
      "id": "1305ea00",
      "question": "What embeddings provider does Anthropic recommend for customized domain-specific models, and what capabilities does this provider offer?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#before-implementing-embeddings",
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic"
      ],
      "correct_answer": "Anthropic recommends Voyage AI for embedding models. Voyage AI offers customized models for specific industry domains like finance and healthcare, as well as bespoke fine-tuned models for individual customers. They have a wide variety of options and capabilities."
    },
    {
      "id": "1811c10d",
      "question": "What are some key success metrics to consider when evaluating Claude's performance on a classification task, and how do they relate to choosing the right model to reduce latency?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#evaluation-metrics",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model"
      ],
      "correct_answer": "When evaluating Claude's performance on a classification task, some key success metrics to consider include accuracy, F1 score, consistency, structure, speed, bias and fairness. Choosing the right model that fits your specific requirements in terms of speed and output quality is a straightforward way to reduce latency and meet the acceptable response time for your use case."
    },
    {
      "id": "1d6210b8",
      "question": "What are two ways that Claude for Sheets can improve prompt engineering workflows compared to using chained prompts?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#why-use-claude-for-sheets",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#how-to-chain-prompts"
      ],
      "correct_answer": "Claude for Sheets enables testing prompts across evaluation suites in parallel, which is faster than running chained prompts sequentially. It also excels at office tasks like survey analysis and online data processing that may be more cumbersome with chained prompts."
    },
    {
      "id": "97be1525",
      "question": "What happens if a prompt for the Text Completions API is missing the \"\\n\\nHuman:\" and \"\\n\\nAssistant:\" turns?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#system-prompt",
        "https://docs.anthropic.com/en/api/prompt-validation#examples"
      ],
      "correct_answer": "If a prompt for the Text Completions API is missing the required \"\\n\\nHuman:\" and \"\\n\\nAssistant:\" turns, it will result in an API error."
    },
    {
      "id": "838c732f",
      "question": "How do the additional tokens required for tool use in Claude API requests impact pricing compared to regular API requests?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#pricing",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works"
      ],
      "correct_answer": "Tool use requests in the Claude API are priced the same as regular API requests, based on the total input and output tokens. However, tool use requests have additional tokens beyond the regular input and output, including the tools parameter, tool use content blocks, tool result content blocks, and a special system prompt that enables tool use, which add to the total tokens and cost."
    },
    {
      "id": "1fc56a47",
      "question": "When will the new Anthropic Developer Console features that show API usage, billing details, and rate limits be available?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/api#june-27th-2024"
      ],
      "correct_answer": "The new Usage, Cost, and Rate Limits tabs in the Anthropic Developer Console that show API usage, billing details, and current rate limits will be available on June 27th, 2024."
    },
    {
      "id": "5590f280",
      "question": "When deciding whether to use chain-of-thought (CoT) for a task, what are two key factors to consider in order to strike the right balance between performance and latency?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought#why-not-let-claude-think",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought#before-implementing-cot"
      ],
      "correct_answer": "When deciding whether to use CoT, consider if the task requires in-depth thinking that a human would need to work through, and be aware that the increased output length from CoT may impact latency."
    },
    {
      "id": "eb7b1167",
      "question": "How can I use Claude to more easily digest the content of long PDF documents?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/text-generation#anthropic-cookbook",
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#before-you-upload"
      ],
      "correct_answer": "You can upload PDFs and have Claude summarize their content, making it easier to understand the key points of long documents without having to read through everything."
    },
    {
      "id": "48f497ca",
      "question": "According to the documentation, where can you view your organization's current API rate limits in the Anthropic Console?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/rate-limits#about-our-limits",
        "https://docs.anthropic.com/en/release-notes/api#june-27th-2024"
      ],
      "correct_answer": "You can view your organization's current API rate limits in the Rate Limits tab of the Developer Console."
    },
    {
      "id": "bc701a6a",
      "question": "How can we measure the performance of the ticket classification system implemented using Claude beyond just accuracy?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#prompting-claude-for-ticket-routing"
      ],
      "correct_answer": "In addition to accuracy, we can measure the 95th percentile response time and average cost per classification to assess the ticket classification system's performance and production-readiness."
    },
    {
      "id": "7e78ad6c",
      "question": "How can you specify a system prompt using the Text Completions API versus the Messages API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/prompt-validation#examples",
        "https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#system-prompt"
      ],
      "correct_answer": "With the Text Completions API, the system prompt is added as text before the first \"\\n\\nHuman:\" turn. With the Messages API, the system prompt is specified using the separate \"system\" parameter when making the API request."
    },
    {
      "id": "67180f57",
      "question": "How can you combine XML tags with chain of thought reasoning to create high-performance prompts for Claude?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#tagging-best-practices",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought"
      ],
      "correct_answer": "You can combine XML tags like &lt;thinking&gt; and &lt;answer&gt; with chain of thought reasoning, where Claude explains its step-by-step reasoning process, to create structured, high-performance prompts. For example, you can prompt Claude to show its reasoning by including \"Before answering, explain your reasoning step-by-step in &lt;thinking&gt; tags.\" in the user message or system prompt."
    },
    {
      "id": "cbde7951",
      "question": "When evaluating the Claude model's performance for ticket routing, what three key metrics are calculated and what are the results for the claude-3-haiku-20240307 model on the 91 test samples?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluation-methodology",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#example-data"
      ],
      "correct_answer": "When evaluating the claude-3-haiku-20240307 model's performance on the 91 test samples, the three key metrics calculated are accuracy (89.01%), 95th percentile response time (1.61 seconds), and average cost per request routing ($0.0004)."
    },
    {
      "id": "bbeaa6b6",
      "question": "Before starting to engineer and improve a prompt in Claude, what key things does Anthropic recommend you have in place first?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/define-success#next-steps",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#before-prompt-engineering"
      ],
      "correct_answer": "Before prompt engineering, Anthropic highly recommends having a clear definition of success criteria for your use case, some ways to empirically test against those criteria, and a first draft prompt you want to improve."
    },
    {
      "id": "d06d859e",
      "question": "How does the Messages API handle mid-response prompting compared to the Text Completions API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#inputs-and-outputs",
        "https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#putting-words-in-claudes-mouth"
      ],
      "correct_answer": "The Messages API allows you to continue a response by making the last input message have the \"assistant\" role, whereas the Text Completions API lets you pre-fill part of Claude's response directly in the prompt string."
    },
    {
      "id": "b01ae76d",
      "question": "How does Claude's response differ when given a role through a system prompt compared to not having a specific role in the financial analysis example?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-2-financial-analysis"
      ],
      "correct_answer": "When given the role of CFO through a system prompt, Claude provides a much more insightful, structured, and actionable financial analysis compared to not having a specific role. The role-based response breaks down key financial metrics, provides strategic commentary, and makes specific recommendations."
    },
    {
      "id": "3e0b683d",
      "question": "What are some quantitative metrics that can be used to measure the success of a sentiment analysis model, and how might specific targets for those metrics be determined?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/define-success#building-strong-criteria"
      ],
      "correct_answer": "Quantitative metrics for evaluating a sentiment analysis model include task-specific metrics like F1 score, as well as generic metrics like accuracy, precision, and recall. Specific targets should be based on industry benchmarks, prior experiments, AI research, or expert knowledge, and should represent an improvement over the current baseline."
    },
    {
      "id": "d17c5f03",
      "question": "What is a power user tip mentioned in the documentation for creating high-performance prompts using XML tags?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#tagging-best-practices"
      ],
      "correct_answer": "Combining XML tags with other prompt engineering techniques like multishot prompting (using &lt;examples&gt; tags) or chain of thought (using &lt;thinking&gt; and &lt;answer&gt; tags) to create super-structured, high-performance prompts."
    },
    {
      "id": "e2576d21",
      "question": "How can you use an LLM like Claude to automatically grade the outputs of other LLMs based on a rubric?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#tips-for-llm-based-grading",
        "https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns"
      ],
      "correct_answer": "You can use an LLM like Claude to grade the outputs of other LLMs by providing it with the output to grade along with a detailed rubric. Instruct the LLM to think through its reasoning and then output a simple 'correct' or 'incorrect' result based on how well the output matches the criteria in the rubric."
    },
    {
      "id": "0e17a981",
      "question": "How can you access and deploy Voyage embeddings on AWS Marketplace?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-on-the-aws-marketplace"
      ],
      "correct_answer": "To access Voyage embeddings on AWS, subscribe to the model package on AWS Marketplace, select the model to deploy, agree to the terms, and copy the Product ARN for your selected region. Then create a JupyterLab space in SageMaker Studio, upload Voyage's notebook, and follow the instructions to deploy the model package using the ARN."
    },
    {
      "id": "2e893e5f",
      "question": "When using tools just to get Claude to produce JSON output following a particular schema, what key things should you do in terms of tool setup and prompting?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#json-output"
      ],
      "correct_answer": "When using tools to get JSON output, you should provide a single tool, set the tool_choice to explicitly instruct the model to use that tool, and ensure the tool name and description are from the model's perspective since it will pass the input to the tool."
    },
    {
      "id": "84eaf6d1",
      "question": "What are the key differences between the legacy Claude Instant 1.2 model and the Claude 3 Haiku model in terms of capabilities and performance?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison",
        "https://docs.anthropic.com/en/docs/about-claude/models#model-comparison",
        "https://docs.anthropic.com/en/docs/about-claude/models#legacy-models"
      ],
      "correct_answer": "The Claude 3 Haiku model has vision capabilities, is faster, more performant, and more intelligent than the legacy Claude Instant 1.2 model. Claude 3 Haiku also has more up-to-date training data."
    },
    {
      "id": "ac6df7d9",
      "question": "What is one key benefit of using examples when prompt engineering with Claude?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting#why-use-examples"
      ],
      "correct_answer": "One key benefit of using examples in prompts is that they reduce misinterpretation of instructions, leading to more accurate outputs from Claude."
    },
    {
      "id": "2f2e851c",
      "question": "According to the Anthropic documentation, what is one key advantage of using prompt engineering instead of fine-tuning when it comes to adapting an AI model to new domains or tasks?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer",
        "https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning"
      ],
      "correct_answer": "Prompt engineering allows you to easily adapt AI models to new domains by providing domain-specific context directly in the prompts, without needing to retrain the model through fine-tuning."
    },
    {
      "id": "1be7fb77",
      "question": "How can I quickly get started using the Claude for Sheets extension with a pre-made template?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#claude-for-sheets-workbook-template",
        "https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#get-started-with-claude-for-sheets"
      ],
      "correct_answer": "You can make a copy of Anthropic's provided Claude for Sheets workbook template to quickly get started using the extension with your own work."
    },
    {
      "id": "9a6c9802",
      "question": "How does the \"index\" field in the \"content_block_delta\" event relate to the text being streamed in a response?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#basic-streaming-request",
        "https://docs.anthropic.com/en/api/messages-streaming#text-delta"
      ],
      "correct_answer": "The \"index\" field in each \"content_block_delta\" event indicates which content block the text delta applies to. Multiple deltas with the same index consecutively stream the text for a single content block in the response."
    },
    {
      "id": "8ec5561c",
      "question": "How can you include an image as part of a Claude API request, and what image formats are currently supported?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#vision",
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples"
      ],
      "correct_answer": "To include an image in a Claude API request, provide it as a base64-encoded image in an \"image\" content block within the \"messages\" array. The currently supported image formats are JPEG, PNG, GIF, and WebP."
    },
    {
      "id": "e97019e7",
      "question": "What is the relationship between time to first token (TTFT) and latency when evaluating a language model's performance?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#ttft-time-to-first-token",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#how-to-measure-latency",
        "https://docs.anthropic.com/en/docs/resources/glossary#latency"
      ],
      "correct_answer": "TTFT is a specific measure of latency that captures the time it takes for a language model to generate the first token of its response after receiving a prompt. It is an important component of a model's overall latency and responsiveness, especially for interactive applications."
    },
    {
      "id": "012db0c7",
      "question": "How can providing Claude with examples of handling certain edge cases like implicit requests or emotional prioritization help improve its performance in routing support tickets?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#adapting-to-common-scenarios",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#prompting-claude-for-ticket-routing"
      ],
      "correct_answer": "Providing edge case examples to Claude in the prompt can meaningfully improve its performance in correctly routing support tickets in scenarios where it may otherwise misclassify them, such as implicit requests, emotional prioritization, ambiguous intent vs. routing, or issue prioritization."
    },
    {
      "id": "124ad490",
      "question": "How does the stop_reason of \"tool_use\" relate to the overall workflow of integrating external tools with Claude?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#tool-use-and-json-mode",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works"
      ],
      "correct_answer": "When Claude determines that one of the user-provided tools can help answer the user's query, it constructs a tool use request. This causes the API response to have a stop_reason of \"tool_use\", signaling Claude's intent to use the tool. The user must then extract the tool input from Claude's request, run the actual tool code client-side, and continue the conversation by sending the tool results back to Claude."
    },
    {
      "id": "4cc35077",
      "question": "According to the documentation, what error event and corresponding HTTP error code may be sent during periods of high usage for the Anthropic API when using streaming responses?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#error-events",
        "https://docs.anthropic.com/en/api/streaming#error-event-types",
        "https://docs.anthropic.com/en/api/errors#http-errors"
      ],
      "correct_answer": "During periods of high usage, an overloaded_error event may be sent in the event stream, which would normally correspond to an HTTP 529 error code in a non-streaming context."
    },
    {
      "id": "544c05c2",
      "question": "What are the two types of deltas that can be contained in a content_block_delta event when streaming responses from the Anthropic API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#text-delta",
        "https://docs.anthropic.com/en/api/messages-streaming#delta-types"
      ],
      "correct_answer": "The two types of deltas that can be contained in a content_block_delta event are text_delta and input_json_delta."
    },
    {
      "id": "9a11efff",
      "question": "On what date did Claude 3.5 Sonnet and tool use both become generally available across the Anthropic API, Amazon Bedrock, and Google Vertex AI?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/api#june-20th-2024",
        "https://docs.anthropic.com/en/release-notes/api#may-30th-2024"
      ],
      "correct_answer": "Claude 3.5 Sonnet became generally available across those platforms on June 20th, 2024, while tool use became generally available on May 30th, 2024."
    },
    {
      "id": "89903ad7",
      "question": "In what order did Anthropic launch Claude.ai and the Claude iOS app in Canada and Europe?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/claude-apps#june-5th-2024",
        "https://docs.anthropic.com/en/release-notes/claude-apps#may-13th-2024"
      ],
      "correct_answer": "Anthropic launched Claude.ai and the Claude iOS app in Europe in May 2024, and then launched them in Canada the following month in June 2024."
    },
    {
      "id": "c07779d4",
      "question": "When the API response from Claude has a stop_reason of \"tool_use\", what does this indicate and what should be done next to continue the conversation?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#json-output",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#how-tool-use-works"
      ],
      "correct_answer": "A stop_reason of \"tool_use\" signals that Claude has decided to use a tool and has constructed a formatted tool use request. To continue the conversation, the tool name and input should be extracted from Claude's request, the actual tool code should be executed client-side, and then a new user message containing a tool_result content block should be sent to Claude."
    },
    {
      "id": "8372a611",
      "question": "What Python libraries are used in the example code snippet for evaluating tone and style in a customer service chatbot?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#example-evals"
      ],
      "correct_answer": "The example code snippet for evaluating tone and style in a customer service chatbot uses the anthropic Python library to interact with the Claude AI model."
    },
    {
      "id": "3d41bc6b",
      "question": "What are the two main ways to authenticate when using the Anthropic Python SDK to access Claude models on Amazon Bedrock?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-an-sdk-for-accessing-bedrock",
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests"
      ],
      "correct_answer": "The two main ways to authenticate are: 1) Directly providing the aws_access_key, aws_secret_key, and optionally aws_session_token, or 2) Using the default AWS credential providers, such as the ~/.aws/credentials file or the AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID environment variables."
    },
    {
      "id": "d8099da7",
      "question": "When deciding whether to implement leak-resistant prompt engineering strategies, what two factors should be considered and balanced?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#strategies-to-reduce-prompt-leak",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-prompt-leak#before-you-try-to-reduce-prompt-leak"
      ],
      "correct_answer": "When deciding to use leak-resistant prompt engineering, the potential reduction in prompt leaks should be balanced against the risk of degraded model performance due to the added complexity of the prompt."
    },
    {
      "id": "9761e499",
      "question": "How can selecting the appropriate Claude model based on your specific requirements help reduce latency in your application?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model",
        "https://docs.anthropic.com/en/docs/intro-to-claude#model-options"
      ],
      "correct_answer": "Choosing the right Claude model that best fits your needs in terms of speed and output quality is one of the most straightforward ways to reduce latency in your application. Anthropic offers a range of Claude models with different capabilities and performance characteristics to allow you to choose the optimal balance of intelligence, speed, and cost for your use case."
    },
    {
      "id": "fb6179c4",
      "question": "How can you stream responses from the Anthropic API using the Python SDK?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#streaming-with-sdks",
        "https://docs.anthropic.com/en/api/client-sdks#python"
      ],
      "correct_answer": "You can stream responses from the Anthropic API using the Python SDK by using the client.messages.stream() method and iterating over the stream.text_stream attribute in a for loop."
    },
    {
      "id": "cf0334f8",
      "question": "How can you guide Claude's response by pre-filling part of the response, and what API parameter is used to generate a short response in this case?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth",
        "https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response"
      ],
      "correct_answer": "You can shape Claude's response by pre-filling part of it in the last position of the input messages list. To get a short response like a single multiple choice answer, you can set the \"max_tokens\" parameter to a small value like 1."
    },
    {
      "id": "50564356",
      "question": "What is more important when building an eval set for an AI system - having a larger number of test cases with automated grading, or having fewer high-quality test cases graded by humans?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#eval-design-principles",
        "https://docs.anthropic.com/en/docs/build-with-claude/develop-tests#building-evals-and-test-cases"
      ],
      "correct_answer": "When building an eval set, it is better to prioritize having a larger volume of test cases with slightly lower signal automated grading over having fewer questions with high-quality human hand-grading."
    },
    {
      "id": "7096e819",
      "question": "What are the two required fields in a content_block_delta event for a text delta type?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#delta-types",
        "https://docs.anthropic.com/en/api/messages-streaming#text-delta"
      ],
      "correct_answer": "The two required fields in a content_block_delta event for a text delta type are \"index\" and \"delta\", where the \"delta\" field contains a \"type\" of \"text_delta\" and the \"text\" being added."
    },
    {
      "id": "9bdcd7a7",
      "question": "What are two interactive ways to learn how to use Claude's capabilities, such as uploading PDFs and generating embeddings?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/quickstart#next-steps",
        "https://docs.anthropic.com/en/docs/welcome#develop-with-claude"
      ],
      "correct_answer": "The Anthropic Cookbook provides interactive Jupyter notebooks demonstrating how to upload PDFs, generate embeddings, and more. The Developer Console offers a prompt generator tool for easier, more powerful prompting."
    },
    {
      "id": "c417a6d5",
      "question": "Why does breaking a task into distinct subtasks for chained prompts help improve Claude's accuracy on the overall task?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#how-to-chain-prompts",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#why-chain-prompts"
      ],
      "correct_answer": "Breaking a task into distinct subtasks for chained prompts improves Claude's accuracy because each subtask gets Claude's full attention, reducing errors compared to tackling the entire complex task at once."
    },
    {
      "id": "8b4a2fc0",
      "question": "How does the streaming format for Messages responses differ from Text Completions streaming responses?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages#streaming-format"
      ],
      "correct_answer": "Messages streaming responses can contain multiple content blocks of varying types, making the streaming format more complex compared to Text Completions which only include completion, ping, and error server-sent-events."
    },
    {
      "id": "9aca7b76",
      "question": "What are two ways to start experimenting with Claude as a user, according to Anthropic's documentation?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/models#get-started-with-claude"
      ],
      "correct_answer": "According to the documentation, users can start experimenting with Claude by visiting claude.ai or using Anthropic's web Console."
    },
    {
      "id": "6c0f4d5c",
      "question": "How can using chain prompts help reduce errors and inconsistency in complex tasks handled by Claude?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-prompts#why-chain-prompts",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#chain-prompts-for-complex-tasks"
      ],
      "correct_answer": "Chain prompts break complex tasks into smaller subtasks, allowing Claude to give its full attention to each one. This reduces errors and inconsistencies that may occur when trying to handle a complex workflow all at once."
    },
    {
      "id": "62f954f3",
      "question": "What HTTP status code does an overloaded_error event correspond to in a non-streaming context for the Anthropic API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/streaming#error-event-types",
        "https://docs.anthropic.com/en/api/messages-streaming#error-events"
      ],
      "correct_answer": "In a non-streaming context, an overloaded_error event would normally correspond to an HTTP 529 status code."
    },
    {
      "id": "14f1a19f",
      "question": "What are the two ways to specify the format in which Voyage AI returns embeddings through its HTTP API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api"
      ],
      "correct_answer": "When making a request to Voyage AI's embedding endpoint, you can either leave the encoding_format parameter unspecified to get the embeddings as lists of floating-point numbers, or set encoding_format to \"base64\" to get the embeddings compressed to Base64 encodings."
    },
    {
      "id": "b210bd3e",
      "question": "When streaming API requests that use tools, how are the input JSON deltas for tool_use content blocks sent, and how can they be accumulated and parsed by the client?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#input-json-delta",
        "https://docs.anthropic.com/en/api/messages-streaming#streaming-request-with-tool-use"
      ],
      "correct_answer": "When streaming requests with tool use, the input JSON deltas for tool_use content blocks are sent as partial JSON strings in multiple content_block_delta events. The client can accumulate these partial JSON strings and parse the complete JSON object once a content_block_stop event is received, using a library like Pydantic for partial JSON parsing or helpers provided in Anthropic's SDKs."
    },
    {
      "id": "6ad104a4",
      "question": "What are the two interactive prompt engineering tutorials that Anthropic offers, and how do they differ?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#prompt-engineering-interactive-tutorial",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial"
      ],
      "correct_answer": "Anthropic offers a GitHub prompting tutorial that covers prompt engineering concepts in-depth with examples, and a lighter-weight Google Sheets prompting tutorial that utilizes Claude for Sheets."
    },
    {
      "id": "8d198f73",
      "question": "What are some of the key capabilities that make Claude suitable for enterprise use cases requiring integration with specialized applications and processing of large volumes of sensitive data?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/intro-to-claude#enterprise-considerations"
      ],
      "correct_answer": "Claude offers a 200K token context window, tool use for integration into specialized applications, multimodal input capabilities for richer context, and is uniquely positioned to serve high-trust industries processing large volumes of sensitive data with enterprise-grade security and data handling."
    },
    {
      "id": "e3d79e9c",
      "question": "As of June 2024, in which regions are Anthropic's Claude.ai API and iOS app available?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/claude-apps#may-1st-2024",
        "https://docs.anthropic.com/en/release-notes/claude-apps#june-5th-2024",
        "https://docs.anthropic.com/en/release-notes/claude-apps#may-13th-2024"
      ],
      "correct_answer": "As of June 2024, Anthropic's Claude.ai API and iOS app are available in the United States, Canada, and Europe."
    },
    {
      "id": "c4595f69",
      "question": "What are the two main approaches for integrating Claude into a support ticket workflow, and how do they differ in terms of scalability and ease of implementation?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#introduction"
      ],
      "correct_answer": "The two main approaches for integrating Claude into a support ticket workflow are push-based using webhooks, and pull-based. The push-based approach is more web-scalable but requires exposing a public endpoint which has IT security implications. The pull-based approach is easier to implement but makes unnecessary calls to the support ticket system."
    },
    {
      "id": "1586025c",
      "question": "When did Anthropic release a prompt generator tool to help guide Claude in generating high-quality prompts, and through what interface is it available?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/api#may-10th-2024"
      ],
      "correct_answer": "On May 10th, 2024, Anthropic released a prompt generator tool that is available through the Developer Console."
    },
    {
      "id": "d44cb7a1",
      "question": "Which Claude 3 model provides the best balance of intelligence and speed for high-throughput tasks like sales forecasting and targeted marketing?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/claude-on-vertex-ai#api-model-names",
        "https://docs.anthropic.com/en/docs/intro-to-claude#claude-3-family"
      ],
      "correct_answer": "The Claude 3 Sonnet model balances intelligence and speed, making it well-suited for high-throughput tasks like sales forecasting and targeted marketing."
    },
    {
      "id": "504f7f0b",
      "question": "How can you calculate the similarity between two Voyage embedding vectors, and what is this equivalent to since Voyage embeddings are normalized to length 1?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#faq",
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-embedding-example"
      ],
      "correct_answer": "You can calculate the similarity between two Voyage embedding vectors using the dot product, which is equivalent to cosine similarity since Voyage embeddings are normalized to length 1."
    },
    {
      "id": "c832aa3f",
      "question": "How can using examples in prompts improve Claude's performance on complex tasks?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting#why-use-examples",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency#chain-prompts-for-complex-tasks"
      ],
      "correct_answer": "Well-chosen examples in prompts can boost Claude's ability to handle complex tasks by reducing misinterpretation of instructions, enforcing consistent structure and style, and serving as a guide for the desired output."
    },
    {
      "id": "4f4bffdb",
      "question": "What are the two types of content block deltas that can be emitted when streaming responses with tool use, and what does each delta type contain?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#input-json-delta",
        "https://docs.anthropic.com/en/api/messages-streaming#text-delta",
        "https://docs.anthropic.com/en/api/messages-streaming#streaming-request-with-tool-use",
        "https://docs.anthropic.com/en/api/messages-streaming#delta-types"
      ],
      "correct_answer": "When streaming responses with tool use, the two types of content block deltas are text deltas and input JSON deltas. Text deltas contain a \"text\" field with a string of the incrementally generated text. Input JSON deltas contain a \"partial_json\" field with a string containing part of the JSON object specifying the tool's input."
    },
    {
      "id": "d4450a54",
      "question": "What are two key capabilities of Claude that enable it to build interactive systems and personalized user experiences?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/text-generation#text-capabilities-and-use-cases"
      ],
      "correct_answer": "Claude's question answering and text analysis capabilities enable it to build intelligent, interactive systems like chatbots and personalize user experiences by understanding sentiment and preferences."
    },
    {
      "id": "e2aa4790",
      "question": "What are the key event types included in a raw HTTP stream response when using message streaming, and what is the typical order they occur in?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#event-types",
        "https://docs.anthropic.com/en/api/messages-streaming#raw-http-stream-response"
      ],
      "correct_answer": "A raw HTTP stream response includes a message_start event, followed by one or more content blocks (each with a content_block_start, content_block_delta events, and content_block_stop), a message_delta event, and a final message_stop event. Ping events may also be dispersed throughout."
    },
    {
      "id": "5a8635d2",
      "question": "What is the maximum number of images that can be included in a single request using the Anthropic API compared to the claude.ai interface?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples",
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#faq"
      ],
      "correct_answer": "The Messages API allows including up to 20 images per request, while the claude.ai interface has a lower limit of up to 5 images per turn."
    },
    {
      "id": "9dc406cc",
      "question": "When Claude's response is cut off due to hitting the max_tokens limit and contains an incomplete tool use block, what should you do to get the full tool use?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#troubleshooting-errors"
      ],
      "correct_answer": "If Claude's response hits the max_tokens limit and has an incomplete tool use block, you should retry the request with a higher max_tokens value to get Claude's full response including the complete tool use."
    },
    {
      "id": "aa1cd66b",
      "question": "What two steps are needed before running a classification evaluation on Claude according to the documentation?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#3-run-your-eval",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases"
      ],
      "correct_answer": "Before running a classification evaluation on Claude, you need to 1) develop your test cases, and 2) take a look at Anthropic's guide to developing test cases."
    },
    {
      "id": "d34c0f56",
      "question": "How can you use the content parameter in the messages list to influence Claude's response?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response",
        "https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth"
      ],
      "correct_answer": "You can provide content in the last position of the messages list, with the \"assistant\" role, to pre-fill part of Claude's response. This allows you to shape the assistant's output."
    },
    {
      "id": "77486ab3",
      "question": "What are two key advantages of prompt engineering over fine-tuning when it comes to model comprehension and general knowledge preservation?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer",
        "https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning"
      ],
      "correct_answer": "Compared to fine-tuning, prompt engineering is far more effective at helping models understand and utilize external content like retrieved documents. Prompt engineering also preserves the model's broad general knowledge, while fine-tuning risks catastrophic forgetting where the model loses its general capabilities."
    },
    {
      "id": "43abd3af",
      "question": "What are the two main steps to get started with making requests to Claude models on Anthropic's Bedrock API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#install-and-configure-the-aws-cli",
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#making-requests"
      ],
      "correct_answer": "To get started making requests to Claude models on Anthropic's Bedrock API, you need to: 1) Install and configure the AWS CLI, and 2) Install an SDK for accessing Bedrock, such as the Python SDK shown in the example code."
    },
    {
      "id": "0a4078a0",
      "question": "How can you check which Claude models are available in a specific AWS region using the AWS CLI?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#subscribe-to-anthropic-models",
        "https://docs.anthropic.com/en/api/claude-on-amazon-bedrock#list-available-models"
      ],
      "correct_answer": "You can list the available Claude models in a specific AWS region by running the command `aws bedrock list-foundation-models --region=&lt;region&gt; --by-provider anthropic --query \"modelSummaries[*].modelId\"`, replacing `&lt;region&gt;` with the desired AWS region such as `us-west-2`."
    },
    {
      "id": "6de4b0f2",
      "question": "What argument can be passed to the voyageai.Client.embed() method or the Voyage HTTP API to specify whether the input text is a query or a document?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-python-package",
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#voyage-http-api"
      ],
      "correct_answer": "The input_type argument can be passed with a value of \"query\" or \"document\" to specify the type of input text being embedded."
    },
    {
      "id": "aadfaa87",
      "question": "How do the streaming API delta formats differ between tool_use content blocks and text content blocks?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-streaming#input-json-delta",
        "https://docs.anthropic.com/en/api/messages-streaming#text-delta"
      ],
      "correct_answer": "Tool_use content block deltas contain partial JSON strings for the input field, whereas text content block deltas directly contain the text delta. Tool_use deltas may have delays between streaming events as the model emits one complete key-value pair at a time."
    },
    {
      "id": "c3a053df",
      "question": "What are the image file size limits when uploading images to Claude using the API versus on claude.ai?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#faq"
      ],
      "correct_answer": "When uploading images to Claude, the API has a maximum file size limit of 5MB per image, while on claude.ai the limit is 10MB per image."
    },
    {
      "id": "f6c21a30",
      "question": "What is one key consideration when selecting a Claude model for an enterprise use case that needs low latency?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/intro-to-claude#model-options",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#1-choose-the-right-model"
      ],
      "correct_answer": "When selecting a Claude model for an enterprise use case that requires low latency, it's important to choose the model that best balances speed and output quality based on the specific requirements of the use case."
    },
    {
      "id": "86d2a94c",
      "question": "What embedding model does Anthropic recommend for code retrieval, and how does its performance compare to alternatives according to Voyage AI?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#how-to-get-embeddings-with-anthropic",
        "https://docs.anthropic.com/en/docs/build-with-claude/embeddings#available-voyage-models"
      ],
      "correct_answer": "For code retrieval, Voyage AI recommends using the voyage-code-2 embedding model, which they claim performs 17% better than alternatives and achieves state-of-the-art results on general-purpose corpora as well."
    },
    {
      "id": "142b8567",
      "question": "What are two ways the Anthropic Cookbook can help developers learn to use Anthropic's APIs?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/welcome#develop-with-claude",
        "https://docs.anthropic.com/en/docs/quickstart#next-steps"
      ],
      "correct_answer": "The Anthropic Cookbook provides interactive Jupyter notebooks that demonstrate how to upload PDFs and work with embeddings to help developers learn to use Anthropic's APIs."
    },
    {
      "id": "79f3daa2",
      "question": "How does the size of the context window impact a language model's ability to utilize retrieval augmented generation (RAG)?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#context-window",
        "https://docs.anthropic.com/en/docs/resources/glossary#rag-retrieval-augmented-generation"
      ],
      "correct_answer": "The size of the context window determines how much retrieved information can be passed to the language model to augment its knowledge when generating a response using RAG. A larger context window allows more relevant retrieved information to be utilized by the model, improving the accuracy and groundedness of the generated text."
    },
    {
      "id": "6e0b6937",
      "question": "How can the Evaluation tool in Anthropic's Claude platform help improve prompts and build more robust AI applications?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#creating-test-cases"
      ],
      "correct_answer": "The Evaluation tool helps identify edge cases where prompts might falter, allows rating individual results to determine prompt performance, ensures consistent performance across inputs, and enables prompt refinement for better reliability. Reviewing results across test cases helps spot patterns to make informed adjustments that lead to more robust AI applications."
    },
    {
      "id": "fdb1a88a",
      "question": "Which Claude model has the fastest comparative latency according to the comparison tables?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/models#model-comparison",
        "https://docs.anthropic.com/en/docs/about-claude/models#legacy-model-comparison"
      ],
      "correct_answer": "The Claude 3 Haiku model has the fastest comparative latency"
    },
    {
      "id": "bad75951",
      "question": "How can you build up a conversation with multiple turns using the Anthropic Messages API in Python?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/client-sdks#python",
        "https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns"
      ],
      "correct_answer": "To have a multi-turn conversation using the Anthropic Messages API in Python, send the full conversation history in the messages parameter each time, including any prior user and assistant messages. The API is stateless, so the entire context must be provided with each request."
    },
    {
      "id": "4d389de9",
      "question": "How can using XML tags to provide a specific role or context help improve Claude's analysis of a legal contract compared to not using a role prompt?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags#examples",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts#example-1-legal-contract-analysis"
      ],
      "correct_answer": "Providing Claude with a specific role, such as being the General Counsel of a company, using XML tags can help it catch critical legal issues and risks in a contract that it might miss without the role context, potentially saving the company millions of dollars."
    },
    {
      "id": "7cd7d72d",
      "question": "What are the key differences between how Claude 3 Opus and Claude 3 Sonnet handle missing information when making tool calls?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#chain-of-thought",
        "https://docs.anthropic.com/en/docs/build-with-claude/tool-use#tool-use-examples"
      ],
      "correct_answer": "When required parameters are missing, Claude 3 Opus is more likely to ask the user for the missing information, while Claude 3 Sonnet is more likely to try to infer reasonable values on its own to proceed with the tool call."
    },
    {
      "id": "8019b9f5",
      "question": "What steps should be taken to ensure a reliable deployment of an automated ticket routing system using Claude into a production environment?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#additional-considerations",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow"
      ],
      "correct_answer": "To ensure a reliable production deployment of Claude for ticket routing, key steps include implementing retry logic to handle errors, conducting thorough staging and load testing, setting up error handling and logging, using a gradual rollout process, providing documentation and training, and establishing monitoring and alerting."
    },
    {
      "id": "2c3d41c0",
      "question": "How should you evaluate a model's performance on a ticket routing classifier?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#evaluating-the-performance-of-your-ticket-routing-classifier",
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/ticket-routing#integrate-claude-into-your-support-workflow"
      ],
      "correct_answer": "You should evaluate performance in terms of accuracy, cost, and speed."
    },
    {
      "id": "c3f8cb89",
      "question": "What two methods does Anthropic recommend for learning how to prompt engineer with Claude before diving into the techniques?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#how-to-prompt-engineer",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#prompt-engineering-tutorial"
      ],
      "correct_answer": "Anthropic recommends trying their interactive GitHub prompting tutorial and Google Sheets prompting tutorial to learn prompt engineering concepts before diving into the techniques in the documentation."
    },
    {
      "id": "d4a4f9bb",
      "question": "What are the key differences between a pretrained large language model and Claude in terms of their training and capabilities?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#llm",
        "https://docs.anthropic.com/en/docs/resources/glossary#pretraining"
      ],
      "correct_answer": "Pretrained large language models are trained on unlabeled text data to predict the next word given the previous context, but are not inherently good at answering questions or following instructions without prompt engineering. In contrast, Claude is a large language model that has been further fine-tuned and trained using RLHF to be more helpful, honest, and capable of performing a wider range of useful tasks."
    },
    {
      "id": "8853f420",
      "question": "What are some key advantages of using prompt engineering instead of fine-tuning to adapt a pretrained language model for a specific task or domain?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering#when-to-prompt-engineer",
        "https://docs.anthropic.com/en/docs/resources/glossary#pretraining"
      ],
      "correct_answer": "Prompt engineering is typically faster, more cost-effective, requires less data and compute resources, and preserves the model's general knowledge compared to fine-tuning. It also allows for greater flexibility, rapid iteration, and transparency."
    },
    {
      "id": "618c064a",
      "question": "How can you authenticate with GCP before running requests to access Claude models on Vertex AI?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/claude-on-vertex-ai#making-requests",
        "https://docs.anthropic.com/en/api/claude-on-vertex-ai#accessing-vertex-ai"
      ],
      "correct_answer": "Before running requests to access Claude models on Vertex AI, you may need to run `gcloud auth application-default login` to authenticate with GCP."
    },
    {
      "id": "093",
      "question": "What new capabilities and features were introduced by Anthropic on May 10th, 2024 and how do they enable users to create and tailor prompts for specific tasks?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/api#may-10th-2024"
      ],
      "correct_answer": "According to the information provided, on May 10th, 2024, Anthropic introduced a new \"Prompt Generator\" tool in the Developer Console. This tool is designed to help users guide Claude to generate high-quality prompts tailored to their specific tasks. The text states that the Prompt Generator \"makes it easy to guide Claude to generate a high-quality prompts tailored to your specific tasks.\" This indicates that the Prompt Generator feature provides users with the ability to create customized prompts for Claude, going beyond the standard prompting capabilities. By combining this information with the details about the Claude iOS app and the Claude Team plan released around the same time, we can infer that Anthropic was expanding its platform and tools to provide users with more advanced capabilities for interacting with and leveraging the Claude AI assistant for their specific needs and use cases."
    },
    {
      "id": "dee02469",
      "question": "On what date did both the Claude 3.5 Sonnet model and the Artifacts feature in Claude.ai become available?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/release-notes/api#june-20th-2024",
        "https://docs.anthropic.com/en/release-notes/claude-apps#june-20th-2024"
      ],
      "correct_answer": "Both Claude 3.5 Sonnet and the Artifacts feature in Claude.ai became available on June 20th, 2024."
    },
    {
      "id": "8367b42d",
      "question": "When putting words in Claude's mouth to shape the response, what header and value can you use in the request to limit Claude's response to a single token?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#basic-request-and-response",
        "https://docs.anthropic.com/en/api/messages-examples#putting-words-in-claudes-mouth"
      ],
      "correct_answer": "You can use \"max_tokens\": 1 in the request to limit Claude's response to a single token when putting words in its mouth."
    },
    {
      "id": "d82625d3",
      "question": "What does the temperature parameter do when working with large language models?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#temperature",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/reduce-latency#2-optimize-prompt-and-output-length"
      ],
      "correct_answer": "Temperature is a parameter that controls the randomness of the model during generation"
    },
    {
      "id": "6e1e9bb2",
      "question": "What are two ways to specify API parameters when calling the Claude API using Claude for Sheets?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#tips-for-effective-evaluation",
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#how-to-prefill-claudes-response",
        "https://docs.anthropic.com/en/docs/build-with-claude/claude-for-sheets#enter-your-first-prompt"
      ],
      "correct_answer": "When calling the Claude API using Claude for Sheets, you can specify API parameters in two ways: 1) As additional arguments after the prompt and model in the CLAUDE() function, like =CLAUDE(prompt, model, \"max_tokens\", 3). 2) By passing in an API key to be used just for a specific cell, like \"api_key\", \"sk-ant-api03-j1W...\""
    },
    {
      "id": "5bb18b73",
      "question": "How does prefilling the response with an opening curly brace ({ ) affect Claude's output when extracting structured data from text?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prefill-claudes-response#example-1-controlling-output-formatting-and-skipping-the-preamble"
      ],
      "correct_answer": "Prefilling Claude's response with { causes it to skip the preamble explanation and directly output the extracted data as a JSON object, resulting in a more concise response that is easier for programs to parse without additional processing."
    },
    {
      "id": "6d9b42c3",
      "question": "What are some helpful resources provided by Anthropic to dive deeper into building with images using Claude?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#dive-deeper-into-vision",
        "https://docs.anthropic.com/en/docs/build-with-claude/vision#about-the-prompt-examples"
      ],
      "correct_answer": "Anthropic provides a multimodal cookbook with tips on getting started with images and best practices, as well as API reference documentation for the Messages API that includes example API calls involving images."
    },
    {
      "id": "ccd10bfd",
      "question": "How do you specify the API key when creating a new Anthropic client in the Python and TypeScript SDK examples?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/client-sdks#typescript",
        "https://docs.anthropic.com/en/api/client-sdks#python"
      ],
      "correct_answer": "In both the Python and TypeScript examples, you can specify the API key as a string parameter when creating a new Anthropic client object. If no API key is provided, it defaults to using the ANTHROPIC_API_KEY environment variable."
    },
    {
      "id": "2fa26c55",
      "question": "What are two key benefits of using the Anthropic Evaluation tool when developing prompts for an AI classification application?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/about-claude/use-cases/classification#2-develop-your-test-cases",
        "https://docs.anthropic.com/en/docs/test-and-evaluate/eval-tool#understanding-results"
      ],
      "correct_answer": "The Evaluation tool helps identify edge cases where the prompt might falter, and ensures consistent performance across a range of test case inputs. This allows you to refine the prompt for better reliability in the AI classification application."
    },
    {
      "id": "c7132d11",
      "question": "What are the key differences between a pretrained language model like Claude's underlying model, and the final version of Claude available through Anthropic's API?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/docs/resources/glossary#pretraining",
        "https://docs.anthropic.com/en/docs/resources/glossary#llm",
        "https://docs.anthropic.com/en/docs/resources/glossary#fine-tuning"
      ],
      "correct_answer": "The pretrained language model that forms Claude's foundation is not inherently good at answering questions or following instructions. To create the helpful, honest and safe Claude assistant available through the API, the pretrained model underwent fine-tuning and reinforcement learning from human feedback (RLHF)."
    },
    {
      "id": "feb91b26",
      "question": "What is the IPv6 address range used by Anthropic?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/ip-addresses#ipv6"
      ],
      "correct_answer": "The IPv6 address range used by Anthropic is 2607:6bc0::/48."
    },
    {
      "id": "32c48e52",
      "question": "When using the Python SDK to create a message with Claude, what are two ways you can specify your API key?",
      "correct_chunks": [
        "https://docs.anthropic.com/en/api/messages-examples#multiple-conversational-turns",
        "https://docs.anthropic.com/en/api/client-sdks#python"
      ],
      "correct_answer": "When using the Python SDK, you can specify your API key either by passing it as the api_key parameter when initializing the Anthropic client, or by setting it as an environment variable named ANTHROPIC_API_KEY which the client will use by default."
    }
  ]
</file>
<file name="skills/retrieval_augmented_generation/evaluation/eval_end_to_end.py">
from typing import Dict, Union, Any, List
from anthropic import Anthropic
import re
import os
import xml.etree.ElementTree as ET

def evaluate_end_to_end(query, generated_answer, correct_answer):
    
    prompt = f"""
    You are an AI assistant tasked with evaluating the correctness of answers to questions about Anthropic's documentation.
    
    Question: {query}
    
    Correct Answer: {correct_answer}
    
    Generated Answer: {generated_answer}
    
    Is the Generated Answer correct based on the Correct Answer? You should pay attention to the substance of the answer, and ignore minute details that may differ. 
    
    Small differences or changes in wording don't matter. If the generated answer and correct answer are saying essentially the same thing then that generated answer should be marked correct. 
    
    However, if there is any critical piece of information which is missing from the generated answer in comparison to the correct answer, then we should mark this as incorrect. 
    
    Finally, if there are any direct contradictions between the correct answer and generated answer, we should deem the generated answer to be incorrect.
    
    Respond in the following XML format:
    &lt;evaluation&gt;
    &lt;content&gt;
    &lt;explanation&gt;Your explanation here&lt;/explanation&gt;
    &lt;is_correct&gt;true/false&lt;/is_correct&gt;
    &lt;/content&gt;
    &lt;/evaluation&gt;
    """
    
    client = Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))
    try:
        response = client.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=1500,
            messages=[
                {"role": "user", "content": prompt},
                {"role": "assistant", "content": "&lt;evaluation&gt;"}
            ],
            temperature=0,
            stop_sequences=["&lt;/evaluation&gt;"]
        )
        
        response_text = response.content[0].text

        # Use regex to extract explanation and is_correct
        explanation_match = re.search(r'&lt;explanation&gt;(.*?)&lt;/explanation&gt;', response_text, re.DOTALL)
        is_correct_match = re.search(r'&lt;is_correct&gt;(.*?)&lt;/is_correct&gt;', response_text, re.DOTALL)
        
        is_correct = True
        if explanation_match and is_correct_match:
            explanation = explanation_match.group(1).strip()
            is_correct = is_correct_match.group(1).strip().lower() == 'true'
        else:
            raise ValueError("Could not extract explanation or is_correct from response")
        
        result = {
            'question': query,
            'correct_answer': correct_answer,
            'generated_answer': generated_answer,
            'is_correct': is_correct,
            'explanation': explanation
        }

    except Exception as e:
        print(f"Unexpected error: {e}")
        result = {
            'question': query,
            'correct_answer': correct_answer,
            'generated_answer': generated_answer,
            'is_correct': False,
            'explanation': f"Unexpected error: {str(e)}"
        }
    
    return result

def get_assert(output: str, context) -&gt; Union[bool, float, Dict[str, Any]]:
    correct_answer = context['vars']['correct_answer']
    query = context['vars']['query']
    result = evaluate_end_to_end(query, output, correct_answer)
    score = 1
    if result['is_correct'] == False:
        score = 0
    
    return {
        "pass": result['is_correct'],
        "score": score,
        "reason": result["explanation"]
    }
</file>
<file name="skills/retrieval_augmented_generation/evaluation/eval_retrieval.py">
from typing import Dict, Union, Any, List
import ast

def calculate_mrr(retrieved_links: List[str], correct_links) -&gt; float:
    for i, link in enumerate(retrieved_links, 1):
        if link in correct_links:
            return 1 / i
    return 0

def evaluate_retrieval(retrieved_links, correct_links):
    correct_links = ast.literal_eval(correct_links)
    true_positives = len(set(retrieved_links) &amp; set(correct_links))
    precision = true_positives / len(retrieved_links) if retrieved_links else 0
    recall = true_positives / len(correct_links) if correct_links else 0
    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) &gt; 0 else 0
    mrr= calculate_mrr(retrieved_links, correct_links)
    return precision, recall, mrr, f1

def get_assert(output: str, context) -&gt; Union[bool, float, Dict[str, Any]]:
    correct_chunks = context['vars']['correct_chunks']

    try: 
        precision, recall, mrr, f1 = evaluate_retrieval(output, correct_chunks)
        metrics: Dict[str, float] = {}
        metrics['precision'] = precision
        metrics['recall'] = recall
        metrics['f1'] = f1
        metrics['mrr'] = mrr
        print("METRICS")
        print(metrics)
        overall_score = True
        if f1 &lt; 0.3:
            overall_score = False
        return {
            "pass": overall_score, #if f1 &gt; 0.3 we will pass, otherwise fail
            "score": f1,
            "reason": f"Precision: {precision} \n Recall: {recall} \n F1 Score: {f1} \n MRR: {mrr}",
            "componentResults": [
                {
                    "pass": True,
                    "score": mrr,
                    "reason": f"MRR is {mrr}",
                    "named_scores": {
                        "MRR": mrr
                    }
                },
                {
                    "pass": True,
                    "score": precision,
                    "reason": f"Precision is {precision}",
                    "named_scores": {
                        "Precision": precision
                    }
                },
                {
                    "pass": True,
                    "score": recall,
                    "reason": f"Recall is {recall}",
                    "named_scores": {
                        "Recall": recall
                    }
                }, 
                {
                    "pass": True,
                    "score": f1,
                    "reason": f"F1 is {f1}",
                    "named_scores": {
                        "F1": f1
                    }
                },
            ],
        }
    except Exception as e:
        return {
            "pass": False, #if f1 &gt; 0.3 we will pass, otherwise fail
            "score": f1,
            "reason": f"Unexpected error: {str(e)}",
            "componentResults": [
                {
                    "pass": False,
                    "score": mrr,
                    "reason": f"Unexpected error: {str(e)}",
                    "named_scores": {
                        "MRR": mrr
                    }
                },
                {
                    "pass": False,
                    "score": precision,
                    "reason": f"Unexpected error: {str(e)}",
                    "named_scores": {
                        "Precision": precision
                    }
                },
                {
                    "pass": False,
                    "score": recall,
                    "reason": f"Unexpected error: {str(e)}",
                    "named_scores": {
                        "Recall": recall
                    }
                }, 
                {
                    "pass": False,
                    "score": f1,
                    "reason": f"Unexpected error: {str(e)}",
                    "named_scores": {
                        "F1": f1
                    }
                },
            ],
        }
</file>
<file name="skills/retrieval_augmented_generation/evaluation/promptfooconfig_end_to_end.yaml">
# Learn more about building a configuration: https://promptfoo.dev/docs/configuration/guide
description: "End to End Performance - Base Eval"

prompts: 
  - prompts.py:answer_query_base
  - prompts.py:answer_query_level_two
  - prompts.py:answer_query_level_three

providers:
  - id: anthropic:messages:claude-3-haiku-20240307
    label: "Haiku: T-0.0"
    config:
      max_tokens: 2500
      temperature: 0

  - id: anthropic:messages:claude-3-5-sonnet-20240620
    label: "3.5 Sonnet: T-0.0"
    config:
      max_tokens: 2500
      temperature: 0

tests: promptfoo_datasets/end_to_end_dataset.csv
</file>
<file name="skills/retrieval_augmented_generation/evaluation/promptfooconfig_retrieval.yaml">
# Learn more about building a configuration: https://promptfoo.dev/docs/configuration/guide
description: "Retrieval - Base Eval"

prompts: ['{{ query }}']
providers: [
  'python:provider_retrieval.py:retrieve_base',
  'python:provider_retrieval.py:retrieve_level_two',
  'python:provider_retrieval.py:retrieve_level_three'
  ]

tests: promptfoo_datasets/retrieval_dataset.csv
</file>
<file name="skills/retrieval_augmented_generation/evaluation/prompts.py">
import json
import os
from typing import Callable, List, Dict, Any, Tuple, Set
from vectordb import VectorDB, SummaryIndexedVectorDB
from anthropic import Anthropic

client = Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))

# Initialize the VectorDB
db = VectorDB("anthropic_docs")
# Load the Anthropic documentation
with open('../data/anthropic_docs.json', 'r') as f:
    anthropic_docs = json.load(f)
db.load_data(anthropic_docs)

def _retrieve_base(query, db):
    results = db.search(query, k=3)
    context = ""
    for result in results:
        chunk = result['metadata']
        context += f"\n{chunk['text']}\n"
    return results, context

def answer_query_base(context):
    input_query = context['vars']['query']
    documents, document_context = _retrieve_base(input_query, db)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {input_query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {document_context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """

    return prompt

# Initialize the VectorDB
db_summary = SummaryIndexedVectorDB("anthropic_docs_summaries")
# Load the Anthropic documentation
with open("../data/anthropic_summary_indexed_docs.json", 'r') as f:
    anthropic_docs_summaries = json.load(f)
db_summary.load_data(anthropic_docs_summaries)

def retrieve_level_two(query):
    results = db_summary.search(query, k=3)
    context = ""
    for result in results:
        chunk = result['metadata']
        context += f"\n &lt;document&gt; \n {chunk['chunk_heading']}\n\nText\n {chunk['text']} \n\nSummary: \n {chunk['summary']} \n &lt;/document&gt; \n" #show model all 3 items
    return results, context

def answer_query_level_two(context):
    input_query = context['vars']['query']
    documents, document_context = retrieve_level_two(input_query)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {input_query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {document_context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """

    return prompt

# Initialize the VectorDB
db_rerank = SummaryIndexedVectorDB("anthropic_docs_rerank")
# Load the Anthropic documentation
with open("../data/anthropic_summary_indexed_docs.json", 'r') as f:
    anthropic_docs_summaries = json.load(f)
db_rerank.load_data(anthropic_docs_summaries)

def _rerank_results(query: str, results: List[Dict], k: int = 5) -&gt; List[Dict]:
    # Prepare the summaries with their indices
    summaries = []
    print(len(results))
    for i, result in enumerate(results):
        summary = "[{}] Document: {}".format(
            i,
            result['metadata']['chunk_heading'],
            result['metadata']['summary']
        )
        summary += " \n {}".format(result['metadata']['text'])
        summaries.append(summary)
    
    # Join summaries with newlines
    joined_summaries = "\n".join(summaries)
    
    prompt = f"""
    Query: {query}
    You are about to be given a group of documents, each preceded by its index number in square brackets. Your task is to select the only {k} most relevant documents from the list to help us answer the query.
    
    {joined_summaries}
    
    Output only the indices of {k} most relevant documents in order of relevance, separated by commas, enclosed in XML tags here:
    &lt;relevant_indices&gt;put the numbers of your indices here, seeparted by commas&lt;/relevant_indices&gt;
    """
    try:
        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=50,
            messages=[{"role": "user", "content": prompt}, {"role": "assistant", "content": "&lt;relevant_indices&gt;"}],
            temperature=0,
            stop_sequences=["&lt;/relevant_indices&gt;"]
        )
        
        # Extract the indices from the response
        response_text = response.content[0].text.strip()
        indices_str = response_text
        relevant_indices = []
        for idx in indices_str.split(','):
            try:
                relevant_indices.append(int(idx.strip()))
            except ValueError:
                continue  # Skip invalid indices
        print(indices_str)
        print(relevant_indices)
        # If we didn't get enough valid indices, fall back to the top k by original order
        if len(relevant_indices) == 0:
            relevant_indices = list(range(min(k, len(results))))
        
        # Ensure we don't have out-of-range indices
        relevant_indices = [idx for idx in relevant_indices if idx &lt; len(results)]
        
        # Return the reranked results
        reranked_results = [results[idx] for idx in relevant_indices[:k]]
        # Assign descending relevance scores
        for i, result in enumerate(reranked_results):
            result['relevance_score'] = 100 - i  # Highest score is 100, decreasing by 1 for each rank
        
        return reranked_results
    
    except Exception as e:
        print(f"An error occurred during reranking: {str(e)}")
        # Fall back to returning the top k results without reranking
        return results[:k]

def _retrieve_advanced(query: str, k: int = 3, initial_k: int = 20) -&gt; Tuple[List[Dict], str]:
    # Step 1: Get initial results
    initial_results = db_rerank.search(query, k=initial_k)

    # Step 2: Re-rank results
    reranked_results = _rerank_results(query, initial_results, k=k)
    
    # Step 3: Generate new context string from re-ranked results
    new_context = ""
    for result in reranked_results:
        chunk = result['metadata']
        new_context += f"\n &lt;document&gt; \n {chunk['chunk_heading']}\n\n{chunk['text']} \n &lt;/document&gt; \n"
    
    return reranked_results, new_context

# The answer_query_advanced function remains unchanged
def answer_query_level_three(context):
    input_query = context['vars']['query']
    documents, document_context = _retrieve_advanced(input_query)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {input_query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {document_context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """
    return prompt
</file>
<file name="skills/retrieval_augmented_generation/evaluation/provider_retrieval.py">
import json
import os
from typing import Callable, List, Dict, Any, Tuple, Set
from vectordb import VectorDB, SummaryIndexedVectorDB
from anthropic import Anthropic

# Initialize the VectorDB
db = VectorDB("anthropic_docs")
# Load the Anthropic documentation
with open('../data/anthropic_docs.json', 'r') as f:
    anthropic_docs = json.load(f)
db.load_data(anthropic_docs)

def retrieve_base(query, options, context):
    input_query = context['vars']['query']
    results = db.search(input_query, k=3)
    outputs = []
    for result in results:
        outputs.append(result['metadata']['chunk_link'])
    print(outputs)
    result = {"output": outputs}
    return result

# Initialize the VectorDB
db_summary = SummaryIndexedVectorDB("anthropic_docs_summaries")
# Load the Anthropic documentation
with open("../data/anthropic_summary_indexed_docs.json", 'r') as f:
    anthropic_docs_summaries = json.load(f)
db_summary.load_data(anthropic_docs_summaries)

def retrieve_level_two(query, options, context):
    input_query = context['vars']['query']
    results = db_summary.search(input_query, k=3)
    outputs = []
    for result in results:
        outputs.append(result['metadata']['chunk_link'])
    print(outputs)
    result = {"output": outputs}
    return result

def _rerank_results(query: str, results: List[Dict], k: int = 3) -&gt; List[Dict]:
    # Prepare the summaries with their indices
    summaries = []
    print(len(results))
    for i, result in enumerate(results):
        summary = "[{}] Document: {}".format(
            i,
            result['metadata']['chunk_heading'],
            result['metadata']['summary']
        )
        summary += " \n {}".format(result['metadata']['text'])
        summaries.append(summary)
    
    # Join summaries with newlines
    joined_summaries = "\n".join(summaries)
    
    prompt = f"""
    Query: {query}
    You are about to be given a group of documents, each preceded by its index number in square brackets. Your task is to select the only {k} most relevant documents from the list to help us answer the query.
    
    {joined_summaries}
    
    Output only the indices of {k} most relevant documents in order of relevance, separated by commas, enclosed in XML tags here:
    &lt;relevant_indices&gt;put the numbers of your indices here, seeparted by commas&lt;/relevant_indices&gt;
    """
    
    client = Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))
    try:
        response = client.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=50,
            messages=[{"role": "user", "content": prompt}, {"role": "assistant", "content": "&lt;relevant_indices&gt;"}],
            temperature=0,
            stop_sequences=["&lt;/relevant_indices&gt;"]
        )
        
        # Extract the indices from the response
        response_text = response.content[0].text.strip()
        indices_str = response_text
        relevant_indices = []
        for idx in indices_str.split(','):
            try:
                relevant_indices.append(int(idx.strip()))
            except ValueError:
                continue  # Skip invalid indices
        print(indices_str)
        print(relevant_indices)
        # If we didn't get enough valid indices, fall back to the top k by original order
        if len(relevant_indices) == 0:
            relevant_indices = list(range(min(k, len(results))))
        
        # Ensure we don't have out-of-range indices
        relevant_indices = [idx for idx in relevant_indices if idx &lt; len(results)]
        
        # Return the reranked results
        reranked_results = [results[idx] for idx in relevant_indices[:k]]
        # Assign descending relevance scores
        for i, result in enumerate(reranked_results):
            result['relevance_score'] = 100 - i  # Highest score is 100, decreasing by 1 for each rank
        
        return reranked_results
    
    except Exception as e:
        print(f"An error occurred during reranking: {str(e)}")
        # Fall back to returning the top k results without reranking
        return results[:k]


# Initialize the VectorDB
db_rerank = SummaryIndexedVectorDB("anthropic_docs_summaries_rerank")
# Load the Anthropic documentation
with open("../data/anthropic_summary_indexed_docs.json", 'r') as f:
    anthropic_docs_summaries = json.load(f)
db_rerank.load_data(anthropic_docs_summaries)

def retrieve_level_three(query, options, context):
    # Step 1: Get initial results from the summary db
    initial_results = db_rerank.search(query, k=20)

    # Step 2: Re-rank results
    reranked_results = _rerank_results(query, initial_results, k=3)
    
    # Step 3: Generate new context string from re-ranked results
    new_context = ""
    for result in reranked_results:
        chunk = result['metadata']
        new_context += f"\n &lt;document&gt; \n {chunk['chunk_heading']}\n\n{chunk['text']} \n &lt;/document&gt; \n"

    outputs = []
    for result in reranked_results:
        outputs.append(result['metadata']['chunk_link'])
    print(outputs)
    result = {"output": outputs}
    return result
</file>
<file name="skills/retrieval_augmented_generation/evaluation/vectordb.py">
import os
import pickle
import json
import numpy as np
import voyageai

class VectorDB:
    def __init__(self, name, api_key=None):
        if api_key is None:
            api_key = os.getenv("VOYAGE_API_KEY")
        self.client = voyageai.Client(api_key=api_key)
        self.name = name
        self.embeddings = []
        self.metadata = []
        self.query_cache = {}
        self.db_path = f"./data/{name}/vector_db.pkl"

    def load_data(self, data):
        if self.embeddings and self.metadata:
            print("Vector database is already loaded. Skipping data loading.")
            return
        if os.path.exists(self.db_path):
            print("Loading vector database from disk.")
            self.load_db()
            return
        
        texts = [f"Heading: {item['chunk_heading']}\n\n Chunk Text:{item['text']}" for item in data]
        self._embed_and_store(texts, data)
        self.save_db()
        print("Vector database loaded and saved.")

    def _embed_and_store(self, texts, data):
        batch_size = 128
        result = [
            self.client.embed(
                texts[i : i + batch_size],
                model="voyage-2"
            ).embeddings
            for i in range(0, len(texts), batch_size)
        ]
        self.embeddings = [embedding for batch in result for embedding in batch]
        self.metadata = data

    def search(self, query, k=3, similarity_threshold=0.75):
        if query in self.query_cache:
            query_embedding = self.query_cache[query]
        else:
            query_embedding = self.client.embed([query], model="voyage-2").embeddings[0]
            self.query_cache[query] = query_embedding

        if not self.embeddings:
            raise ValueError("No data loaded in the vector database.")

        similarities = np.dot(self.embeddings, query_embedding)
        top_indices = np.argsort(similarities)[::-1]
        top_examples = []
        
        for idx in top_indices:
            if similarities[idx] &gt;= similarity_threshold:
                example = {
                    "metadata": self.metadata[idx],
                    "similarity": similarities[idx],
                }
                top_examples.append(example)
                
                if len(top_examples) &gt;= k:
                    break
        self.save_db()
        return top_examples

    def save_db(self):
        data = {
            "embeddings": self.embeddings,
            "metadata": self.metadata,
            "query_cache": json.dumps(self.query_cache),
        }
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        with open(self.db_path, "wb") as file:
            pickle.dump(data, file)

    def load_db(self):
        if not os.path.exists(self.db_path):
            raise ValueError("Vector database file not found. Use load_data to create a new database.")
        with open(self.db_path, "rb") as file:
            data = pickle.load(file)
        self.embeddings = data["embeddings"]
        self.metadata = data["metadata"]
        self.query_cache = json.loads(data["query_cache"])


class SummaryIndexedVectorDB:
    def __init__(self, name, api_key=None):
        if api_key is None:
            api_key = os.getenv("VOYAGE_API_KEY")
        self.client = voyageai.Client(api_key=api_key)
        self.name = name
        self.embeddings = []
        self.metadata = []
        self.query_cache = {}
        self.db_path = f"./data/{name}/summary_indexed_vector_db.pkl"

    def load_data(self, data):
        if self.embeddings and self.metadata:
            print("Vector database is already loaded. Skipping data loading.")
            return
        if os.path.exists(self.db_path):
            print("Loading vector database from disk.")
            self.load_db()
            return
        
        texts = [f"{item['chunk_heading']}\n\n{item['text']}\n\n{item['summary']}" for item in data]  # Embed Chunk Heading + Text + Summary Together
        self._embed_and_store(texts, data)
        self.save_db()
        print("Vector database loaded and saved.")

    def _embed_and_store(self, texts, data):
        batch_size = 128
        result = [
            self.client.embed(
                texts[i : i + batch_size],
                model="voyage-2"
            ).embeddings
            for i in range(0, len(texts), batch_size)
        ]
        self.embeddings = [embedding for batch in result for embedding in batch]
        self.metadata = data

    def search(self, query, k=5, similarity_threshold=0.75):
        if query in self.query_cache:
            query_embedding = self.query_cache[query]
        else:
            query_embedding = self.client.embed([query], model="voyage-2").embeddings[0]
            self.query_cache[query] = query_embedding

        if not self.embeddings:
            raise ValueError("No data loaded in the vector database.")

        similarities = np.dot(self.embeddings, query_embedding)
        top_indices = np.argsort(similarities)[::-1]
        top_examples = []
        
        for idx in top_indices:
            if similarities[idx] &gt;= similarity_threshold:
                example = {
                    "metadata": self.metadata[idx],
                    "similarity": similarities[idx],
                }
                top_examples.append(example)
                
                if len(top_examples) &gt;= k:
                    break
        self.save_db()
        return top_examples

    def save_db(self):
        data = {
            "embeddings": self.embeddings,
            "metadata": self.metadata,
            "query_cache": json.dumps(self.query_cache),
        }
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        with open(self.db_path, "wb") as file:
            pickle.dump(data, file)

    def load_db(self):
        if not os.path.exists(self.db_path):
            raise ValueError("Vector database file not found. Use load_data to create a new database.")
        with open(self.db_path, "rb") as file:
            data = pickle.load(file)
        self.embeddings = data["embeddings"]
        self.metadata = data["metadata"]
        self.query_cache = json.loads(data["query_cache"])
</file>
<file name="skills/retrieval_augmented_generation/guide.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Retrieval Augmented Generation
# 
# Claude excels at a wide range of tasks, but it may struggle with queries specific to your unique business context. This is where Retrieval Augmented Generation (RAG) becomes invaluable. RAG enables Claude to leverage your internal knowledge bases or customer support documents, significantly enhancing its ability to answer domain-specific questions. Enterprises are increasingly building RAG applications to improve workflows in customer support, Q&amp;A over internal company documents, financial &amp; legal analysis, and much more.
# 
# In this guide, we'll demonstrate how to build and optimize a RAG system using the Anthropic documentation as our knowledge base. We'll walk you through:
# 
# 1) Setting up a basic RAG system using an in-memory vector database and embeddings from [Voyage AI](https://www.voyageai.com/).
# 
# 2) Building a robust evaluation suite. We'll go beyond 'vibes' based evals and show you how to measure the retrieval pipeine &amp; end to end performance independently.
# 
# 3) Implementing advanced techniques to improve RAG including summary indexing and re-ranking with Claude.
# 
# Through a series of targeted improvements, we achieved significant performance gains on the following metrics compared to a basic RAG pipeline (we'll explain what all these metrics *mean* in a bit)
# 
# - Avg Precision: 0.43 --&gt; 0.46
# - Avg Recall: 0.66 --&gt; 0.74
# - Avg F1 Score: 0.52 --&gt; 0.57
# - Avg Mean Reciprocal Rank (MRR): 0.74 --&gt; 0.93
# - End-to-End Accuracy: 70% --&gt; 83%
# 
# #### Note:
# 
# The evaluations in this cookbook are meant to mirror a production evaluation system, and you should keep in mind that they can take a while to run. Also of note: if you run the evaluations in full, you may come up against rate limits unless you are in [Tier 2 and above](https://docs.anthropic.com/en/api/rate-limits). Consider skipping the full end to end eval if you're trying to conserve token usage.
# 
# ## Table of Contents
# 
# 1) Setup
# 
# 2) Level 1 - Basic RAG
# 
# 3) Building an Evaluation System
# 
# 4) Level 2 - Summary Indexing
# 
# 5) Level 3 - Summary Indexing and Re-Ranking

# ## Setup
# 
# We'll need a few libraries, including:
# 
# 1) `anthropic` - to interact with Claude
# 
# 2) `voyageai` - to generate high quality embeddings
# 
# 3) `pandas`, `numpy`, `matplotlib`, and `scikit-learn` for data manipulation and visualization
# 
# 
# You'll also need API keys from [Anthropic](https://www.anthropic.com/) and [Voyage AI](https://www.voyageai.com/)

# In[ ]:


## setup
get_ipython().system('pip install anthropic')
get_ipython().system('pip install voyageai')
get_ipython().system('pip install pandas')
get_ipython().system('pip install numpy')
get_ipython().system('pip install matplotlib')
get_ipython().system('pip install seaborn')
get_ipython().system('pip install -U scikit-learn')


# In[ ]:


import os

os.environ['VOYAGE_API_KEY'] = "VOYAGE KEY HERE"
os.environ['ANTHROPIC_API_KEY'] = "ANTHROPIC KEY HERE"


# In[41]:


import anthropic
import os

client = anthropic.Anthropic(
    # This is the default and can be omitted
    api_key=os.getenv("ANTHROPIC_API_KEY"),
)


# ### Initialize a Vector DB Class
# 
# In this example, we're using an in-memory vector DB, but for a production application, you may want to use a hosted solution. 

# In[47]:


import os
import pickle
import json
import numpy as np
import voyageai

class VectorDB:
    def __init__(self, name, api_key=None):
        if api_key is None:
            api_key = os.getenv("VOYAGE_API_KEY")
        self.client = voyageai.Client(api_key=api_key)
        self.name = name
        self.embeddings = []
        self.metadata = []
        self.query_cache = {}
        self.db_path = f"./data/{name}/vector_db.pkl"

    def load_data(self, data):
        if self.embeddings and self.metadata:
            print("Vector database is already loaded. Skipping data loading.")
            return
        if os.path.exists(self.db_path):
            print("Loading vector database from disk.")
            self.load_db()
            return

        texts = [f"Heading: {item['chunk_heading']}\n\n Chunk Text:{item['text']}" for item in data]
        self._embed_and_store(texts, data)
        self.save_db()
        print("Vector database loaded and saved.")

    def _embed_and_store(self, texts, data):
        batch_size = 128
        result = [
            self.client.embed(
                texts[i : i + batch_size],
                model="voyage-2"
            ).embeddings
            for i in range(0, len(texts), batch_size)
        ]
        self.embeddings = [embedding for batch in result for embedding in batch]
        self.metadata = data

    def search(self, query, k=5, similarity_threshold=0.75):
        if query in self.query_cache:
            query_embedding = self.query_cache[query]
        else:
            query_embedding = self.client.embed([query], model="voyage-2").embeddings[0]
            self.query_cache[query] = query_embedding

        if not self.embeddings:
            raise ValueError("No data loaded in the vector database.")

        similarities = np.dot(self.embeddings, query_embedding)
        top_indices = np.argsort(similarities)[::-1]
        top_examples = []
        
        for idx in top_indices:
            if similarities[idx] &gt;= similarity_threshold:
                example = {
                    "metadata": self.metadata[idx],
                    "similarity": similarities[idx],
                }
                top_examples.append(example)
                
                if len(top_examples) &gt;= k:
                    break
        self.save_db()
        return top_examples

    def save_db(self):
        data = {
            "embeddings": self.embeddings,
            "metadata": self.metadata,
            "query_cache": json.dumps(self.query_cache),
        }
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        with open(self.db_path, "wb") as file:
            pickle.dump(data, file)

    def load_db(self):
        if not os.path.exists(self.db_path):
            raise ValueError("Vector database file not found. Use load_data to create a new database.")
        with open(self.db_path, "rb") as file:
            data = pickle.load(file)
        self.embeddings = data["embeddings"]
        self.metadata = data["metadata"]
        self.query_cache = json.loads(data["query_cache"])


# ## Level 1 - Basic RAG
# 
# To get started, we'll set up a basic RAG pipeline using a bare bones approach. This is sometimes called 'Naive RAG' by many in the industry. A basic RAG pipeline includes the following 3 steps:
# 
# 1) Chunk documents by heading - containing only the content from each subheading
# 
# 2) Embed each document
# 
# 3) Use Cosine similarity to retrieve documents in order to answer query

# In[48]:


import json
import matplotlib.pyplot as plt
import xml.etree.ElementTree as ET
from tqdm import tqdm
import logging
from typing import Callable, List, Dict, Any, Tuple, Set

# Load the evaluation dataset
with open('evaluation/docs_evaluation_dataset.json', 'r') as f:
    eval_data = json.load(f)

# Load the Anthropic documentation
with open('data/anthropic_docs.json', 'r') as f:
    anthropic_docs = json.load(f)

# Initialize the VectorDB
db = VectorDB("anthropic_docs")
db.load_data(anthropic_docs)

def retrieve_base(query, db):
    results = db.search(query, k=3)
    context = ""
    for result in results:
        chunk = result['metadata']
        context += f"\n{chunk['text']}\n"
    return results, context

def answer_query_base(query, db):
    documents, context = retrieve_base(query, db)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """
    response = client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=2500,
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=0
    )
    return response.content[0].text


# ## Eval Setup
# 
# When evaluating RAG applications, it's critical to evaluate the performance of the retrieval system and end to end system separately.
# 
# We synthetically generated an evaluation dataset consisting of 100 samples which include the following:
# - A question
# - Chunks from our docs which are relevant to that question. This is what we expect our retrieval system to retrieve when the question is asked
# - A correct answer to the question.
# 
# This is a relatively challenging dataset. Some of our questions require synthesis between more than one chunk in order to be answered correctly, so it's important that our system can load in more than one chunk at a time. You can inspect the dataset by opening `evaluation/docs_evaluation_dataset.json`
# 
# Run the next cell to see a preview of the dataset

# In[49]:


#previewing our eval dataset
import json

def preview_json(file_path, num_items=3):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
            
        if isinstance(data, list):
            preview_data = data[:num_items]
        elif isinstance(data, dict):
            preview_data = dict(list(data.items())[:num_items])
        else:
            print(f"Unexpected data type: {type(data)}. Cannot preview.")
            return
        
        print(f"Preview of the first {num_items} items from {file_path}:")
        print(json.dumps(preview_data, indent=2))
        print(f"\nTotal number of items: {len(data)}")
        
    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except json.JSONDecodeError:
        print(f"Invalid JSON in file: {file_path}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

preview_json('evaluation/docs_evaluation_dataset.json')


# # Metric Definitions
# We'll evaluate our system based on 5 key metrics: Precision, Recall, F1 Score, Mean Reciprocal Rank (MRR), and End-to-End Accuracy.
# 
# ## Retrieval Metrics:
# 
# ### Precision
# Precision represents the proportion of retrieved chunks that are actually relevant. It answers the question: "Of the chunks we retrieved, how many were correct?"
# 
# Key points:
# - High precision indicates an efficient system with few false positives.
# - Low precision suggests many irrelevant chunks are being retrieved.
# - Our system retrieves a minimum of 3 chunks per query, which may affect precision scores.
# 
# Formula:
# $$
# \text{Precision} = \frac{\text{True Positives}}{\text{Total Retrieved}} = \frac{|\text{Retrieved} \cap \text{Correct}|}{|\text{Retrieved}|}
# $$
# 
# ### Recall
# Recall measures the completeness of our retrieval system. It answers the question: "Of all the correct chunks that exist, how many did we manage to retrieve?"
# 
# Key points:
# - High recall indicates comprehensive coverage of necessary information.
# - Low recall suggests important chunks are being missed.
# - Recall is crucial for ensuring the LLM has access to all needed information.
# 
# Formula:
# $$
# \text{Recall} = \frac{\text{True Positives}}{\text{Total Correct}} = \frac{|\text{Retrieved} \cap \text{Correct}|}{|\text{Correct}|}
# $$
# 
# ### F1 Score
# The F1 score provides a balanced measure between precision and recall. It's particularly useful when you need a single metric to evaluate system performance, especially with uneven class distributions.
# 
# Key points:
# - F1 score ranges from 0 to 1, with 1 representing perfect precision and recall.
# - It's the harmonic mean of precision and recall, tending towards the lower of the two values.
# - Useful in scenarios where both false positives and false negatives are important.
# 
# Formula:
# $$
# \text{F1 Score} = 2 \times \frac{\text{Precision} \times \text{Recall}}{\text{Precision} + \text{Recall}}
# $$
# 
# Interpreting F1 score:
# - An F1 score of 1.0 indicates perfect precision and recall.
# - An F1 score of 0.0 indicates the worst performance.
# - Generally, the higher the F1 score, the better the overall performance.
# 
# ### Balancing Precision, Recall, and F1 Score:
# - There's often a trade-off between precision and recall.
# - Our system's minimum chunk retrieval favors recall over precision.
# - The optimal balance depends on the specific use case.
# - In many RAG systems, high recall is often prioritized, as LLMs can filter out less relevant information during generation.
# 
# ### Mean Reciprocal Rank (MRR) @k
# MRR measures how well our system ranks relevant information. It helps us understand how quickly a user would find what they're looking for if they started from the top of our retrieved results.
# 
# Key points:
# - MRR ranges from 0 to 1, where 1 is perfect (correct answer always first).
# - It only considers the rank of the first correct result for each query.
# - Higher MRR indicates better ranking of relevant information.
# 
# Formula:
# $$
# \text{MRR} = \frac{1}{|Q|} \sum_{i=1}^{|Q|} \frac{1}{\text{rank}_i}
# $$
# 
# Where:
# - |Q| is the total number of queries
# - rank_i is the position of the first relevant item for the i-th query
# 
# ## End to End Metrics:
# 
# ### End to End Accuracy
# We use an LLM-as-judge (Claude 3.5 Sonnet) to evaluate whether the generated answer is correct based on the question and ground truth answer.
# 
# Formula:
# $$
# \text{End to End Accuracy} = \frac{\text{Number of Correct Answers}}{\text{Total Number of Questions}}
# $$
# 
# This metric evaluates the entire pipeline, from retrieval to answer generation.

# ## Defining Our Metric Calculation Functions

# In[50]:


def calculate_mrr(retrieved_links: List[str], correct_links: Set[str]) -&gt; float:
    for i, link in enumerate(retrieved_links, 1):
        if link in correct_links:
            return 1 / i
    return 0

def evaluate_retrieval(retrieval_function: Callable, evaluation_data: List[Dict[str, Any]], db: Any) -&gt; Tuple[float, float, float, float, List[float], List[float], List[float]]:
    precisions = []
    recalls = []
    mrrs = []
    
    for i, item in enumerate(tqdm(evaluation_data, desc="Evaluating Retrieval")):
        try:
            retrieved_chunks, _ = retrieval_function(item['question'], db)
            retrieved_links = [chunk['metadata'].get('chunk_link', chunk['metadata'].get('url', '')) for chunk in retrieved_chunks]
        except Exception as e:
            logging.error(f"Error in retrieval function: {e}")
            continue

        correct_links = set(item['correct_chunks'])
        
        true_positives = len(set(retrieved_links) &amp; correct_links)
        precision = true_positives / len(retrieved_links) if retrieved_links else 0
        recall = true_positives / len(correct_links) if correct_links else 0
        mrr = calculate_mrr(retrieved_links, correct_links)
        
        precisions.append(precision)
        recalls.append(recall)
        mrrs.append(mrr)
        
        if (i + 1) % 10 == 0:
            print(f"Processed {i + 1}/{len(evaluation_data)} items. Current Avg Precision: {sum(precisions) / len(precisions):.4f}, Avg Recall: {sum(recalls) / len(recalls):.4f}, Avg MRR: {sum(mrrs) / len(mrrs):.4f}")
    
    avg_precision = sum(precisions) / len(precisions) if precisions else 0
    avg_recall = sum(recalls) / len(recalls) if recalls else 0
    avg_mrr = sum(mrrs) / len(mrrs) if mrrs else 0
    f1 = 2 * (avg_precision * avg_recall) / (avg_precision + avg_recall) if (avg_precision + avg_recall) &gt; 0 else 0
    
    return avg_precision, avg_recall, avg_mrr, f1, precisions, recalls, mrrs

def evaluate_end_to_end(answer_query_function, db, eval_data):
    correct_answers = 0
    results = []
    total_questions = len(eval_data)
    
    for i, item in enumerate(tqdm(eval_data, desc="Evaluating End-to-End")):
        query = item['question']
        correct_answer = item['correct_answer']
        generated_answer = answer_query_function(query, db)
        
        prompt = f"""
        You are an AI assistant tasked with evaluating the correctness of answers to questions about Anthropic's documentation.
        
        Question: {query}
        
        Correct Answer: {correct_answer}
        
        Generated Answer: {generated_answer}
        
        Is the Generated Answer correct based on the Correct Answer? You should pay attention to the substance of the answer, and ignore minute details that may differ. 
        
        Small differences or changes in wording don't matter. If the generated answer and correct answer are saying essentially the same thing then that generated answer should be marked correct. 
        
        However, if there is any critical piece of information which is missing from the generated answer in comparison to the correct answer, then we should mark this as incorrect. 
        
        Finally, if there are any direct contradictions between the correect answer and generated answer, we should deem the generated answer to be incorrect.
        
        Respond in the following XML format:
        &lt;evaluation&gt;
        &lt;content&gt;
        &lt;explanation&gt;Your explanation here&lt;/explanation&gt;
        &lt;is_correct&gt;true/false&lt;/is_correct&gt;
        &lt;/content&gt;
        &lt;/evaluation&gt;
        """
        
        try:
            response = client.messages.create(
                model="claude-3-5-sonnet-20240620",
                max_tokens=1500,
                messages=[
                    {"role": "user", "content": prompt},
                    {"role": "assistant", "content": "&lt;evaluation&gt;"}
                ],
                temperature=0,
                stop_sequences=["&lt;/evaluation&gt;"]
            )
            
            response_text = response.content[0].text
            print(response_text)
            evaluation = ET.fromstring(response_text)
            is_correct = evaluation.find('is_correct').text.lower() == 'true'
            
            if is_correct:
                correct_answers += 1
            results.append(is_correct)
            
            logging.info(f"Question {i + 1}/{total_questions}: {query}")
            logging.info(f"Correct: {is_correct}")
            logging.info("---")
            
        except ET.ParseError as e:
            logging.error(f"XML parsing error: {e}")
            is_correct = 'true' in response_text.lower()
            results.append(is_correct)
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            results.append(False)
        
        if (i + 1) % 10 == 0:
            current_accuracy = correct_answers / (i + 1)
            print(f"Processed {i + 1}/{total_questions} questions. Current Accuracy: {current_accuracy:.4f}")
        # time.sleep(2)
    accuracy = correct_answers / total_questions
    return accuracy, results


# ## Helper Function to Plot Performance

# In[94]:


import os
import json
import matplotlib.pyplot as plt
import seaborn as sns

def plot_performance(results_folder='evaluation/json_results', include_methods=None, colors=None):
    # Set default colors
    default_colors = ['skyblue', 'lightgreen', 'salmon']
    if colors is None:
        colors = default_colors
    
    # Load JSON files
    results = []
    for filename in os.listdir(results_folder):
        if filename.endswith('.json'):
            file_path = os.path.join(results_folder, filename)
            with open(file_path, 'r') as f:
                try:
                    data = json.load(f)
                    if 'name' not in data:
                        print(f"Warning: {filename} does not contain a 'name' field. Skipping.")
                        continue
                    if include_methods is None or data['name'] in include_methods:
                        results.append(data)
                except json.JSONDecodeError:
                    print(f"Warning: {filename} is not a valid JSON file. Skipping.")
    
    if not results:
        print("No JSON files found with matching 'name' fields.")
        return
    
    # Validate data
    required_metrics = ["average_precision", "average_recall", "average_f1", "average_mrr", "end_to_end_accuracy"]
    for result in results.copy():
        if not all(metric in result for metric in required_metrics):
            print(f"Warning: {result['name']} is missing some required metrics. Skipping.")
            results.remove(result)
    
    if not results:
        print("No valid results remaining after validation.")
        return
    
    # Sort results based on end-to-end accuracy
    results.sort(key=lambda x: x['end_to_end_accuracy'])
    
    # Prepare data for plotting
    methods = [result['name'] for result in results]
    metrics = required_metrics
    
    # Set up the plot
    plt.figure(figsize=(14, 6))
    sns.set_style("whitegrid")
    
    x = range(len(metrics))
    width = 0.8 / len(results)
    
    # Create color palette
    num_methods = len(results)
    color_palette = colors[:num_methods] + sns.color_palette("husl", num_methods - len(colors))
    
    # Plot bars for each method
    for i, (result, color) in enumerate(zip(results, color_palette)):
        values = [result[metric] for metric in metrics]
        offset = (i - len(results)/2 + 0.5) * width
        bars = plt.bar([xi + offset for xi in x], values, width, label=result['name'], color=color)
        
        # Add value labels on the bars
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                     f'{height:.2f}', ha='center', va='bottom', fontsize=8)
    
    # Customize the plot
    plt.xlabel('Metrics', fontsize=12)
    plt.ylabel('Values', fontsize=12)
    plt.title('RAG Performance Metrics (Sorted by End-to-End Accuracy)', fontsize=16)
    plt.xticks(x, metrics, rotation=45, ha='right')
    plt.legend(title='Methods', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.ylim(0, 1)
    
    plt.tight_layout()
    plt.show()


# ## Evaluating Our Base Case

# In[ ]:


import pandas as pd

avg_precision, avg_recall, avg_mrr, f1, precisions, recalls, mrrs = evaluate_retrieval(retrieve_base, eval_data, db)
e2e_accuracy, e2e_results = evaluate_end_to_end(answer_query_base, db, eval_data)

# Create a DataFrame
df = pd.DataFrame({
    'question': [item['question'] for item in eval_data],
    'retrieval_precision': precisions,
    'retrieval_recall': recalls,
    'retrieval_mrr': mrrs,
    'e2e_correct': e2e_results
})

# Save to CSV
df.to_csv('evaluation/csvs/evaluation_results_detailed.csv', index=False)
print("Detailed results saved to evaluation/csvs/evaluation_results_one.csv")

# Print the results
print(f"Average Precision: {avg_precision:.4f}")
print(f"Average Recall: {avg_recall:.4f}")
print(f"Average MRR: {avg_mrr:.4f}")
print(f"Average F1: {f1:.4f}")
print(f"End-to-End Accuracy: {e2e_accuracy:.4f}")

# Save the results to a file
with open('evaluation/json_results/evaluation_results_one.json', 'w') as f:
    json.dump({
        "name": "Basic RAG",
        "average_precision": avg_precision,
        "average_recall": avg_recall,
        "average_f1": f1,
        "average_mrr": avg_mrr,
        "end_to_end_accuracy": e2e_accuracy
    }, f, indent=2)

print("Evaluation complete. Results saved to evaluation_results_one.json, evaluation_results_one.csv")


# In[95]:


#let's visualize our performance
plot_performance('evaluation/json_results', ['Basic RAG'], colors=['skyblue'])


# # Level 2: Document Summarization for Enhanced Retrieval
# 
# In this section, we'll implement an improved approach to our retrieval system by incorporating document summaries. Instead of embedding chunks directly from the documents, we'll create a concise summary for each chunk and use this summary along with the original content in our embedding process.
# 
# This approach aims to capture the essence of each document chunk more effectively, potentially leading to improved retrieval performance.
# 
# Key steps in this process:
# 1. We load the original document chunks.
# 2. For each chunk, we generate a 2-3 sentence summary using Claude.
# 3. We store both the original content and the summary for each chunk in a new json file: `data/anthropic_summary_indexed_docs.json`
# 
# This summary-enhanced approach is designed to provide more context during the embedding and retrieval phases, potentially improving the system's ability to understand and match the most relevant documents to user queries.

# ## Generating the Summaries and Storing Them

# In[7]:


import json
from anthropic import Anthropic
from tqdm import tqdm

def generate_summaries(input_file, output_file):
 
    # Load the original documents
    with open(input_file, 'r') as f:
        docs = json.load(f)

    # Prepare the context about the overall knowledge base
    knowledge_base_context = "This is documentation for Anthropic's, a frontier AI lab building Claude, an LLM that excels at a variety of general purpose tasks. These docs contain model details and documentation on Anthropic's APIs."

    summarized_docs = []

    for doc in tqdm(docs, desc="Generating summaries"):
        prompt = f"""
        You are tasked with creating a short summary of the following content from Anthropic's documentation. 

        Context about the knowledge base:
        {knowledge_base_context}

        Content to summarize:
        Heading: {doc['chunk_heading']}
        {doc['text']}

        Please provide a brief summary of the above content in 2-3 sentences. The summary should capture the key points and be concise. We will be using it as a key part of our search pipeline when answering user queries about this content. 

        Avoid using any preamble whatsoever in your response. Statements such as 'here is the summary' or 'the summary is as follows' are prohibited. You should get straight into the summary itself and be concise. Every word matters.
        """

        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=150,
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )

        summary = response.content[0].text.strip()

        summarized_doc = {
            "chunk_link": doc["chunk_link"],
            "chunk_heading": doc["chunk_heading"],
            "text": doc["text"],
            "summary": summary
        }
        summarized_docs.append(summarized_doc)

    # Save the summarized documents to a new JSON file
    with open(output_file, 'w') as f:
        json.dump(summarized_docs, f, indent=2)

    print(f"Summaries generated and saved to {output_file}")

# generate_summaries('data/anthropic_docs.json', 'data/anthropic_summary_indexed_docs.json')


# # Summary-Indexed Vector Database Creation
# 
# Here, we're creating a new vector database that incorporates our summary-enhanced document chunks. This approach combines the original text, the chunk heading, and the newly generated summary into a single text for embedding.
# 
# Key features of this process:
# 1. We create embeddings for the combined text (heading + summary + original content) using the Voyage AI API.
# 2. The embeddings and full metadata (including summaries) are stored in our vector database.
# 3. We implement caching mechanisms to improve efficiency in repeated queries.
# 4. The database is saved to disk for persistence and quick loading in future sessions.
# 
# This summary-indexed approach aims to create more informative embeddings, potentially leading to more accurate and contextually relevant document retrieval.

# In[56]:


import os
import numpy as np
import pickle
import json
import voyageai

class SummaryIndexedVectorDB:
    def __init__(self, name, api_key=None):
        if api_key is None:
            api_key = os.getenv("VOYAGE_API_KEY")
        self.client = voyageai.Client(api_key=api_key)
        self.name = name
        self.embeddings = []
        self.metadata = []
        self.query_cache = {}
        self.db_path = f"./data/{name}/summary_indexed_vector_db.pkl"

    def load_data(self, data_file):
        # Check if the vector database is already loaded
        if self.embeddings and self.metadata:
            print("Vector database is already loaded. Skipping data loading.")
            return
        # Check if vector_db.pkl exists
        if os.path.exists(self.db_path):
            print("Loading vector database from disk.")
            self.load_db()
            return

        with open(data_file, 'r') as f:
            data = json.load(f)

        texts = [f"{item['chunk_heading']}\n\n{item['text']}\n\n{item['summary']}" for item in data]  # Embed Chunk Heading + Text + Summary Together
        # Embed more than 128 documents with a for loop
        batch_size = 128
        result = [
            self.client.embed(
                texts[i : i + batch_size],
                model="voyage-2"
            ).embeddings
            for i in range(0, len(texts), batch_size)
        ]

        # Flatten the embeddings
        self.embeddings = [embedding for batch in result for embedding in batch]
        self.metadata = data  # Store the entire item as metadata
        self.save_db()
        # Save the vector database to disk
        print("Vector database loaded and saved.")

    def search(self, query, k=3, similarity_threshold=0.75):
        query_embedding = None
        if query in self.query_cache:
            query_embedding = self.query_cache[query]
        else:
            query_embedding = self.client.embed([query], model="voyage-2").embeddings[0]
            self.query_cache[query] = query_embedding

        if not self.embeddings:
            raise ValueError("No data loaded in the vector database.")

        similarities = np.dot(self.embeddings, query_embedding)
        top_indices = np.argsort(similarities)[::-1]
        top_examples = []
        
        for idx in top_indices:
            if similarities[idx] &gt;= similarity_threshold:
                example = {
                    "metadata": self.metadata[idx],
                    "similarity": similarities[idx],
                }
                top_examples.append(example)
                
                if len(top_examples) &gt;= k:
                    break
        self.save_db()
        return top_examples
    
    def save_db(self):
        data = {
            "embeddings": self.embeddings,
            "metadata": self.metadata,
            "query_cache": json.dumps(self.query_cache),
        }

        # Ensure the directory exists
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        
        with open(self.db_path, "wb") as file:
            pickle.dump(data, file)

    def load_db(self):
        if not os.path.exists(self.db_path):
            raise ValueError("Vector database file not found. Use load_data to create a new database.")
        
        with open(self.db_path, "rb") as file:
            data = pickle.load(file)
        
        self.embeddings = data["embeddings"]
        self.metadata = data["metadata"]
        self.query_cache = json.loads(data["query_cache"])


# # Enhanced Retrieval Using Summary-Indexed Embeddings
# 
# In this section, we implement the retrieval process using our new summary-indexed vector database. This approach leverages the enhanced embeddings we created, which incorporate document summaries along with the original content.
# 
# Key aspects of this updated retrieval process:
# 1. We search the vector database using the query embedding, retrieving the top k most similar documents.
# 2. For each retrieved document, we include the chunk heading, summary, and full text in the context provided to the LLM.
# 3. This enriched context is then used to generate an answer to the user's query.
# 
# By including summaries in both the embedding and retrieval phases, we aim to provide the LLM with a more comprehensive and focused context. This could potentially lead to more accurate and relevant answers, as the LLM has access to both a concise overview (the summary) and the detailed information (the full text) for each relevant document chunk.

# In[57]:


def retrieve_level_two(query, db):
    results = db.search(query, k=3)
    context = ""
    for result in results:
        chunk = result['metadata']
        context += f"\n &lt;document&gt; \n {chunk['chunk_heading']}\n\nText\n {chunk['text']} \n\nSummary: \n {chunk['summary']} \n &lt;/document&gt; \n" #show model all 3 items
    return results, context

def answer_query_level_two(query, db):
    documents, context = retrieve_base(query, db)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """
    response = client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=2500,
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=0
    )
    return response.content[0].text


# ## Evaluating This Method vs Basic RAG

# In[ ]:


# Initialize the SummaryIndexedVectorDB
level_two_db = SummaryIndexedVectorDB("anthropic_docs_v2")
level_two_db.load_data('data/anthropic_summary_indexed_docs.json')

import pandas as pd

# Run the evaluations
avg_precision, avg_recall, avg_mrr, f1, precisions, recalls, mrrs  = evaluate_retrieval(retrieve_level_two, eval_data, level_two_db)
e2e_accuracy, e2e_results = evaluate_end_to_end(answer_query_level_two, level_two_db, eval_data)

# Create a DataFrame
df = pd.DataFrame({
    'question': [item['question'] for item in eval_data],
    'retrieval_precision': precisions,
    'retrieval_recall': recalls,
    'retrieval_mrr': mrrs,
    'e2e_correct': e2e_results
})

# Save to CSV
df.to_csv('evaluation/csvs/evaluation_results_detailed_level_two.csv', index=False)
print("Detailed results saved to evaluation_results_detailed.csv")

# Print the results
print(f"Average Precision: {avg_precision:.4f}")
print(f"Average Recall: {avg_recall:.4f}")
print(f"Average MRR: {avg_mrr:.4f}")
print(f"Average F1: {f1:.4f}")
print(f"End-to-End Accuracy: {e2e_accuracy:.4f}")

# Save the results to a file
with open('evaluation/json_results/evaluation_results_level_two.json', 'w') as f:
    json.dump({
        "name": "Summary Indexing",
        "average_precision": avg_precision,
        "average_recall": avg_recall,
        "average_f1": f1,
        "average_mrr": avg_mrr,
        "end_to_end_accuracy": e2e_accuracy
    }, f, indent=2)

print("Evaluation complete. Results saved to evaluation_results_level_two.json, evaluation_results_detailed_level_two.csv")


# In[96]:


#visualizing our performance
plot_performance('evaluation/json_results', ['Basic RAG', 'Summary Indexing'])


# ## Level 3 - Re-Ranking with Claude
# In this final enhancement to our retrieval system, we introduce a reranking step to further improve the relevance of the retrieved documents. This approach leverages Claude's power to better understand the context and nuances of both the query and the retrieved documents.
# 
# The `rerank_results` function uses Claude to reassess and reorder the initially retrieved documents:
# 1. It presents Claude with the query and summaries of all retrieved documents.
# 2. Claude is asked to select and rank the most relevant documents.
# 3. The function parses Claude's response to get the reranked document indices.
# 4. It includes fallback mechanisms in case of errors or insufficient results.
# 5. Finally, it assigns descending relevance scores to the reranked results.
# 
# The `retrieve_advanced` function implements the new retrieval pipeline:
# 1. We initially retrieve more documents than needed (default 20, configurable via `initial_k`) from the vector database.
# 2. We then use the `rerank_results` function to refine this larger set down to the most relevant documents (default 3, configurable via `k`).
# 3. Finally, it generates a new context string from these reranked documents.
# 
# This process casts a wider net initially and then uses AI to focus on the most pertinent information. By combining vector-based retrieval with LLM reranking, this approach aims to provide more accurate and contextually appropriate responses to user queries.
# 
# Our evaluations show significant improvements:
# - Accuracy increased from 78% in our previous system to 85%.
# - Precision was improved by using our re-ranker to reduce the number of documents shown to the LLM.
# - MRR (Mean Reciprocal Rank) was likely improved by asking Claude to rank the relevance of each document in order.
# 
# These improvements demonstrate the effectiveness of incorporating AI-powered reranking in our retrieval process.

# In[77]:


from typing import List, Dict

def rerank_results(query: str, results: List[Dict], k: int = 5) -&gt; List[Dict]:
    # Prepare the summaries with their indices
    summaries = []
    print(len(results))

    for i, result in enumerate(results):
        summary = f"[{i}] Document Summary: {result['metadata']['summary']}"
        summaries.append(summary)
    joined_summaries = "\n\n".join(summaries)
    
    prompt = f"""
    Query: {query}
    You are about to be given a group of documents, each preceded by its index number in square brackets. Your task is to select the only {k} most relevant documents from the list to help us answer the query.
    
    &lt;documents&gt;
    {joined_summaries}
    &lt;/documents&gt;

    Output only the indices of {k} most relevant documents in order of relevance, separated by commas, enclosed in XML tags here:
    &lt;relevant_indices&gt;put the numbers of your indices here, seeparted by commas&lt;/relevant_indices&gt;
    """
    try:
        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=50,
            messages=[{"role": "user", "content": prompt}, {"role": "assistant", "content": "&lt;relevant_indices&gt;"}],
            temperature=0,
            stop_sequences=["&lt;/relevant_indices&gt;"]
        )
        
        # Extract the indices from the response
        response_text = response.content[0].text.strip()
        indices_str = response_text
        relevant_indices = []
        for idx in indices_str.split(','):
            try:
                relevant_indices.append(int(idx.strip()))
            except ValueError:
                continue  # Skip invalid indices
        print(indices_str)
        print(relevant_indices)
        # If we didn't get enough valid indices, fall back to the top k by original order
        if len(relevant_indices) == 0:
            relevant_indices = list(range(min(k, len(results))))
        
        # Ensure we don't have out-of-range indices
        relevant_indices = [idx for idx in relevant_indices if idx &lt; len(results)]
        
        # Return the reranked results
        reranked_results = [results[idx] for idx in relevant_indices[:k]]
        # Assign descending relevance scores
        for i, result in enumerate(reranked_results):
            result['relevance_score'] = 100 - i  # Highest score is 100, decreasing by 1 for each rank
        
        return reranked_results
    
    except Exception as e:
        print(f"An error occurred during reranking: {str(e)}")
        # Fall back to returning the top k results without reranking
        return results[:k]

def retrieve_advanced(query: str, db: SummaryIndexedVectorDB, k: int = 3, initial_k: int = 20) -&gt; Tuple[List[Dict], str]:
    # Step 1: Get initial results
    initial_results = db.search(query, k=initial_k)

    # Step 2: Re-rank results
    reranked_results = rerank_results(query, initial_results, k=k)
    
    # Step 3: Generate new context string from re-ranked results
    new_context = ""
    for result in reranked_results:
        chunk = result['metadata']
        new_context += f"\n &lt;document&gt; \n {chunk['chunk_heading']}\n\n{chunk['text']} \n &lt;/document&gt; \n"
     
    return reranked_results, new_context

# The answer_query_advanced function remains unchanged
def answer_query_advanced(query: str, db: SummaryIndexedVectorDB):
    documents, context = retrieve_advanced(query, db)
    prompt = f"""
    You have been tasked with helping us to answer the following query: 
    &lt;query&gt;
    {query}
    &lt;/query&gt;
    You have access to the following documents which are meant to provide context as you answer the query:
    &lt;documents&gt;
    {context}
    &lt;/documents&gt;
    Please remain faithful to the underlying context, and only deviate from it if you are 100% sure that you know the answer already. 
    Answer the question now, and avoid providing preamble such as 'Here is the answer', etc
    """
    response = client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=2500,
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    return response.content[0].text


# ## Evaluation

# In[ ]:


# Initialize the SummaryIndexedVectorDB
level_three_db = SummaryIndexedVectorDB("anthropic_docs_v3")
level_three_db.load_data('data/anthropic_summary_indexed_docs.json')

import pandas as pd

# Run the evaluations
avg_precision, avg_recall, avg_mrr, f1, precisions, recalls, mrrs  = evaluate_retrieval(retrieve_advanced, eval_data, level_three_db)
e2e_accuracy, e2e_results = evaluate_end_to_end(answer_query_advanced, level_two_db, eval_data)

# Create a DataFrame
df = pd.DataFrame({
    'question': [item['question'] for item in eval_data],
    'retrieval_precision': precisions,
    'retrieval_recall': recalls,
    'retrieval_mrr': mrrs,
    'e2e_correct': e2e_results
})

# Save to CSV
df.to_csv('evaluation/csvs/evaluation_results_detailed_level_three.csv', index=False)
print("Detailed results saved to evaluation_results_detailed_level_three.csv")

# Plot the results
# Print the results
print(f"Average Precision: {avg_precision:.4f}")
print(f"Average Recall: {avg_recall:.4f}")
print(f"Average F1: {f1:.4f}")
print(f"Average Mean Reciprocal Rank: {avg_mrr:4f}")
print(f"End-to-End Accuracy: {e2e_accuracy:.4f}")

# Save the results to a file
with open('evaluation/json_data/evaluation_results_level_three.json', 'w') as f:
    json.dump({
        "name": "Summary Indexing + Re-Ranking",
        "average_precision": avg_precision,
        "average_recall": avg_recall,
        "average_f1": f1,
        "average_mrr": avg_mrr,
        "end_to_end_accuracy": e2e_accuracy
    }, f, indent=2)

print("Evaluation complete. Results saved to evaluation_results_level_three.json, evaluation_results_detailed_level_three.csv, and evaluation_results_level_three.png")


# In[111]:


#visualizing our performance
plot_performance('evaluation/json_results', ['Basic RAG', 'Summary Indexing', 'Summary Indexing + Re-Ranking'], colors=['skyblue', 'lightgreen', 'salmon'])


# ## Evaluation - Going Deeper with Promptfoo
# 
# This guide has illustrated the importance of measuring prompt performance empirically when prompt engineering. You can read more about our empirical methodology to prompt engineering here. Using a Jupyter Notebook is a great way to start prompt engineering but as your datasets grow larger and your prompts more numerous it is important to leverage tooling that will scale with you.
# 
# In this section of the guide we will explore using Promptfoo an open source LLM evaluation toolkit. To get started head over to the ./evaluation directory and checkout the ./evaluation/README.md.
# 
# Promptfoo makes it very easy to build automated test suites that compare different models, hyperparameter choices, and prompts against one another. 
# 
# As an example, you can run the below cell to see the average performance of Haiku vs 3.5 Sonnet across all of our test cases. 

# In[117]:


import json
import pandas as pd
import numpy as np

# Load the JSON file
with open('data/end_to_end_results.json', 'r') as f:
    data = json.load(f)

# Extract the results
results = data['results']['results']

# Create a DataFrame
df = pd.DataFrame(results)

# Extract provider, prompt, and score information
df['provider'] = df['provider'].apply(lambda x: x['label'] if isinstance(x, dict) else x)
df['prompt'] = df['prompt'].apply(lambda x: x['label'] if isinstance(x, dict) else x)

# Function to safely extract scores
def extract_score(x):
    if isinstance(x, dict) and 'score' in x:
        return x['score'] * 100  # Convert to percentage
    return np.nan

df['score'] = df['gradingResult'].apply(extract_score)

# Group by provider and prompt, then calculate mean scores
result = df.groupby(['provider', 'prompt'])['score'].mean().unstack()

# Fill NaN values with 0
result = result.fillna(0)

# Calculate the average score across all prompts for each provider
result['Average'] = result.mean(axis=1)

# Sort the result by the average score
result = result.sort_values(by='Average', ascending=False)

# Round the results to 2 decimal places
result = result.round(2)
# Calculate overall statistics
overall_average = result['Average'].mean()
overall_std = result['Average'].std()
best_provider = result['Average'].idxmax()
worst_provider = result['Average'].idxmin()

print(f"\nOverall Statistics:")
print(f"Best Performing Provider: {best_provider} ({result.loc[best_provider, 'Average']:.2f}%)")
print(f"Worst Performing Provider: {worst_provider} ({result.loc[worst_provider, 'Average']:.2f}%)")


</file>
<file name="skills/summarization/data/multiple_subleases.py">
# All of these sublease agreements were created by Claude.

document1 = """
COMMERCIAL SUBLEASE AGREEMENT

THIS COMMERCIAL SUBLEASE AGREEMENT (hereinafter referred to as the "Sublease") is made and entered into on this 15th day of August, 2023 (the "Effective Date"), by and between:

SUBLESSOR: Apex Innovations, Inc., a Delaware corporation with its principal place of business at 1234 Tech Boulevard, Suite 5000, San Francisco, CA 94105 (hereinafter referred to as the "Sublessor")

AND

SUBLESSEE: Quantum Dynamics, LLC, a California limited liability company with its principal place of business at 5678 Startup Lane, Palo Alto, CA 94301 (hereinafter referred to as the "Sublessee")

WITNESSETH:

WHEREAS, Sublessor is the Tenant under that certain Master Lease Agreement dated January 1, 2020 (hereinafter referred to as the "Master Lease"), wherein Innovate Properties, LLP (hereinafter referred to as the "Master Lessor") leased to Sublessor those certain premises consisting of approximately 50,000 square feet of office space located at 9876 Innovation Park, Building C, Floors 10-12, San Francisco, CA 94107 (hereinafter referred to as the "Master Premises");

WHEREAS, Sublessor desires to sublease a portion of the Master Premises to Sublessee, and Sublessee desires to sublease the same from Sublessor;

NOW, THEREFORE, in consideration of the mutual covenants and agreements herein contained, and other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, the parties hereto agree as follows:

1. SUBLEASED PREMISES

1.1 Description: Sublessor hereby subleases to Sublessee, and Sublessee hereby subleases from Sublessor, a portion of the Master Premises consisting of approximately 15,000 square feet of office space located on the 11th floor of the building at 9876 Innovation Park, Building C, San Francisco, CA 94107 (hereinafter referred to as the "Subleased Premises"). The Subleased Premises are more particularly described in Exhibit A attached hereto and incorporated herein by reference.

1.2 Common Areas: Sublessee shall have the non-exclusive right to use, in common with Sublessor and other tenants or occupants of the Master Premises, the common areas of the building, including but not limited to lobbies, elevators, stairways, parking facilities, and other common facilities, subject to the terms and conditions of the Master Lease and any rules and regulations promulgated by the Master Lessor or Sublessor.

2. TERM

2.1 Initial Term: The initial term of this Sublease shall commence on September 1, 2023 (the "Commencement Date") and shall expire on August 31, 2026 (the "Expiration Date"), unless sooner terminated in accordance with the provisions of this Sublease or the Master Lease (the "Initial Term").

2.2 Option to Extend: Provided that Sublessee is not in default under any of the terms and conditions of this Sublease, Sublessee shall have one (1) option to extend the term of this Sublease for an additional period of three (3) years (the "Extension Term") upon the same terms and conditions contained in this Sublease, except that the Base Rent during the Extension Term shall be as set forth in Section 3.2 below. Sublessee shall exercise this option by giving Sublessor written notice of its intent to do so no later than nine (9) months prior to the expiration of the Initial Term.

3. RENT

3.1 Base Rent for Initial Term: Commencing on the Commencement Date and continuing throughout the Initial Term, Sublessee shall pay to Sublessor as base rent for the Subleased Premises the sum of Seventy-Five Thousand Dollars ($75,000.00) per month ("Base Rent"). Base Rent shall be payable in advance on or before the first day of each calendar month during the Term, without notice, demand, deduction, or offset.

3.2 Base Rent for Extension Term: If Sublessee exercises its option to extend the Term as provided in Section 2.2, the Base Rent for the Extension Term shall be the greater of (i) the Base Rent in effect immediately prior to the commencement of the Extension Term, increased by three percent (3%) per annum, compounded annually, or (ii) the then-prevailing fair market rental rate for comparable space in the building and surrounding area, as mutually agreed upon by Sublessor and Sublessee. If Sublessor and Sublessee are unable to agree upon the fair market rental rate within thirty (30) days after Sublessee's exercise of the extension option, the fair market rental rate shall be determined by arbitration in accordance with the procedures set forth in Exhibit B attached hereto.

3.3 Additional Rent: In addition to the Base Rent, Sublessee shall pay to Sublessor as additional rent Sublessee's Proportionate Share (as defined below) of Operating Expenses (as defined in the Master Lease) for the Master Premises. Sublessee's Proportionate Share shall be thirty percent (30%), which is the percentage obtained by dividing the rentable square footage of the Subleased Premises (15,000 sq. ft.) by the rentable square footage of the Master Premises (50,000 sq. ft.). Sublessee's obligation to pay additional rent shall commence on the Commencement Date and shall be payable in monthly installments as provided in the Master Lease.

3.4 Late Charges: If any installment of Base Rent or additional rent is not received by Sublessor within five (5) days after the date when due, Sublessee shall pay to Sublessor a late charge equal to five percent (5%) of the overdue amount to cover the extra expense involved in handling delinquent payments. The parties agree that this late charge represents a fair and reasonable estimate of the costs that Sublessor will incur by reason of late payment by Sublessee.

4. SECURITY DEPOSIT

4.1 Amount: Upon execution of this Sublease, Sublessee shall deposit with Sublessor the sum of Two Hundred Twenty-Five Thousand Dollars ($225,000.00) as a security deposit (the "Security Deposit") to secure Sublessee's faithful performance of all terms, covenants, and conditions of this Sublease.

4.2 Use and Return: Sublessor may, but shall not be obligated to, use the Security Deposit or any portion thereof to cure any breach or default by Sublessee under this Sublease, or to compensate Sublessor for any damage it incurs as a result of Sublessee's failure to perform any of its obligations hereunder. If Sublessor uses any portion of the Security Deposit, Sublessee shall, within ten (10) days after written demand therefor, restore the Security Deposit to its original amount. Provided that Sublessee has fully and faithfully performed all of its obligations under this Sublease, Sublessor shall return the Security Deposit, or any balance thereof, to Sublessee within thirty (30) days after the expiration or earlier termination of this Sublease.

5. USE

5.1 Permitted Use: The Subleased Premises shall be used and occupied by Sublessee solely for general office purposes and other uses permitted under the Master Lease, and for no other purpose without the prior written consent of Sublessor and Master Lessor.

5.2 Compliance with Laws: Sublessee shall, at its sole cost and expense, comply with all laws, ordinances, orders, rules, and regulations of all governmental authorities having jurisdiction over the Subleased Premises or Sublessee's use thereof, including without limitation, the Americans with Disabilities Act and all environmental laws and regulations.

5.3 Prohibited Uses: Sublessee shall not use or permit the use of the Subleased Premises in any manner that will (i) create waste or a nuisance, (ii) disturb other tenants or occupants of the building, (iii) invalidate or increase the premiums for any insurance policies covering the building or its contents, or (iv) violate any provision of the Master Lease.

6. MAINTENANCE AND REPAIRS

6.1 Sublessee's Obligations: Sublessee shall, at its sole cost and expense, keep and maintain the Subleased Premises and every part thereof in good order, condition, and repair, ordinary wear and tear excepted. Sublessee's obligations shall include, without limitation, the maintenance, repair, and replacement of all interior walls, floors, ceilings, doors, windows, and fixtures within the Subleased Premises.

6.2 Sublessor's Obligations: Sublessor shall have no obligation to maintain, repair, or replace any portion of the Subleased Premises, except to the extent such obligation is imposed on Sublessor as the Tenant under the Master Lease. In such event, Sublessee shall promptly reimburse Sublessor for Sublessee's Proportionate Share of the costs incurred by Sublessor in performing such obligations.

7. ALTERATIONS AND IMPROVEMENTS

7.1 Sublessee's Alterations: Sublessee shall not make any alterations, additions, or improvements to the Subleased Premises (collectively, "Alterations") without the prior written consent of Sublessor and Master Lessor, which consent may be withheld in their sole and absolute discretion. Any approved Alterations shall be made at Sublessee's sole cost and expense, in accordance with all applicable laws and building codes, and in a good and workmanlike manner.

7.2 Removal of Alterations: Unless otherwise agreed in writing, all Alterations made by Sublessee shall become the property of Sublessor upon installation and shall remain upon and be surrendered with the Subleased Premises upon the expiration or earlier termination of this Sublease. Notwithstanding the foregoing, Sublessor may require Sublessee to remove any Alterations made by Sublessee and to restore the Subleased Premises to its original condition, all at Sublessee's sole cost and expense.

8. ASSIGNMENT AND SUBLETTING

8.1 Prohibition: Sublessee shall not assign this Sublease or any interest herein, nor sublet the Subleased Premises or any part thereof, nor permit the use or occupancy of the Subleased Premises by any person or entity other than Sublessee, without the prior written consent of Sublessor and Master Lessor, which consent may be withheld in their sole and absolute discretion.

8.2 Permitted Transfers: Notwithstanding Section 8.1, Sublessee may, without Sublessor's or Master Lessor's consent, assign this Sublease or sublet all or a portion of the Subleased Premises to (i) an entity controlling, controlled by, or under common control with Sublessee, (ii) an entity resulting from a merger or consolidation with Sublessee, or (iii) an entity acquiring all or substantially all of Sublessee's assets or stock, provided that such entity has a net worth at least equal to that of Sublessee as of the date of such assignment or subletting.

8.3 Excess Rent: If Sublessor and Master Lessor consent to an assignment or subletting, any rent or other consideration payable to Sublessee in excess of the rent payable by Sublessee hereunder shall be paid to Sublessor as additional rent.

9. INSURANCE

9.1 Sublessee's Insurance: Sublessee shall, at its sole cost and expense, procure and maintain throughout the Term the following insurance coverages:

(a) Commercial General Liability Insurance with limits of not less than $5,000,000 per occurrence and $10,000,000 in the aggregate, covering bodily injury, property damage, personal injury, and advertising injury arising out of or relating to Sublessee's use and occupancy of the Subleased Premises.

(b) Property Insurance covering Sublessee's personal property, trade fixtures, and equipment in the Subleased Premises, in an amount equal to the full replacement cost thereof.

(c) Workers' Compensation Insurance as required by applicable law, and Employer's Liability Insurance with limits of not less than $1,000,000 per accident, $1,000,000 per employee for disease, and $1,000,000 policy limit for disease.

(d) Business Interruption Insurance in an amount sufficient to cover Sublessee's ongoing expenses, including without limitation, rent payments under this Sublease, for a period of not less than twelve (12) months.

9.2 Policy Requirements: All insurance policies required to be maintained by Sublessee shall (i) be issued by insurance companies authorized to do business in the State of California with a financial rating of at least A-:VIII as rated in the most recent edition of Best's Insurance Reports, (ii) name Sublessor and Master Lessor as additional insureds (except for Workers' Compensation and Property Insurance), (iii) be primary and non-contributory with any insurance carried by Sublessor or Master Lessor, (iv) provide that the insurer shall endeavor to give Sublessor at least thirty (30) days' prior written notice of any cancellation or material change in coverage, and (v) waive any right of subrogation against Sublessor and Master Lessor.

9.3 Evidence of Insurance: Sublessee shall deliver to Sublessor certificates of insurance evidencing the coverages required hereunder prior to the Commencement Date, and thereafter upon renewal of such policies.

10. INDEMNIFICATION

10.1 Sublessee's Indemnity: Sublessee shall indemnify, defend, and hold harmless Sublessor and Master Lessor, and their respective officers, directors, employees, agents, and representatives, from and against any and all claims, demands, liabilities, damages, judgments, costs, and expenses (including reasonable attorneys' fees) arising out of or relating to (i) Sublessee's use or occupancy of the Subleased Premises, (ii) any act or omission of Sublessee or its employees, agents, contractors, or invitees, or (iii) any breach or default by Sublessee under this Sublease.

10.2 Sublessor's Indemnity: Sublessor shall indemnify, defend, and hold harmless Sublessee, and its officers, directors, employees, agents, and representatives, from and against any and all claims, demands, liabilities, damages, judgments, costs, and expenses (including reasonable attorneys' fees) arising out of or relating to any breach or default by Sublessor under this Sublease.

11. DAMAGE AND DESTRUCTION

11.1 Termination Rights: If the Subleased Premises or the building in which they are located are damaged or destroyed by fire or other casualty to such an extent that, in Sublessor's reasonable judgment, the damage cannot be repaired within one hundred eighty (180) days after the date of such damage or destruction, either party may terminate this Sublease by giving written notice to the other party within thirty (30) days after the date of such damage or destruction.

11.2 Repair Obligations: If this Sublease is not terminated pursuant to Section 11.1, Sublessor shall repair and restore the Subleased Premises to substantially the same condition as existed immediately prior to such damage or destruction, subject to the terms and conditions of the Master Lease. Sublessee shall promptly repair or replace its personal property, trade fixtures, and equipment.

11.3 Rent Abatement: If the Subleased Premises are rendered wholly or partially untenantable by fire or other casualty, the rent shall be abated in proportion to the area of the Subleased Premises that is untenantable during the period of such untenantability.

12. CONDEMNATION

12.1 Termination Rights: If all or substantially all of the Subleased Premises are taken by eminent domain or conveyed under threat thereof, this Sublease shall terminate as of the date of such taking or conveyance. If a portion of the Subleased Premises is taken or conveyed, and the remaining portion is not sufficient for Sublessee's reasonable use and occupancy, either party may terminate this Sublease by giving written notice to the other party within thirty (30) days after the date of such taking or conveyance.

12.2 Award: Sublessee hereby waives any right to receive any portion of the award paid for such taking or conveyance, provided that Sublessee may make a separate claim for compensation for its personal property, trade fixtures, and moving expenses, so long as such claim does not diminish the award payable to Sublessor or Master Lessor.

13. DEFAULT

13.1 Events of Default: The occurrence of any of the following shall constitute a material default and breach of this Sublease by Sublessee:

(a) Failure to pay any rent or other sum payable hereunder within five (5) days after the date when due;

(b) Failure to observe or perform any other term, covenant, or condition of this Sublease, if such failure continues for a period of thirty (30) days after written notice thereof from Sublessor to Sublessee;

(c) The making by Sublessee of any general assignment for the benefit of creditors; the filing by or against Sublessee of a petition to have Sublessee adjudged a bankrupt or a petition for reorganization or arrangement under any law relating to bankruptcy; the appointment of a trustee or receiver to take possession of substantially all of Sublessee's assets or of Sublessee's interest in this Sublease; or the attachment, execution, or other judicial seizure of substantially all of Sublessee's assets or of Sublessee's interest in this Sublease;

(d) Sublessee's abandonment of the Subleased Premises;

(e) Any default by Sublessee under the Master Lease.

13.2 Remedies: In the event of any such default by Sublessee, Sublessor may, at any time thereafter, with or without notice or demand and without limiting Sublessor in the exercise of any right or remedy which Sublessor may have by reason of such default:

(a) Terminate this Sublease by giving Sublessee written notice thereof, in which event Sublessee shall immediately surrender the Subleased Premises to Sublessor;

(b) Enter upon and take possession of the Subleased Premises and expel or remove Sublessee and any other person who may be occupying said premises or any part thereof, without being liable for prosecution or any claim for damages therefor;

(c) Recover from Sublessee all damages incurred by Sublessor by reason of Sublessee's default, including but not limited to (i) the cost of recovering possession of the Subleased Premises, (ii) expenses of reletting, including necessary renovation and alteration of the Subleased Premises, (iii) reasonable attorneys' fees, and (iv) the amount of rent and other charges which would have been payable by Sublessee for the remainder of the Term;

(d) Pursue any other remedy now or hereafter available to Sublessor under the laws or judicial decisions of the State of California.

14. SURRENDER OF PREMISES

Upon the expiration or earlier termination of this Sublease, Sublessee shall surrender the Subleased Premises to Sublessor in good condition and repair, ordinary wear and tear excepted, and shall remove all of Sublessee's personal property, trade fixtures, and equipment. Sublessee shall also remove any Alterations required to be removed pursuant to Section 7.2 and shall repair any damage caused by such removal. If Sublessee fails to remove any property or to restore the Subleased Premises as required hereunder, Sublessor may do so and charge the cost thereof to Sublessee.

15. HOLDOVER

If Sublessee remains in possession of the Subleased Premises after the expiration or earlier termination of this Sublease without Sublessor's written consent, such occupancy shall be a tenancy at sufferance, and Sublessee shall pay rent at a rate equal to one hundred fifty percent (150%) of the Base Rent in effect immediately prior to such holdover, computed on a monthly basis for each month or partial month of holdover. In addition, Sublessee shall indemnify, defend, and hold harmless Sublessor from and against all claims, liabilities, damages, costs, and expenses (including reasonable attorneys' fees) incurred by Sublessor as a result of such holdover.

16. NOTICES

All notices, demands, requests, consents, approvals, and other communications required or permitted to be given under this Sublease shall be in writing and shall be deemed to have been duly given if (a) delivered personally, (b) sent by registered or certified mail, return receipt requested, postage prepaid, or (c) sent by reputable overnight courier service, addressed to the party to be notified at the address set forth in the preamble of this Sublease or such other address as such party may specify by notice given in accordance with this Section.

17. MISCELLANEOUS

17.1 Governing Law: This Sublease shall be governed by and construed in accordance with the laws of the State of California, without giving effect to any choice of law or conflict of law provisions.

17.2 Entire Agreement: This Sublease, including all exhibits attached hereto, constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior and contemporaneous agreements and understandings, whether written or oral.

17.3 Amendments: This Sublease may not be amended, modified, or supplemented except by a written instrument executed by both parties hereto.

17.4 Waiver: No waiver of any provision of this Sublease shall be effective unless in writing and signed by the party against whom such waiver is sought to be enforced. No waiver of any breach of this Sublease shall be construed as a waiver of any subsequent breach.

17.5 Severability: If any provision of this Sublease is held to be invalid, illegal, or unenforceable in any respect, such invalidity, illegality, or unenforceability shall not affect any other provision of this Sublease, and this Sublease shall be construed as if such invalid, illegal, or unenforceable provision had never been contained herein.

17.6 Binding Effect: This Sublease shall be binding upon and inure to the benefit of the parties hereto and their respective successors and permitted assigns.

17.7 Counterparts: This Sublease may be executed in any number of counterparts, each of which shall be deemed an original, but all of which together shall constitute one and the same instrument.

17.8 Time of Essence: Time is of the essence with respect to the performance of all obligations under this Sublease.

17.9 Attorneys' Fees: In the event of any litigation between the parties hereto to enforce any provision of this Sublease or any right of either party hereto, the unsuccessful party to such litigation shall pay to the successful party all costs and expenses, including reasonable attorneys' fees, incurred by the successful party in such litigation.

17.10 Subordination: This Sublease is and shall be subject and subordinate to the Master Lease and to all ground or underlying leases, mortgages, deeds of trust, and other hypothecations or encumbrances now or hereafter affecting the real property of which the Subleased Premises are a part.

17.11 Incorporation of Master Lease: The terms and conditions of the Master Lease are incorporated herein by reference, except to the extent that they are inconsistent with the terms and conditions of this Sublease. Sublessee assumes and agrees to perform all of Sublessor's obligations under the Master Lease with respect to the Subleased Premises, except as otherwise provided herein.

IN WITNESS WHEREOF, the parties hereto have executed this Commercial Sublease Agreement as of the date first above written.

SUBLESSOR:
Apex Innovations, Inc.

By: _________________________
Name: _______________________
Title: ________________________

SUBLESSEE:
Quantum Dynamics, LLC

By: _________________________
Name: _______________________
Title: ________________________

EXHIBIT A: Description of Subleased Premises
[Detailed floor plan and description of the 15,000 square feet on the 11th floor]

EXHIBIT B: Arbitration Procedures for Determining Fair Market Rental Rate
[Detailed procedures for selecting arbitrators and conducting the arbitration process]

"""


sample1 = """
Description: This is a commercial sublease agreement between Apex Innovations, Inc. (Sublessor) and Quantum Dynamics, LLC (Sublessee) for a portion of premises originally leased from Innovate Properties, LLP (Master Lessor).

&lt;parties involved&gt;
Sublessor: Apex Innovations, Inc.
Sublessee: Quantum Dynamics, LLC
Original lessor: Innovate Properties, LLP
&lt;/parties involved&gt;

&lt;property details&gt;
Address: 9876 Innovation Park, Building C, 11th Floor, San Francisco, CA 94107
Description: 15,000 square feet of office space on the 11th floor
Permitted use: General office purposes and other uses permitted under the Master Lease
&lt;/property details&gt;

&lt;term and rent&gt;
Start date: September 1, 2023
End date: August 31, 2026
Monthly rent: $75,000 per month
Security deposit: $225,000
Option to extend: One 3-year extension option
Additional rent: 30`%` of Operating Expenses for the Master Premises
&lt;/term and rent&gt;

&lt;responsibilities&gt;
Utilities: Not explicitly specified, likely included in Operating Expenses
Maintenance: Sublessee responsible for interior maintenance and repairs
Repairs: Sublessee responsible for interior repairs; Sublessor responsible for repairs required under Master Lease
Insurance: Sublessee required to maintain Commercial General Liability, Property, Workers' Compensation, and Business Interruption insurance
&lt;/responsibilities&gt;

&lt;consent and notices&gt;
Landlord's consent: Required for sublease to be effective
Notice requirements: Written notices to be delivered personally, by registered or certified mail, or by overnight courier to specified addresses
&lt;/consent and notices&gt;

&lt;special provisions&gt;
Alterations: Require prior written consent of Sublessor and Master Lessor
Assignment and subletting: Prohibited without prior written consent, with exceptions for certain related entities
Damage and destruction: Termination rights if repairs cannot be completed within 180 days
Default: Detailed events of default and remedies specified
Holdover: 150`%` of Base Rent for any holdover period
Subordination: Sublease is subordinate to Master Lease and other encumbrances
&lt;/special provisions&gt;
"""


document2 = """
COMMERCIAL SUBLEASE AGREEMENT

THIS COMMERCIAL SUBLEASE AGREEMENT (hereinafter referred to as the "Sublease") is made and entered into on this 1st day of September, 2023 (the "Effective Date"), by and between:

SUBLESSOR: TechHub Enterprises, LLC, a California limited liability company with its principal place of business at 5678 Market Street, Suite 3000, San Francisco, CA 94103 (hereinafter referred to as the "Sublessor")

AND

SUBLESSEE: NanoSphere Solutions, Inc., a Delaware corporation with its principal place of business at 2468 Research Drive, Palo Alto, CA 94304 (hereinafter referred to as the "Sublessee")

WITNESSETH:

WHEREAS, Sublessor is the Tenant under that certain Master Lease Agreement dated March 15, 2019 (hereinafter referred to as the "Master Lease"), wherein Skyline Properties, Inc. (hereinafter referred to as the "Master Lessor") leased to Sublessor those certain premises consisting of approximately 75,000 square feet of office and laboratory space located at 1357 Innovation Avenue, Floors 15-18, San Francisco, CA 94158 (hereinafter referred to as the "Master Premises");

WHEREAS, Sublessor desires to sublease a portion of the Master Premises to Sublessee, and Sublessee desires to sublease the same from Sublessor;

NOW, THEREFORE, in consideration of the mutual covenants and agreements herein contained, and other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, the parties hereto agree as follows:

1. SUBLEASED PREMISES

1.1 Description: Sublessor hereby subleases to Sublessee, and Sublessee hereby subleases from Sublessor, a portion of the Master Premises consisting of approximately 25,000 square feet of office and laboratory space located on the 16th and 17th floors of the building at 1357 Innovation Avenue, San Francisco, CA 94158 (hereinafter referred to as the "Subleased Premises"). The Subleased Premises are more particularly described in Exhibit A attached hereto and incorporated herein by reference.

1.2 Common Areas: Sublessee shall have the non-exclusive right to use, in common with Sublessor and other tenants or occupants of the Master Premises, the common areas of the building, including but not limited to lobbies, elevators, stairways, parking facilities, and other common facilities, subject to the terms and conditions of the Master Lease and any rules and regulations promulgated by the Master Lessor or Sublessor.

2. TERM

2.1 Initial Term: The initial term of this Sublease shall commence on October 1, 2023 (the "Commencement Date") and shall expire on September 30, 2028 (the "Expiration Date"), unless sooner terminated in accordance with the provisions of this Sublease or the Master Lease (the "Initial Term").

2.2 Early Access: Sublessee shall have the right to access the Subleased Premises fifteen (15) days prior to the Commencement Date for the purpose of installing Sublessee's furniture, fixtures, and equipment, provided that such early access does not interfere with Sublessor's operations or any work being performed by Sublessor in the Subleased Premises. Such early access shall be subject to all terms and conditions of this Sublease, except for the obligation to pay rent.

2.3 Option to Extend: Provided that Sublessee is not in default under any of the terms and conditions of this Sublease, Sublessee shall have two (2) options to extend the term of this Sublease for additional periods of three (3) years each (each, an "Extension Term") upon the same terms and conditions contained in this Sublease, except that the Base Rent during each Extension Term shall be as set forth in Section 3.2 below. Sublessee shall exercise each option by giving Sublessor written notice of its intent to do so no later than twelve (12) months prior to the expiration of the then-current Term.

3. RENT

3.1 Base Rent for Initial Term: Commencing on the Commencement Date and continuing throughout the Initial Term, Sublessee shall pay to Sublessor as base rent for the Subleased Premises the following amounts ("Base Rent"):

Year 1: $150,000.00 per month
Year 2: $154,500.00 per month
Year 3: $159,135.00 per month
Year 4: $163,909.05 per month
Year 5: $168,826.32 per month

Base Rent shall be payable in advance on or before the first day of each calendar month during the Term, without notice, demand, deduction, or offset.

3.2 Base Rent for Extension Terms: If Sublessee exercises its option(s) to extend the Term as provided in Section 2.3, the Base Rent for each Extension Term shall be the greater of (i) the Base Rent in effect immediately prior to the commencement of the applicable Extension Term, increased by four percent (4%) per annum, compounded annually, or (ii) the then-prevailing fair market rental rate for comparable office and laboratory space in the building and surrounding area, as mutually agreed upon by Sublessor and Sublessee. If Sublessor and Sublessee are unable to agree upon the fair market rental rate within sixty (60) days after Sublessee's exercise of the extension option, the fair market rental rate shall be determined by arbitration in accordance with the procedures set forth in Exhibit B attached hereto.

3.3 Additional Rent: In addition to the Base Rent, Sublessee shall pay to Sublessor as additional rent Sublessee's Proportionate Share (as defined below) of Operating Expenses (as defined in the Master Lease) for the Master Premises. Sublessee's Proportionate Share shall be thirty-three and one-third percent (33.33%), which is the percentage obtained by dividing the rentable square footage of the Subleased Premises (25,000 sq. ft.) by the rentable square footage of the Master Premises (75,000 sq. ft.). Sublessee's obligation to pay additional rent shall commence on the Commencement Date and shall be payable in monthly installments as provided in the Master Lease.

3.4 Utilities and Services: Sublessee shall be responsible for all utilities and services provided to or consumed in the Subleased Premises, including without limitation, electricity, gas, water, sewer, telephone, internet, and janitorial services. To the extent such utilities and services are not separately metered or billed to the Subleased Premises, Sublessee shall pay to Sublessor, as additional rent, Sublessee's Proportionate Share of the cost of such utilities and services for the Master Premises.

3.5 Late Charges: If any installment of Base Rent or additional rent is not received by Sublessor within five (5) days after the date when due, Sublessee shall pay to Sublessor a late charge equal to six percent (6%) of the overdue amount to cover the extra expense involved in handling delinquent payments. The parties agree that this late charge represents a fair and reasonable estimate of the costs that Sublessor will incur by reason of late payment by Sublessee.

4. SECURITY DEPOSIT

4.1 Amount: Upon execution of this Sublease, Sublessee shall deposit with Sublessor the sum of Four Hundred Fifty Thousand Dollars ($450,000.00) as a security deposit (the "Security Deposit") to secure Sublessee's faithful performance of all terms, covenants, and conditions of this Sublease.

4.2 Use and Return: Sublessor may, but shall not be obligated to, use the Security Deposit or any portion thereof to cure any breach or default by Sublessee under this Sublease, or to compensate Sublessor for any damage it incurs as a result of Sublessee's failure to perform any of its obligations hereunder. If Sublessor uses any portion of the Security Deposit, Sublessee shall, within ten (10) days after written demand therefor, restore the Security Deposit to its original amount. Provided that Sublessee has fully and faithfully performed all of its obligations under this Sublease, Sublessor shall return the Security Deposit, or any balance thereof, to Sublessee within thirty (30) days after the expiration or earlier termination of this Sublease.

4.3 Transfer of Security Deposit: If Sublessor transfers its interest in the Master Premises or this Sublease, Sublessor shall transfer the Security Deposit to its successor in interest, whereupon Sublessor shall be released from all liability for the return of the Security Deposit.

5. USE

5.1 Permitted Use: The Subleased Premises shall be used and occupied by Sublessee solely for general office purposes, research and development, and laboratory uses consistent with a BSL-2 (Biosafety Level 2) facility, and other uses permitted under the Master Lease, and for no other purpose without the prior written consent of Sublessor and Master Lessor.

5.2 Compliance with Laws: Sublessee shall, at its sole cost and expense, comply with all laws, ordinances, orders, rules, and regulations of all governmental authorities having jurisdiction over the Subleased Premises or Sublessee's use thereof, including without limitation, the Americans with Disabilities Act, all environmental laws and regulations, and all biosafety regulations applicable to BSL-2 facilities.

5.3 Hazardous Materials: Sublessee shall not use, generate, manufacture, store, or dispose of any Hazardous Materials (as defined in the Master Lease) in, on, or about the Subleased Premises or the building, except for those Hazardous Materials that are (i) typically used in general office operations or (ii) necessary for Sublessee's permitted laboratory operations, provided that such Hazardous Materials are used, stored, and disposed of in strict compliance with all applicable laws and regulations. Sublessee shall provide Sublessor with a list of all Hazardous Materials used in the Subleased Premises on an annual basis and shall promptly notify Sublessor of any spills or releases of Hazardous Materials in the Subleased Premises.

5.4 Prohibited Uses: Sublessee shall not use or permit the use of the Subleased Premises in any manner that will (i) create waste or a nuisance, (ii) disturb other tenants or occupants of the building, (iii) invalidate or increase the premiums for any insurance policies covering the building or its contents, or (iv) violate any provision of the Master Lease.

6. MAINTENANCE AND REPAIRS

6.1 Sublessee's Obligations: Sublessee shall, at its sole cost and expense, keep and maintain the Subleased Premises and every part thereof in good order, condition, and repair, ordinary wear and tear and damage by casualty excepted. Sublessee's obligations shall include, without limitation, the maintenance, repair, and replacement of all interior walls, floors, ceilings, doors, windows, and fixtures within the Subleased Premises, as well as all laboratory-specific equipment and systems.

6.2 Sublessor's Obligations: Sublessor shall have no obligation to maintain, repair, or replace any portion of the Subleased Premises, except to the extent such obligation is imposed on Sublessor as the Tenant under the Master Lease and relates to the building structure, exterior walls, roof, and common building systems. In such event, Sublessee shall promptly reimburse Sublessor for Sublessee's Proportionate Share of the costs incurred by Sublessor in performing such obligations.

6.3 HVAC Systems: Notwithstanding anything to the contrary herein, Sublessee shall be responsible for the maintenance, repair, and replacement of any supplemental or dedicated HVAC systems serving the Subleased Premises, including those serving the laboratory areas.

7. ALTERATIONS AND IMPROVEMENTS

7.1 Sublessee's Alterations: Sublessee shall not make any alterations, additions, or improvements to the Subleased Premises (collectively, "Alterations") without the prior written consent of Sublessor and Master Lessor, which consent shall not be unreasonably withheld, conditioned, or delayed for non-structural Alterations that do not affect the building systems or structural elements. Any approved Alterations shall be made at Sublessee's sole cost and expense, in accordance with all applicable laws and building codes, and in a good and workmanlike manner.

7.2 Plans and Specifications: Prior to commencing any Alterations, Sublessee shall submit detailed plans and specifications to Sublessor and Master Lessor for approval. Sublessee shall reimburse Sublessor and Master Lessor for their reasonable out-of-pocket costs incurred in reviewing such plans and specifications.

7.3 Liens: Sublessee shall keep the Subleased Premises, the building, and the real property on which the building is located free from any liens arising out of any work performed, materials furnished, or obligations incurred by or on behalf of Sublessee.

7.4 Removal of Alterations: Unless otherwise agreed in writing, all Alterations made by Sublessee shall become the property of Sublessor upon installation and shall remain upon and be surrendered with the Subleased Premises upon the expiration or earlier termination of this Sublease. Notwithstanding the foregoing, Sublessor may require Sublessee to remove any Alterations made by Sublessee and to restore the Subleased Premises to its original condition, all at Sublessee's sole cost and expense. At the time Sublessee requests Sublessor's consent to any Alterations, Sublessee may also request that Sublessor specify whether such Alterations will need to be removed at the end of the Term.

8. ASSIGNMENT AND SUBLETTING

8.1 Prohibition: Sublessee shall not assign this Sublease or any interest herein, nor sublet the Subleased Premises or any part thereof, nor permit the use or occupancy of the Subleased Premises by any person or entity other than Sublessee, without the prior written consent of Sublessor and Master Lessor, which consent shall not be unreasonably withheld, conditioned, or delayed.

8.2 Permitted Transfers: Notwithstanding Section 8.1, Sublessee may, without Sublessor's or Master Lessor's consent, assign this Sublease or sublet all or a portion of the Subleased Premises to (i) an entity controlling, controlled by, or under common control with Sublessee, (ii) an entity resulting from a merger or consolidation with Sublessee, or (iii) an entity acquiring all or substantially all of Sublessee's assets or stock, provided that such entity has a net worth at least equal to that of Sublessee as of the date of such assignment or subletting and assumes all of Sublessee's obligations under this Sublease.

8.3 Sublessee Remains Liable: No assignment or subletting shall release Sublessee from any of its obligations under this Sublease unless Sublessor and Master Lessor expressly agree otherwise in writing. Sublessee shall remain liable for the performance of all terms, covenants, and conditions of this Sublease.

8.4 Excess Rent: If Sublessor and Master Lessor consent to an assignment or subletting, fifty percent (50%) of any rent or other consideration payable to Sublessee in excess of the rent payable by Sublessee hereunder shall be paid to Sublessor as additional rent, after deducting Sublessee's reasonable expenses incurred in connection with such assignment or subletting.

9. INSURANCE

9.1 Sublessee's Insurance: Sublessee shall, at its sole cost and expense, procure and maintain throughout the Term the following insurance coverages:

(a) Commercial General Liability Insurance with limits of not less than $5,000,000 per occurrence and $10,000,000 in the aggregate, covering bodily injury, property damage, personal injury, and advertising injury arising out of or relating to Sublessee's use and occupancy of the Subleased Premises.

(b) Property Insurance covering Sublessee's personal property, trade fixtures, equipment, and Alterations in the Subleased Premises, in an amount equal to the full replacement cost thereof.

(c) Workers' Compensation Insurance as required by applicable law, and Employer's Liability Insurance with limits of not less than $1,000,000 per accident, $1,000,000 per employee for disease, and $1,000,000 policy limit for disease.

(d) Business Interruption Insurance in an amount sufficient to cover Sublessee's ongoing expenses, including without limitation, rent payments under this Sublease, for a period of not less than twelve (12) months.

(e) Environmental Liability Insurance with limits of not less than $5,000,000 per occurrence and $10,000,000 in the aggregate, covering claims arising out of the presence, use, handling, storage, or disposal of Hazardous Materials in the Subleased Premises.

9.2 Policy Requirements: All insurance policies required to be maintained by Sublessee shall (i) be issued by insurance companies authorized to do business in the State of California with a financial rating of at least A-:VIII as rated in the most recent edition of Best's Insurance Reports, (ii) name Sublessor and Master Lessor as additional insureds (except for Workers' Compensation and Property Insurance), (iii) be primary and non-contributory with any insurance carried by Sublessor or Master Lessor, (iv) provide that the insurer shall endeavor to give Sublessor at least thirty (30) days' prior written notice of any cancellation or material change in coverage, and (v) waive any right of subrogation against Sublessor and Master Lessor.

9.3 Evidence of Insurance: Sublessee shall deliver to Sublessor certificates of insurance evidencing the coverages required hereunder prior to the Commencement Date, and thereafter upon renewal of such policies.

10. INDEMNIFICATION

10.1 Sublessee's Indemnity: Sublessee shall indemnify, defend, and hold harmless Sublessor and Master Lessor, and their respective officers, directors, employees, agents, and representatives, from and against any and all claims, demands, liabilities, damages, judgments, costs, and expenses (including reasonable attorneys' fees) arising out of or relating to (i) Sublessee's use or occupancy of the Subleased Premises, (ii) any act or omission of Sublessee or its employees, agents, contractors, or invitees, (iii) any breach or default by Sublessee under this Sublease, or (iv) the presence, use, handling, storage, or disposal of Hazardous Materials in the Subleased Premises by Sublessee or its employees, agents, contractors, or invitees.

10.2 Sublessor's Indemnity: Sublessor shall indemnify, defend, and hold harmless Sublessee, and its officers, directors, employees, agents, and representatives, from and against any and all claims, demands, liabilities, damages, judgments, costs, and expenses (including reasonable attorneys' fees) arising out of or relating to any breach or default by Sublessor under this Sublease.

11. DAMAGE AND DESTRUCTION

11.1 Termination Rights: If the Subleased Premises or the building in which they are located are damaged or destroyed by fire or other casualty to such an extent that, in Sublessor's reasonable judgment, the damage cannot be repaired within two hundred seventy (270) days after the date of such damage or destruction, either party may terminate this Sublease by giving written notice to the other party within thirty (30) days after the date of such damage or destruction.

11.2 Repair Obligations: If this Sublease is not terminated pursuant to Section 11.1, Sublessor shall repair and restore the Subleased Premises to substantially the same condition as existed immediately prior to such damage or destruction, subject to the terms and conditions of the Master Lease. Sublessee shall promptly repair or replace its personal property, trade fixtures, equipment, and Alterations.

11.3 Rent Abatement: If the Subleased Premises are rendered wholly or partially untenantable by fire or other casualty, the rent shall be abated in proportion to the area of the Subleased Premises that is untenantable during the period of such untenantability.

12. CONDEMNATION

12.1 Termination Rights: If all or substantially all of the Subleased Premises are taken by eminent domain or conveyed under threat thereof, this Sublease shall terminate as of the date of such taking or conveyance. If a portion of the Subleased Premises is taken or conveyed, and the remaining portion is not sufficient for Sublessee's reasonable use and occupancy, either party may terminate this Sublease by giving written notice to the other party within thirty (30) days after the date of such taking or conveyance.

12.2 Award: Sublessee hereby waives any right to receive any portion of the award paid for such taking or conveyance, provided that Sublessee may make a separate claim for compensation for its personal property, trade fixtures, and moving expenses, so long as such claim does not diminish the award payable to Sublessor or Master Lessor.

13. DEFAULT

13.1 Events of Default: The occurrence of any of the following shall constitute a material default and breach of this Sublease by Sublessee:

(a) Failure to pay any rent or other sum payable hereunder within five (5) days after the date when due;

(b) Failure to observe or perform any other term, covenant, or condition of this Sublease, if such failure continues for a period of thirty (30) days after written notice thereof from Sublessor to Sublessee; provided, however, that if the nature of such default is such that it cannot reasonably be cured within such thirty (30) day period, Sublessee shall not be deemed to be in default if Sublessee commences such cure within such thirty (30) day period and thereafter diligently prosecutes such cure to completion;

(c) The making by Sublessee of any general assignment for the benefit of creditors; the filing by or against Sublessee of a petition to have Sublessee adjudged a bankrupt or a petition for reorganization or arrangement under any law relating to bankruptcy; the appointment of a trustee or receiver to take possession of substantially all of Sublessee's assets or of Sublessee's interest in this Sublease; or the attachment, execution, or other judicial seizure of substantially all of Sublessee's assets or of Sublessee's interest in this Sublease;

(d) Sublessee's abandonment of the Subleased Premises;

(e) Any default by Sublessee under the Master Lease.

13.2 Remedies: In the event of any such default by Sublessee, Sublessor may, at any time thereafter, with or without notice or demand and without limiting Sublessor in the exercise of any right or remedy which Sublessor may have by reason of such default:

(a) Terminate this Sublease by giving Sublessee written notice thereof, in which event Sublessee shall immediately surrender the Subleased Premises to Sublessor;

(b) Enter upon and take possession of the Subleased Premises and expel or remove Sublessee and any other person who may be occupying said premises or any part thereof, without being liable for prosecution or any claim for damages therefor;

(c) Recover from Sublessee all damages incurred by Sublessor by reason of Sublessee's default, including but not limited to (i) the cost of recovering possession of the Subleased Premises, (ii) expenses of reletting, including necessary renovation and alteration of the Subleased Premises, (iii) reasonable attorneys' fees, and (iv) the amount of rent and other charges which would have been payable by Sublessee for the remainder of the Term;

(d) Pursue any other remedy now or hereafter available to Sublessor under the laws or judicial decisions of the State of California.

14. SURRENDER OF PREMISES

Upon the expiration or earlier termination of this Sublease, Sublessee shall surrender the Subleased Premises to Sublessor in good condition and repair, ordinary wear and tear excepted, and shall remove all of Sublessee's personal property, trade fixtures, and equipment. Sublessee shall also remove any Alterations required to be removed pursuant to Section 7.4 and shall repair any damage caused by such removal. If Sublessee fails to remove any property or to restore the Subleased Premises as required hereunder, Sublessor may do so and charge the cost thereof to Sublessee.

15. HOLDOVER

If Sublessee remains in possession of the Subleased Premises after the expiration or earlier termination of this Sublease without Sublessor's written consent, such occupancy shall be a tenancy at sufferance, and Sublessee shall pay rent at a rate equal to one hundred fifty percent (150%) of the Base Rent in effect immediately prior to such holdover, computed on a monthly basis for each month or partial month of holdover. In addition, Sublessee shall indemnify, defend, and hold harmless Sublessor from and against all claims, liabilities, damages, costs, and expenses (including reasonable attorneys' fees) incurred by Sublessor as a result of such holdover.

16. NOTICES

All notices, demands, requests, consents, approvals, and other communications required or permitted to be given under this Sublease shall be in writing and shall be deemed to have been duly given if (a) delivered personally, (b) sent by registered or certified mail, return receipt requested, postage prepaid, or (c) sent by reputable overnight courier service, addressed to the party to be notified at the address set forth in the preamble of this Sublease or such other address as such party may specify by notice given in accordance with this Section.

17. MISCELLANEOUS

17.1 Governing Law: This Sublease shall be governed by and construed in accordance with the laws of the State of California, without giving effect to any choice of law or conflict of law provisions.

17.2 Entire Agreement: This Sublease, including all exhibits attached hereto, constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior and contemporaneous agreements and understandings, whether written or oral.

17.3 Amendments: This Sublease may not be amended, modified, or supplemented except by a written instrument executed by both parties hereto.

17.4 Waiver: No waiver of any provision of this Sublease shall be effective unless in writing and signed by the party against whom such waiver is sought to be enforced. No waiver of any breach of this Sublease shall be construed as a waiver of any subsequent breach.

17.5 Severability: If any provision of this Sublease is held to be invalid, illegal, or unenforceable in any respect, such invalidity, illegality, or unenforceability shall not affect any other provision of this Sublease, and this Sublease shall be construed as if such invalid, illegal, or unenforceable provision had never been contained herein.

17.6 Binding Effect: This Sublease shall be binding upon and inure to the benefit of the parties hereto and their respective successors and permitted assigns.

17.7 Counterparts: This Sublease may be executed in any number of counterparts, each of which shall be deemed an original, but all of which together shall constitute one and the same instrument. Electronic signatures shall be deemed to be original signatures for all purposes.

17.8 Time of Essence: Time is of the essence with respect to the performance of all obligations under this Sublease.

17.9 Attorneys' Fees: In the event of any litigation between the parties hereto to enforce any provision of this Sublease or any right of either party hereto, the unsuccessful party to such litigation shall pay to the successful party all costs and expenses, including reasonable attorneys' fees, incurred by the successful party in such litigation.

17.10 Subordination: This Sublease is and shall be subject and subordinate to the Master Lease and to all ground or underlying leases, mortgages, deeds of trust, and other hypothecations or encumbrances now or hereafter affecting the real property of which the Subleased Premises are a part. Sublessee agrees to execute and deliver to Sublessor, within ten (10) days after request therefor, any additional documents evidencing the subordination of this Sublease with respect to any such ground or underlying leases, mortgages, deeds of trust, or other hypothecations or encumbrances.

17.11 Incorporation of Master Lease: The terms and conditions of the Master Lease are incorporated herein by reference, except to the extent that they are inconsistent with the terms and conditions of this Sublease. Sublessee assumes and agrees to perform all of Sublessor's obligations under the Master Lease with respect to the Subleased Premises, except as otherwise provided herein. In the event of a conflict between the provisions of this Sublease and the Master Lease, the provisions of this Sublease shall control as between Sublessor and Sublessee.

17.12 Confidentiality: Sublessee acknowledges that the terms and conditions of this Sublease are to remain confidential for Sublessor's benefit, and may not be disclosed by Sublessee to anyone, by any manner or means, directly or indirectly, without Sublessor's prior written consent, except to Sublessee's attorneys, accountants, and other professional advisors, or as required by law.

17.13 Force Majeure: Neither party shall be responsible for delays in the performance of its obligations hereunder caused by acts of God, war, terrorist attack, pandemic, government regulation, riot, or other causes beyond the reasonable control of such party.

17.14 Quiet Enjoyment: Sublessor covenants that Sublessee, upon paying the rent and performing all of the terms, covenants, and conditions of this Sublease, shall peaceably and quietly have, hold, and enjoy the Subleased Premises during the Term, subject to the terms and conditions of this Sublease and the Master Lease.

17.15 Brokers: Each party represents and warrants to the other that it has not dealt with any broker or finder in connection with this Sublease, except for [Broker Name] representing Sublessor and [Broker Name] representing Sublessee. Each party shall indemnify, defend, and hold harmless the other party from and against any claims, liabilities, damages, costs, and expenses (including reasonable attorneys' fees) arising out of any breach of the foregoing representation and warranty.

17.16 Parking: Sublessee shall have the right to use, on a non-exclusive basis, Sublessee's Proportionate Share of the parking spaces allocated to Sublessor under the Master Lease, subject to the terms and conditions of the Master Lease and any rules and regulations promulgated by Master Lessor or Sublessor.

17.17 Signage: Subject to Master Lessor's approval and the terms of the Master Lease, Sublessee shall have the right to install, at Sublessee's sole cost and expense, Sublessee's name and logo on the entry door to the Subleased Premises and in the lobby directory for the building.

17.18 Access: Sublessee shall have access to the Subleased Premises twenty-four (24) hours per day, seven (7) days per week, subject to the terms and conditions of the Master Lease and any reasonable security measures implemented by Master Lessor or Sublessor.

17.19 Environmental: Sublessee shall comply with all environmental laws and regulations applicable to its use and occupancy of the Subleased Premises. Sublessee shall promptly notify Sublessor of any release or threatened release of Hazardous Materials in, on, or about the Subleased Premises. Upon the expiration or earlier termination of this Sublease, Sublessee shall, at its sole cost and expense, remove all Hazardous Materials brought onto the Subleased Premises by Sublessee and remediate any contamination caused thereby.

17.20 Waiver of Jury Trial: TO THE FULLEST EXTENT PERMITTED BY LAW, SUBLESSOR AND SUBLESSEE HEREBY WAIVE THEIR RESPECTIVE RIGHT TO TRIAL BY JURY IN ANY ACTION OR PROCEEDING BASED UPON, OR RELATED TO, THE SUBJECT MATTER OF THIS SUBLEASE.

IN WITNESS WHEREOF, the parties hereto have executed this Commercial Sublease Agreement as of the date first above written.

SUBLESSOR:
TechHub Enterprises, LLC

By: _________________________
Name: _______________________
Title: ________________________

SUBLESSEE:
NanoSphere Solutions, Inc.

By: _________________________
Name: _______________________
Title: ________________________

EXHIBIT A: Description of Subleased Premises
[Detailed floor plan and description of the 25,000 square feet on the 16th and 17th floors]

EXHIBIT B: Arbitration Procedures for Determining Fair Market Rental Rate
[Detailed procedures for selecting arbitrators and conducting the arbitration process]

EXHIBIT C: Form of Commencement Date Memorandum
[Template for documenting the actual Commencement Date and Expiration Date]

EXHIBIT D: Rules and Regulations
[List of building rules and regulations applicable to all tenants]

EXHIBIT E: Laboratory Safety Guidelines
[Specific guidelines for the safe operation of the BSL-2 laboratory facilities]
"""

sample2 = """
Description: This is a commercial sublease agreement between TechHub Enterprises, LLC (Sublessor) and NanoSphere Solutions, Inc. (Sublessee) for a portion of premises originally leased from Skyline Properties, Inc. (Master Lessor). The sublease is for office and laboratory space, including provisions for BSL-2 laboratory use, with a 5-year initial term and two 3-year extension options.

&lt;parties involved&gt;
Sublessor: TechHub Enterprises, LLC
Sublessee: NanoSphere Solutions, Inc.
Original lessor: Skyline Properties, Inc.
&lt;/parties involved&gt;

&lt;property details&gt;
Address: 1357 Innovation Avenue, 16th and 17th Floors, San Francisco, CA 94158
Description: 25,000 square feet of office and laboratory space
Permitted use: General office, research and development, and laboratory uses consistent with a BSL-2 facility
&lt;/property details&gt;

&lt;term and rent&gt;
Start date: October 1, 2023
End date: September 30, 2028
Monthly rent:
• Year 1: $150,000 per month
• Year 2: $154,500 per month
• Year 3: $159,135 per month
• Year 4: $163,909.05 per month
• Year 5: $168,826.32 per month
Security deposit: $450,000
Option to extend: Two 3-year extension options
Additional rent: 33.33`%` of Operating Expenses for the Master Premises
&lt;/term and rent&gt;

&lt;responsibilities&gt;
Utilities: Sublessee responsible for all utilities and services
Maintenance: Sublessee responsible for interior maintenance and repairs, including laboratory-specific equipment and systems
Repairs: Sublessee responsible for interior repairs; Sublessor responsible for building structure, exterior walls, roof, and common building systems
Insurance: Sublessee required to maintain Commercial General Liability, Property, Workers' Compensation, Business Interruption, and Environmental Liability insurance
&lt;/responsibilities&gt;

&lt;consent and notices&gt;
Landlord's consent: Required for sublease to be effective
Notice requirements: Written notices to be delivered personally, by registered or certified mail, or by overnight courier to specified addresses
&lt;/consent and notices&gt;

&lt;special provisions&gt;
Alterations: Require prior written consent of Sublessor and Master Lessor
Assignment and subletting: Prohibited without prior written consent, with exceptions for certain related entities
Hazardous materials: Sublessee permitted to use Hazardous Materials necessary for office operations and laboratory use, subject to compliance with laws and regulations
Damage and destruction: Termination rights if repairs cannot be completed within 270 days
Early access: 15 days prior to Commencement Date for furniture and equipment installation
Parking: Non-exclusive use of Sublessee's Proportionate Share of parking spaces
Signage: Right to install name and logo on entry door and lobby directory, subject to approval
Access: 24/7 access to Subleased Premises
Environmental compliance: Sublessee responsible for compliance with environmental laws and remediation of any contamination caused by Sublessee
&lt;/special provisions&gt;
"""

document3 = """
COMMERCIAL SUBLEASE AGREEMENT

THIS COMMERCIAL SUBLEASE AGREEMENT (hereinafter referred to as the "Sublease") is made and entered into on this 10th day of October, 2023 (the "Effective Date"), by and between:

SUBLESSOR: InnovateTech Holdings, Inc., a Delaware corporation with its principal place of business at 789 Venture Street, Floor 30, San Francisco, CA 94111 (hereinafter referred to as the "Sublessor")

AND

SUBLESSEE: BioGen Dynamics, Corp., a California corporation with its principal place of business at 321 Research Park Avenue, Mountain View, CA 94041 (hereinafter referred to as the "Sublessee")

WITNESSETH:

WHEREAS, Sublessor is the Tenant under that certain Master Lease Agreement dated June 1, 2018 (hereinafter referred to as the "Master Lease"), wherein SkyScrapers Development Co. (hereinafter referred to as the "Master Lessor") leased to Sublessor those certain premises consisting of approximately 100,000 square feet of office, laboratory, and research space located at 555 Innovation Tower, Floors 28-32, San Francisco, CA 94105 (hereinafter referred to as the "Master Premises");

WHEREAS, Sublessor desires to sublease a portion of the Master Premises to Sublessee, and Sublessee desires to sublease the same from Sublessor;

NOW, THEREFORE, in consideration of the mutual covenants and agreements herein contained, and other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, the parties hereto agree as follows:

1. SUBLEASED PREMISES

1.1 Description: Sublessor hereby subleases to Sublessee, and Sublessee hereby subleases from Sublessor, a portion of the Master Premises consisting of approximately 35,000 square feet of office, laboratory, and research space located on the 29th and 30th floors of the building at 555 Innovation Tower, San Francisco, CA 94105 (hereinafter referred to as the "Subleased Premises"). The Subleased Premises are more particularly described in Exhibit A attached hereto and incorporated herein by reference.

1.2 Common Areas: Sublessee shall have the non-exclusive right to use, in common with Sublessor and other tenants or occupants of the Master Premises, the common areas of the building, including but not limited to lobbies, elevators, stairways, parking facilities, and other common facilities, subject to the terms and conditions of the Master Lease and any rules and regulations promulgated by the Master Lessor or Sublessor.

2. TERM

2.1 Initial Term: The initial term of this Sublease shall commence on December 1, 2023 (the "Commencement Date") and shall expire on November 30, 2029 (the "Expiration Date"), unless sooner terminated in accordance with the provisions of this Sublease or the Master Lease (the "Initial Term").

2.2 Early Access: Sublessee shall have the right to access the Subleased Premises thirty (30) days prior to the Commencement Date for the purpose of installing Sublessee's furniture, fixtures, equipment, and laboratory systems, provided that such early access does not interfere with Sublessor's operations or any work being performed by Sublessor in the Subleased Premises. Such early access shall be subject to all terms and conditions of this Sublease, except for the obligation to pay rent.

2.3 Option to Extend: Provided that Sublessee is not in default under any of the terms and conditions of this Sublease, Sublessee shall have one (1) option to extend the term of this Sublease for an additional period of five (5) years (the "Extension Term") upon the same terms and conditions contained in this Sublease, except that the Base Rent during the Extension Term shall be as set forth in Section 3.2 below. Sublessee shall exercise this option by giving Sublessor written notice of its intent to do so no later than twelve (12) months prior to the expiration of the Initial Term.

3. RENT

3.1 Base Rent for Initial Term: Commencing on the Commencement Date and continuing throughout the Initial Term, Sublessee shall pay to Sublessor as base rent for the Subleased Premises the following amounts ("Base Rent"):

Year 1: $262,500.00 per month
Year 2: $270,375.00 per month
Year 3: $278,486.25 per month
Year 4: $286,840.84 per month
Year 5: $295,446.06 per month
Year 6: $304,309.44 per month

Base Rent shall be payable in advance on or before the first day of each calendar month during the Term, without notice, demand, deduction, or offset.

3.2 Base Rent for Extension Term: If Sublessee exercises its option to extend the Term as provided in Section 2.3, the Base Rent for the Extension Term shall be the greater of (i) the Base Rent in effect immediately prior to the commencement of the Extension Term, increased by three and a half percent (3.5%) per annum, compounded annually, or (ii) the then-prevailing fair market rental rate for comparable office, laboratory, and research space in the building and surrounding area, as mutually agreed upon by Sublessor and Sublessee. If Sublessor and Sublessee are unable to agree upon the fair market rental rate within sixty (60) days after Sublessee's exercise of the extension option, the fair market rental rate shall be determined by arbitration in accordance with the procedures set forth in Exhibit B attached hereto.

3.3 Additional Rent: In addition to the Base Rent, Sublessee shall pay to Sublessor as additional rent Sublessee's Proportionate Share (as defined below) of Operating Expenses (as defined in the Master Lease) for the Master Premises. Sublessee's Proportionate Share shall be thirty-five percent (35%), which is the percentage obtained by dividing the rentable square footage of the Subleased Premises (35,000 sq. ft.) by the rentable square footage of the Master Premises (100,000 sq. ft.). Sublessee's obligation to pay additional rent shall commence on the Commencement Date and shall be payable in monthly installments as provided in the Master Lease.

3.4 Utilities and Services: Sublessee shall be responsible for all utilities and services provided to or consumed in the Subleased Premises, including without limitation, electricity, gas, water, sewer, telephone, internet, and janitorial services. To the extent such utilities and services are not separately metered or billed to the Subleased Premises, Sublessee shall pay to Sublessor, as additional rent, Sublessee's Proportionate Share of the cost of such utilities and services for the Master Premises.

3.5 Late Charges: If any installment of Base Rent or additional rent is not received by Sublessor within five (5) days after the date when due, Sublessee shall pay to Sublessor a late charge equal to five percent (5%) of the overdue amount to cover the extra expense involved in handling delinquent payments. The parties agree that this late charge represents a fair and reasonable estimate of the costs that Sublessor will incur by reason of late payment by Sublessee.

4. SECURITY DEPOSIT

4.1 Amount: Upon execution of this Sublease, Sublessee shall deposit with Sublessor the sum of Seven Hundred Eighty-Seven Thousand Five Hundred Dollars ($787,500.00) as a security deposit (the "Security Deposit") to secure Sublessee's faithful performance of all terms, covenants, and conditions of this Sublease.

4.2 Use and Return: Sublessor may, but shall not be obligated to, use the Security Deposit or any portion thereof to cure any breach or default by Sublessee under this Sublease, or to compensate Sublessor for any damage it incurs as a result of Sublessee's failure to perform any of its obligations hereunder. If Sublessor uses any portion of the Security Deposit, Sublessee shall, within ten (10) days after written demand therefor, restore the Security Deposit to its original amount. Provided that Sublessee has fully and faithfully performed all of its obligations under this Sublease, Sublessor shall return the Security Deposit, or any balance thereof, to Sublessee within thirty (30) days after the expiration or earlier termination of this Sublease.

5. USE

5.1 Permitted Use: The Subleased Premises shall be used and occupied by Sublessee solely for general office purposes, research and development, biotechnology laboratory uses consistent with a BSL-2 (Biosafety Level 2) facility, and other uses permitted under the Master Lease, and for no other purpose without the prior written consent of Sublessor and Master Lessor.

5.2 Compliance with Laws: Sublessee shall, at its sole cost and expense, comply with all laws, ordinances, orders, rules, and regulations of all governmental authorities having jurisdiction over the Subleased Premises or Sublessee's use thereof, including without limitation, the Americans with Disabilities Act, all environmental laws and regulations, and all biosafety regulations applicable to BSL-2 facilities.

5.3 Hazardous Materials: Sublessee shall not use, generate, manufacture, store, or dispose of any Hazardous Materials (as defined in the Master Lease) in, on, or about the Subleased Premises or the building, except for those Hazardous Materials that are (i) typically used in general office operations or (ii) necessary for Sublessee's permitted laboratory operations, provided that such Hazardous Materials are used, stored, and disposed of in strict compliance with all applicable laws and regulations. Sublessee shall provide Sublessor with a list of all Hazardous Materials used in the Subleased Premises on a quarterly basis and shall promptly notify Sublessor of any spills or releases of Hazardous Materials in the Subleased Premises.

6. MAINTENANCE AND REPAIRS

6.1 Sublessee's Obligations: Sublessee shall, at its sole cost and expense, keep and maintain the Subleased Premises and every part thereof in good order, condition, and repair, ordinary wear and tear and damage by casualty excepted. Sublessee's obligations shall include, without limitation, the maintenance, repair, and replacement of all interior walls, floors, ceilings, doors, windows, and fixtures within the Subleased Premises, as well as all laboratory-specific equipment and systems.

6.2 Sublessor's Obligations: Sublessor shall have no obligation to maintain, repair, or replace any portion of the Subleased Premises, except to the extent such obligation is imposed on Sublessor as the Tenant under the Master Lease and relates to the building structure, exterior walls, roof, and common building systems. In such event, Sublessee shall promptly reimburse Sublessor for Sublessee's Proportionate Share of the costs incurred by Sublessor in performing such obligations.

7. ALTERATIONS AND IMPROVEMENTS

7.1 Sublessee's Alterations: Sublessee shall not make any alterations, additions, or improvements to the Subleased Premises (collectively, "Alterations") without the prior written consent of Sublessor and Master Lessor, which consent shall not be unreasonably withheld, conditioned, or delayed for non-structural Alterations that do not affect the building systems or structural elements. Any approved Alterations shall be made at Sublessee's sole cost and expense, in accordance with all applicable laws and building codes, and in a good and workmanlike manner.

7.2 Removal of Alterations: Unless otherwise agreed in writing, all Alterations made by Sublessee shall become the property of Sublessor upon installation and shall remain upon and be surrendered with the Subleased Premises upon the expiration or earlier termination of this Sublease. Notwithstanding the foregoing, Sublessor may require Sublessee to remove any Alterations made by Sublessee and to restore the Subleased Premises to its original condition, all at Sublessee's sole cost and expense.

8. ASSIGNMENT AND SUBLETTING

8.1 Prohibition: Sublessee shall not assign this Sublease or any interest herein, nor sublet the Subleased Premises or any part thereof, nor permit the use or occupancy of the Subleased Premises by any person or entity other than Sublessee, without the prior written consent of Sublessor and Master Lessor, which consent shall not be unreasonably withheld, conditioned, or delayed.

8.2 Permitted Transfers: Notwithstanding Section 8.1, Sublessee may, without Sublessor's or Master Lessor's consent, assign this Sublease or sublet all or a portion of the Subleased Premises to (i) an entity controlling, controlled by, or under common control with Sublessee, (ii) an entity resulting from a merger or consolidation with Sublessee, or (iii) an entity acquiring all or substantially all of Sublessee's assets or stock, provided that such entity has a net worth at least equal to that of Sublessee as of the date of such assignment or subletting and assumes all of Sublessee's obligations under this Sublease.

9. INSURANCE

9.1 Sublessee's Insurance: Sublessee shall, at its sole cost and expense, procure and maintain throughout the Term the following insurance coverages:

(a) Commercial General Liability Insurance with limits of not less than $10,000,000 per occurrence and $20,000,000 in the aggregate, covering bodily injury, property damage, personal injury, and advertising injury arising out of or relating to Sublessee's use and occupancy of the Subleased Premises.

(b) Property Insurance covering Sublessee's personal property, trade fixtures, equipment, and Alterations in the Subleased Premises, in an amount equal to the full replacement cost thereof.

(c) Workers' Compensation Insurance as required by applicable law, and Employer's Liability Insurance with limits of not less than $1,000,000 per accident, $1,000,000 per employee for disease, and $1,000,000 policy limit for disease.

(d) Business Interruption Insurance in an amount sufficient to cover Sublessee's ongoing expenses, including without limitation, rent payments under this Sublease, for a period of not less than eighteen (18) months.

(e) Environmental Liability Insurance with limits of not less than $10,000,000 per occurrence and $20,000,000 in the aggregate, covering claims arising out of the presence, use, handling, storage, or disposal of Hazardous Materials in the Subleased Premises.

10. INDEMNIFICATION

10.1 Sublessee's Indemnity: Sublessee shall indemnify, defend, and hold harmless Sublessor and Master Lessor, and their respective officers, directors, employees, agents, and representatives, from and against any and all claims, demands, liabilities, damages, judgments, costs, and expenses (including reasonable attorneys' fees) arising out of or relating to (i) Sublessee's use or occupancy of the Subleased Premises, (ii) any act or omission of Sublessee or its employees, agents, contractors, or invitees, (iii) any breach or default by Sublessee under this Sublease, or (iv) the presence, use, handling, storage, or disposal of Hazardous Materials in the Subleased Premises by Sublessee or its employees, agents, contractors, or invitees.

11. DAMAGE AND DESTRUCTION

11.1 Termination Rights: If the Subleased Premises or the building in which they are located are damaged or destroyed by fire or other casualty to such an extent that, in Sublessor's reasonable judgment, the damage cannot be repaired within three hundred sixty-five (365) days after the date of such damage or destruction, either party may terminate this Sublease by giving written notice to the other party within thirty (30) days after the date of such damage or destruction.

12. DEFAULT

12.1 Events of Default: The occurrence of any of the following shall constitute a material default and breach of this Sublease by Sublessee:

(a) Failure to pay any rent or other sum payable hereunder within five (5) days after the date when due;

(b) Failure to observe or perform any other term, covenant, or condition of this Sublease, if such failure continues for a period of thirty (30) days after written notice thereof from Sublessor to Sublessee;

(c) The making by Sublessee of any general assignment for the benefit of creditors; the filing by or against Sublessee of a petition to have Sublessee adjudged a bankrupt or a petition for reorganization or arrangement under any law relating to bankruptcy;

(d) Sublessee's abandonment of the Subleased Premises;

(e) Any default by Sublessee under the Master Lease.

13. SURRENDER OF PREMISES

Upon the expiration or earlier termination of this Sublease, Sublessee shall surrender the Subleased Premises to Sublessor in good condition and repair, ordinary wear and tear excepted, and shall remove all of Sublessee's personal property, trade fixtures, and equipment. Sublessee shall also remove any Alterations required to be removed pursuant to Section 7.2 and shall repair any damage caused by such removal. If Sublessee fails to remove any property or to restore the Subleased Premises as required hereunder, Sublessor may do so and charge the cost thereof to Sublessee.

14. HOLDOVER

If Sublessee remains in possession of the Subleased Premises after the expiration or earlier termination of this Sublease without Sublessor's written consent, such occupancy shall be a tenancy at sufferance, and Sublessee shall pay rent at a rate equal to one hundred seventy-five percent (175%) of the Base Rent in effect immediately prior to such holdover, computed on a monthly basis for each month or partial month of holdover. In addition, Sublessee shall indemnify, defend, and hold harmless Sublessor from and against all claims, liabilities, damages, costs, and expenses (including reasonable attorneys' fees) incurred by Sublessor as a result of such holdover.

15. NOTICES

All notices, demands, requests, consents, approvals, and other communications required or permitted to be given under this Sublease shall be in writing and shall be deemed to have been duly given if (a) delivered personally, (b) sent by registered or certified mail, return receipt requested, postage prepaid, or (c) sent by reputable overnight courier service, addressed to the party to be notified at the address set forth in the preamble of this Sublease or such other address as such party may specify by notice given in accordance with this Section.

16. MISCELLANEOUS

16.1 Governing Law: This Sublease shall be governed by and construed in accordance with the laws of the State of California, without giving effect to any choice of law or conflict of law provisions.

16.2 Entire Agreement: This Sublease, including all exhibits attached hereto, constitutes the entire agreement between the parties with respect to the subject matter hereof and supersedes all prior and contemporaneous agreements and understandings, whether written or oral.

16.3 Amendments: This Sublease may not be amended, modified, or supplemented except by a written instrument executed by both parties hereto.

16.4 Waiver: No waiver of any provision of this Sublease shall be effective unless in writing and signed by the party against whom such waiver is sought to be enforced. No waiver of any breach of this Sublease shall be construed as a waiver of any subsequent breach.

16.5 Severability: If any provision of this Sublease is held to be invalid, illegal, or unenforceable in any respect, such invalidity, illegality, or unenforceability shall not affect any other provision of this Sublease, and this Sublease shall be construed as if such invalid, illegal, or unenforceable provision had never been contained herein.

16.6 Binding Effect: This Sublease shall be binding upon and inure to the benefit of the parties hereto and their respective successors and permitted assigns.

16.7 Counterparts: This Sublease may be executed in any number of counterparts, each of which shall be deemed an original, but all of which together shall constitute one and the same instrument. Electronic signatures shall be deemed to be original signatures for all purposes.

16.8 Time of Essence: Time is of the essence with respect to the performance of all obligations under this Sublease.

16.9 Attorneys' Fees: In the event of any litigation between the parties hereto to enforce any provision of this Sublease or any right of either party hereto, the unsuccessful party to such litigation shall pay to the successful party all costs and expenses, including reasonable attorneys' fees, incurred by the successful party in such litigation.

16.10 Subordination: This Sublease is and shall be subject and subordinate to the Master Lease and to all ground or underlying leases, mortgages, deeds of trust, and other hypothecations or encumbrances now or hereafter affecting the real property of which the Subleased Premises are a part.

16.11 Incorporation of Master Lease: The terms and conditions of the Master Lease are incorporated herein by reference, except to the extent that they are inconsistent with the terms and conditions of this Sublease. Sublessee assumes and agrees to perform all of Sublessor's obligations under the Master Lease with respect to the Subleased Premises, except as otherwise provided herein.

16.12 Confidentiality: Sublessee acknowledges that the terms and conditions of this Sublease are to remain confidential for Sublessor's benefit, and may not be disclosed by Sublessee to anyone, by any manner or means, directly or indirectly, without Sublessor's prior written consent, except to Sublessee's attorneys, accountants, and other professional advisors, or as required by law.

16.13 Force Majeure: Neither party shall be responsible for delays in the performance of its obligations hereunder caused by acts of God, war, terrorist attack, pandemic, government regulation, riot, or other causes beyond the reasonable control of such party.

16.14 Quiet Enjoyment: Sublessor covenants that Sublessee, upon paying the rent and performing all of the terms, covenants, and conditions of this Sublease, shall peaceably and quietly have, hold, and enjoy the Subleased Premises during the Term, subject to the terms and conditions of this Sublease and the Master Lease.

16.15 Brokers: Each party represents and warrants to the other that it has not dealt with any broker or finder in connection with this Sublease, except for [Broker Name] representing Sublessor and [Broker Name] representing Sublessee. Each party shall indemnify, defend, and hold harmless the other party from and against any claims, liabilities, damages, costs, and expenses (including reasonable attorneys' fees) arising out of any breach of the foregoing representation and warranty.

16.16 Parking: Sublessee shall have the right to use, on a non-exclusive basis, Sublessee's Proportionate Share of the parking spaces allocated to Sublessor under the Master Lease, subject to the terms and conditions of the Master Lease and any rules and regulations promulgated by Master Lessor or Sublessor.

16.17 Signage: Subject to Master Lessor's approval and the terms of the Master Lease, Sublessee shall have the right to install, at Sublessee's sole cost and expense, Sublessee's name and logo on the entry door to the Subleased Premises, in the lobby directory for the building, and on one panel of the building's monument sign.

16.18 Access: Sublessee shall have access to the Subleased Premises twenty-four (24) hours per day, seven (7) days per week, three hundred sixty-five (365) days per year, subject to the terms and conditions of the Master Lease and any reasonable security measures implemented by Master Lessor or Sublessor.

16.19 Environmental: Sublessee shall comply with all environmental laws and regulations applicable to its use and occupancy of the Subleased Premises. Sublessee shall promptly notify Sublessor of any release or threatened release of Hazardous Materials in, on, or about the Subleased Premises. Upon the expiration or earlier termination of this Sublease, Sublessee shall, at its sole cost and expense, remove all Hazardous Materials brought onto the Subleased Premises by Sublessee and remediate any contamination caused thereby.

16.20 Waiver of Jury Trial: TO THE FULLEST EXTENT PERMITTED BY LAW, SUBLESSOR AND SUBLESSEE HEREBY WAIVE THEIR RESPECTIVE RIGHT TO TRIAL BY JURY IN ANY ACTION OR PROCEEDING BASED UPON, OR RELATED TO, THE SUBJECT MATTER OF THIS SUBLEASE.

16.21 OFAC Compliance: Sublessee represents and warrants that neither Sublessee nor any of its affiliates, nor any of their respective partners, members, shareholders or other equity owners, and none of their respective employees, officers, directors, representatives or agents is, nor will they become, a person or entity with whom U.S. persons or entities are restricted from doing business under regulations of the Office of Foreign Asset Control ("OFAC") of the Department of the Treasury (including those named on OFAC's Specially Designated and Blocked Persons List) or under any statute, executive order (including the September 24, 2001, Executive Order Blocking Property and Prohibiting Transactions with Persons Who Commit, Threaten to Commit, or Support Terrorism), or other governmental action.

IN WITNESS WHEREOF, the parties hereto have executed this Commercial Sublease Agreement as of the date first above written.

SUBLESSOR:
InnovateTech Holdings, Inc.

By: _________________________
Name: _______________________
Title: ________________________

SUBLESSEE:
BioGen Dynamics, Corp.

By: _________________________
Name: _______________________
Title: ________________________

EXHIBIT A: Description of Subleased Premises
[Detailed floor plan and description of the 35,000 square feet on the 29th and 30th floors]

EXHIBIT B: Arbitration Procedures for Determining Fair Market Rental Rate
[Detailed procedures for selecting arbitrators and conducting the arbitration process]

EXHIBIT C: Form of Commencement Date Memorandum
[Template for documenting the actual Commencement Date and Expiration Date]

EXHIBIT D: Rules and Regulations
[List of building rules and regulations applicable to all tenants]

EXHIBIT E: Laboratory Safety Guidelines
[Specific guidelines for the safe operation of the BSL-2 laboratory facilities]

EXHIBIT F: Hazardous Materials Management Plan
[Detailed plan for the handling, storage, and disposal of Hazardous Materials used in the Subleased Premises]
"""

sample3 = """
Description: This is a commercial sublease agreement between InnovateTech Holdings, Inc. (Sublessor) and BioGen Dynamics, Corp. (Sublessee) for a portion of premises originally leased from SkyScrapers Development Co. (Master Lessor). The sublease is for office, laboratory, and research space, including provisions for BSL-2 laboratory use, with a 6-year initial term and one 5-year extension option.

&lt;parties involved&gt;
Sublessor: InnovateTech Holdings, Inc.
Sublessee: BioGen Dynamics, Corp.
Original lessor: SkyScrapers Development Co.
&lt;/parties involved&gt;

&lt;property details&gt;
Address: 555 Innovation Tower, 29th and 30th Floors, San Francisco, CA 94105
Description: 35,000 square feet of office, laboratory, and research space
Permitted use: General office, research and development, biotechnology laboratory uses consistent with a BSL-2 facility
&lt;/property details&gt;

&lt;term and rent&gt;
Start date: December 1, 2023
End date: November 30, 2029
Monthly rent:
• Year 1: $262,500 per month
• Year 2: $270,375 per month
• Year 3: $278,486.25 per month
• Year 4: $286,840.84 per month
• Year 5: $295,446.06 per month
• Year 6: $304,309.44 per month
Security deposit: $787,500
Option to extend: One 5-year extension option
Additional rent: 35`%` of Operating Expenses for the Master Premises
&lt;/term and rent&gt;

&lt;responsibilities&gt;
Utilities: Sublessee responsible for all utilities and services
Maintenance: Sublessee responsible for interior maintenance and repairs, including laboratory-specific equipment and systems
Repairs: Sublessee responsible for interior repairs; Sublessor responsible for building structure, exterior walls, roof, and common building systems
Insurance: Sublessee required to maintain Commercial General Liability, Property, Workers' Compensation, Business Interruption, and Environmental Liability insurance
&lt;/responsibilities&gt;

&lt;consent and notices&gt;
Landlord's consent: Required for sublease to be effective
Notice requirements: Written notices to be delivered personally, by registered or certified mail, or by overnight courier to specified addresses
&lt;/consent and notices&gt;

&lt;special provisions&gt;
Alterations: Require prior written consent of Sublessor and Master Lessor
Assignment and subletting: Prohibited without prior written consent, with exceptions for certain related entities
Hazardous materials: Sublessee permitted to use Hazardous Materials necessary for office operations and laboratory use, subject to compliance with laws and regulations
Damage and destruction: Termination rights if repairs cannot be completed within 365 days
Early access: 30 days prior to Commencement Date for furniture, equipment, and laboratory systems installation
Parking: Non-exclusive use of Sublessee's Proportionate Share of parking spaces
Signage: Right to install name and logo on entry door, lobby directory, and building monument sign
Access: 24/7/365 access to Subleased Premises
Environmental compliance: Sublessee responsible for compliance with environmental laws and remediation of any contamination caused by Sublessee
&lt;/special provisions&gt;
"""
</file>
<file name="skills/summarization/data/sample-lease1-summary.txt">
Description: This is a commercial sublease agreement between Cohen Brothers, LLC d/b/a Cohen &amp; Company (Sublessor) and Taberna Capital Management, LLC (Sublessee) for a portion of premises originally leased from Brandywine Cira, L.P. (Master Lessor). The sublease is for office space with a 5-year initial term.

&lt;parties involved&gt;

- Sublessor: Cohen Brothers, LLC d/b/a Cohen &amp; Company
- Sublessee: Taberna Capital Management, LLC
- Original lessor: Brandywine Cira, L.P.

&lt;/parties involved&gt;

&lt;property details&gt;

- Address: 2929 Arch Street, Suite 1703, Philadelphia, PA 19104
- Description: 2,000 square feet of office space, part of a larger 13,777 square foot master premises
- Permitted use: Not explicitly stated, but likely general office use as per the master lease

&lt;/property details&gt;

&lt;term and rent&gt;

- Start date: April 1, 2024
- End date: March 31, 2029 (5-year term)
- Monthly rent:
  • Months 1-12: $5,750.00
  • Months 13-24: $5,865.00
  • Months 25-36: $5,981.67
  • Months 37-48: $6,101.67
  • Months 49-60: $6,223.33
- Security deposit: Not specified
- Option to extend: Parties may renew on similar terms if Sublessor renews the Master Lease
- Additional rent: Pro rata share of Sublessor's Allocated Share of Recognized Expenses

&lt;/term and rent&gt;

&lt;responsibilities&gt;

- Utilities: Not explicitly specified
- Maintenance: Not explicitly specified
- Repairs: Not explicitly specified
- Insurance: Sublessee required to maintain all insurance as required by the Tenant under the Master Lease

&lt;/responsibilities&gt;

&lt;consent and notices&gt;

- Landlord's consent: Required for sublease to be effective
- Notice requirements: Written notices to be delivered by registered or certified mail, prepaid nationally recognized overnight delivery service, or hand delivery to specified addresses

&lt;/consent and notices&gt;

&lt;special provisions&gt;

- Furniture and services: Sublessee has access to file space, printers, copiers, kitchen, conference room facilities, and receptionist and secretarial services
- Assignment and subletting: Prohibited without Sublessor's prior written consent
- Damage and destruction: Not explicitly addressed in the sublease summary
- Default: Detailed events of default and remedies specified
- Holdover: Rent at twice the amount of monthly rent payable before termination of sublease
- Broker participation: Parties warrant no broker involvement except as specified

&lt;/special provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease1.txt">
Source: https://www.sec.gov/Archives/edgar/data/1045425/000119312507044370/dex1032.htm 

Exhibit 10.32

SUBLEASE AGREEMENT

THIS SUBLEASE AGREEMENT (“Sublease”), is dated as of April 1, 2006, by and between COHEN BROTHERS, LLC d/b/a COHEN &amp; COMPANY (“Sublessor”) and TABERNA CAPITAL MANAGEMENT, LLC (“Sublessee”), collectively, the “Parties” and each a “Party”.

WHEREAS, Sublessor is the lessee under a written lease agreement dated June 22, 2005 wherein Brandywine Cira, L.P., a Delaware limited partnership (“Lessor”), leased Suite No. 1703 which contains 13,777 rentable square feet per ansi/Boma 1996 measurements standards constituting a portion of the 17th Floor in the building commonly known as Cira Center located at 2929 Arch Street in the City of Philadelphia, County of Philadelphia, Commonwealth of Pennsylvania, (“Master Premises”). Said lease is referred to as the “Master Lease” and is attached hereto as Exhibit “A”. Terms not otherwise defined herein shall have the meanings ascribed to such terms in the Master Lease.

WHERAS, Sublessor desires to lease to Sublessee and Sublessee desires to rent from Sublessor a portion of the Master Premises, upon the terms and conditions hereinafter set forth.

NOW, THEREFORE, in consideration of the rents, covenants and provisions contained herein and other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, Sublessor and Sublessee, each intending to be legally bound hereby, agree as follows:

1. PREMISES. (a) Sublessor hereby subleases to Sublessee, on the terms and conditions set forth in this Sublease, a portion of the Master Premises, as more fully set forth on Exhibit “B” attached hereto (the “Premises”). (b) Sublessee has examined the Premises and is satisfied with its condition. The Parties agree that Sublessor has not made and Sublessee is not relying upon, any statements or representations made by Sublessor or Lessor, or their respective employees, agents or anyone else acting on behalf of Sublessor or Lessor (as applicable), including without limitation, any statements or representations concerning the condition of the Premises or the fitness of the Premises for Sublessee’s intended use of the Premises. Sublessee acknowledges that it takes the Premises in an “AS IS, WHERE IS” condition. 

2. TERM. (a) This Sublease shall commence on April 1, 2024 (“Commencement Date”) for a term (“Term”) of five (5) years. (b) Upon expiration of the Term, if Sublessor shall renew the Master Lease, the Parties may renew this Sublease on similar terms as the Parties may agree. 

3. RENT. (a) During the Term, Sublessee agrees to pay Sublessor monthly rent in the amount set forth on Exhibit “B” attached hereto (“Fixed Rent,” and together with all additional rent payable under this Sublease, “Rent”). (b) Sublessee shall pay as additional rent, its pro rata share (based on the square footage rented by Sublessee) of Sublessor’s Allocated Share of Recognized Expenses as set forth in Section 6 of the Master Lease. (c) All Rent due under this Sublease shall be paid in lawful money of the United States without notice, offset or demand, with the first payment being delivered by Sublessee to Sublessor on the Commencement Date and payments to be made thereafter on the first day of each calendar month during the Term by the Sublessee to Sublessor at the address set forth for Sublessor in Section 16 below, or at such other place as Sublessor may from time to time designate. Any Rent for any partial month at the beginning or end of the Term shall be prorated based on the actual number of days in the month in question. (d) If any payment required by Sublessee under any of the terms hereof shall not be paid within five (5) days of the date on which said payment is due, Sublessee shall, upon demand, pay a late charge to Sublessor equal to the greater of (a) One Hundred Fifty Dollars ($150.00), or (b) $0.06 for each dollar so due and such late charge shall be deemed to be additional rent for the purposes of this Sublease. This remedy shall not be the exclusive remedy to Lessor. 

4. USE OF PREMISES. Sublessee shall not use or occupy or permit the Premises to be used or occupied, nor do or permit anything to be done in or on the Premises, in whole or in part, in a manner which would in any way violate any term or condition of this Sublease or the Master Lease, or make void or voidable any insurance then in force with respect thereto, or as will cause or be likely to cause injury to any improvements on the Premises or any part thereof, or as will constitute a public or private nuisance, and shall not use or occupy or permit the Premises to be used or occupied, in whole or in part, in a manner which may violate any present or future laws, regulations, ordinances or requirements of any federal, state or local governments, or of any departments, subdivisions, bureaus or offices thereof, or any other government, public or quasi-public authorities now existing or hereafter created, having jurisdiction over the Premises. 

5. ASSIGNMENT AND SUBLETTING. Sublessee shall not assign this Sublease or further sublet all or any part of the Premises, without Sublessor’s prior written consent, such consent to be withheld in Sublessor’s sole and absolute discretion.

6. INDEMNIFICATION. Sublessee hereby indemnifies Sublessor and Lessor and covenants and agrees to pay, defend and save Sublessor and Lessor harmless from and against any and all liability, loss, damage, cost, expense (including, without limitation, all attorney’s fees and costs of litigation), causes of action, suits, claims, demands or judgments of any nature whatsoever that arises from Sublessee’s actions or omissions and which is based upon, arising from or connected in any manner with (a) injury to or death of any person or damage to any property occurring on the Premises, (b) the use, non-use, possession, operation, maintenance, management or occupation of the Premises or any part thereof, (c) any negligence on the part of Sublessee or its agents, contractors, servants, employees, licenses or invitees, or (d) the violation by Sublessee of any term, condition or covenant of this Sublease or the Master Lease (to the extent incorporated herein) or of any contract, agreement, restriction or regulation affecting the Premises or any part thereof or the ownership, occupancy or use thereof. The obligations of Sublessee under this Section shall survive any termination or expiration of this Sublease. 

7. HOLDOVER RENT. Upon expiration or other termination of this Sublease, Sublessee shall peaceably quit and surrender the Premises to Sublessor, and Sublessor may without further notice enter upon, possess and repossess itself thereof and hold and enjoy the Premises and the right to receive all rental and other income of and from the same. It is expressly agreed that any holding, continued use or occupancy of the Premises by Sublessee after the expiration or other termination of this Sublease shall operate and be construed as a tenancy at sufferance. If Sublessor shall not give consent to such holdover to Sublessee, such tenancy may be terminated as above provided, and until Sublessee has vacated the Premises, it agrees to pay to Sublessor rent at a monthly rental equal to twice the amount of the monthly Rent payable pursuant to this Sublease during the last full month before termination of this Sublease and Sublessee agrees to indemnify, defend and hold Sublessor harmless of, from and against all liability arising under the Master Lease arising from such holdover. 

8. INSURANCE. (a) Throughout the Term, Sublessee agrees to maintain all insurance as required on the part of the Tenant under the Master Lease, and shall name as additional insureds, as their interests may appear, both the Lessor and Sublessor. (b) Upon execution and delivery of this Sublease and thereafter not less than thirty (30) days prior to the expiration date of the policies maintained pursuant to this Section, Sublessee shall provide Sublessor with evidence of coverage and payment in the form of a Certificate of Insurance (“Certificate”). Said Certificate shall provide for a fifteen (15) day written notice to Sublessor and Lessor in the event of cancellation or modification. 

9. OTHER PROVISIONS OF SUBLEASE. Except to the extent made inapplicable or otherwise modified by the terms of this Sublease, all terms and conditions of the Master Lease are incorporated into and made a part of this Sublease as if Sublessor were the lessor thereunder, (it being understood that Sublessor’s obligation and ability to perform obligations of the Lessor incorporated herein under the Master

Lease may be dependant upon the approval of and/or performance by Lessor, over which Sublessor has no control). Sublessee assumes and agrees to perform the lessee’s obligations under the Master Lease during the Term to the extent that such obligations are applicable to the Premises. Sublessee shall not commit or suffer any act or omission that will violate any of the provisions of the Master Lease. If the Master Lease terminates, this Sublease shall terminate and the parties shall be relieved of any further liability or obligation under this Sublease provided however, that if the Master Lease terminates as a result of a default or breach by Sublessor or Sublessee under this Sublease and/or the Master Lease, then the defaulting party shall be liable to the non-defaulting party for all damages suffered as a result of such termination. Notwithstanding the foregoing, if the Master Lease gives Sublessor any right to terminate the Master Lease in the event of the partial or total damage, destruction, or condemnation of the Master Premises or the building or project of which the Master Premises are a part, the exercise of such right by Sublessor shall not constitute a default or breach hereunder. Notwithstanding anything contained herein and provided that Sublessee is not in default under the terms and conditions of this Sublease, Sublessor agrees not to terminate the Master Lease or do any act (or refrain from doing any act) that would lead to the Master Lease being terminated prior to the end of the term of this Sublease, without the prior written consent of Sublessee, which shall not be unreasonably withheld. 

10. DEFAULT; REMEDIES. An “Event of Default” shall be deemed to occur under this Sublease in the event:
 (a) Sublessee fails to pay any Rent specified in this Sublease at the time or place when due; 
 (b) Sublessee shall desert or vacate the Premises; 
 (c) the Sublessee shall fail to comply with any term, provision, condition or covenant of this Sublease or of the Master Lease (other than the payment of Rent required to be paid under this Sublease), and Sublessee shall not cure such default within ten (10) calendar days after notice to Sublessee of Sublessee’s failure so to comply or such longer period as may be necessary to cure any non-monetary default proceeding continuously and diligently, except Sublessee’s failure to maintain insurance as required hereunder shall be an immediate Event of Default hereunder; 
 (d) any petition shall be filed by or against Sublessee under any section or chapter of the Federal or State Bankruptcy Statutes, and in the event of any such petitions being filed against Sublessee, such petition shall not be dismissed within forty-five (45) calendar days of the date of filing of such petition; 
 (e) Sublessee shall become insolvent or make a transfer in fraud of creditors; 
 (f) Sublessee shall make an assignment for the benefit of creditors; (g) a receiver shall be appointed for a substantial part of the assets of Sublessee; 
 (h) Sublessee’s interest in this Sublease shall be levied upon under execution; or 
    (i) Sublessee shall, other than in the ordinary course of business, remove or attempt to remove the personal property of Sublessor from the Premises. Upon the occurrence of an Event of Default, Sublessor shall have the option to do any one or more of the following in addition to and not in limitation of any other remedy permitted at law or in equity or under the terms of this Sublease: 
    (1) Terminate this Sublease, in which event the Sublessee shall immediately surrender the Premises to Sublessor. In the event of such termination, Sublessor may, at its option, declare up to the entire amount of the rentals which would otherwise become due and payable during the remainder of the Term to be due and payable immediately, in which event Sublessee shall pay the same at once, together with all rentals theretofore due at the office of the Sublessor; provided, however, that such payment shall not constitute payment in advance of the rentals for the remainder of said Term; or 
    (2) Enter the Premises as the agent of Sublessee, by reasonable force, if necessary, without being liable to prosecution for any claim for damages therefor; or 
    (3) Take all steps necessary to cure the breach or default, with the costs so incurred to be paid by Sublessee upon demand therefore; or 
    (4) Pursue all remedies available to Lessor pursuant to the terms of the Master Lease. No receipt of money by Sublessor from Sublessee after the termination of this Sublease or after service of any notice or after the commencement of any suit or final judgment for possession of the Premises shall reinstate, continue or extend the Term or affect any such termination, notice or suit. Pursuit by Sublessor of any of the foregoing remedies shall not preclude pursuit by Sublessor of any other remedies herein provided or at law or in equity. No waiver by Sublessor of any breach by Sublessee or of any of Sublessee’s obligations, agreements or covenants herein shall be a waiver of any subsequent breach or of any subsequent obligation, agreement or covenant, nor shall forbearance by Sublessor to seek a remedy for any breach by Sublessee be a waiver by Sublessor of any rights and remedies with respect to such or any subsequent breach. 
    
11. BROKER PARTICIPATION. Sublessor and Sublessee warrant and represent that they have dealt with no real estate broker in connection with this Sublease and that no broker is entitled to any commission on account of this Sublease. Sublessor and Sublessee shall each indemnify, hold harmless and defend the other from any and all claims, actual or threatened, for compensation by any such third person, by reason of Sublessor’s or Sublessee’s breach of its representations contained in this paragraph. 

12. NOTICES. All notices provided for under this Sublease shall be in writing and shall be sufficient if sent by registered or certified mail, return receipt requested, postage prepaid, by prepaid nationally recognized overnight delivery service, or by hand delivery to the Party for whom such notice is intended, as follows: Sublessor: Cohen &amp; Company 2929 Arch Street, Suite 1703 Philadelphia, PA 19104 Attention: Michael Shenkman Sublessee: Taberna Capital Management, LLC 2929 Arch Street, Suite 1703 Philadelphia, PA 19104 Attention: Jack Salmon 


13. GOVERNING LAW. This Sublease shall be governed by and construed in accordance with the laws of the Commonwealth of Pennsylvania. 


14. ADHERENCE TO TERMS AND CONDITIONS. The failure of Sublessor to insist upon the strict performance by Sublessee of any term, condition or covenant on Sublessee’s part to be performed pursuant to the terms of this Sublease or to exercise any right, power or remedy of Sublessor contained in this Sublease shall not be or be deemed to be a waiver of such performance or relinquishment of such right now or at any time subsequent hereto. The receipt by Sublessor of any Rent required to be paid by Sublessee hereunder with knowledge of any Event of Default or default hereunder by Sublessee shall not be or be deemed to be a waiver of such default or Event of Default, nor shall any endorsement or statement on any check or any letter accompanying any check or payment of Rent be deemed an accord and satisfaction and Sublessee may accept any such check or payment without prejudice to Sublessor’s right to recover the balance of such Rent or to pursue any other right or remedy of Sublessor herein provided or provided at law or in equity. 

15. HEADINGS. The headings to various sections of this Sublease have been inserted for purposes of reference only and shall not limit or define or otherwise affect the express terms and provisions of this Sublease.

16. COUNTERPARTS. This Sublease may be executed in any number of counterparts, each of which shall be deemed an original, but all of which shall constitute one and the same instrument. 

17. ENTIRE AGREEMENT; MODIFICATION. This Sublease contains the entire and only agreement between the parties concerning the Premises and no prior oral or written statements or representations, if any, of any party hereto or any representative of any party hereof, not contained in this instrument, shall have any force or effect. This Sublease shall not be modified in any way, except by a writing, executed by Sublessor and Sublessee, and no oral agreements or presentations for rental shall be deemed to constitute a Sublease other than this Agreement. This Sublease shall not be binding until it shall have been executed by Sublessor and Sublessee. 

18. TIME OF ESSENCE. Time is of the essence of this Sublease. 

IN WITNESS WHEREOF, the parties have executed this Sublease as of the date and year first above written. 

SUBLESSEE: TABERNA CAPITAL MANAGEMENT, LLC 

By: TABERNA REALTY FINANCE TRUST, Sole Member By: /s/ James J. Sebra Name: James J. Sebra Title: Vice President and Chief Accounting Officer 
SUBLESSOR: COHEN BROTHERS, LLC d/b/a COHEN &amp; COMPANY By: /s/ James J. McEntee, III Name: James J. McEntee, III Title: Chief Operating Officer




EXHIBIT A

Master Lease

 

1

EXHIBIT B

Premises and Rent

The Premises is comprised of 2,000 square feet of the Master Premises, including all furniture in such space and access to file space, printers, copiers, kitchen, conference room facilities and receptionist and secretarial services.

Fixed Rent is as follows:

 

Months

  	Rent Per
Square Foot	  	Square Feet
Rented	  	
Monthly

Fixed Rent

  	
Annualized

Fixed Rent

1-12

  	$	34.50	  	2,000	  	$	5,750.00	  	$	69,000.00
13-24

  	$	35.19	  	2,000	  	$	5,865.00	  	$	70,380.00
25-36

  	$	35.89	  	2,000	  	$	5,981.67	  	$	71,780.00
37-48

  	$	36.61	  	2,000	  	$	6,101.67	  	$	73,220.00
49-60

  	$	37.34	  	2,000	  	$	6,223.33	  	$	74,680.00
Exhibit A

BRANDYWINE CIRA, L.P.

Landlord

and

COHEN BROTHERS, LLC

Tenant

for Suite 1703

CIRA CENTRE

2929 Arch Street

Philadelphia, Pennsylvania

TABLE OF CONTENTS

 

1.	  	
SUMMARY OF DEFINED TERMS

  	1
2.	  	
PREMISES

  	3
3.	  	
TERM

  	3
4.	  	
CONSTRUCTION BY LANDLORD

  	3
5.	  	
FIXED RENT; SECURITY DEPOSIT

  	3
6.	  	
ADDITIONAL RENT

  	4
7.	  	
ELECTRICITY CHARGES

  	7
8.	  	
SIGNS; USE OF PREMISES AND COMMON AREAS

  	7
9.	  	
ENVIRONMENTAL MATTERS

  	8
10.	  	
TENANT’S ALTERATIONS

  	9
11.	  	
CONSTRUCTION LIENS

  	10
12.	  	
LANDLORD SERVICES

  	11
13.	  	
ASSIGNMENT AND SUBLETTING

  	13
14.	  	
LANDLORD’S RIGHT OF ENTRY

  	15
15.	  	
REPAIRS AND MAINTENANCE

  	16
16.	  	
INSURANCE; SUBROGATION RIGHTS

  	16
17.	  	
INDEMNIFICATION

  	17
18.	  	
QUIET ENJOYMENT

  	18
19.	  	
FIRE DAMAGE

  	18
20.	  	
SUBORDINATION; RIGHTS OF MORTGAGEE

  	19
21.	  	
CONDEMNATION

  	20
22.	  	
ESTOPPEL CERTIFICATE

  	21
23.	  	
DEFAULT

  	21
24.	  	
LANDLORD’S LIEN

  	25
25.	  	
LANDLORD’S REPRESENTATIONS AND WARRANTIES

  	26
26.	  	
SURRENDER

  	26
27.	  	
RULES AND REGULATIONS

  	27
28.	  	
GOVERNMENTAL REGULATIONS

  	26
29.	  	
NOTICES

  	26
30.	  	
BROKERS

  	27
31.	  	
LANDLORD’S RIGHTS

  	27
32.	  	
LANDLORD’S LIABILITY

  	28
33.	  	
AUTHORITY

  	29
34.	  	
EXPANSION

  	29
35.	  	
RELOCATION

  	29
36.	  	
TENANT FINANCIAL INFORMATION

  	29
37.	  	
MISCELLANEOUS PROVISIONS

  	29
38.	  	
WAIVER OF TRIAL BY JURY

  	31
39.	  	
CONSENT TO JURISDICTION

  	31
40.	  	
RENEWAL

  	31
EXHIBITS

 

EXHIBIT “A”

  	-	  	
SPACE PLAN OF PREMISES

EXHIBIT “B”

  	-	  	
CONFIRMATION OF LEASE TERM

EXHIBIT “C”

  	-	  	
RULES AND REGULATIONS

EXHIBIT “D”

  	-	  	
CLEANING SPECIFICATIONS

EXHIBIT “E”

  	-	  	
LANDLORD WORK LETTER

Schedule E-1

  	
Base Building Specifications

Schedule E-2

  	
Tenant Design Specifications

EXHIBIT “F”

  	-	  	
AMTRAK FORM OF SNDA

LEASE

THIS LEASE (“Lease”) entered into as of the ___ day of May, 2005, between BRANDYWINE CIRA, L.P., a Delaware limited partnership (“Landlord”), and COHEN BROTHERS, LLC, a Delaware limited liability company with its principal place of business at                                          (“Tenant”).

WITNESSETH

In consideration of the mutual covenants herein set forth, and intending to be legally bound, the parties hereto covenant and agree as follows:

1. SUMMARY OF DEFINED TERMS.

The following defined terms, as used in this Lease, shall have the meanings and shall be construed as set forth below:

(a) “Building”: The Building to be built at 2929 Arch Street, Philadelphia, Pennsylvania.

(b) “Project”: The Building, the land and all other improvements located at 2929 Arch Street, Philadelphia, Pennsylvania.

(c) “Premises”: Suite No. 1703, which shall contain 13,777 rentable square feet per ansi/Boma 1996 measurement standards constituting a portion of the 17th floor of the Building shown on the space plan attached hereto as Exhibit “A” and made a part hereof.

(d) “Term”: For a period commencing on the Commencement Date and expiring on the last day of the month which is sixty (60) full months after the Commencement Date, but in no event later than March 31, 2011.

(e) “Fixed Rent”:

 

LEASE YEAR

  	`PER
R.S.F.	  	MONTHLY
INSTALLMENTS	  	ANNUAL
FIXED RENT
Months 1-12 **

  	$	34.50	  	$	39,608.88	  	$	475,306.56
Months 13-24

  	$	35.19	  	$	40,401.05	  	$	484,812.60
Months 25-36

  	$	35.89	  	$	41,204.71	  	$	494,456.52
Months 37-48

  	$	36.61	  	$	42,031.33	  	$	504,375.96
Months 49-60

  	$	37.34	  	$	42,869.43	  	$	514,433.16
 

*	plus any charges set forth in Articles 6 and 7 below
 

**	and any partial month at the beginning of the Term shall be pro-rated at this rate
(f) “Security Deposit”: $0

(g) “Possession Date”: Upon substantial completion of the Premises in accordance with Article 4 and the Work Letter attached hereto or Tenant is open and fully operating its business at the Premises for its Permitted Use.

(h) “Tenant’s Allocated Share”: 1.89%;

      “Base Year” 2006

 

14

(i) “Rentable Area”: Premises 13,777. Building 730,682 ft.

(j) “Permitted Uses”: Tenant’s use of the Premises shall be limited to general office use and storage incidental thereto. Tenant’s rights to use the Premises shall be subject to all applicable laws and governmental rules and regulations and to all reasonable requirements of the insurers of the Building.

(k) “Broker”: Brandywine Construction &amp; Management, Inc.

(l) “Notice Address/Contact”

 

  	
Tenant:

  	
Prior to Occupancy:

  		  	
Cohen Brothers, LLC

  		  	
1818 Market Street, 28th Floor

  		  	
Philadelphia, PA 19103

  		  	
Attention: D. Gideon Cohen

  	with a copy to:	  	
  		  	
Cohen Brothers, LLC

  		  	
1818 Market Street, 28th Floor

  		  	
Philadelphia, PA 19103

  		  	
Attention: Raphael L. Licht

  		  	
After Occupancy:

  		  	
Cohen Brothers, LLC

  		  	
2929 Arch Street, Suite 1700

  		  	
Philadelphia, PA 19103

  		  	
Attn:                    

  	with a copy to:	  	
  		  	
Cohen Brothers, Inc.

  		  	
2929 Arch Street, Suite 1700

  		  	
Philadelphia, PA 19103

  		  	
Attn: Raphael L. Licht

  	Landlord:	  	
Brandywine Operating Partnership, L.P.

  		  	
401 Plymouth Road, Suite 500

  		  	
Plymouth Meeting, PA 19462

  		  	
Attn: H. Jeffrey DeVuono

  	with a copy to:	  	
  		  	
Brandywine Realty Trust

  		  	
401 Plymouth Road, Suite 500

  		  	
Plymouth Meeting, PA 19462

  		  	
Attn: Brad A. Molotsky, General Counsel

(m) “Tenant’s North American Industry Classification Number”: 52

(n) “Additional Rent”: All sums of money or charges required to be paid by Tenant under this Lease other than Fixed Rent, whether or not such sums or charges are designated as “Additional Rent

(o) “Rent”: All Annual Fixed Rent, monthly installments of Annual Fixed Rent, Fixed Rent and Additional Rent payable by Tenant to Landlord under this Lease.

 

15

2. PREMISES.

Landlord does hereby lease, demise and let unto Tenant and Tenant does hereby hire and lease from Landlord the Premises for the Term, upon the provisions, conditions and limitations set forth herein.

3. TERM.

(a) The Term of this Lease shall commence (the “Commencement Date”) the date which is the earlier of (i) when Tenant, with Landlord’s prior consent, assumes possession of the Premises for its Permitted Uses, or (ii) upon substantial completion of the improvements required to be made by Landlord, if any under Article 4. The Premises shall be deemed “substantially completed” when the improvements called for by Article 4 have been completed to the extent that the Premises may be occupied by Tenant for its Permitted Uses, subject only to completion of minor finishing, adjustment of equipment, and other minor construction aspects, and Landlord has procured a temporary or permanent certificate of occupancy permitting the occupancy of the Premises, if required by law and the common areas applicable to the Premises, including lobbies, hallways and elevators have been completed so that Tenant shall have access to the Premises (hereafter, “substantially completed”). Landlord shall keep Tenant aware of the progress of construction and continually update Tenant as to the anticipated substantial completion date. If upon substantial completion Landlord fails to provide to Tenant the necessary Building resources to allow Tenant to move (e.g., elevator) then the Commencement Date shall not occur until such resources are reasonable provided and Tenant has been given an opportunity to move to the Premises. Notwithstanding the foregoing, in no event shall the Term commence prior to December 1, 2005. The Term shall expire on the last day of the month which is 60 full months after the Commencement Date (“Expiration Date”). The Commencement Date shall be confirmed by Landlord and Tenant by the execution of a Confirmation of Lease Term in the form attached hereto as Exhibit “B”. If Tenant fails to execute or object to the Confirmation of Lease Term within ten (10) business days of its delivery, Landlord’s determination of such dates shall be deemed accepted.

(b) Upon notification by Landlord, Landlord and Tenant shall schedule a pre-occupancy inspection of the Premises at which time a punchlist of outstanding items, if any, shall be completed. Within a reasonable time thereafter but not to exceed 45 days or such reasonable period of time so long as Landlord is diligently pursuing such cure, Landlord shall complete the punchlist items to Tenant’s reasonable satisfaction.

4. CONSTRUCTION.

The Premises will be improved by Landlord for Tenant’s use as described in the Work Letter attached hereto as Exhibit “E” (“Tenant Work”). Landlord shall only be responsible for payment of a maximum cost of $45.00 per rentable square foot for the Tenant Work (the “Tenant Allowance”), all such costs in excess thereof to be borne by Tenant, and shall be paid to Landlord within thirty (30) days of written invoice, including backup documentation.

In the event the Commencement Date has not occurred by April 1, 2006 for any reason other than Tenant Delay or Force Majeure, then Fixed Rent shall abate during the Term on a day for day basis for each day after April 1, 2006 the Commencement Date has not occurred. In the event the Commencement Date has not occurred by June 1, 2006 for any reason other than Tenant Delay, then Tenant shall have the right to terminate this Lease on five business days prior written notice, provided that if the Commencement Date occurs within such five business days, such notice shall be null and void and of no force or effect.

5. FIXED RENT; SECURITY DEPOSIT.

(a) Tenant shall pay to Landlord without notice or demand, and without set-off, the annual Fixed Rent payable in the monthly installments of Fixed Rent as set forth in Article 1(e), in advance on the first day of each calendar month during the Term by Term by (i) check sent to Landlord, P.O. Box 8538-363, Philadelphia,

 

16

PA 19171 or (ii) wire transfer of immediately available funds to the account at Wachovia Bank, Salem NJ account no. 2030000359075 ABA #031201467; such transfer to be confirmed by Landlord’s accounting department upon written request by Tenant. All payments must include the following information: Building #__TDB_ and Lease #__TBD_. The Lease # will be provided to Tenant in the Confirmation of Lease Term.

(b) In the event any Fixed Rent or Additional Rent, charge, fee or other amount due from Tenant under the terms of this Lease are not paid to Landlord within five (5) days after due, Tenant shall also pay as Additional Rent a service and handling charge equal to five (5%) percent of the total payment then due. The aforesaid late fee shall begin to accrue on the initial date of a payment due date, after any grace period granted hereunder. This provision shall not prevent Landlord from exercising any other remedy herein provided or otherwise available at law or in equity in the event of any default by Tenant.

(c) Rent for any partial month shall be approximately apportioned on a per diem basis.

(d) Tenant shall be required to pay a Security Deposit of $0 under this Lease.

6. ADDITIONAL RENT.

(a) Commencing on January 1, 2007, and in each calendar year or portion thereof thereafter during the Term (as same may be extended), Tenant shall pay to Landlord Tenant’s Allocated Share of the following charges (“Recognized Expenses”) in excess of the Recognized Expenses for calendar year 2006, without deduction or set off:

(i) Operating Expenses. “Operating Expenses” shall mean all costs and expenditures related to the operation and maintenance of the Building incurred by Landlord, including, by way of example and not limitation: (i) charges for, and taxes on, the furnishing to the Building of water and sewer service, electric energy (but not electricity consumed in tenant premises) and, if the building systems should be converted to receive the same, steam or fuel and other utility services; ((ii) costs of elevator service, Maintenance of the Building, janitorial service and trash removal; (iii) charges for governmental permits; (iv) wages, salaries and benefits of employees of Landlord, or of any management company, who are associated with the Building for such time that their work is solely for the benefit of the Building, and management fees, overhead and expenses consistent with the Standards; provided such management fees shall not increase by more than 3% in any year over the prior year; (v) premiums for hazard, rent, liability, environmental, boiler and pressure vessel, worker’s compensation and other insurance; (vi) costs arising under service contracts; (vii) legal, auditing and other professional and consulting fees incurred in connection with operation and Maintenance of the Building and not incurred in connection with leasing or the entity which is Landlord; (viii) costs of replacements but not new improvements (except as otherwise expressly set forth herein); (ix) work required to comply with any future governmental law, ordinance or regulation (unless due to failure to comply with such laws, ordinances or regulations on the date hereof); (x) charges for the Building’s share of the costs of facilities shared with any other property; or (xi) the cost of all other items which under standard accounting practices constitute operating or Maintenance costs which are allocable to the Building or any portion thereof. Operating Expense shall also include all costs and expenses incurred by Landlord for environmental testing, sampling or monitoring required by statute, regulation or order of governmental authority, except any costs or expenses incurred in conjunction with the spilling or depositing of any hazardous substance for which any person or other tenant is legally liable and such person or tenant reimburses Landlord or for which Landlord or its agent is responsible.

Notwithstanding the foregoing, the term Operating Expenses shall not include any of the following: (i) repairs or other work occasioned by fire, windstorm or other insured casualty or by the exercise of the right of eminent domain; (ii) leasing commissions, accountants’, consultants’, auditors or attorneys’ fees, costs and disbursements and other expenses incurred in connection with negotiations or disputes with other tenants or prospective tenants or other occupants, or associated with the enforcement of any other leases or the defense of Landlord’s title to or interest in the real property or any part thereof; (iii) costs (including permit, licenses and inspection fees) incurred in renovating or otherwise improving or decorating, painting, or redecorating space for

 

17

other tenants or other occupants or vacant space; (iv) depreciation; (v) costs incurred due to a breach by Landlord of the terms and conditions of the lease; (vi) overhead and profit increment paid to subsidiaries or affiliates of Landlord for management or other services on or to the Building or for supplies, utilities or other materials or services, to the extent that the costs of such services, supplies, utilities or materials exceed the reasonable costs that would have been paid had the services, supplies or materials been provided by unaffiliated parties on a reasonable basis without taking into effect volume discounts or rebates offered to Landlord as a portfolio purchaser; (vii) interest on debt or amortization payments on any mortgage or any other borrowings and any ground rent; (viii) any compensation paid to clerks, attendants or other persons in commercial concessions operated by Landlord; (ix) expenses resulting from the negligence or willful misconduct of Landlord; (x) any fines or fees for Landlord’s late payments or failure to comply with governmental, quasi-governmental, or regulatory agencies’ rules and regulations; (xi) legal, accounting and other expenses related to Landlord’s financing, re-financing, mortgaging or selling the Building or the Project; (xii) taxes; (xiii) costs for acquiring sculpture, decorations, painting or other objects of art in excess of amounts typically spent for such items in office buildings of comparable quality in the competitive area of the Building; (xiv) compensation and benefits of executive officers of Landlord or any management company above the level of Building Manager; (xv) commissions payable to leasing brokers; (xvi) charges for any service, supply, utility and/or material supplied to other tenants and not Tenant; (xvii) fees or interest stemming from Landlord’s late payment an any obligation; (xviii) charitable expenditures or (xix) charges due to inconsistent calculation not caused by changes in laws or regulations.

(ii) Operating Expenses may include capital expenditures only in the event that the capital improvement falls within one of the following categories: (i) a labor savings device or improvement which reduces or eliminates any other component of Operating Expenses, but only to the extent of the amount of reduction; or (ii) an improvement which is required by reason of any future law or regulation which is applicable to similar first-class office buildings, provided the entire amount of such capital expenditures shall not be included in Operating Expenses for the calendar year in which they are incurred, but such costs shall be amortized on a straight line basis over the longest useful life of the improvement, without interest. If there shall be leased any capital equipment the cost of which, if purchased, would be included in Operating Expenses, then the rental and other costs paid for such leasing shall be included in Operating Expenses for the calendar years in which they were incurred.

(iii) Taxes. “Taxes” shall be defined as all taxes, assessments and other governmental charges, including special assessments for public improvements or traffic districts which are levied or assessed against the Project during the Term or, if levied or assessed prior to the Term, which properly are allocable to the Term, and expenses incurred to reduce or prevent an increase in Taxes and real estate tax appeal expenditures incurred by Landlord in good faith. Nothing herein contained shall be construed to include as Taxes: (A) any inheritance, estate, succession, transfer, gift, franchise, corporation, net income or profit tax or capital levy that is or may be imposed upon Landlord or (B) any transfer tax or recording charge resulting from a transfer of the Building or the Project; provided, however, that if at any time during the Term the method of taxation prevailing at the commencement of the Term shall be altered so that in lieu of or as a substitute for the whole or any part of the Taxes now levied, assessed or imposed on real estate as such or any increase thereof, there shall be levied, assessed or imposed any franchise, income, profit or other tax, however designated, then such other tax shall be deemed to be included within Taxes as defined herein.

Notwithstanding anything in this Lease to the contrary, provided Tenant is eligible for the benefits of the KOIZ legislation, then until the expiration of the KOIZ Period, Recognized Expenses shall not include any Taxes which are abated under the KOIZ Legislation. “KOIZ Legislation” shall mean means, collectively, the Keystone Opportunity Zone and Keystone Opportunity Expansion Zone Act, Act of 1998, P.L. 705, No. 92, as amended, Philadelphia Ordinance Chapter 19-3200, as amended, and any and all regulations adopted by the Pennsylvania Department of Community and Economic Development, the Pennsylvania Department of Revenue, the Philadelphia Department of Commerce, the Philadelphia Department of Revenue and the Philadelphia Board of Revision of Taxes, pursuant to or with respect to such act or such ordinance. “KOIZ Period” means the period for such tax abatement under the KOIZ Legislation.

 

18

(b) Tenant shall pay, in monthly installments in advance, on account of Tenant’s Allocated Share of Operating Expenses and Taxes, the estimated amount of such Recognized Expenses in excess of the Expense Stop for each year as determined by Landlord in its reasonable discretion and as set forth in a notice to Tenant, such notice to include the basis for such calculation. Prior to the end of the calendar year in which the Lease commences and thereafter for each successive calendar year (each, a “Lease Year”), or part thereof, Landlord may send to Tenant a statement of projected Recognized Expenses (a “Projection”) and shall indicate what Tenant’s Allocated Share of Recognized Expenses Taxes in excess of the Expense Stop shall be. Said amount shall be paid in equal monthly installments in advance by Tenant as Additional Rent commencing January 1 of the applicable Lease Year. Until a new Projection is received, payments shall continue at the then current rate. Notwithstanding anything to the contrary in this Article 6, Landlord agrees that in no event shall “controllable expenses” exceed “controllable expenses” from the prior year by more than five (5%) percent. “Controllable expenses” are such expenses which are contracted for at a set rate and cannot fluctuate during the year, including, without limitation, janitorial and insurance costs, management and administrative fees, and landscaping and security expenses

(c) If during the course of any Lease Year, Landlord shall have reason to believe that the Recognized Expenses shall be different than that upon which the aforesaid projections were originally based, then Landlord, one time in any calendar year, shall be entitled to adjust the amount by reallocating the remaining payments for such year, for the months of the Lease Year which remain for the revised projections, and to advise Tenant of an adjustment in future monthly amounts to the end result that the Recognized Expenses shall be collected on a reasonably current basis each Lease Year.

(d) In calculating the Recognized Expenses as hereinbefore described, if for thirty (30) or more days during any Lease Year including the Base Year less than ninety-five (95%) percent of the Rentable Area of the Building shall have been occupied by tenants, then the Recognized Expenses shall be deemed for such Lease Year to be amounts equal to the Recognized Expenses which would normally be expected to be incurred had such occupancy of the Building been at least ninety-five (95%) percent throughout such year, as reasonably determined by Landlord (i.e., taking into account that certain expenses vary with occupancy (e.g., janitorial) and certain expenses do not (e.g., landscaping)). Furthermore, if Landlord shall not furnish any item or items of Recognized Expenses to any portions of the Building because such portions are not occupied or because such item is not required by the tenant of such portion of the Building, for the purposes of computing Recognized Expenses, an equitable adjustment shall be made so that the item of Operating Expense in question shall be shared only by tenants actually receiving the benefits thereof.

(e) By April 30th of each Lease Year or as soon thereafter as administratively available, Landlord shall send to Tenant a statement of actual expenses incurred for Recognized Expenses for the prior Lease Year showing the Allocated Share due from Tenant. If Landlord is unable to provide such statements by August 30, Landlord shall be deemed to waive its right to collect any such amounts as Additional Rent. In the event the amount prepaid by Tenant exceeds the amount that was actually due then Landlord shall issue a credit to Tenant in an amount equal to the over charge, which credit Tenant may apply to future payments on account of Recognized Expenses until Tenant has been fully credited with the over charge. If the credit due to Tenant is more than the aggregate total of future rental payments, Landlord shall pay to Tenant the difference between the credit in such aggregate total. In the event Landlord has undercharged Tenant, then Landlord shall send Tenant an invoice with the additional amount due, which amount shall be paid in full by Tenant within thirty (30) days of receipt.

(f) All Operating Expenses shall be charged at standard rates from the applicable service provider, with reduction on account of volume discounts or preferred vendor rates applicable to Landlord.

(g) If this Lease terminates other than at the end of a calendar year, Landlord’s annual estimate of Recognized Expenses shall be accepted by the parties as the actual Recognized Expenses for the year the Lease ends until Landlord provides Tenant with actual statements in accordance with subsection 6(e) above.

(h) Subject to the limitations set forth in Article 13, Tenant agrees to pay to Landlord on demand reasonable and actual attorney’s fees incurred in connection with the processing and documentation of any

 

19

request for Landlord’s approval or consent in connection with assignment, subletting, change of ownership, or requests for non-disturbance agreements or Landlord and/or Lender waivers.

7. ELECTRICITY CHARGES.

(a) Landlord shall furnish or cause to be furnished to the Premises electricity as provided in Article 12. Tenant shall pay to Landlord, as Additional Rent, within thirty (30) business days of receipt of Landlord’s billing statement therefor, all charges actual incurred by Landlord, or its agent, for electricity, (including, without limitation, the cost for taxes, fuel adjustment charges, transfer charges and other like charges regularly passed on to the consumer by the public utility furnishing electricity to the Building and service, meter reading and billing charges), without markup, such charges to be based upon Tenant’s consumption at the rate that would be charged to Tenant for direct service as measured by Landlord’s meter for the Premises. Landlord has been advised that the rate for electricity shall be the high tension rate and Landlord shall pass through to Tenant only the actual rate assessed. The aforesaid electricity charges shall commence upon delivery to Tenant of the Premises. For purposes of this Article 7, from time to time during the Term, Landlord may enter the Premises to install, maintain, replace or read meters for electricity and/or to evaluate Tenant’s consumption of and demand for electricity.

(b) Landlord has advised Tenant that presently the Philadelphia Electric Company (“Electric Service Provider”) is the utility company selected by Landlord to provide electricity service for the Building. Notwithstanding the foregoing, if permitted by law, Landlord shall have the right at any time and from time to time during the Term to either contract for service from a different company or companies providing electricity service (each such company shall hereinafter be referred to as an “Alternate Service Provider”) or continue to contract for service from the Electric Service Provider so long as the same does not adversely affect Tenant or its use of the premises or increase the cost charged to Tenant. Tenant shall reasonably cooperate with Landlord, the Electric Service Provider, and any Alternate Service Provider at all times and, as reasonably necessary, shall allow Landlord, Electric Service Provider, and any Alternate Service Provider reasonable access to the Building’s electric lines, feeders, risers, wiring, and any other machinery and conduits within the Premises so long as such access does not materially or unreasonably interfere with Tenant’s use of the premises. Landlord shall in no way be liable or responsible for any loss, damage or expense that Tenant may sustain or incur by reason of any change or temporary failure, interference, disruption, or defect, through no fault of Landlord or its agents, employees or contractors, in the supply or character of the electric energy furnished to the Premises, or if, through no fault of Landlord or its agents, employees or contractors, the quantity or character of the electric energy supplied by the Electric Service Provider or any Alternate Service Provider is temporarily no longer available or suitable for Tenant’s requirements as long as Landlord proceeds with due diligence to correct such situation as promptly as possible. In any event, the provisions of Section 12(b) shall be applicable to such situation

8. SIGNS; USE OF PREMISES AND COMMON AREAS.

(a) Tenant may use and occupy the Premises only for the express and limited purposes stated in Article 1 above as the Permitted Uses and for no other purpose, and Tenant shall be permitted to use such areas of the Building then available and in cooperation with other tenants as reasonably necessary to provide telecommunication and related services to and from the Premises.

(b) No machinery or equipment shall be permitted in the Premises that shall cause vibration, noise or disturbance beyond the Premises.

(c) Landlord shall provide Tenant with standard identification signage on all Building directories and at the entrance to the Premises, which Premises entrance sign shall contain the names of all the Permitted Assignments or Sublets. No other signs shall be placed, erected or maintained by Tenant at any place upon the Premises, Building or Project. No tenant in the Building, other than retail tenants, will have nonstandard identification signage inside the Building.

 

20

(d) Tenant shall not overload any floor or part thereof in the Premises or the Building, including any public corridors or elevators, bringing in, placing, storing, installing or removing any large or heavy articles, and Landlord may prohibit, or may direct and control the location and size of, safes and all other heavy articles, and may require, at Tenant’s sole cost and expense, supplementary supports of such material and dimensions as Landlord may deem necessary to properly distribute the weight.

(e) Tenant shall not install in or for the Premises, without Landlord’s prior written approval, any equipment which requires more electric current than a typical office tenant.

(f) Tenant shall not commit or suffer any waste upon the Premises, Building or Project or any nuisance, or do any other act or thing which may disturb the quiet enjoyment of any other tenant in the Building or Project.

9. ENVIRONMENTAL MATTERS.

(a) Hazardous Substances.

(i) Tenant shall not, except as provided in subparagraph (ii) below, bring or otherwise cause to be brought or permit any of its agents, employees, contractors or invitees to bring in, on or about any part of the Premises, Building or Project, any hazardous substance or hazardous waste in violation of law, as such terms are or may be defined in (x) the Comprehensive Environmental Response, Compensation and Liability Act, 42 U.S.C. 9601 et seq., as the same may from time to time be amended, and the regulations promulgated pursuant thereto (“CERCLA”); the United States Department of Transportation Hazardous Materials Table (49 CFR 172.102); by the Environmental Protection Agency as hazardous substances (40 CFR Part 302); the Clean Air Act; and the Clean Water Act, and all amendments, modifications or supplements thereto; and/or (y) any other rule, regulation, ordinance, statute or requirements of any governmental or administrative agency regarding the environment (collectively, (x) and (y) shall be referred to as an “Applicable Environmental Law”).

(ii) Tenant may bring to and use at the Premises hazardous substances incidental to its normal business operations under the NAI Code referenced in article 1(m) above in the quantities reasonably required for Tenant’s normal business consistent with its occupancy pursuant to the Prior Leases and in accordance with Applicable Environmental Laws. Tenant shall store and handle such substances in strict accordance with Applicable Environmental Laws. From time to time promptly following a request to Landlord, Tenant shall provide Landlord with documents identifying the hazardous substances stored or used by Tenant on the Premises and describing the chemical properties of such substances and such other information reasonably requested by Landlord or Tenant. Prior to the expiration or sooner termination of this Lease, Tenant shall remove all hazardous substances from the Premises and shall provide Landlord with an inspection report from an independent environmental engineer certifying that the Premises and the land surrounding the Premises are free of contamination from hazardous substances and hazardous wastes. The provisions of this paragraph shall be personal to Tenant and, in the event Tenant ceases to occupy the Premises, Landlord’s approval to store and use hazardous substances shall automatically terminate.

(iii) Tenant shall defend, indemnify and hold harmless Landlord, Brandywine Realty Services Corp. and Brandywine Realty Trust and their respective employees and agents from and against any and all third-party claims, actions, damages, liability and expense (including all attorney’s, consultant’s and expert’s fees, expenses and liabilities incurred in defense of any such claim or any action or proceeding brought thereon) arising from Tenant’s storage and use of hazardous substances on the Premises including, without limitation, any and all costs incurred by Landlord because of any investigation of the Project or any cleanup, removal or restoration of the Project to remove or remediate hazardous or hazardous wastes deposited by Tenant. Without limitation of the foregoing, if Tenant, its officers, employees, agents, contractors, licensees or invitees cause contamination of the Premises by any hazardous substances, Tenant shall promptly at its sole expense, take any and all necessary actions to return the Premises to the condition existing prior to such contamination, or in the alternative take such other remedial steps as may be required by law or recommended by Landlord’s environmental consultant.

 

21

(b) NAI Numbers.

(i) Tenant represents and warrants that Tenant’s NAI number as designated in the North American Industry Classification System Manual prepared by the Office of Management and Budget, and as set forth in Article 1(m) hereof, is correct. Tenant represents that the specific activities intended to be carried on in the Premises are in accordance with Article 1(j).

(ii) Except as provided in Article 9(a)(ii), Tenant shall not engage in operations at the Premises which involve the generation, manufacture, refining, transportation, treatment, storage, handling or disposal of “hazardous substances” or “hazardous waste” as such terms are defined under any Applicable Environmental Law. Tenant further covenants that it will not cause or permit to exist any “release” or “discharge” (as such term is defined under Applicable Environmental Laws) on or about the Premises.

(iii) Tenant shall, at its expense, comply with all requirements of Applicable Environmental Laws pertaining thereto.

(iv) In addition, upon written notice of Landlord, Tenant shall cooperate with Landlord in obtaining Applicable Environmental Laws approval of any transfer of the Buildings. Specifically in that regard, Tenant agrees that it shall (1) execute and deliver all affidavits, reports, responses to questions, applications or other filings required by Landlord and related to Tenant’s activities at the Premises, (2) allow inspections and testing of the Premises during normal business hours, and (3) as respects the Premises, perform any requirement reasonably required by Landlord necessary for the receipt of approvals under Applicable Environmental Laws, provided the foregoing shall be at no out-of-pocket cost or expense to Tenant except for clean-up and remediation costs arising from Tenant’s violation of this Article 9. Landlord agrees to reimburse Tenant for reasonable and actual legal fees incurred in complying with the foregoing obligation.

(c) Additional Terms.

(i) In the event of Tenant’s failure to comply in full with this Article, Landlord may, after written notice to Tenant and Tenant’s failure to cure within thirty (30) days of its receipt of such notice, at Landlord’s option, perform any and all of Tenant’s obligations as aforesaid and all costs and expenses incurred by Landlord in the exercise of this right all be deemed to be Additional Rent payable on demand and with interest at the Default Rate.

(ii) The parties acknowledge and agree that Tenant shall not be held responsible for any environmental issue at the Premises unless such issue was caused by an action or omission of Tenant or its agents, employees, consultants or invitees (in the Premises).

(d) Survival. This Article 9 shall survive the expiration or sooner termination of this Lease.

10. TENANT’S ALTERATIONS.

Tenant will not cut or drill into or secure any fixture, apparatus or equipment or make alterations, improvements or physical additions (collectively, “Alterations”) of any kind to any part of the Premises without first obtaining the written consent of Landlord, such consent not to be unreasonably withheld. Alterations shall be done at Tenant’s sole cost and expense. Landlord’s consent shall not be required for (i) the installation of any office equipment or fixtures including internal partitions which do not require disturbance of any structural elements or systems (other than attachment thereto) within the Building or (ii) minor work, including decorations, which does not require disturbance of any structural elements or systems (other than attachment thereto) within the Building and which costs in the aggregate less than $25,000. If no approval is required or if Landlord approves Tenant’s Alterations and agrees to permit Tenant’s contractors to do the work, Tenant, prior to the commencement of labor or supply of any materials, must furnish to Landlord (i) a duplicate or original policy or certificates of insurance evidencing (a) general public liability insurance for personal injury and property damage in the minimum amount of

 

22

$1,000,000.00 combined single limit, (b) statutory workman’s compensation insurance, and (c) employer’s liability insurance from each contractor to be employed (all such policies shall be non-cancelable without thirty (30) days prior written notice to Landlord and shall be in amounts and with companies satisfactory to Landlord); (ii) construction documents prepared and sealed by a registered Pennsylvania architect if such alteration causes the aggregate of all Alterations to be in excess of $25,000; (iii) all applicable building permits required by law; and (iv) an executed, effective Waiver of Mechanics Liens from such contractors and all sub-contractors in states allowing for such waivers provided the cost of such alteration exceeds $25,000. Any approval by Landlord permitting Tenant to do any or cause any work to be done in or about the Premises shall be and hereby is conditioned upon Tenant’s work being performed by workmen and mechanics working in harmony and not interfering with labor employed by Landlord, Landlord’s mechanics or their contractors or by any other tenant or their contractors. If at any time any of the workmen or mechanics performing any of Tenant’s work shall be unable to work in harmony or shall interfere with any labor employed by Landlord, other tenants or their respective mechanics and contractors, then the permission granted by Landlord to Tenant permitting Tenant to do or cause any work to be done in or about the Premises, may be withdrawn by Landlord upon forty-eight (48) hours written notice to Tenant.

All Alterations (whether temporary or permanent in character) made in or upon the Premises, either by Landlord or Tenant, shall be Landlord’s property upon installation and shall remain on the Premises without compensation to Tenant and Tenant shall not be required to remove standard office Alterations. At Lease termination, all furniture, movable trade fixtures and equipment (excluding telephone, security and communication equipment system wiring and cabling) shall be removed by Tenant and shall be accomplished in a good and workmanlike manner so as not to damage the Premises or Building and in such manner so as not to disturb other tenants in the Building. All such installations, removals and restoration shall be accomplished in a good and workmanlike manner so as not to damage the Premises or Building and in such manner so as not to disturb other tenants in the Building. If Tenant fails to remove any items required to be removed pursuant to this Article, Landlord may do so and the reasonable costs and expenses thereof shall be deemed Additional Rent hereunder and shall be reimbursed by Tenant to Landlord within thirty (30) business days of Tenant’s receipt of an invoice therefor from Landlord.

11. CONSTRUCTION LIENS.

(a) Tenant will not suffer or permit any contractor’s, subcontractor’s or supplier’s lien (a “Construction Lien”) to be filed against the Premises or any part thereof by reason of work, labor services or materials supplied or claimed to have been supplied to Tenant; and if any Construction Lien shall at any time be filed against the Premises or any part thereof, Tenant, within ten (10) days after notice of the filing thereof, shall cause it to be discharged of record by payment, deposit, bond, order of a court of competent jurisdiction or otherwise. If Tenant shall fail to cause such Construction Lien to be discharged within the period aforesaid, then in addition to any other right or remedy, Landlord may, but shall not be obligated to, discharge it either by paying the amount claimed to be due or by procuring the discharge of such lien by deposit or by bonding proceedings. Any amount so paid by Landlord, plus all of Landlord’s costs and expenses associated therewith (including, without limitation, reasonable legal fees), shall constitute Additional Rent payable by Tenant under this Lease and shall be paid by Tenant to Landlord on demand with interest from the date of advance by Landlord at the Default Rate.

(b) Nothing in this Lease, or in any consent to the making of alterations or improvements shall be deemed or construed in any way as constituting authorization by Landlord for the making of any alterations or additions by Tenant within the meaning of 49 P.S. Sections 1101-1902, as amended, or under the Contractor and Subcontractor Payment Act or any amendment thereof, or constituting a request by Landlord, express or implied, to any contractor, subcontractor or supplier for the performance of any labor or the furnishing of any materials for the use or benefit of Landlord.

 

23

12. SERVICES.

(a) Landlord agrees that it shall provide or cause to be provided the following:

(i) HVAC. From and after the Commencement Date, in accordance with standards appropriate for a first-class office building, furnish heat, ventilation and air-conditioning to the Premises during Normal Business Hours, as defined in the following paragraph, subject to the following: (A) Heating and/or air-conditioning supplied to Tenant during times other than Normal Business Hours (“Off-Hours HVAC”) required by Tenant shall be supplied upon reasonable prior notice, and shall be paid for by Tenant as Additional Rent within 30 days after Tenant’s receipt of each bill therefore at the rate equal to Landlord’s actual incremental cost thereof (not including any amount for any increased wear and tear, and taking into accounting other simultaneous users of Off-Hours HVAC and the amounts required to be paid by them therefore, which amounts shall never be less, on a cost per hour of use basis, for any tenant in the Building than that charged to Tenant); (B) Landlord shall not be responsible for the failure of the heating or air-conditioning system to meet the aforesaid standards if such failure results from occupancy of the Premises by more than an average of one person for each 150 square feet of usable space or if Tenant uses equipment and the combined electrical load of Tenant’s equipment and Tenant’s lighting fixtures exceeds 3.5 watts per square foot of floor area in any one room or area; (C) In addition, if the Premises are used in a manner exceeding the aforementioned occupancy or electric load criteria, Tenant shall pay to Landlord as Additional Rent, within 15 days after Tenant’s receipt of each bill therefor, Landlord’s costs of supplying heating or air conditioning resulting from such excess, at such rates as Landlord shall establish therefor; (D) If, due to the use of the Premises in a manner exceeding the aforementioned occupancy or electrical load criteria or if Tenant has requested and installed a supplemental HVAC system, or due to the arrangement of partitioning or the distribution system within the Premises, impairment of normal operation of the heating or air-conditioning in the Premises results, necessitating changes in the heating or air-conditioning distribution system within the Premises, such changes may be made by Landlord upon request by Tenant, subject to the provisions of Article 12(b); Tenant shall pay to Landlord as Additional Rent the cost of any such change within 30 days after Tenant’s receipt of a bill therefor; (E) Tenant agrees at all times to cooperate fully with Landlord and to abide by all the reasonable regulations and requirements which Landlord may prescribe for the proper functioning and protection of the heating and/or air-conditioning system provided same does not materially impact Tenant’s business; (F) The foregoing heating and air-conditioning services shall be subject to any statute, ordinance, rule, regulation, resolution or recommendation for energy conservation which may be promulgated by any governmental agency or organization and which Landlord in good faith may elect to abide by or shall be by law required to abide by. Tenant shall be responsible for all cleaning, maintenance, repairs and replacements of supplemental HVAC equipment and facilities.

(ii) Elevators. From and after the Commencement Date, provide passenger elevator service to the Premises during normal business hours (which shall be 7:30 a.m. to 8:00 p.m. Monday through Friday and 8:00 a.m. to 1:00 p.m. Saturdays excluding federally observed holidays “Normal Business Hours”)), with one elevator subject to call at all other times. Provide freight elevator service to the Premises subject to scheduling of elevators and loading docks. by Landlord.

(iii) Access. From and after the Commencement Date, furnish to Tenant’s employees and agents access to the Premises at all times, subject to compliance with such security measures as shall be from time to time in effect for the Building.

(iv) Janitorial. From and after the Commencement Date, provide to the Premises janitorial service for typical office use substantially in accordance with Exhibit “D”. Any and all additional or specialized janitorial service desired by Tenant shall be contracted for by Tenant directly with Landlord’s janitorial contractor at reasonably competitive rates and the cost and payment thereof shall be the sole responsibility of Tenant.

(v) Water. From and after the Commencement Date, provide water for drinking, and lavatory and toilet fixtures at the Building core and in the Premises.

(vi) Public Areas. From and after the Commencement Date, keep and maintain the public areas of the Building clean and in good working order, and the sidewalks adjoining the Building in good repair and reasonably free from accumulations of snow and ice.

(vii) Security. From and after the Commencement Date, provide a security program for the Building in accordance with the Standards.

 

24

(viii) Electricity. At Tenant’s cost as set forth in Article 7, from and after the Occupancy Date, furnish electric energy as required by Tenant for general light and power use in the Premises up to 6 watts per square foot of the Premises and the electric energy required by Tenant for distribution of the Building heating, ventilation and air-conditioning systems to the Premises, all subject to the following:

(a) Tenant agrees, to the extent (if any) in the future required by the Pennsylvania Public Utility Commission or federal or state law as a necessary condition to the supply of electric energy to the Premises, to become a metered customer of such public utility.

(b) Tenant’s use of electric energy in the Premises shall not at any time exceed the capacity of any of the electrical conductors and equipment in or serving the Premises. In the event that Tenant shall require electric energy for use in the Premises (exclusive of such electric energy as is required for distribution of the heating, ventilating and air-conditioning systems to the Premises) in excess of that to be provided as set forth above, and if, in Landlord’s sole judgment, Landlord’s facilities are inadequate for such additional requirements and if electric energy for such additional requirements is available to Landlord, Landlord, upon written request and at the cost and expense of Tenant, will furnish and install such additional wires, risers, conduits, feeders, switchboards and circuit panels as reasonably may be required to supply such additional requirements of Tenant, provided (x) that the same shall be permitted by applicable laws and insurance regulations, (y) that, in Landlord’s sole judgment, the same are necessary and will not cause damage or injury to the Building or the Premises or cause or create a dangerous or hazardous condition or entail excessive or unreasonable alterations or repairs or interfere with or disturb other tenants or occupants and (z) that Tenant, at Tenant’s expense, shall, concurrently with the making of such written request, execute and deliver to Landlord Tenant’s written undertaking, with a surety and in form and substance satisfactory to Landlord, obligating Tenant to fully and promptly pay the entire cost and expense of so furnishing and installing any such additional wires, risers, conduits, feeders, switchboards, and/or circuit panels, subject to Article 12(b).

(c) Tenant shall not install any equipment of any kind whatsoever which might necessitate any changes, replacements or additions to any of the heating, ventilating, air-conditioning, electric, sanitary, elevator or other systems serving the Premises or any other portion of the Building, or to any of the services required of Landlord under this Lease, without the prior written consent of Landlord, which may be withheld in Landlord’s sole discretion, and in the event such consent is granted, such replacements, changes or additions shall be paid for by Tenant at Tenant’s sole and exclusive expense. At the expiration or earlier termination of the Term, Tenant shall pay Landlord’s cost of restoring such systems to their condition prior to such replacements, changes or additions. Without limiting the foregoing, no telecommunication carrier shall have the right to do any work for Tenant or use any space or facilities in the Building without Landlord’s prior written consent and such carrier, Landlord and Tenant entering into a License Agreement and Amendment to Lease in form and content acceptable to Landlord pursuant to which Landlord will permit access subject to its then current rates and procedures for use of equipment areas, risers and other facilities in the Building.

(b) If any of the services provided for in Article 12 or telecommunications (including equipment and personnel for any of the foregoing) are interrupted or stopped or if there is a defect in supply, character of, adequacy or quality of any of such services (collectively, a “Failure”), Landlord will use reasonable diligence to resume the service and correct the Failure; provided, however, no Failure of any of these services will create any liability for Landlord (including, without limitation, any liability for damages to Tenant’s personal property caused by any such Failure), constitute an actual or constructive eviction or, except as expressly provided below, cause any abatement of the Rent payable under this Lease or in any manner or for any purpose relieve Tenant from any of its obligations under this Lease. If, due to reasons within Landlord’s reasonable control, any of the services required to be provided by Landlord under Article 12 should become subject to a Failure and should remain subject to a Failure for a period in excess of 72 hours after notice of such Failure from Tenant to Landlord, and if such Failure should render all or any portion of the Premises untenantable so that Tenant is actually unable to use any or all of the Premises for the normal conduct of its business (“Untenantable”), then commencing upon the

 

25

expiration of such 72 hour period, Tenant’s Rent will equitably abate in proportion to the portion of the Premises so rendered Untenantable for so long as such services remain subject to the Failure for such reasons. Without limiting those reasons for a Failure that may be beyond Landlord’s reasonable control, any such Failure due to the following will be deemed caused by a reason beyond Landlord’s control: (i) that is required in order to comply with any laws, ordinances or requests from governmental authorities; (ii) any casualty; (iii) an accident; (iv) an emergency; (v) shortages of labor or materials; or (vi) any other causes of any kind whatsoever that are beyond the control of Landlord, including, but not limited to: (A) lack of access to the Building or the Premises (which shall include, but not be limited to, the lack of access to the Building or the Premises when it or they are structurally sound but inaccessible due to evacuation of the surrounding area or damage to nearby structures or public areas); (B) any cause outside the Building; (C) reduced air quality or other contaminants within the Building that would adversely affect the Building or its occupants (including, but not limited to, the presence of biological or other airborne agents within the Building or the Premises); (D) disruption of mail and deliveries to the Building or the Premises resulting from a casualty; (E) disruptions of telephone and telecommunications services to the Building or the Premises resulting from a casualty; or (F) blockages of any windows, doors, or walkways to the Building or the Premises resulting from a casualty.

Landlord reserves the right, without any liability to Tenant, except as otherwise expressly provided in this Lease, and without being in breach of any covenant of this Lease, to effect a Failure, as required by this Lease or by law, or as Landlord in good faith deems advisable, whenever and for so long as may be necessary, to make repairs, alterations, upgrades, changes, or for any other reason, to the Building’s HVAC, utility, sanitary, elevator, water, telecommunications, security, or other Building systems serving the Premises, or any other services required of Landlord under this Lease.

13. ASSIGNMENT AND SUBLETTING.

(a) Subject to the remaining subsections of Article 13, except as expressly permitted pursuant to this section, Tenant shall not, without the prior written consent of Landlord, such consent not to be unreasonably withheld, assign, transfer or hypothecate this Lease or any interest herein or sublet the Premises or any part thereof. Any of the foregoing acts without such consent shall be void and shall, at the option of Landlord, terminate this Lease. Subject to subparagraph 13(i) below, this Lease shall not, nor shall any interest herein, be assignable as to the interest of Tenant by operation of law or by merger, consolidation or asset sale, without the written consent of Landlord.

(b) If at any time or from time to time during the term of this Lease Tenant desires to assign this Lease or sublet all or any part of the Premises for the remainder of the Term and the same is not a Permitted Assignment or Sublet, Tenant shall give notice to Landlord of such desire, including the name, address and contact party for the proposed assignee or subtenant, a description of such party’s business history, the effective date of the proposed assignment or sublease (including the proposed occupancy date by the proposed assignee or sublessee), and in the instance of a proposed sublease, the square footage to be subleased, a floor plan professionally drawn to scale depicting the proposed sublease area, and a statement of the duration of the proposed sublease (which shall in any and all events expire by its terms prior to the scheduled expiration of this Lease, and immediately upon the sooner termination hereof). Landlord may, at its option, and in its sole and absolute discretion, exercisable by notice given to Tenant within sixty (60) days next following Landlord’s receipt of Tenant’s notice (which notice from Tenant shall, as a condition of its effectiveness, include all of the above-enumerated information), elect to recapture the Premises if Tenant is proposing to sublet or assign the Premises or such portion as is proposed by Tenant to be sublet (and in each case, the designated and non-designated parking spaces included in this demise, or a pro-rata portion thereof in the instance of the recapture of less than all of the Premises), and terminate this Lease with respect to the space being recaptured. The parties acknowledge and agree that a Permitted Assignment or Sublet shall not trigger Landlord’s recapture right. A Permitted Assignment or Sublet is an assignment or sublet under Article 13 (i) and Article 13(j).

(c) If Landlord elects to recapture the Premises or a portion thereof as aforesaid, then from and after the effective date thereof as approved by Landlord, after Tenant shall have fully performed such obligations

 

26

as are enumerated herein to be performed by Tenant in connection with such recapture, and except as to obligations and liabilities accrued and unperformed (and any other obligations expressly stated in this Lease to survive the expiration or sooner termination of this Lease), Tenant shall be released of and from all lease obligations thereafter otherwise accruing with respect to the Premises (or such lesser portion as shall have been recaptured by Landlord). The Premises, or such portion thereof as Landlord shall have elected to recapture, shall be delivered by Tenant to Landlord free and clear of all furniture, furnishings, personal property and removable fixtures, with Tenant repairing and restoring any and all damage to the Premises resulting from the installation, handling or removal thereof, and otherwise in the same condition as Tenant is, by the terms of this Lease, required to redeliver the Premises to Landlord upon the expiration or sooner termination of this Lease. In the event of a sublease of less than all of the Premises, the cost of erecting any required demising walls, entrances and entrance corridors, and any other or further improvements required in connection therewith, including without limitation, modifications to HVAC, electrical, plumbing, fire, life safety and security systems (if any), painting, wallpapering and other finish items as may be acceptable to or specified by Landlord, all of which improvements shall be made in accordance with applicable legal requirements and Landlord’s then-standard base building specifications, shall be performed by Landlord’s contractors, and shall be shared 50% by Tenant and 50% by Landlord. Upon the completion of any recapture and termination as provided herein, Tenant’s Fixed Rent, Recognized Expenses and other monetary obligations hereunder shall be adjusted pro-rated based upon the reduced rentable square footage then comprising the Premises.

(d) If Landlord provides written notification to Tenant electing not to recapture the Premises (or so much thereof as Tenant had proposed to sublease), then Tenant may proceed to market the designated space and may complete such transaction and execute an assignment of this Lease or a sublease agreement (in each case in form acceptable to Landlord) within a period of five (5) months next following Landlord’s notice to Tenant that it declines to recapture such space, provided that Tenant shall have first obtained in any such case the prior written consent of Landlord to such transaction, which consent shall not be unreasonably withheld. If, however, Tenant shall not have assigned this Lease or sublet the Premises with Landlord’s prior written consent as aforesaid within five (5) months next following Landlord’s notice to Tenant that Landlord declines to recapture the Premises (or such portion thereof as Tenant initially sought to sublease), then in such event, Tenant shall again be required to request Landlord’s consent to the proposed transaction, whereupon Landlord’s right to recapture the Premises (or such portion as Tenant shall desire to sublease) shall be renewed upon the same terms and as otherwise provided in subsection (b) above.

For purposes of this Section 13(d), and without limiting the basis upon which Landlord may withhold its consent to any proposed assignment or sublease, the parties agree that it shall not be unreasonable for Landlord to withhold its consent to such assignment or sublease if: (i) the proposed assignee or sublessee shall have a net worth which is not acceptable to Landlord in Landlord’s reasonable discretion; (ii) the proposed assignee or sublessee shall have no reliable credit history or an unfavorable credit history, or other reasonable evidence exists that the proposed assignee or sublessee will experience difficulty in satisfying its financial or other obligations under this Lease; (iii) the proposed assignee of sublessee, in Landlord’s reasonable opinion, is not reputable and of good character; (iv) the portion of the Premises requested to be subleased renders the balance of the Premises unleasable as a separate area; (v) or Tenant is proposing to assign or sublease to an existing tenant of the Building; or (vi) the nature of such party’s proposed business operation would or might reasonably permit or require the use of the Premises in a manner inconsistent with the “Permitted Use” specified herein, would or might reasonably otherwise be in conflict with express provisions of this Lease, would or might reasonably violate the terms of any other lease for the Building, or would, in Landlord’s reasonable judgment, otherwise be incompatible with other tenancies in the Building.

(e) Any sums or other economic consideration received by Tenant as a result of any subletting, assignment or license (except rental or other payments received which are attributable to the amortization of the cost of leasehold improvements made to the sublet or assigned portion of the premises by Tenant for subtenant or assignee, and other reasonable expenses incident to the subletting or assignment, including standard leasing commissions) whether denominated rentals under the sublease or otherwise, which exceed, in the aggregate, the total sums which Tenant is obligated to pay Landlord under this Lease (prorated to reflect obligations allocable to that portion of the premises subject to such sublease or assignment) shall be divided evenly between Landlord and

 

27

Tenant, with Landlord’s portion being payable to Landlord as Additional Rental under this Lease without affecting or reducing any other obligation of Tenant hereunder.

(f) Regardless of Landlord’s consent, no subletting or assignment shall release Tenant of Tenant’s obligation or alter the primary liability of Tenant to pay the Rent and to perform all other obligations to be performed by Tenant hereunder. The acceptance of rental by Landlord from any other person shall not be deemed to be a waiver by Landlord of any provision hereof. Consent to one assignment or subletting shall not be deemed consent to any subsequent assignment or subletting. In the event of default by any assignee of Tenant or any successor of Tenant in the performance of any of the terms hereof, Landlord may proceed directly against Tenant without the necessity of exhausting remedies against such assignee or successor. Notwithstanding the foregoing, in the event that Tenant is able to demonstrate to the reasonable satisfaction of Landlord that the proposed assignee has a financial net worth of $10,000,000 or more and sufficient to satisfy the monetary obligations of Tenant under this Lease in accordance with Landlord’s standard credit analysis applied to tenants generally and the proposed assignee has a reputation for meeting its contractual obligations, then Landlord agrees that it shall not unreasonably withhold or delay its consent to Tenant’s request that it be released from the liability of Tenant to pay the Rent and to perform all other obligations to be performed by Tenant under this Lease upon any permitted assignment.

(g) In the event that (i) the Premises or any part thereof are sublet and Tenant is in default under this Lease, or (ii) this Lease is assigned by Tenant, then, Landlord may collect Rent from the assignee or subtenant and apply the net amount collected to the rent herein reserved; but no such collection shall be deemed a waiver of the provisions of this Article 13 with respect to assignment and subletting, or the acceptance of such assignee or subtenant as Tenant hereunder, or a release of Tenant from further performance of the covenants herein contained.

(h) Other than a Permitted Assignment or Sublet, in connection with each proposed assignment or subletting of the Premises by Tenant, Tenant shall pay to Landlord (i) an administrative fee of $250 per request (including requests for non-disturbance agreements and Landlord’s or its lender’s waivers) in order to defer Landlord’s administrative expenses arising from such request, plus (ii) Landlord’s reasonable and actual attorneys’ fees not to exceed $1,000.

(i) Tenant may, after notice to, but without the consent of Landlord, assign this Lease or sublet a portion of the Premises to an affiliate (i.e., either a 50% or more ownership interest by the same parties owning 50% or more of Tenant’s ownership interest or another business entity which controls or is controlled by or is under common control with Tenant), parent or subsidiary entity of Tenant or to an entity to which it sells or assigns all of substantially all of its assets or stock or with which it may be consolidated or merged (“Affiliate”), provided such purchasing, consolidated, merged, affiliated or subsidiary entity shall, in writing, assume and agree to perform all of the obligations of Tenant under this Lease, shall have a net worth at least equal to $10,000,000, and it shall deliver such assumption with a copy of such assignment to Landlord within ten (10) days thereafter, and provided further that Tenant shall not be released or discharged from any liability under this Lease by reason of such assignment.

(j) Anything in this Article 12 to the contrary notwithstanding, no assignment or sublease shall be permitted under this Lease if Tenant is in default at the time of such assignment or has previously defaulted (irrespective of the fact that Tenant cured such default) more than twice in connection with any of its monetary obligations under this Lease and such monetary defaults aggregate in excess of $500,000. Notwithstanding anything herein to the contrary, Landlord acknowledges that Tenant’s tenancy is predicated upon related entities, affiliates and/or customers of Tenant (“Permitted Occupants”) occupying the Premises either through an occupancy agreement or sublease. Provided any such Permitted Occupants does not occupy more than 75% of the Premises, in the aggregate, Landlord’s consent shall not be required hereunder for any occupancy with a Permitted Occupant and Landlord shall not be entitled to share any profit.

14. LANDLORD’S RIGHT OF ENTRY.

Landlord and persons authorized by Landlord may enter the Premises at all reasonable times upon reasonable advance notice (except in the case of an emergency in which case no prior notice is necessary) for the

 

28

purpose of inspections, repairs, alterations to adjoining space, appraisals, or other reasonable purposes; including enforcement of Landlord’s rights under this Lease. Landlord shall not be liable for inconvenience to or disturbance of Tenant by reason of any such entry; provided, however, that in the case of repairs or work, such shall be done, so far as practicable, so as to not unreasonably interfere with Tenant’s use of the Premises. Landlord will use overtime labor if necessary for such work at Landlord’s expense. Landlord also shall have the right to enter the Premises at all reasonable times after giving prior oral notice to Tenant, to exhibit the Premises to any prospective purchaser and/or mortgagee. During the last year of the Term, Landlord also shall have the right to enter the Premises at all reasonable times after giving prior oral notice to Tenant, to exhibit the Premises to any prospective tenants.

15. REPAIRS AND MAINTENANCE.

(a) Tenant, at its sole cost and expense and throughout the Term of this Lease, shall keep and maintain the Premises in good order and condition, free of accumulation of dirt and rubbish, and shall promptly make all non-structural repairs necessary by virtue of Tenant’s actions or neglect to keep and maintain such good order and condition. Tenant shall not replace lights, ballasts, tubes, ceiling tiles, outlets and similar equipment itself and shall advise Landlord of Tenant’s desire to have Landlord make such repairs. If requested by Tenant, Landlord shall make such repairs to the Premises within a reasonable time of notice to Landlord and shall charge Tenant for such services at Landlord’s standard rate (such rate to be competitive with the market rate for such services). All repairs made by Tenant shall utilize materials and equipment which are at least equal in quality and usefulness to those originally used in constructing the Building and the Premises.

(b) Except as provided in subparagraph (a) of this article, Landlord shall make or cause to be made all repairs to the Premises and Building common area, all repairs which may be needed to the mechanical, HVAC, electrical and plumbing systems in and serving the Premises (excluding repairs to any supplemental HVAC systems, kitchens, any non-Building standard fixtures or other improvements or any other portions of the Premises or fixtures, equipment and improvements therein requiring maintenance of a type or nature not customarily provided by Landlord to office tenants of the Building), and all repairs to exterior windows and glass (including caulking and weather stripping). Landlord shall have no responsibility to make any repairs unless and until Landlord receives written notice of the need for such repair or Landlord has actual knowledge of the need to make such repair.

(c) Landlord shall keep and maintain all common areas appurtenant to the Building and any sidewalks, parking areas, curbs and access ways adjoining the Property in a clean and orderly condition, free of accumulation of dirt, rubbish, snow and ice, and shall keep and maintain all landscaped areas in a neat and orderly condition.

(d) Notwithstanding anything herein to the contrary, repairs to the Premises, Building or Project and its appurtenant common areas made necessary by a negligent or willful act or omission of Tenant or any employee, agent, or contractor of Tenant shall be made by Landlord at the sole cost and expense of Tenant, payable on demand, except to the extent of insurance proceeds received by Landlord.

16. INSURANCE; SUBROGATION RIGHTS.

(a) Tenant shall obtain and keep in force at all times during the term hereof, at its own expense, commercial general liability insurance including contractual liability and personal injury liability and all similar coverage, with combined single limits of $3,000,000.00 on account of bodily injury to or death of one or more persons as the result of any one accident or disaster and on account of damage to property, or in such other amounts as Landlord may from time to time require. Tenant shall also require its movers to procure and deliver to Landlord a certificate of insurance naming Landlord as an additional insured.

(b) Tenant shall, at its sole cost and expense, maintain in full force and effect on all Tenant’s trade fixtures, equipment and personal property on the Premises, a policy of “special form” property insurance covering the full replacement value of such property.

 

29

(c) All liability insurance required hereunder shall not be subject to cancellation without at least thirty (30) days prior notice to all insureds, and shall name Landlord, Brandywine Realty Trust, Landlord’s Agent and Tenant as insureds, as their interests may appear, and, if requested by Landlord, shall also name as an additional insured any mortgagee or holder of any mortgage which may be or become a lien upon any part of the Premises. Prior to the commencement of the Term, Tenant shall provide Landlord with certificates which evidence that the coverages required have been obtained for the policy periods. Tenant shall also furnish to Landlord throughout the term hereof replacement certificates at least thirty (30) days prior to the expiration dates of the then current policy or policies. All the insurance required under this Lease shall be issued by insurance companies authorized to do business in the Commonwealth of Pennsylvania with a financial rating of at least an A-IX as rated in the most recent edition of Best’s Insurance Reports and in business for the past five years. The limit of any such insurance shall not limit the liability of Tenant hereunder. If Tenant fails to procure and maintain such insurance, Landlord may, but shall not be required to, procure and maintain the same, at Tenant’s expense to be reimbursed by Tenant as Additional Rent within ten (10) days of written demand. Any deductible under such insurance policy or self-insured retention under such insurance policy in excess of Twenty Five Thousand ($25,000) must be approved by Landlord in writing prior to issuance of such policy. Tenant shall not self-insure without Landlord’s prior written consent. The policy limits set forth herein shall be subject to periodic review (but not during the initial Term), and Landlord reserves the right to require that Tenant increase the liability coverage limits if, in the reasonable opinion of Landlord, the coverage becomes inadequate or is less than commonly maintained by tenants of similar buildings in the area making similar uses.

(d) Landlord shall obtain and maintain the following insurance during the Term of this Lease: (i) replacement cost insurance including “special form” property insurance on the Building and on the Project, (ii) builder’s risk insurance for the Landlord Work to be constructed by Landlord in the Project, and (iii) commercial general liability insurance (including bodily injury and property damage) covering Landlord’s operations at the Project in amounts reasonably required by the Landlord’s lender or Landlord.

(e) Each party hereto, and anyone claiming through or under them by way of subrogation, waives and releases any cause of action it might have against the other party and Brandywine Realty Trust and their respective employees, officers, members, partners, trustees and agents, on account of any loss or damage that is insured against under any insurance policy required to be obtained hereunder (to the extent that such loss or damage is recoverable under such insurance policy) that covers the Project, Building or Premises, Landlord’s or Tenant’s fixtures, personal property, leasehold improvements or business and which names Landlord and Brandywine Realty Trust or Tenant, as the case may be, as a party insured. Each party hereto agrees that it will cause its insurance carrier to endorse all applicable policies waiving the carrier’s right of recovery under subrogation or otherwise against the other party. During any period while such waiver of right of recovery is in effect, each party shall look solely to the proceeds of such policies for compensation for loss, to the extent such proceeds are paid under such policies.

17. INDEMNIFICATION.

(a) Tenant shall defend, indemnify and hold harmless Landlord and Brandywine Realty Trust and their respective employees and agents from and against any and all third-party claims, actions, damages, liability and expense (including all reasonable attorney’s fees, expenses and liabilities incurred in defense of any such claim or any action or proceeding brought thereon) arising from (i) Tenant’s improper use of the Premises, (ii) the improper conduct of Tenant’s business, (iii) any activity, work or things done, permitted or suffered by Tenant or its agents, licensees or invitees in or about the Premises or elsewhere contrary to the requirements of the Lease, (iv) any breach or default in the performance of any obligation of Tenant’s part to be performed under the terms of this Lease, and (v) any negligence or willful act of Tenant or any of Tenant’s agents, contractors, or employees. Without limiting the generality of the foregoing, Tenant’s obligations shall include any case in which Landlord or Brandywine Realty Trust shall be made a party to any litigation commenced by or against Tenant, its agents, subtenants, licensees, concessionaires, contractors, customers or employees, then Tenant shall defend, indemnify and hold harmless Landlord, Brandywine Realty Services Corp. and Brandywine Realty Trust and shall pay all costs, expenses and reasonable attorney’s fees incurred or paid by Landlord and Brandywine Realty Trust in connection with such

 

30

litigation, after notice to Tenant and Tenant’s refusal to defend such litigation (related to activities described in the preceding sentence), and upon notice from Landlord shall defend the same at Tenant’s expense by counsel reasonably satisfactory to Landlord.

(b) Landlord shall defend, indemnify and hold harmless Tenant and its respective employees and agents from and against any and all third-party claims, actions, damages, liability and expense (including all attorney’s fees, expenses and liabilities incurred in defense of any such claim or any action or proceeding brought thereon) arising from (i) Landlord’s improper use of the Premises, (ii) the improper conduct of Landlord’s business, (iii) any activity, work or things done, permitted or suffered by Landlord in or about the Premises or elsewhere contrary to the requirements of the Lease, (iv) any breach or default in the performance of any obligation of Landlord’s part to be performed under the terms of this Lease, (v) any negligence or willful act of Landlord or any of Landlord’s agents, contractors, employees or invitees; and (vi) any claims related to injuries and/or property damage at the Project but outside of the Premises. Without limiting the generality of the foregoing, Landlord’s obligations shall include any case in which Tenant shall be made a party to any litigation commenced by or against Landlord, its agents, subtenants, licensees, concessionaires, contractors, customers or employees, then Landlord shall defend, indemnify and hold harmless Tenant and shall pay all costs, expenses and reasonable attorney’s fees incurred or paid by Tenant in connection with such litigation, after notice to Landlord and Landlord’s refusal to defend such litigation, and upon notice from Tenant shall defend the same at Landlord’s expense by counsel reasonably satisfactory to Tenant.

18. QUIET ENJOYMENT.

Provided Tenant has performed all of the terms and conditions of this Lease, including the payment of Fixed Rent and Additional Rent, to be performed by Tenant, Tenant shall peaceably and quietly hold and enjoy the Premises for the Term, without hindrance from Landlord, or anyone claiming by through or under Landlord under and subject to the terms and conditions of this Lease and of any mortgages now or hereafter affecting all of or any portion of the Premises.

19. FIRE DAMAGE.

(a) Except as provided below, in case of damage to the Premises by fire or other insured casualty, Landlord shall repair the damage. Such repair work shall be commenced promptly following notice of the damage and completed with due diligence, taking into account the time required for Landlord to effect a settlement with and procure insurance proceeds from the insurer, except for delays due to governmental regulation, scarcity of or inability to obtain labor or materials, intervening acts of God or other causes beyond Landlord’s reasonable control.

(b) Notwithstanding the foregoing, if (i) the damage is of a nature or extent that, in Landlord’s reasonable judgment (to be communicated to Tenant within thirty (30) days from the date of the casualty, failure to provide such notice shall be reason for Tenant to terminate this Lease, upon reasonable notice and Landlord’s opportunity to cure), the repair and restoration work would require more than two hundred ten (210) consecutive days to complete after the casualty (assuming normal work crews not engaged in overtime), or (ii) if more than thirty (30%) percent of the total area of the Building is extensively damaged, or (iii) the casualty occurs in the last Lease Year of the Term and Tenant has not exercised a renewal right, either party shall have the right to terminate this Lease and all the unaccrued obligations of the parties hereto, by sending written notice of such termination to the other within ten (10) days of Tenant’s receipt of the notice from Landlord described above. Such notice is to specify a termination date no less than fifteen (15) days after its transmission. Landlord shall no right to terminate this Lease unless it terminates all leases in the Building and elects not to rebuild.

(c) If the insurance proceeds received by Landlord as dictated by the terms and conditions of any financing then existing on the Building, (excluding any rent insurance proceeds) would not be sufficient to pay for repairing the damage or are required to be applied on account of any mortgage which encumbers any part of the Premises or Building, or if the nature of loss is not covered by Landlord’s fire insurance coverage, Landlord may elect either to (i) repair the damage as above provided notwithstanding such fact or (ii) terminate this Lease by giving Tenant notice of Landlord’s election as aforesaid.

 

31

(d) In the event Landlord has not completed restoration of the Premises within two hundred ten (210) days from the date of casualty, Tenant may terminate this Lease by written notice to Landlord within thirty (30) business days following the expiration of such 210 day period unless, within thirty (30) days following receipt of such notice, Landlord has substantially completed such restoration and delivered the Premises to Tenant for occupancy.

(e) In the event of damage or destruction to the Premises or any part thereof, Tenant’s obligation to pay Fixed Rent and Additional Rent shall be equitably adjusted or abated including an additional forty-five (45) days after Landlord has substantially completed the restoration of the Premises.

20. SUBORDINATION; RIGHTS OF MORTGAGEE.

(a) This Lease is and shall be subject and subordinate at all times to the lien of any mortgage, deed of trust and/or other encumbrance now existing or hereafter placed by Landlord upon the Building and all renewals, modifications, consolidations, replacements and extensions thereof (all of which are hereinafter referred to collectively as a “Mortgage” and the holder thereof, a “Holder”), all automatically and without the necessity of any further action on the part of Tenant to effectuate such subordination. Tenant shall, at the request of any person who may acquire Landlord’s estate by foreclosure or transfer in lieu of foreclosure (a “Successor”), attorn to such person, and shall execute, acknowledge and deliver, upon demand by Landlord or any Holder or its assignee, but in no event later than ten (10) days after such demand, such further instruments evidencing such subordination, and such further instruments evidencing such attornment obligation, as shall be reasonably requested by such Holder or its assignee. Default by Tenant hereunder is not subject to notice and/or opportunity to cure.

(b) Anything contained in the foregoing provisions of this Article 20 to the contrary notwithstanding, any such Holder may at any time subordinate, in whole or in part, its Mortgage to the operation and effect of this Lease, without the necessity of obtaining Tenant’s consent thereto, by giving notice of the same in writing to Tenant, and thereupon this Lease shall be deemed to be prior to such Mortgage without regard to their respective dates of execution, delivery and/or recordation, and in that event, such Holder shall have the same rights with respect to this Lease as though this Lease were executed, delivered and recorded prior to the execution and delivery of such Mortgage.

(c) If Landlord is or becomes a tenant leasing the Building or the land upon which it stands, then Tenant agrees that Tenant’s possession shall be that of a subtenant and subordinate to the interest of Landlord’s lessor, its heirs, personal representatives, successors and assigns (such lessor and other persons being hereinafter collectively referred to as an “Overlessor”) without the necessity of any further action on the part of Tenant to effectuate such subordination, but notwithstanding the foregoing, if Landlord’s tenancy shall terminate either by expiration, forfeiture or otherwise, then, if the Overlessor shall so request, Tenant shall attorn to the Overlessor and recognize the Overlessor as Tenant’s landlord (and also a “Successor”) upon the terms and conditions of this Lease for the balance of the Term hereof and any extensions or renewals hereof. Tenant shall execute, acknowledge and deliver, upon demand by Landlord or any Overlessor, such further instruments evidencing such subordination of Tenant’s right, title and interest under this Lease to the interests of an Overlessor, and such further instruments of attornment, as shall be reasonably requested by such Overlessor. Notwithstanding anything herein to the contrary, if the Overlessor shall become the landlord hereunder and if Tenant is otherwise entitled to itself receive the Tenant Allowance set forth in Article 4 and such Tenant Allowance was not paid to Tenant, Tenant shall have the right to offset Rent by the remaining unpaid Tenant Allowance.

(d) Upon attornment, this Lease will continue in full force and effect as a direct lease between the Successor and Tenant upon all of the same terms, conditions and covenants as stated in this Lease except that a Successor shall not be (a) liable for any previous act or omission or negligence of Landlord under this Lease which is not continuing after foreclosure, (b) subject to any counterclaim defense or offset not expressly provided for in this Lease and asserted with reasonable promptness, which theretofore shall have accrued to Tenant against Landlord, (c)

 

32

bound by any previous modification or amendment of this Lease or by any previous prepayment of more than one month’s Rent, unless such modification or prepayment shall have been approved in writing by the Holder or Overlessor (provided Tenant has express written notice of the existence of each Holder and/or Overlessor) through or by reason of which the Successor shall have succeeded to the rights of Landlord under this Lease, (d) obligated to perform any repairs or other work beyond Landlord’s obligations under this Lease, (e) liable for the payment of any security deposit unless the same has been delivered to Successor, (f) bound by any obligation to pay for services prior to foreclosure, or (g) responsible for any monies owed by Landlord to Tenant. Tenant agrees, upon request by and without cost to the Successor, to promptly execute and deliver to the Successor such instrument(s) as may be reasonably required to evidence such attornment. To the extent any Overlessor and/or Successor shall require Tenant’s written agreement to its attornment hereunder, such agreement shall contain such Overlessor’s and/or Successor’s covenant not to disturb Tenant’s occupancy. Attached hereto as Exhibit “F” is the standard form of subordination, non-disturbance and attornment agreement (“SNDA”) of the current Overlessor. Landlord agrees that it shall provide to Tenant an executed SNDA in the form as attached as Exhibit “E” within thirty (30) days of full execution of this Lease and if Tenant requests changes to such form then Landlord shall use reasonable efforts to provide to Tenant an executed SNDA as requested within sixty days of full execution of this Lease.

(e) In the event Landlord shall be or is alleged to be in default of any of its obligations owing to Tenant under this Lease, Tenant agrees to give to any Holder or Overlessor notice by overnight mail of any such default which Tenant shall have served upon Landlord, provided that prior thereto Tenant has been notified in writing (by way of Notice of Assignment of Rents and/or Leases or otherwise in writing to Tenant) of the name and addresses of any such Holder or Overlessor. Tenant shall not be entitled to exercise any right or remedy as there may be because of any default by Landlord without having given such notice to the Holder or Overlessor; and Tenant further agrees that if Landlord shall fail to cure such default, the Holder or Overlessor shall have thirty (30) additional days (measured from the later of the date on which Landlord’s receipt of such notice from Tenant), within which to cure such default, provided that if such default be such that the same could not be cured within such period and Holder or Overlessor is diligently pursuing the remedies necessary to effectuate the cure (including, but not limited to, foreclosure proceedings if necessary to effectuate the cure) but in no event more than an additional thirty (30) days; then Tenant shall not exercise any right or remedy as there may be arising because of Landlord’s default, including but not limited to, termination of this Lease as may be expressly provided for herein or available to Tenant as a matter of law, if the Holder or Overlessor either has cured the default within such time periods, or as the case may be, has initiated the cure of same within such period and is diligently pursuing the cure of same as aforesaid

21. CONDEMNATION.

(a) If more than twenty (20%) percent of the floor area of the Premises is taken or condemned for a public or quasi-public use (a sale in lieu of condemnation to be deemed a taking or condemnation for purposes of this Lease), this Lease shall, at either party’s option, terminate as of the date title to the condemned real estate vests in the condemnor, and the Fixed Rent and Additional Rent herein reserved shall be apportioned and paid in full by Tenant to Landlord to that date and all rent prepaid for period beyond that date shall forthwith be repaid by Landlord to Tenant and neither party shall thereafter have any liability hereunder.

(b) If less than twenty (20%) percent of the floor area of the Premises is taken or if neither Landlord nor Tenant have elected to terminate this Lease pursuant to the preceding sentence, Landlord shall do such work as may be reasonably necessary to restore the portion of the Premises not taken to tenantable condition for Tenant’s uses, but shall not be required to expend more than the net award Landlord reasonably expects to be available for restoration of the Premises. If Landlord determines that the damages available for restoration of the Building and/or Project will not be sufficient to pay the cost of restoration, or if the condemnation damage award is required to be applied on account of any mortgage which encumbers any part of the Premises, Building and/or Project, Landlord may terminate this Lease by giving Tenant thirty (30) days prior notice specifying the termination date.

(c) If this Lease is not terminated after any such taking or condemnation, the Fixed Rent and the Additional Rent shall be equitably reduced in proportion to the area of the Premises which has been taken for the balance of the Term.

 

33

(d) If a part or all of the Premises shall be taken or condemned, all compensation awarded upon such condemnation or taking shall go to Landlord and Tenant shall have no claim thereto other than Tenant’s damages associated with moving, storage and relocation; and Tenant hereby expressly waives, relinquishes and releases to Landlord any claim for damages or other compensation to which Tenant might otherwise be entitled because of any such taking or limitation of the leasehold estate hereby created, and irrevocably assigns and transfers to Landlord any right to compensation of all or a part of the Premises or the leasehold estate.

22. ESTOPPEL CERTIFICATE.

Each party agrees at any time and from time to time, within ten (10) days after the other party’s written request, to execute, acknowledge and deliver to the other party a written instrument in recordable form certifying all information reasonably requested, including but not limited to, the following: that this Lease is unmodified and in full force and effect (or if there have been modifications, that it is in full force and effect as modified and stating the modifications), the Commencement Date, the expiration date of this Lease, the square footage of the Premises, the rental rates applicable to the Premises, the dates to which Rent, Additional Rent, and other charges have been paid in advance, if any, and stating whether or not to the best knowledge of the party signing such certificate, the requesting party is in default in the performance of any covenant, agreement or condition contained in this Lease and, if so, specifying each such default of which the signer may have knowledge. It is intended that any such certification and statement delivered pursuant to this Article may be relied upon by any prospective purchaser of the Project or any mortgagee thereof or any assignee of Landlord’s interest in this Lease or of any mortgage upon the fee of the Premises or any part thereof.

23. DEFAULT.

If:

(a) Tenant fails to pay any installment of Fixed Rent or any amount of Additional Rent when due; provided, however, Landlord shall provide written notice of the failure to pay such Rent and Tenant shall have a ten (10) day grace period from its receipt of such Landlord’s notice within which to pay such Rent without creating a default hereunder. No additional notice shall be required thereafter and Landlord shall be entitled to immediately exercise its remedies hereunder if payment is not received during the grace period,

(b) Tenant fails to bond over a construction or mechanics lien within the time period set forth in Article 11,

(c) Tenant fails to observe or perform any of Tenant’s other non-monetary agreements or obligations herein contained within thirty (30) days after written notice specifying the default, or the expiration of such additional time period as is reasonably necessary to cure such default, provided Tenant immediately commences and thereafter proceeds with all due diligence and in good faith to cure such default,

(d) Tenant makes any assignment for the benefit of creditors,

(e) a petition is filed or any proceeding is commenced against Tenant or by Tenant under any federal or state bankruptcy or insolvency law and such petition or proceeding is not dismissed within ninety (90) days,

(f) a receiver or other official is appointed for Tenant or for a substantial part of Tenant’s assets or for Tenant’s interests in this Lease,

 

34

(g) any attachment or execution against a substantial part of Tenant’s assets or of Tenant’s interests in this Lease remains unstayed or undismissed for a period of more than thirty (30) days, or

(h) a substantial part of Tenant’s assets or of Tenant’s interest in this Lease is taken by legal process in any action against Tenant,

then, in any such event, an Event of Default shall be deemed to exist and Tenant shall be in default hereunder.

If an Event of Default shall occur, the following provisions shall apply and Landlord shall have, in addition to all other rights and remedies available at law or in equity, the rights and remedies set forth therein, which rights and remedies may be exercised upon or at any time following the occurrence of an Event of Default unless, prior to such exercise, Landlord shall agree in writing with Tenant that the Event(s) of Default has been cured by Tenant in all respects.

(a) Acceleration of Rent. By notice to Tenant, Landlord shall have the right to accelerate all Fixed Rent and all expense installments due hereunder and otherwise payable in installments over the remainder of the Term, and, at Landlord’s option, any other Additional Rent to the extent that such Additional Rent can be determined and calculated to a fixed sum; and the amount of accelerated rent to the termination date, without further notice or demand for payment, shall be due and payable by Tenant within five (5) days after Landlord has so notified Tenant, such amount collected from Tenant shall be discounted to present value using an interest rate of the Wall Street Journal Prime Rate. Additional Rent which has not been included, in whole or in part, in accelerated rent, shall be due and payable by Tenant during the remainder of the Term, in the amounts and at the times otherwise provided for in this Lease.

Notwithstanding the foregoing or the application of any rule of law based on election of remedies or otherwise, if Tenant fails to pay the accelerated rent in full when due, Landlord thereafter shall have the right by notice to Tenant, (i) to terminate Tenant’s further right to possession of the Premises and (ii) to terminate this Lease under subparagraph (b) below; and if Tenant shall have paid part but not all of the accelerated rent, the portion thereof attributable to the period equivalent to the part of the Term remaining after Landlord’s termination of possession or termination of this Lease shall be applied by Landlord against Tenant’s obligations owing to Landlord, as determined by the applicable provisions of subparagraphs (c) and (d) below.

(b) Termination of Lease. By notice to Tenant, Landlord shall have the right to terminate this Lease as of a date specified in the notice of termination and in such case, Tenant’s rights, including any based on any option to renew, to the possession and use of the Premises shall end absolutely as of the termination date; and this Lease shall also terminate in all respects except for the provisions hereof regarding Landlord’s damages and Tenant’s liabilities arising prior to, out of and following the Event of Default and the ensuing termination.

Following such termination and the notice of same provided above (as well as upon any other termination of this Lease by expiration of the Term or otherwise) Landlord immediately shall have the right to recover possession of the Premises; and to that end, Landlord may enter the Premises and take possession, without the necessity of giving Tenant any notice to quit or any other further notice, with or without legal process or proceedings, and in so doing Landlord may remove Tenant’s property (including any improvements or additions to the Premises which Tenant made, unless made with Landlord’s consent which expressly permitted Tenant to not remove the same upon expiration of the Term), as well as the property of others as may be in the Premises, and make disposition thereof in such manner as Landlord may deem to be commercially reasonable and necessary under the circumstances.

(c) Tenant’s Continuing Obligations/Landlord’s Reletting Rights.

(i) Unless and until Landlord shall have terminated this Lease under subparagraph (b) above, Tenant shall remain fully liable and responsible to perform all of the covenants and to observe all the conditions of this Lease throughout the remainder of the Term to the early termination date; and, in addition, Tenant shall pay to Landlord, upon demand and as Additional Rent, the total sum of all costs, losses, damages and expenses, including reasonable attorneys’ fees, as Landlord incurs, directly or indirectly, because of any Event of Default having occurred.

 

35

(ii) If Landlord either terminates Tenant’s right to possession without terminating this Lease or terminates this Lease and Tenant’s leasehold estate as above provided, then, subject to the provisions below, Landlord shall have the unrestricted right to relet the Premises or any part(s) thereof to such tenant(s) on such provisions and for such period(s) as Landlord may deem appropriate. Landlord agrees, however, to use reasonable efforts to mitigate its damages, provided that Landlord shall not be liable to Tenant for its inability to mitigate damages if it shall endeavor to relet the Premises in like manner as it offers other comparable vacant space or property available for leasing to others in the Project of which the Building is a part. If Landlord relets the Premises after such a default, the costs recovered from Tenant shall be reallocated to take into consideration any additional rent which Landlord receives from the new tenant which is in excess to that which was owed by Tenant.

(iii) Notwithstanding anything in this Lease to the contrary, in the event of a default under this Lease (including the filing of bankruptcy by or against Tenant), all personal property of Tenant at the Building, shall become Landlord’s property, shall constitute security of Tenant’s obligations under this Lease and shall not be removed by Tenant from the Building.

(d) Landlord’s Damages.

(i) The damages which Landlord shall be entitled to recover from Tenant shall be the sum of:

(A) all Fixed Rent and Additional Rent accrued and unpaid as of the termination date; and

(B) (i) all costs and expenses incurred by Landlord in recovering possession of the Premises, including removal and storage of Tenant’s property, (ii) the costs and expenses of restoring the Premises to the condition in which the same were to have been surrendered by Tenant as of the expiration of the Term, and (iii) the costs of reletting commissions; and

(C) all Fixed Rent and Additional Rent (to the extent that the amount(s) of Additional Rent has been then determined) otherwise payable by Tenant over the remainder of the Term as reduced to present value.

Less deducting from the total determined under subparagraphs (A), (B) and (C) all Rent and all other Additional Rent to the extent determinable as aforesaid, (to the extent that like charges would have been payable by Tenant) which Landlord receives from other tenant(s) by reason of the leasing of the Premises or part during or attributable to any period falling within the otherwise remainder of the Term.

(ii) The damage sums payable by Tenant under the preceding provisions of this paragraph (d) shall be payable on demand from time to time as the amounts are determined; and if from Landlord’s subsequent receipt of rent as aforesaid from reletting, there be any excess payment(s) by Tenant by reason of the crediting of such rent thereafter received, the excess payment(s) shall be refunded by Landlord to Tenant, without interest.

(iii) Landlord may enforce and protect the rights of Landlord hereunder by a suit or suits in equity or at law for the specific performance of any covenant or agreement contained herein, and for the enforcement of any other appropriate legal or equitable remedy, including, without limitation, injunctive relief, and for recovery of consequential damages and all moneys due or to become due from Tenant under any of the provisions of this Lease.

 

36

(e) Landlord’s Right to Cure. Without limiting the generality of the foregoing, if Tenant shall have committed an Event of Default, Landlord, without being required to give Tenant any notice or opportunity to cure, may (but shall not be obligated to do so), in addition to any other rights it may have in law or in equity, cure such default on behalf of Tenant, and Tenant shall reimburse Landlord upon demand for any sums paid or costs incurred by Landlord in curing such default, including reasonable attorneys’ fees and other legal expenses, together with interest at 10% per annum Rate from the dates of Landlord’s incurring of costs or expenses.

Tenant further waives the right to any notices to quit as may be specified in the Landlord and Tenant Act of Pennsylvania, Act of April 6, 1951, as amended, or any similar or successor provision of law, and agrees that five (5) days notice shall be sufficient in any case where a longer period may be statutorily specified.

(f) Additional Remedies. In addition to, and not in lieu of any of the foregoing rights granted to Landlord, and upon at least fifteen (15) days prior written notice including which notice shall include the pleadings:

(i) WHEN THIS LEASE OR TENANT’S RIGHT OF POSSESSION SHALL BE TERMINATED BY COVENANT OR CONDITION BROKEN, OR FOR ANY OTHER REASON, EITHER DURING THE TERM OF THIS LEASE OR ANY RENEWAL OR EXTENSION THEREOF, AND ALSO WHEN AND AS SOON AS THE TERM HEREBY CREATED OR ANY EXTENSION THEREOF SHALL HAVE EXPIRED, IT SHALL BE LAWFUL FOR ANY ATTORNEY AS ATTORNEY FOR TENANT TO FILE AN AGREEMENT FOR ENTERING IN ANY COMPETENT COURT AN ACTION TO CONFESS JUDGMENT IN EJECTMENT AGAINST TENANT AND ALL PERSONS CLAIMING UNDER TENANT, WHEREUPON, IF LANDLORD SO DESIRES, A WRIT OF EXECUTION OR OF POSSESSION MAY ISSUE FORTHWITH, WITHOUT ANY PRIOR WRIT OF PROCEEDINGS, WHATSOEVER, AND PROVIDED THAT IF FOR ANY REASON AFTER SUCH ACTION SHALL HAVE BEEN COMMENCED THE SAME SHALL BE DETERMINED AND THE POSSESSION OF THE PREMISES HEREBY DEMISED REMAIN IN OR BE RESTORED TO TENANT, LANDLORD SHALL HAVE THE RIGHT UPON ANY SUBSEQUENT DEFAULT OR DEFAULTS, OR UPON THE TERMINATION OF THIS LEASE AS HEREINBEFORE SET FORTH, TO BRING ONE OR MORE ACTION OR ACTIONS AS HEREINBEFORE SET FORTH TO RECOVER POSSESSION OF THE SAID PREMISES.

In any action to confess judgment in ejectment, Landlord shall first cause to be filed in such action an affidavit made by it or someone acting for it setting forth the facts necessary to authorize the entry of judgment, of which facts such affidavit shall be conclusive evidence, and if a true copy of this Lease (and of the truth of the copy such affidavit shall be sufficient evidence) be filed in such action, it shall not be necessary to file the original as a warrant of attorney, any rule of Court, custom or practice to the contrary notwithstanding.

___________(INITIAL). TENANT WAIVER. TENANT SPECIFICALLY ACKNOWLEDGES THAT TENANT HAS VOLUNTARILY, KNOWINGLY AND INTELLIGENTLY WAIVED CERTAIN DUE PROCESS RIGHTS TO A PREJUDGMENT HEARING BY AGREEING TO THE TERMS OF THE FOREGOING PARAGRAPHS REGARDING CONFESSION OF JUDGMENT. TENANT FURTHER SPECIFICALLY AGREES THAT IN THE EVENT OF DEFAULT, LANDLORD MAY PURSUE MULTIPLE REMEDIES INCLUDING OBTAINING POSSESSION PURSUANT TO A JUDGMENT BY CONFESSION AND EXECUTING UPON SUCH JUDGMENT. IN SUCH EVENT AND SUBJECT TO THE TERMS SET FORTH HEREIN, LANDLORD SHALL PROVIDE FULL CREDIT TO TENANT FOR ANY MONTHLY CONSIDERATION WHICH LANDLORD RECEIVES FOR THE LEASED PREMISES IN MITIGATION OF ANY OBLIGATION OF TENANT TO LANDLORD FOR THAT MONEY. FURTHERMORE, TENANT SPECIFICALLY WAIVES ANY CLAIM AGAINST LANDLORD AND LANDLORD’S COUNSEL FOR VIOLATION OF TENANT’S CONSTITUTIONAL RIGHTS IN THE EVENT THAT JUDGMENT IS CONFESSED PURSUANT TO THIS LEASE.

(g) Interest on Damage Amounts. Any sums payable by Tenant hereunder, which are not paid after the same shall be due, shall bear interest from that day until paid at the rate of four (4%) percent over the

 

37

then Prime Rate as published daily under the heading “Money Rates” in The Wall Street Journal, unless such rate be usurious as applied to Tenant, in which case the highest permitted legal rate shall apply (the “Default Rate”).

(h) Landlord’s Statutory Rights. Landlord shall have all rights and remedies now or hereafter existing at law or in equity with respect to the enforcement of Tenant’s obligations hereunder and the recovery of the Premises. No right or remedy herein conferred upon or reserved to Landlord shall be exclusive of any other right or remedy, but shall be cumulative and in addition to all other rights and remedies given hereunder or now or hereafter existing at law. Landlord shall be entitled to injunctive relief in case of the violation, or attempted or threatened violation, of any covenant, agreement, condition or provision of this Lease, or to a decree compelling performance of any covenant, agreement, condition or provision of this Lease.

(i) Remedies Not Limited. Nothing herein contained shall limit or prejudice the right of Landlord to exercise any or all rights and remedies available to Landlord by reason of default or to prove for and obtain in proceedings under any bankruptcy or insolvency laws, an amount equal to the maximum allowed by any law in effect at the time when, and governing the proceedings in which, the damages are to be proved, whether or not the amount be greater, equal to, or less than the amount of the loss or damage referred to above.

(j) No Waiver by Landlord. No delay or forbearance by Landlord in exercising any right or remedy hereunder, or Landlord’s undertaking or performing any act or matter which is not expressly required to be undertaken by Landlord shall be construed, respectively, to be a waiver of Landlord’s rights or to represent any agreement by Landlord to undertake or perform such act or matter thereafter. Waiver by Landlord of any breach by Tenant of any covenant or condition herein contained (which waiver shall be effective only if so expressed in writing by Landlord) or failure by Landlord to exercise any right or remedy in respect of any such breach shall not constitute a waiver or relinquishment for the future of Landlord’s right to have any such covenant or condition duly performed or observed by Tenant, or of Landlord’s rights arising because of any subsequent breach of any such covenant or condition nor bar any right or remedy of Landlord in respect of such breach or any subsequent breach. Landlord’s receipt and acceptance of any payment from Tenant which is tendered not in conformity with the provisions of this Lease or following an Event of Default (regardless of any endorsement or notation on any check or any statement in any letter accompanying any payment) shall not operate as an accord and satisfaction or a waiver of the right of Landlord to recover any payments then owing by Tenant which are not paid in full, or act as a bar to the termination of this Lease and the recovery of the Premises because of Tenant’s previous default.

(k) No Waiver by Tenant. No delay or forbearance by Tenant in exercising any right or remedy hereunder, or Tenant’s undertaking or performing any act or matter which is not expressly required to be undertaken by Tenant shall be construed, respectively, to be a waiver of Tenant’s rights or to represent any agreement by Tenant to undertake or perform such act or matter thereafter. Waiver by Tenant of any breach by Landlord of any covenant or condition herein contained (which waiver shall be effective only if so expressed in writing by Tenant) or failure by Tenant to exercise any right or remedy in respect of any such breach shall not constitute a waiver or relinquishment for the future of Tenant’s right to have any such covenant or condition duly performed or observed by Landlord, or of Tenant’s rights arising because of any subsequent breach of any such covenant or condition nor bar any right or remedy of Tenant in respect of such breach or any subsequent breach. Tenant’s receipt and acceptance of any payment from Landlord which is tendered not in conformity with the provisions of this Lease or following an Event of Default (regardless of any endorsement or notation on any check or any statement in any letter accompanying any payment) shall not operate as an accord and satisfaction or a waiver of the right of Tenant to recover any payments then owing by Landlord which are not paid in full, or act as a bar to the termination of this Lease and the recovery of the Premises because of Landlord’s previous default.

24. LANDLORD’S LIEN.

Intentionally Omitted.

 

38

25. LANDLORD’S REPRESENTATIONS AND WARRANTIES.

Landlord represents and warrants to Tenant that: (a) Landlord is the owner of the Building and the Project; (b) Landlord has the authority to enter into this Lease and (c) the person executing this Lease is duly authorized to execute and deliver this Lease on behalf of Landlord.

26. SURRENDER.

Tenant shall, at the expiration of the Term, promptly quit and surrender the Premises in good order and condition and in conformity with the applicable provisions of this Lease, excepting only reasonable wear and tear and damage by fire or other insured casualty. Tenant shall have no right to hold over beyond the expiration of the Term and in the event Tenant shall fail to deliver possession of the Premises as herein provided, such occupancy shall not be construed to effect or constitute other than a tenancy at sufferance. During the first sixty (60) days beyond the expiration of the Term the amount of rent owed to Landlord by Tenant shall automatically become one hundred fifty percent (150%) the sum of the Rent as those sums are at that time calculated under the provisions of the Lease. If Tenant fails to surrender the space within sixty (60) days of the termination date, Landlord may elect to automatically extend the Term for an additional month, with a Rent of two hundred percent (200%) the sum of the Fixed Rent as those sums are at that time calculated under the provisions of the Lease. The acceptance of rent by Landlord or the failure or delay of Landlord in notifying or evicting Tenant following the expiration or sooner termination of the Term shall not create any tenancy rights in Tenant and any such payments by Tenant may be applied by Landlord against its legal costs and expenses, including attorney’s fees, incurred by Landlord as a result of such holdover.

27. RULES AND REGULATIONS.

Tenant agrees that at all times during the terms of this Lease (as same may be extended) it, its employees, agents, invitees and licenses shall comply with all rules and regulations specified on Exhibit “C” attached hereto and made a part hereof, together with all reasonable Rules and Regulations as Landlord may from time to time reasonably promulgate provided they do not increase the financial burdens of Tenant or unreasonably restrict Tenant’s rights under this Lease and they are imposed on all tenants of the Building uniformly. Tenant’s right to dispute the reasonableness of any changes in or additions to the Rules and Regulations shall be deemed waived unless asserted to Landlord within thirty (30) business days after Landlord shall have given Tenant written notice of any such adoption or change. In case of any conflict or inconsistency between the provisions of this Lease and any Rules and Regulations, the provisions of this Lease shall control. Landlord shall have no duty or obligation to enforce any Rule and Regulation, or any term, covenant or condition of any other lease, against any other tenant, and Landlord’s failure or refusal to enforce any Rule or Regulation or any term, covenant of condition of any other lease against any other tenant shall be without liability of Landlord to Tenant. However, if Landlord does enforce Rules or Regulations, Landlord shall enforce same equally in a non-discriminatory manner.

28. GOVERNMENTAL REGULATIONS.

(a) Tenant shall, in the use and occupancy of the Premises and the conduct of Tenant’s business or profession therein, at all times comply with all applicable laws, ordinances, orders, notices, rules and regulations of the federal, state and municipal governments, or any of their departments and the regulations of the insurers of the Premises, Building and/or Project (“Laws”) Landlord shall be responsible for compliance with Laws with respect to all areas in the Project (except for the Premises (or any premises) resulting from Tenant’s (or any tenant’s) specific use and occupancy) and for any necessary structural and/or systems repairs generally serving the Building.

(b) Without limiting the generality of the foregoing, Tenant shall (i) obtain, at Tenant’s expense, before engaging in Tenant’s business or profession within the Premises, all necessary licenses and permits including (but not limited to) state and local business licenses or permits, and (ii) remain in compliance with and keep in full force and effect at all times all licenses, consents and permits necessary for the lawful conduct of Tenant’s business or profession at the Premises. Tenant shall pay all personal property taxes, income taxes and other taxes, assessments, duties, impositions and similar charges which are or may be assessed, levied or imposed upon Tenant

 

39

and which, if not paid, could be liened against the Premises or against Tenant’s property therein or against Tenant’s leasehold estate.

(c) Landlord shall be responsible for compliance with Title III of the Americans with Disabilities Act of l990, 42 U.S.C. ‘12181 et seq. and its regulations, (collectively, the “ADA”) (i) as to the design and construction of exterior common areas (e.g. sidewalks and parking areas) and (ii) with respect to the initial design and construction by Landlord of Landlord’s Work (as defined in Article 4 hereof). Except as set forth above in the initial sentence hereto, Tenant shall be responsible for compliance with the ADA in all other respects concerning the use and occupancy of the Premises, which compliance shall include, without limitation (i) provision for full and equal enjoyment of the goods, services, facilities, privileges, advantages or accommodations of the Premises as contemplated by and to the extent required by the ADA, (ii) compliance relating to requirements under the ADA or amendments thereto arising after the date of this Lease and (iii) compliance relating to the design, layout, renovation, redecorating, refurbishment, alteration, or improvement to the Premises made or requested by Tenant at any time following completion of the Landlord’s Work.

29. NOTICES.

(a) Wherever in this Lease it shall be required or permitted that notice or demand be given or served by either party to this Lease to or on the other party, such notice or demand shall be deemed to have been duly given or served if in writing and either: (i) personally served; (ii) delivered by pre-paid nationally recognized overnight courier service (e.g. Federal Express) with evidence of receipt required for delivery; and (iii) forwarded by Registered or Certified mail, return receipt requested, postage prepaid in all such cases addressed to the parties at the addresses set forth in Article 1(l) hereof. Each such notice shall be deemed to have been given to or served upon the party to which addressed on the date the same is delivered or delivery is refused. Either party hereto may change its address to which said notice shall be delivered or mailed by giving written notice of such change to the other party hereto, as herein provided.

30. BROKERS.

Landlord and Tenant each represents and warrants to the other that such party has had no dealings, negotiations or consultations with respect to the Premises or this transaction with any broker or finder other than the Broker identified in Article 1(l); and that otherwise no broker or finder called the Premises to Tenant’s attention for lease or took any part in any dealings, negotiations or consultations with respect to the Premises or this Lease. Each party agrees to indemnify and hold the other harmless from and against all liability, cost and expense, including attorney’s fees and court costs, arising out of any misrepresentation or breach of warranty under this Article.

31. RIGHTS RESERVED BY LANDLORD.

(a) Landlord explicitly retains all rights, including, without limitation, the following rights, each of which Landlord may exercise without notice to Tenant and without liability to Tenant for damage or injury to property, person or business on account of the exercise thereof except as otherwise expressly set forth herein, and the exercise of any such rights shall not be deemed to constitute an eviction or disturbance of Tenant’s use or possession of the Premises and shall not give rise to any claim for setoff or abatement of Rent or any other claim:

(i) To change the name or street address of the Building; to give the Project any name or names that Landlord may choose and to change such name(s) from time to time at Landlord’s sole discretion; Landlord may give a name to the Project without giving a separate name to the Building.

(ii) To install, affix and maintain any and all signs on the exterior and on the interior of the Building.

 

40

(iii) To decorate or to make repairs, alterations, additions, or improvements, whether structural or otherwise, in and about the Building, or any part thereof, and for such purposes to enter upon the Premises, and during the continuance of any of such work, to temporarily close doors, entry ways, public space and corridors in the Building and to interrupt or temporarily suspend services or use of facilities, all without affecting any of Tenant’s obligations hereunder, so long as the Premises are reasonably accessible and usable.

(iv) To furnish door keys or entry cards for the entry door(s) in the Premises at the commencement of the Lease and to retain at all times, and to use in appropriate instances, keys or entry cards to all doors within and into the Premises. Tenant agrees not to change locks, and not to affix locks on doors without the prior written consent of the Landlord. Keys shall be supplied by Landlord at its cost. Upon the expiration of the Term or Tenant’s right to possession, Tenant shall return all keys to Landlord and shall disclose to Landlord the combination of any safes, cabinets or vaults left in the Premises.

(v) To designate and approve all window coverings used in the Building.

(vi) To regulate delivery of supplies and the usage of the loading docks, receiving areas and freight elevators in a manner consistent with the Standards.

(vii) To erect, use and maintain pipes, ducts, wiring and conduits, and appurtenances thereto, in and through the Premises at locations not unreasonably interfering with Tenant’s use and occupancy of the Premises.

(viii) To alter the layout, design and/or use of the Building in such manner as Landlord, in its sole discretion, deems appropriate, so long as the character of the Building as a first class office building is maintained.

(ix) To have the exclusive use and control of: (a) roofs, (b) telephone, electrical and janitorial closets, (c) equipment rooms, Building risers or similar areas and facilities that are used by Landlord for the provision of Building services, (d) rights to the land and improvements below the floor of the Premises, (e) the improvements and air rights above the Premises, (f) the improvements and air rights outside the demising walls of the Premises, and (g) the areas within the Premises used for the installation of utility lines and other installations serving occupants of the Building, provided Tenant shall have access to such areas to the extent reasonably necessary (e.g. telecommunication cabling).

32. LANDLORD’S LIABILITY.

Landlord’s obligations hereunder shall be binding upon Landlord only for the period of time that Landlord is in ownership of the Building; and, upon termination of that ownership, Tenant, except as to any obligations which are then due and owing, shall look solely to Landlord’s successor in interest in the Building for the satisfaction of each and every obligation of Landlord hereunder, provided Landlord transfers any assets of Tenant (such as prepaid rent) to such successor. Landlord shall have no personal liability under any of the terms, conditions or covenants of this Lease and Tenant shall look solely to the equity of Landlord in the Building of which the Premises form a part for the satisfaction of any claim, remedy or cause of action accruing to Tenant as a result of the breach of any section of this Lease by Landlord. In addition to the foregoing, no recourse shall be had for an obligation of Landlord hereunder, or for any claim based thereon or otherwise in respect thereof, against any past, present or future trustee, member, partner, shareholder, officer, director, partner, agent or employee of Landlord, whether by virtue of any statute or rule of law, or by the enforcement of any assessment or penalty or otherwise, all such other liability being expressly waived and released by Tenant with respect to the above-named individuals and entities.

 

41

31. AUTHORITY.

Tenant represents and warrants that (a) Tenant is duly organized, validly existing and legally authorized to do business in the Commonwealth of Pennsylvania, and (b) the persons executing this Lease are duly authorized to execute and deliver this Lease on behalf of Tenant.

32. NO OFFER.

The submission of the Lease by Landlord to Tenant for examination does not constitute a reservation of or option for the Premises or of any other space within the Building or in other buildings owned or managed by Landlord or its affiliates. This Lease shall become effective as a Lease only upon the execution and legal delivery thereof by both parties hereto.

33. RELOCATION.

Prior to the last two years of the Renewal Term (but not during the initial Term) and only once during the Renewal Term, Landlord, at its sole expense, on at least one hundred fifty (150) days’ prior written notice to Tenant (“Relocation Notice”) may require Tenant to move from the Premises to another suite of substantially comparable size and decor in the Building or in the Project (“New Premises”) in order to permit Landlord to consolidate the Premises with other adjoining space leased or to be leased to another tenant in the Building. In the event of any such relocation, Landlord shall pay all the expenses of preparing and decorating the New Premises so that they will be substantially similar to the Premises and shall also pay the expenses of moving Tenant’s furniture and equipment to the New Premises as well as any other reasonable and necessary costs arising directly from the relocation. In the event the New Premises is larger than the Premises, the Fixed Rent payable by Tenant shall not increase, however, if the New Premises is smaller than the Premises, the Fixed Rent shall be recalculated based on the new square footage. Tenant shall execute any reasonable amendment evidencing the terms of the relocation as Landlord may require in its reasonable discretion.

Landlord shall advise Tenant in the Relocation Notice of the proposed New Premises. If Tenant, in its sole discretion, does not approve of the New Premises, for any reason, then Tenant shall have the right to terminate this Lease by sending written notice to Landlord within thirty (30) days of receipt of the Relocation Notice. Such termination shall be effective as of the date proposed by Landlord for such relocation in the Relocation Notice.

34. TENANT FINANCIAL INFORMATION.

Any time and from time to time during the Term but only after an Event of Default has occurred upon not less than thirty (30) days prior written request from Landlord, Tenant shall deliver to Landlord a current, accurate, complete and detailed balance sheet of Tenant (dated no more than thirty (30) days prior to such delivery), a profit and loss statement, a cash flow summary and all relevant accounting footnotes, all prepared in accordance with generally accepted accounting principles consistently applied and certified by the Chief Financial Officer of Tenant to be a fair and true presentation of Tenant’s current financial position. Landlord shall keep all information provided hereunder strictly confidential in the same manner as Landlord keeps its own confidential information.

35. MISCELLANEOUS PROVISIONS.

(a) Successors. The respective rights and obligations provided in this Lease shall bind and inure to the benefit of the parties hereto, their successors and assigns; provided, however, that no rights shall inure to the benefit of any successors or assigns of Tenant unless Landlord’s written consent for the transfer to such successor and/or assignee has first been obtained as provided in Article 12 hereof.

(b) Governing Law. This Lease shall be construed, governed and enforced in accordance with the laws of the Commonwealth of Pennsylvania, without regard to principles relating to conflicts of law.

(c) Severability. If any provisions of this Lease shall be held to be invalid, void or unenforceable, the remaining provisions hereof shall in no way be affected or impaired and such remaining provisions shall remain in full force and effect.

 

42

(d) Captions. Marginal captions, titles or exhibits and riders and the table of contents in this Lease are for convenience and reference only, and are in no way to be construed as defining, limiting or modifying the scope or intent of the various provisions of this Lease.

(e) Gender. As used in this Lease, the word “person” shall mean and include, where appropriate, an individual, corporation, partnership or other entity; the plural shall be substituted for the singular, and the singular for the plural, where appropriate; and the words of any gender shall mean to include any other gender.

(f) Entire Agreement. This Lease, including the Exhibits and any Riders hereto (which are hereby incorporated by this reference, except that in the event of any conflict between the printed portions of this Lease and any Exhibits or Riders, the term of such Exhibits or Riders shall control), supersedes any prior discussions, proposals, negotiations and discussions between the parties and the Lease contains all the agreements, conditions, understandings, representations and warranties made between the parties hereto with respect to the subject matter hereof, and may not be modified orally or in any manner other than by an agreement in writing signed by both parties hereto or their respective successors in interest. Without in any way limiting the generality of the foregoing, this Lease can only be extended pursuant to the terms hereof, and in Tenant’s case, with the terms hereof, with the due exercise of an option (if any) contained herein pursuant to a written agreement signed by both Landlord and Tenant specifically extending the term. No negotiations, correspondence by Landlord or offers to extend the term shall be deemed an extension of the termination date for any period whatsoever.

(g) Counterparts. This Lease may be executed in any number of counterparts, each of which when taken together shall be deemed to be one and the same instrument.

(h) Telefax Signatures. The parties acknowledge and agree that notwithstanding any law or presumption to the contrary a telefaxed signature of either party whether upon this Lease or any related document shall be deemed valid and binding and admissible by either party against the other as if same were an original ink signature.

(i) Calculation of Time. In computing any period of time prescribed or allowed by any provision of this Lease, the day of the act, event or default from which the designated period of time begins to run shall not be included. The last day of the period so computed shall be included, unless it is a Saturday, Sunday or a legal holiday, in which event the period runs until the end of the next day which is not a Saturday, Sunday, or legal holiday. Unless otherwise provided herein, all Notices and other periods expire as of 5:00 p.m. (local time in Newtown Square, Pennsylvania) on the last day of the Notice or other period.

(j) No Merger. There shall be no merger of this Lease or of the leasehold estate hereby created with the fee estate in the Premises or any part thereof by reason of the fact that the same person, firm, corporation, or other legal entity may acquire or hold, directly or indirectly, this Lease of the leasehold estate and the fee estate in the Premises or any interest in such fee estate, without the prior written consent of Landlord’s mortgagee.

(k) Time of the Essence. TIME IS OF THE ESSENCE IN ALL PROVISIONS OF THIS LEASE, INCLUDING ALL NOTICE PROVISIONS TO BE PERFORMED BY OR ON BEHALF OF TENANT.

(l) Recordation of Lease. Tenant shall not record this Lease without the written consent of Landlord.

(m) Accord and Satisfaction. No payment by Tenant or receipt by Landlord of a lesser amount than any payment of Fixed Rent or Additional Rent herein stipulated shall be deemed to be other than on account of the earliest stipulated Fixed Rent or Additional Rent due and payable hereunder, nor shall any endorsement or statement or any check or any letter accompanying any check or payment as Rent be deemed an

 

43

accord and satisfaction. Landlord may accept such check or payment without prejudice to Landlord’s right to recover the balance of such Rent or pursue any other right or remedy provided for in this Lease, at law or in equity.

(n) No Partnership. Landlord does not, in any way or for any purpose, become a partner of Tenant in the conduct of its business, or otherwise, or joint venturer or a member of a joint enterprise with Tenant. This Lease establishes a relationship solely of that of a landlord and tenant.

(o) Guaranty. Intentionally omitted.

(p) No Presumption Against Drafter. Landlord and Tenant understand, agree, and acknowledge that: (i) this Lease has been freely negotiated by both parties; and (ii) that, in the event of any controversy, dispute, or contest over the meaning, interpretation, validity, or enforceability of this Lease, or any of its terms or conditions, there shall be no inference, presumption, or conclusion drawn whatsoever against either party by virtue of that party having drafted this Lease or any portion thereof.

(q) Force Majeure. If by reason of strikes or other labor disputes, fire or other casualty (or reasonable delays in adjustment of insurance), accidents, orders or regulations of any Federal, State, County or Municipal authority, or any other cause beyond such party’s reasonable control, such party is unable to furnish or is delayed in furnishing any utility or service required to be furnished by such party under the provisions of this Lease or is unable to perform or make or is delayed in performing or making any installations, decorations, repairs, alterations, additions or improvements, or is unable to fulfill or is delayed in fulfilling any of such party’s other obligations under this Lease, no such inability or delay shall constitute an actual or constructive eviction, in whole or in part, or entitle other party to any abatement or diminution of Fixed Rent, or relieve other party from any of its obligations under this Lease, or impose any liability upon such party or its agents, by reason of inconvenience or annoyance to other party, or injury to or interruption of other party’s business, or otherwise, unless otherwise specified herein.

36. WAIVER OF TRIAL BY JURY.

LANDLORD AND TENANT WAIVE THE RIGHT TO A TRIAL BY JURY IN ANY ACTION OR PROCEEDING BASED UPON, OR RELATED TO, THE SUBJECT MATTER OF THIS LEASE. THIS WAIVER IS KNOWINGLY, INTENTIONALLY, AND VOLUNTARILY MADE BY TENANT AND TENANT ACKNOWLEDGES THAT NEITHER LANDLORD NOR ANY PERSON ACTING ON BEHALF OF LANDLORD HAS MADE ANY REPRESENTATIONS OF FACT TO INDUCE THIS WAIVER OF TRIAL BY JURY OR IN ANY WAY TO MODIFY OR NULLIFY ITS EFFECT. TENANT FURTHER ACKNOWLEDGES THAT IT HAS BEEN REPRESENTED (OR HAS HAD THE OPPORTUNITY TO BE REPRESENTED) IN THE SIGNING OF THIS LEASE AND IN THE MAKING OF THIS WAIVER BY INDEPENDENT LEGAL COUNSEL, SELECTED OF ITS OWN FREE WILL, AND THAT IT HAS HAD THE OPPORTUNITY TO DISCUSS THIS WAIVER WITH COUNSEL. TENANT FURTHER ACKNOWLEDGES THAT IT HAS READ AND UNDERSTANDS THE MEANING AND RAMIFICATIONS OF THIS WAIVER PROVISION AND AS EVIDENCE OF SAME HAS EXECUTED THIS LEASE.

37. CONSENT TO JURISDICTION.

Tenant hereby consents to the exclusive jurisdiction of the state courts located in Montgomery, Delaware and Philadelphia County and to the federal courts located in the Eastern District of Pennsylvania.

38. RENEWAL.

Subject to the existing right of Dechert LLC and Woodcock Washburn, as outlined below, and provided Tenant is neither in default at the time of exercise nor has Tenant ever been in default of any monetary obligations under this Lease aggregating in excess of $150,000, and Tenant or its Permitted Occupant(s) is fully occupying the Premises and the Lease is in full force and effect, Tenant shall have the right to renew this Lease for one term of five (5) years beyond the end of the initial Term (“Renewal Term”). Tenant shall furnish written notice

 

44

of intent to renew within sixty (60) days of receipt of written notice from Landlord that an existing tenant has waived its right to take the Premises, failing which, such renewal right shall be deemed waived; time being of the essence. In no event shall Landlord deliver its written notice prior to the last fifteen (15) months of the Term. The terms and conditions of this Lease during each Renewal Term shall remain unchanged except that the annual Fixed Rent for each Renewal Term shall be the greater of (i) the Fixed Rent for the term expiring, and (ii) 95% of Fair Market Rent (as such term is hereinafter defined). All factors regarding Additional Rent shall remain unchanged, and no Tenant Allowance shall be included in the absence of further agreement by the parties. Anything herein contained to the contrary notwithstanding, Tenant shall have no right to renew the term hereof other than or beyond the 1 consecutive 5 year term hereinabove described. Landlord and Tenant shall execute an appropriate amendment to this Lease, in form and content satisfactory to each of them, memorializing the extension of the term hereof for the next ensuing Renewal Term.

For purposes of this Lease, “Fair Market Rent” shall mean the base rent, for comparable space, including all free or reduced rent periods, work letters, cash allowances, fit-out periods and other tenant inducement concessions however denominated except as hereinafter provided. In determining the Fair Market Rent, Landlord, Tenant and any appraiser shall take into account applicable measurement and the loss factors, applicable lengths of lease term, differences in size of the space demised, the location of the Building and comparable buildings, amenities in the Building and comparable buildings, the ages of the Building and comparable buildings, differences in base years or stop amounts for operating expenses and tax escalations and other factors normally taken into account in determining Fair Market Rent. The Fair Market Rent shall reflect the level of improvement made or to be made by Landlord to the space and the Recognized Expenses and Taxes under this Lease. If Landlord and Tenant cannot agree on the Fair Market Rent, the Fair Market Rent shall be established by the following procedure: (1) Tenant and Landlord shall agree on a single MAI certified appraiser who shall have a minimum of ten (10) years experience in real estate leasing in the market in which the Premises is located, (2) Landlord and Tenant shall each notify the other (but not the appraiser), of its determination of such Fair Market Rent and the reasons therefor, (3) during the next seven (7) days both Landlord and Tenant shall prepare a written critique of the other’s determination and shall deliver it to the other party, (4) on the tenth (10th) day following delivery of the critiques to each other, Landlord’s and Tenant’s determinations and critiques (as originally submitted to the other party, with no modifications whatsoever) shall be submitted to the appraiser, who shall decide whether Landlord’s or Tenant’s determination of Fair Market Rent is more correct. The determinations so chosen shall be the Fair Market Rent. The appraiser shall not be empowered to choose any number other than the Landlord’s or Tenant’s. The fees of the appraiser shall be paid by the non-prevailing party.

Landlord represents and warrants to the Tenant that (a) it has granted to Dechert, LLP or Woodcock Washburn LLC a right as of the fifth anniversary of Dechert’s rent commencement date to take the 17th floor of the Building of which the Premises is a part and (b) Dechert/ Woodcock is required to exercise its right twelve (12) months prior to such fifth anniversary.

39. KOIZ CONTINGENCY.

Tenant shall have the sole and exclusive right to terminate this Lease (the “Tenant Termination Right”) if, within thirty (30) days following Tenant’s receipt of the fully executed Lease (the “Qualification Outside Termination Date”), time being of the essence: (a) Tenant has not received one of either a (i) confirmation of modification letter or (ii) qualification confirmation letter, from the Commonwealth of Pennsylvania, Department of Community and Economic Development (“DCED”) stating that the date on which initial employment is measured shall be the date of Lease signing for purposes of eligibility for benefits under 73 P.S. § 820.307(b)(1) or (b) Tenant has not received one of either a (i) confirmation of modification letter or (ii) qualification confirmation letter, from DCED stating that (x) the gross revenue of Tenant for purposes of the capital investment test will be measured as the gross revenues of Tenant and (y) the tenant improvements provided by Landlord under this Lease shall be counted for purposes of fulfilling the capital investment made by Tenant for the Ten% capital investment test, each for purposes of eligibility for benefits under 73 P.S. §820.307(b)(2). Tenant shall use commercially reasonable efforts to pursue directly with DCED and to cooperate with Landlord in obtaining such modification / confirmation letters

 

45

from the DCED. For purposes hereof Tenant shall mean Cohen Brothers, LLC and its subsidiaries listed on Schedule 39 attached hereto and they must all be considered together by the DCED as though they were one operating business or separately but all must be eligible for such benefits. Landlord agrees to cooperate in connection with any required or requested applications, letters or other correspondence related to the KOIZ to any state or local agency in connection with the KOIZ. It is understood that Tenant’s efforts in this regard shall include making application for qualification and for modification prior to 5:00 p.m. fifteen (15) business days following the date this Lease is fully executed and delivered, time being of the essence. Tenant’s exercise of the Tenant Termination Right shall be in writing and in order to be effective, shall be delivered to Landlord prior to 5:00 p.m. on the Qualification Outside Termination Date (provided such Qualification Outside Termination Date is a business day and if not, by 5:00 p.m. on the first business day following the Qualification Outside Termination Date). In the event Tenant exercises its Tenant Termination Right to terminate this Lease in accordance with the requirements of this Section, this Lease shall terminate and become null and void and of no further force or effect.

 

46

IN WITNESS WHEREOF, the parties hereto have executed this Lease the day and year first above written.

 

WITNESS:	 		 	LANDLORD:
 		 	BRANDYWINE CIRA, L.P.
 		 		 	By:	 	Brandywine Cira LLC,
 		 		 		 	its general partner
  	 		 	By:	 	  
 		 		 		 	H. Jeffrey DeVuono
 		 		 		 	Senior Vice President
ATTEST:	 		 	TENANT:
 		 	COHEN BROTHERS, LLC
  	 		 	By:	 	  
Name:	 		 		 	Name:	 	
Title:	 	Secretary	 		 	Title:	 	
 

47
</file>
<file name="skills/summarization/data/sample-lease2-summary.txt">
Description: This is a commercial sublease agreement between KaloBios Pharmaceuticals, Inc. (Sublandlord) and Compugen, Inc. (Subtenant) for a portion of premises originally leased from Britannia Pointe Grand Limited Partnership (Master Landlord). The sublease is for office and laboratory space with a term ending on June 30, 2014.

&lt;parties involved&gt;

- Sublessor: KaloBios Pharmaceuticals, Inc.
- Sublessee: Compugen, Inc.
- Original lessor: Britannia Pointe Grand Limited Partnership

&lt;/parties involved&gt;

&lt;property details&gt;

- Address: 260 East Grand Avenue, San Francisco, CA
- Description: Approximately 4,410 square feet of space on the first floor
- Permitted use: Those purposes permitted in the Master Lease

&lt;/property details&gt;

&lt;term and rent&gt;

- Start date: Upon Master Landlord's consent and delivery of possession
- End date: June 30, 2014
- Monthly rent: $19,845.00 per month
- Security deposit: $39,690.00
- Option to extend: None
- Additional rent: Subtenant's pro rata share of Operating Expenses

&lt;/term and rent&gt;

&lt;responsibilities&gt;

- Utilities: Included in Base Rent
- Maintenance: Subtenant responsible for interior maintenance and repairs
- Repairs: Subtenant responsible for interior repairs; Sublandlord responsible for building systems and structure
- Insurance: Subtenant required to maintain insurance as described in the Master Lease

&lt;/responsibilities&gt;

&lt;consent and notices&gt;

- Landlord's consent: Required for sublease to be effective
- Notice requirements: Written notices to be delivered personally, by certified mail, or commercial overnight delivery service to specified addresses

&lt;/consent and notices&gt;

&lt;special provisions&gt;

- Services provided by Sublandlord: Includes utilities, garbage, janitorial, building maintenance, RO/DI water system, hazardous materials storage, shipping/receiving
- Furniture: Subtenant may use certain furniture and fixtures, to be returned in same condition
- Parking: Non-exclusive use of 10 parking spaces
- Hazardous Materials: Subtenant responsible for proper handling and disposal
- Alterations: Require prior written consent of Sublandlord and Master Landlord
- Assignment and subletting: Prohibited without prior written consent of Sublandlord and Master Landlord

&lt;/special provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease2.txt">
Source: https://www.sec.gov/Archives/edgar/data/1293310/000119312512306440/d380427dex1030.htm 

EX-10.30 15 d380427dex1030.htm SUBLEASE AGREEMENT
Exhibit 10.30

SUBLEASE AGREEMENT

This Sublease Agreement (“Sublease”) is made effective as of the first day of March, 2012, (the “Effective Date”) by and between KALOBIOS PHARMACEUTICALS, INC., a Delaware corporation (“Sublandlord”), and COMPUGEN, INC.„ a Delaware corporation (“Subtenant”). Sublandlord agrees to sublease to Subtenant, and Subtenant agrees to sublease from Sublandlord, those certain premises situated in the City and County of San Francisco, State of California, consisting of approximately 4,410 square feet of space on the first floor in that certain building located at 260 East Grand Avenue, as more particularly set forth on Exhibit “A” hereto (the “Subleased Premises”).

ARTICLE 1

MASTER LEASE AND OTHER AGREEMENTS

1.1 Subordinate to Master Lease. Except as specifically set forth herein, this Sublease is subject and subordinate to all of the terms and conditions of that certain Lease dated as of January 19, 2011 (the “Master Lease”) between Britannia Pointe Grand Limited Partnership, a Delaware corporation (“Master Landlord”) and Sublandlord as “Tenant”. Subtenant hereby assumes and agrees to perform the obligations of Tenant under the Master Lease to the extent incorporated herein. Unless otherwise defined, all capitalized terms used herein shall have the same meanings as given them in the Master Lease. A copy of the Master Lease is attached hereto as Exhibit “B” and incorporated herein by this reference. Subtenant shall not commit or permit to be committed any act or omission which would violate any term or condition of the Master Lease. Subtenant shall neither do nor permit anything to be done which would cause the Master Lease to be terminated or forfeited by reason of any right of termination or forfeiture reserved or vested in Master Landlord under the Master Lease, [and Subtenant shall indemnify and hold Sublandlord harmless from and against all claims, liabilities, judgments, costs, demands, penalties, expenses, and damages of any kind whatsoever, including, without limitation, attorneys’ fees, consultants’ fees and costs and court costs, (“Claims”) by reason of any failure on the part of Subtenant to perform any of the obligations of Lessee under the Master Lease which Subtenant has become obligated hereunder to perform, and such indemnity and hold harmless shall survive the expiration or sooner termination of this Sublease, except to the extent any such Claims directly or indirectly arise out of or are attributable to the the gross negligence or willful misconduct of Sublandlord or Master Landlord. In the event of the termination of the Master Lease for any reason, then this Sublease shall terminate automatically upon such termination without any liability owed to Subtenant by Master .Landlord, or by Sublandlord unless the termination is due to Sublandlord’s breach of the Master Lease and not due to Subtenant’s breach of the Sublease. Subtenant represents and warrants to Sublandlord that it has read and is familiar with the Master Lease.

1.2 Applicable Provisions. All of the terms and conditions contained in the Master Lease as they may apply to the Subleased Premises are incorporated herein and shall be terms and conditions of this Sublease, except those directly contradicted by the terms and conditions contained in this document, and specifically except for the following Paragraphs of the Master Lease which are not incorporated or are incorporated as modified herein: the Basic Lease

Information and Definitions that have different terms or definitions from those set forth in this Sublease and Sections 1.1.1, 1.1.4, 1.2, 1.3, 2, 3, 4, 6.1, 7.1 as to Building Systems and routine maintenance to the load bearing and exterior walls (which shall continue to be maintained by Sublandlord), 7.2, 15.4, 16, 21, 23, 28, 29.18, 29.21, 29.24, 29.27, Exhibits A and C. Each reference therein to “Landlord”, “Tenant” and “Lease” to be deemed to refer to Sublandlord, Subtenant, and Sublease, respectively, as appropriate. However, the following provisions that are incorporated herein, the reference to Landlord shall mean Master Landlord only or both Master Landlord and Sublandlord if stated as “(both)”: 5.3.1.1 (both), 5.3.1.2 (both), 5.3.1.3 (both), 5.3.1.5 (both), 5.3.2.1, 5.3.2.2, 7.4, 8 (both) and as modified by Section 7.2 herein, 10.2, 11, 13, 18, 19.5 (both), 26 (both), 27 (both), 29.13 (first sentence), 29.29, Exhibits D and E. All of the incorporated terms of the Master Lease as referenced and qualified above along with all of the following terms and conditions set forth in this document shall constitute the complete terms and conditions of this Sublease.

1.3 Obligations of Sublandlord. Notwithstanding anything herein contained, the only services or rights to which Subtenant is entitled hereunder are those to which Sublandlord is entitled under the Master Lease or which Sublandlord agrees to provide pursuant to the express terms of this Sublease. The parties acknowledge that Subtenant has no privity of contract with Master Landlord and therefore Sublandlord shall use its reasonable good faith efforts to obtain the performance by Master Landlord of its obligations under the Master Lease (including, without limitation all repair and maintenance obligations pursuant to Section 7.4 thereof). Subtenant shall reimburse Sublandlord for all reasonable costs incurred by Sublandlord in such efforts. Sublandlord shall have no liability to Subtenant or any other person for damage of any nature whatsoever as a result of the failure of Master Landlord to perform said obligations except where such failure is the result of Sublandlord’s breach of the Master Lease. With respect to any obligation of Subtenant to be performed under this Sublease, when the Master Lease grants Sublandlord a specific number of days to perform its obligations thereunder, Subtenant shall have two (2) fewer days to perform. With respect to approval required to be obtained by “Landlord” under the Master Lease, such consent must be obtained from Master Landlord and Sublandlord and the approval of Sublandlord will be deemed withheld if Master Landlord’s consent is not obtained. Sublandlord will duly notice Master Landlord of requests for consent by Subtenant, but retains the right to make its own independent determination of consent pursuant to the terms of this Sublease.

ARTICLE 2

TERM

2.1 Term. The term of this Sublease shall commence on the date on which the Sublandlord obtains the consent of Master Landlord set forth in Article 10 below and delivers exclusive possession of the Subleased Premises to Subtenant. This shall be referred to as the “Commencement Date.” The term of this Sublease shall end on June 30, 2014, unless sooner terminated pursuant to any provision of the Master Lease applicable to the Subleased Premises (the “Expiration Date”). Sublandlord shall have no obligation to Subtenant to exercise any of its options to extend under the Master Lease. In the event the Commencement Date has not occurred on or before March 1, 2012, Subtenant shall have the right to terminate this Sublease without penalty by delivery of written notice to Sublandlord, and Sublandlord will promptly return all monies paid to Sublandlord by Subtenant on account of this Sublease.

 

2

2.2 Option to Extend. Subtenant shall have no option to extend this Sublease.

ARTICLE 3

RENT

3.1 Rent. Subtenant shall pay to Sublandlord each month during the term of this Sublease, rent, in advance, on execution hereof for the first month and on or before the first of each month thereafter (“Base Rent”). Rent for partial months at the commencement or termination of this Sublease shall be prorated. Rent shall be paid to the Sublandlord at its business address noted herein, or at any other place Sublandlord may from time to time designate by written notice mailed or delivered to Subtenant. Base Rent schedule is as follows:

 

Months	  	Base Rent per month	 	  	Total	 
Effective date — 6/30/2012

  	$	19,845.00	  	  	$	79,380.00	  
7/1/2012 — 6/30/2013

  	$	19,845.00	  	  	$	238,140.00	  
7/1/2013 — 6/30/2014

  	$	19,845.00	  	  	$	238,140.00	  
All measurements noted in this Section are included in the Master Lease. Subtenant acknowledges all square footage measurements noted and relied on in this Sublease and the Master Lease are estimates, and no adjustments shall be made based upon any actual measurements which may be made.

3.2 Sublandlord Services. The parties agree that the monthly Base Rent is also inclusive of all services provided by Sublandlord as set forth in Section 7.5.

ARTICLE 4

SECURITY DEPOSIT

4.1 Security Deposit. Upon execution hereof, Subtenant shall deposit with Sublandlord the sum of thirty-nine thousand six-hundred ninety and 00/100 Dollars ($39,690.00) as and for a Security Deposit to secure Subtenant’s full and timely performance of all of its obligations hereunder, representing first two months base rent. If Subtenant fails to pay Rent or any other sums as and when due hereunder, or otherwise defaults and/or fails to perform with respect to any provision of this Sublease, Sublandlord may (but shall not be obligated to) use, apply, or retain all or any portion of the Security Deposit for payment of any sum for which Subtenant is obligated or which will compensate Sublandlord for any foreseeable or unforeseeable loss or damage which Sublandlord may suffer thereby including, without limitation, any damage that will result in the future through the Sublease Term, to repair damage

 

3

to the Subleased Premises, to clean the Subleased Premises at the end of the Sublease Term or for any loss or damage caused by the act or omission of Subtenant or Subtenant’s officers, agents, employees, independent contractors or invitees. Subtenant waives the provisions of California Civil Code Section 1950.7 and all other provisions of law now in force or that become in force after the date of execution of this Sublease that provide that Sublandlord may claim from a security deposit only those sums reasonably necessary to remedy defaults in the payment of Rent, to repair damage caused by Subtenant or to clean the Subleased Premises. Any such use, application, or retention shall not constitute a waiver by Sublandlord of its right to enforce its other remedies hereunder, at law, or in equity. If any portion of the Security Deposit is so used, applied, or retained, Subtenant shall, within ten (10) days after delivery of written demand from Sublandlord, restore the Security Deposit to its original amount. Subtenant’s failure to do so shall constitute a material breach of this Sublease, and in such event Sublandlord may elect, among or in addition to other remedies, to terminate this Sublease. Sublandlord shall not be a trustee of such deposit, and shall not be required to keep this deposit separate from its accounts. Sublandlord alone shall be entitled to any interest or earnings thereon and Sublandlord shall have the free use of same. If Subtenant fully and faithfully performs all of its obligations hereunder, then so much of the Security Deposit as remains shall be returned to Subtenant (without payment of interest or earnings thereon) within 30 days after the later of (i) expiration or sooner termination of the Sublease Term, or (ii) Subtenant’s surrender of possession of the Subleased Premises to Sublandlord.

ARTICLE 5

CONDITION OF SUBLEASED PREMISES

5.1 Condition of the Subleased Premises. Subtenant acknowledges that as of the Commencement Date, Subtenant shall have inspected the Subleased Premises, and every part thereof, and by taking possession shall have acknowledged that the Subleased Premises is in good condition and without need of repair, and Subtenant accepts the Subleased Premises “as is”, Subtenant having made all investigations and tests it has deemed necessary or desirable in order to establish to its own complete satisfaction the condition of the Subleased Premises. Subtenant accepts the Subleased Premises in their condition existing as of the Commencement Date, subject to all applicable zoning, municipal, county and state laws, ordinances, and regulations governing and regulating the use of the Subleased Premises and any covenants or restrictions of record. Notwithstanding the foregoing, Sublandlord will ensure that all systems and equipment (including the Building Systems) serving the Subleased Premises and the Building are in good working order as of the Commencement Date and that the Building is in compliance with applicable laws, codes and ordinances in effect as of such date and that Sublandlord’s current use is in compliance with applicable zoning ordinances. Except as set forth above, Subtenant acknowledges that neither Sublandlord nor Master Landlord have made any representations or warranties as to the condition of the Subleased Premises or its present or future suitability for Subtenant’s purposes. Sublandlord hereby grants to Subtenant, for the benefit of Subtenant and its employees, suppliers, shippers, contractors, customers and invitees, during the term of this Sublease, the non-exclusive right to use, in common with others entitled to such use, the Common Areas as they exist from time to time, subject to any rights, powers, and privileges reserved by Sublandlord under the terms hereof.

 

4

5.2 Surrender. Subtenant shall keep the Subleased Premises, and every part thereof in good order and repair. In addition to Subtenant’s requirements under the Master Lease, Subtenant shall surrender the Subleased Premises in the same condition as received, ordinary wear and tear excepted, provided Subtenant performs all necessary maintenance, repair and cleaning to maintain the Subleased Premises in the condition it was delivered at the Commencement Date.

ARTICLE 6

INSURANCE

6.1 Subtenant’s Insurance. With respect to the Tenant’s insurance under the Master Lease, the same is to be provided by Subtenant as described in the Master Lease, and such policies of insurance shall include as additional insureds Master Landlord, Sublandlord and any lender as required by Master Landlord.

6.2 Sublandlord’s Insurance. Sublandlord will carry, or for purposes of this Sublease will be treated as if it carried, rental interruption insurance.

6.3 Waiver of Subrogation. With respect to the waiver of subrogation contained in Section 10.5 of the Master Lease, such waiver shall be deemed to be modified to constitute an agreement by and among Master Landlord, Sublandlord and Subtenant (and Master Landlord’s consent to this Sublease shall be deemed to constitute its approval of this modification).

ARTICLE 7

USE OF SUBLEASED PREMISES; PARKING; IMPROVEMENTS

7.1 Use of Subleased Premises. Subtenant shall use the Subleased Premises only for those purposes permitted in the Master Lease.

7.2 Alterations; Improvements. Subtenant shall not make any alterations, improvements, or modifications to the Subleased Premises without the express prior written consent of Sublandlord and of Master Landlord, which consent by Sublandlord shall not be unreasonably withheld. Subtenant shall reimburse Master Landlord and Sublandlord for all costs which Master Landlord and Sublandlord may incur in connection with granting approval to Subtenant for any alterations and additions, including, without limitation, Master Landlord’s and Sublandlord’s reasonable attorneys’ fees and costs. Subtenant shall provide Master Landlord and Sublandlord with a set of “as-built” drawings for any such work, together with copies of all permits obtained by Subtenant in connection with performing any such work, within fifteen (15) days after completing such work. Sublandlord may impose as a condition of its consent to such alterations, improvements, or modifications, such requirements as Sublandlord may deem reasonable and desirable, including, but not limited to the requirement that Subtenant utilize for such purposes only contractor(s), materials, mechanics and materialmen approved by Sublandlord and that Subtenant, and/or Subtenant’s contractor(s) post a payment and/or completion bond to guarantee the performance of its construction obligations hereunder. On termination of this Sublease, Subtenant shall remove any or all of such improvements and restore

 

5

the Subleased Premises (or any part thereof) to the same condition as of the Commencement Date of this Sublease, reasonable wear and tear excepted or as otherwise instructed in writing by either Sublandlord or Master Landlord. Should Subtenant fail to remove such improvements and restore the Subleased Premises on termination of this Sublease unless instructed otherwise in writing as set forth above, Sublandlord shall have the right to do so, and charge Subtenant therefor, plus a service charge of ten percent (10%) of the costs incurred by Sublandlord.

7.3 Parking. So long as Subtenant is not in default and subject to the rules and regulations imposed from time to time by Master Landlord or Sublandlord, Subtenant shall have the right to the non-exclusive use of ten (10) parking spaces in the common parking areas at no additional cost to Subtenant.

7.4 Covenant of Quiet Enjoyment. Sublandlord represents that (i) the Master Lease is in full force and effect and (ii) there are no defaults, as defined in the Master Lease, on Sublandlord’s part under the Master Lease as of the Commencement Date and (iii) that Sublandlord has the full right, power and authority to enter into this Sublease (subject to the consent of Master Landlord). Subject to this Sublease terminating in the event the Master Lease is terminated, if Subtenant performs all the provisions in this Sublease to be performed by Subtenant prior to the expiration of all applicable notice and cure periods, Subtenant will have and enjoy throughout the term of this Sublease the quiet and undisturbed possession of the Subleased Premises.

7.5 Services to be provided by Sublandlord. Sublandlord shall provide, at no additional cost to Subtenant, the following services: (i) natural gas, electricity and water associated with chemistry laboratory use; (ii) garbage and janitorial services (non-biohazard) consistent with the service provided at the time of this Sublease; (iii) general building system maintenance (lighting, HVAC, plumbing and electrical), performed by Sublandlord’s facility personnel within the Sublease Premises; (iv) use of the existing RO/DI water system (at standard lab DI water quality); (v) storage of Hazardous Materials (as defined in the Master Lease) used or generated by Subtenant in the Subleased Premises (“Subtenant Haz Mat”); provided, however, that Subtenant shall contract directly with (and be solely responsible for payment to) Sublandlord’s provider for pick-up and disposal of such Subtenant Haz Mat; and further provided that Sublandlord shall not be deemed an owner, operator, generator or transporter of such Subtenant Haz Mat and Subtenant shall indemnify Sublandlord for any claims, liabilities, judgments, costs, demands, penalties, expenses, and damages of any kind whatsoever, including, without limitation, attorneys’ fees, consultants’ fees and costs and court costs, relating to any claim that Sublandlord is the owner, operator, generator, or transporter of such Subtenant Haz Mat (such indemnity shall survive the expiration or earlier termination of this Sublease); (vi) shipping, receiving, and handling and incoming materials management; (vii) use of the existing security card system. Any other services provided to Subtenant not expressly provided above, shall be at the sole cost and expense of Subtenant.

 

6

ARTICLE 8

ASSIGNMENT, SUBLETTING &amp; ENCUMBRANCE

8.1 Consent Required. Subtenant shall not assign this Sublease or any interest therein nor shall Subtenant sublet, license, encumber or permit the Subleased Premises or any part thereof to be used or occupied by others, without Sublandlord’s and Master Landlord’s prior written consent. Sublandlord’s consent shall not be unreasonably withheld provided, however, Sublandlord’s withholding of consent shall in all events be deemed reasonable if for any reason Master Landlord’s consent is not obtained. The consent by Sublandlord and Master Landlord to any assignment or subletting shall not waive the need for Subtenant (and Subtenant’s assignee or subtenant) to obtain the consent of Sublandlord and Master Landlord to any different or further assignment or subletting. All conditions and standards set forth in the Master Lease regarding assignments and subletting shall apply, and to the extent there are any Bonus Rents, (Rent paid by such Assignee or SubSubtenant in excess of Rent paid by Subtenant hereunder) subtenant shall provide the Master Landlord with the amounts it is entitled to under the Master Lease.

8.2 Form of Document. Every assignment, agreement, or sublease shall (i) recite that it is and shall be subject and subordinate to the provisions of this Sublease, that the assignee or subtenant assumes Subtenant’s obligation hereunder, that the termination of this Sublease shall at Sublandlord’s sole election, constitute a termination of every such assignment or sublease, and (ii) contain such other terms and conditions customary for a sub-sublease of this type as shall be reasonably requested or provided by Sublandlord’s attorneys.

8.3 No Release of Subtenant. Regardless of Sublandlord’s consent, no subletting or assignment shall release Subtenant of Subtenant’s obligation or alter the primary liability of Subtenant to pay the Rent and to perform all other obligations to be performed by Subtenant hereunder except to the extent that Sublandlord and Master Landlord consent to such release in writing. The acceptance of Rent by Sublandlord from any other person shall not be deemed to be a waiver by Sublandlord of any provision hereof. In the event of default by any assignee, subtenant or any other successor of Subtenant, in the performance of any of the terms hereof, Sublandlord may proceed directly against Subtenant without the necessity of exhausting remedies against such assignee, subtenant or successor.

8.4 Default. An involuntary assignment shall constitute a default and Sublandlord shall have the right to elect to terminate this Sublease, in which case this Sublease shall not be treated as an asset of Subtenant.

ARTICLE 9

DEFAULT

9.1 Default Described. The occurrence of any of the following shall constitute a material breach of this Sublease and a default by Subtenant: (i) failure to pay Rent or any other amount within three (3) days after notice the same is past due; (ii) all those items of default set forth in the Master Lease where the obligation is incorporated in this Sublease which remain uncured after the cure period provided in the Master Lease; or (iii) Subtenant’s failure to perform timely and remain uncured after fifteen (15) days written notice of the default, any other material provision of this Sublease.

 

7

9.2 Sublandlord’s Remedies. Sublandlord shall have the remedies set forth in the Master Lease as if Sublandlord is Master Landlord in the event of a default by Subtenant of any obligation of Sublandlord assumed by Subtenant under this Sublease that constitutes a default under Section 19 of the Master Lease. These remedies are not exclusive; they are cumulative and in addition to any remedies now or later allowed by law.

9.3 Subtenant’s Right to Possession Not Terminated. Sublandlord has the remedy described in California Civil Code Section 1951.4 (lessor may continue lease in effect after. lessee’s breach and abandonment and recover rent as it becomes due, if lessee has right to sublet or assign, subject only to reasonable limitations). Sublandlord may continue this Sublease in full force and effect, and Sublandlord shall have the right to collect rent and other sums when due. During the period Subtenant is in default, Sublandlord may enter the Subleased Premises and relet them, or any part of them, to third parties for Subtenant’s account and alter or install locks and other security devices at the Subleased Premises. Subtenant shall be liable immediately to Sublandlord for all costs Sublandlord incurs in reletting the Subleased Premises, including, without limitation, attorneys’ fees, brokers’ commissions, expenses of remodeling the Subleased Premises required by the reletting, and like costs. Reletting may be for a period equal to, shorter or longer than the remaining term of this Sublease and rent received by Sublandlord shall be applied to (i) first, any indebtedness from Subtenant to Sublandlord other than rent due from Subtenant; (ii) second, all costs incurred by Sublandlord in reletting, including, without limitation, brokers’ fees or commissions and attorneys fees, the cost of removing and storing the property of Subtenant or any other occupant, and the costs of repairing, altering, maintaining, remodeling or otherwise putting the Subleased Premises into condition acceptable to a new Subtenant or Subtenants; (iii) third, rent due and unpaid under this Sublease. After deducting the payments referred to in this subsection 9.3, any sum remaining from the rent Sublandlord receives from reletting shall be held by Sublandlord and applied in payment of future rent and other amounts as rent and such amounts become due under this Sublease. In no event shall Subtenant be entitled to any excess rent received by Sublandlord.

9.4 All Sums Due and Payable as Rent. Subtenant shall also pay without notice, or where notice is required under this Sublease, immediately upon demand without any abatement, deduction, or setoff, as additional rent all sums, impositions, costs, expenses, and other payments which Subtenant in any of the provisions of this Sublease assumes or agrees to pay, and, in case of any nonpayment thereof, Sublandlord shall have all the rights and remedies provided for in this Sublease or by law in the case of nonpayment of rent.

9.5 No Waiver. Sublandlord may accept Subtenant’s payments without waiving any rights under the Sublease, including rights under a previously served notice of default. No payment by Subtenant or receipt by Sublandlord of a lesser amount than any installment of rent due or other sums shall be deemed as other than a payment on account of the amount due, nor shall any endorsement or statement on any check or accompanying any check or payment be deemed an accord and satisfaction; and Sublandlord may accept such check or payment without prejudice of Sublandlord’s right to recover the balance of such Rent or other sum or pursue any other remedy provided in this Sublease, at law or in equity. If Sublandlord accepts payments

 

8

after serving a notice of default, Sublandlord may nevertheless commence and pursue an action to enforce rights and remedies under the previously served notice of default without giving Subtenant any further notice or demand. Furthermore, Sublandlord’s acceptance of Rent from Subtenant when the Subtenant is holding over without express written consent does not convert Subtenant’s tenancy from a tenancy at sufferance to a month-to-month tenancy. No waiver of any provision of this Sublease shall be implied by any failure of Sublandlord to enforce any remedy for the violation of that provision, even if that violation continues or is repeated. Any waiver by Sublandlord or Subtenant of any provision of this Sublease must be in writing. Such waiver shall affect only the provisions specified and only for the time and in the manner stated in the writing. No delay or omission in the exercise of any right or remedy by Sublandlord or Subtenant shall impair such right or remedy or be construed as a waiver thereof. No act or conduct of Sublandlord, including, without limitation the acceptance of keys to the Subleased Premises shall constitute acceptance or the surrender of the Subleased Premises by Subtenant before the Expiration Date. Only written notice from Sublandlord to Subtenant of acceptance shall constitute such acceptance or surrender of the Subleased Premises. Sublandlord’s consent to or approval of any act by Subtenant which requires Sublandlord’s consent or approval shall not be deemed to waive or render unnecessary Sublandlord’s consent to or approval of any subsequent act by Subtenant.

9.6 Sublandlord Default. For purposes of this Sublease, Sublandlord shall not be deemed in default hereunder unless and until Subtenant shall first deliver to Sublandlord thirty (30) days’ prior written notice, and Sublandlord shall fail to cure said default within said thirty (30) day period, or in the event Sublandlord shall reasonably require in excess of thirty (30) days to cure said default, shall fail to commence said cure with said thirty (30) day period, and thereafter diligently prosecute the same to completion. If Sublandlord (a) does not commence performance within such thirty (30) calendar day period, or (b) fails to diligently commence and pursue such performance to completion, and the effect of such failure associated with such non-performance materially interferes with Subtenant’s use of the Subleased Premises, Subtenant may perform Sublandlord’s obligation, at Sublandlord’s expense (if the cost of such performance obligations are included in Base Rent), and Sublandlord shall reimburse Subtenant within thirty (30) days of Subtenant’s delivery to Sublandlord of written proof that such performance costs have been paid by Subtenant.

9.7 Notice of Event of Default under Master Lease. Sublandlord shall notify Subtenant of any Event of Default under the Master Lease, or of any other event of which Sublandlord has actual knowledge which will impair Subtenant’s ability to conduct its normal business at the Subleased Premises, as soon as reasonably practicable following Sublandlord’s receipt of notice from Master Landlord of an Event of Default or Sublandlord’s actual knowledge of such impairment.

9.8 No Default of Master Lease. Sublandlord will not voluntarily do, or fail to do, anything which will constitute a default under the Master Lease or permit the Master Lease to be terminated for any reason. Sublandlord hereby agrees to defend, indemnify and hold harmless Subtenant from and against any and all claims, actions, liabilities, losses, damages, costs and expenses (including, without limitation, reasonable attorneys’ fees and disbursements) arising from Sublandlord’s breach of any provisions of this Sublease, including, without limitation, the provisions of this Section 9.8. The foregoing indemnity shall survive the expiration or earlier termination of this Sublease.

 

9

ARTICLE 10

CONSENT OF MASTER LANDLORD

10.1 Precondition. The Master Lease requires that Sublandlord obtain the consent of Master Landlord to any subletting by Sublandlord. This Sublease shall not be effective unless and until Master Landlord signs a consent to this subletting satisfactory to Sublandlord. Subtenant will sign such consent if required by Master Landlord as reasonably presented by Master Landlord.

ARTICLE 11

HAZARDOUS MATERIALS

11.1 Hazardous Materials.

11.1.1 Environmental Questionnaire. Prior to occupying Subleased Premises, Subtenant shall provide to Sublandlord a fully and accurately completed Pre-leasing Environmental Exposure Questionnaire (“Environmental Questionnaire”; Exhibit E to the Master Lease), which Sublandlord will deliver to Landlord in accordance with the terms and conditions of Section 5.3.1.1 of the Master Lease. Upon Sublandlord’s request or in the event of any material change in the use of Hazardous Materials at the Subleased Premises, Subtenant shall deliver to Sublandlord an updated Environmental Questionnaire at least once per year. Subtenant shall comply with all other terms, conditions, obligations, representations and warranties of Subtenant to Landlord and Sublandlord (as applicable) under Section 5.3.1 of the Master Lease, as incorporated by Section 1.2 herein.

11.1.2 Subtenant Indemnity. Subtenant shall be solely responsible for and shall defend, indemnify and hold Sublandlord and its partners, officers, directors, employees and agents harmless from and against all Claims arising out of or caused in whole or in part, directly or indirectly, by or in connection with Subtenant’s storage, use, disposal or discharge of Hazardous Materials at the Subleased Premises, whether in violation of this section or not, or Subtenant’s failure to comply with any applicable laws governing the storage, use disposal or discharge of Hazardous Materials. Subtenant shall further be solely responsible for and shall defend, indemnify and hold Sublandlord harmless from and against any and all Claims arising out of or in connection with the removal, cleanup, detoxification, decontamination and restoration work and materials necessary to return the Subleased Premises to their condition existing prior to Subtenant’s storage, use or disposal of the Hazardous Materials on the Subleased Premises. For the purposes of this indemnity provision, any acts or omissions of Subtenant or by employees, agents, assignees, contractors or subcontractors of Subtenant (whether or not they are negligent, intentional or unlawful) shall be strictly attributable to Subtenant. Subtenant’s obligations under this section shall survive the termination of this Sublease. Notwithstanding the foregoing, nothing in this Sublease will be construed or is intended to impose any liability, obligation or responsibility on Subtenant for any Hazardous Materials existing in the Subleased Premises prior to the Commencement Date or which was brought onto the Building by Sublandlord, Master Landlord, or any third party.

 

10

11.1.3 Sublandlord Indemnity. Sublandlord shall be solely responsible for and shall defend, indemnify and hold Subtenant and its partners, officers, directors, employees and agents harmless from and against all Claims arising out of or caused in whole or in part, directly or indirectly, by or in connection with Sublandlord’s storage, use, disposal or discharge of Hazardous Materials at the Premises, whether in violation of this section or not, or Sublandlord’s failure to comply with any applicable laws governing the storage, use disposal or discharge of Hazardous Materials. Sublandlord shall further be solely responsible for and shall defend, indemnify and hold Subtenant harmless from and against any and all Claims arising out of or in connection with the removal, cleanup, detoxification, decontamination and restoration work and materials necessitated by Sublandlord’s use of Hazardous Materials. For the purposes of this indemnity provision, any acts or omissions of Sublandlord or by employees, agents, assignees, contractors or subcontractors of Sublandlord (whether or not they are negligent, intentional or unlawful) shall be strictly attributable to Sublandlord. Sublandlord’s obligations under this section shall survive the termination of this Sublease.

ARTICLE 12

MISCELLANEOUS

12.1 Conflict with Master Lease Interpretation. In the event of any conflict between the provisions of the Master Lease and this Sublease, the Master Lease shall govern and control except to the extent directly contradicted by the terms of this Sublease. No presumption shall apply in the interpretation or construction of this Sublease as a result of Sublandlord having drafted the whole or any part hereof.

12.2 Remedies Cumulative. The rights, privileges, elections, and remedies of Sublandlord in this Sublease, at law, and in equity are cumulative and not alternative.

12.3 Waiver of Redemption. Subtenant hereby expressly waives any and all rights of redemption to which it may be entitled by or under any present or future laws in the event Sublandlord shall obtain a judgment for possession of the Subleased Premises.

12.4 Damage and Destruction; Condemnation. In the event of any damage, destruction, casualty, condemnation or threat of condemnation affecting the Subleased Premises, Rent payable hereunder shall be abated but only to the extent that Rent is abated under the Master Lease with respect to the Subleased Premises. Subtenant shall have no right to terminate this Sublease in connection with any damage, destruction, casualty, condemnation or threat of condemnation except to the extent the Master Lease is also terminated as to the Premises or any portion thereof

12.5 Holding Over. Subtenant shall have no right to Holdover. If Subtenant does not surrender and vacate the Subleased Premises at the Expiration Date of this Sublease, Subtenant shall be a tenant at sufferance, or at the sole election of Sublandlord, a month to month tenancy, and the parties agree in either case that the reasonable rental value, if at sufferance, or the Rent if

 

11

a month to month tenancy shall be the monthly rate of one hundred and fifty percent (150%) of the monthly Rent set forth in Article 3, and if the definition of Rent in either case does not include additional rent, then with any additional rent due and payable during such holdover period of time. In connection with this Paragraph 12.5, Sublandlord and Subtenant agree that the reasonable rental value of the Subleased Premises following the Expiration Date of the Sublease shall be the amounts set forth above per month. Sublandlord and Subtenant acknowledge and agree that, under the circumstances existing as of the Effective Date, it is impracticable and/or extremely difficult to ascertain the reasonable rental value of the Subleased Premises on the Expiration Date and that the reasonable rental value established herein is a reasonable estimate of the damage that Sublandlord would suffer as the result of the failure of Subtenant to timely surrender possession of the Subleased Premises. The parties acknowledge that the liquidated damages established herein is not intended as a forfeiture or penalty within the meaning of California Civil Code sections 3275 or 3369, but is intended to constitute liquidated damages to Sublandlord pursuant to California Civil Code sections 1671, 1676, and 1677. Notwithstanding the foregoing, and in addition to all other rights and remedies on the part of Sublandlord if Subtenant fails to surrender the Subleased Premises upon the termination or expiration of this Sublease, in addition to any other liabilities to Sublandlord accruing therefrom, Subtenant shall indemnify, defend and hold Sublandlord harmless from all Claims resulting from such failure, including, without limitation, any Claims by any third parties based on such failure to surrender. Furthermore, in the event that Subtenant fails to surrender the Premises after such time that (a) the Master Lease has expired and (b) Sublandlord has surrendered its premises under the Master Lease, then the rate for month to month tenancy at sufferance shall be one hundred and fifty percent of any and all Rent due to Master Landlord from Sublandlord under the holdover provisions of the Master Lease.

12.6 Furniture. Subtenant may use certain furniture and fixtures located in the Subleased Premises as set forth on Exhibit C (“Furniture”). Subtenant accepts the Furniture in its “as is” condition and Sublandlord makes no warranty as to the condition of the Furniture or its present or future suitability for Subtenant’s purposes. Upon termination of this Sublease, Subtenant shall return the Furniture to Sublandlord in the same condition as received, ordinary wear and tear excepted conditioned on the obligation of Subtenant to use the Furniture in a careful and proper manner and to clean and repair the Furniture in the manner necessary to maintain the Furniture in the condition it was initially provided to Subtenant, ordinary wear and tear excepted. Subtenant shall be liable for any damage to the Furniture and solely responsible for all costs associated with the maintenance, cleaning and repair of the Furniture, ordinary wear and tear excepted.

12.7 Signage. Subtenant shall not place any other signs on or about the Subleased Premises without Sublandlord’s and Master Landlord’s prior written consent. All signs shall be at Subtenant’s sole cost and shall comply with the terms of the Master Lease and with all local, federal and state rules, regulations, statutes, and ordinances at all times during the Sublease Term. Subtenant acknowledges and agrees that its request for consent to signage shall be limited to signage at the Subleased Premises. Subtenant, at Subtenant’s cost, shall remove all such signs and graphics prior to the termination of this Sublease and repair any damage caused by such removal.

 

12

12.8 Offer. Preparation of this Sublease by either Sublandlord or Subtenant or either parties’ agent and submission of same to Sublandlord or Subtenant shall not be deemed an offer to Sublease. This Sublease is not intended to be binding until executed and delivered by all Parties hereto.

12.9 Due Authority. If Subtenant signs as a corporation, Subtenant represents and warrants that the person(s) signing below have the authority to bind Subtenant, Subtenant has been and is qualified to do business in the State of California, and the corporation has full right and authority to enter into this Sublease. If Subtenant signs as a partnership, trust or other legal entity, each of the persons executing this Sublease on behalf of Subtenant represent and warrant that they have the authority to bind Subtenant, Subtenant has complied with all applicable laws, rules and governmental regulations relative to its right to do business in the State of California and such entity has full right and authority to enter into this Sublease. Subtenant agrees to furnish promptly upon request a corporate resolution, proof of clue authorization by partners, or other appropriate documentation evidencing the authorization of Subtenant to enter into this Sublease.

12.10 Multiple Counterparts. This Sublease may be executed in two or more counterparts, which when taken together shall constitute one and the same instrument. The parties contemplate that they may be executing counterparts of this Sublease transmitted by facsimile and agree and intend that a signature by facsimile machine shall bind the party so signing with the same effect as though the signature were an original signature.

12.11 Building Contaminants. To prevent the contamination, growth, or deposit of any mold, mildew, bacillus, virus, pollen, or other micro-organism (collectively, “Biologicals”) and the deposit, release or circulation of any indoor contaminants including emissions from paint, carpet and drapery treatments, cleaning, maintenance and construction materials and supplies, pesticides, pressed wood products, insulation, and other materials and products (collectively with Biologicals, “Contaminants”) that could adversely affect the health, safety or welfare of any tenant, employee, or other occupant of the Building or their invitees (each, an “Occupant”), Sublandlord and Subtenant shall, at their sole cost and expense, at all times during the term hereof (1) operate the Premises and Subleased Premises (respectively) in such a manner to reasonably prevent or minimize the accumulation of stagnant water and moisture in planters, kitchen appliances and vessels, carpeting, insulation, water coolers, and any other locations where stagnant water or moisture could accumulate, and (2) otherwise operate the Premises and Subleased Premises (as applicable) to prevent the generation, growth, deposit, release or circulation of any Contaminants.

12.12 Effect of Conveyance. As used in this Sublease, the term “Sublandlord” means the holder of the Tenant’s/Lessee’s interest under the Master Lease. In the event of any assignment or transfer of the Tenant’s/Lessee’s interest under the Master Lease, which assignment or transfer may occur at any time during the Term hereof in Sublandlord’s sole discretion, Sublandlord shall be and hereby is entirely relieved of the future performance of all covenants and obligations of Sublandlord hereunder if such future performance is assumed by the transferee in a writing and a copy thereof is delivered to Subtenant. Sublandlord may transfer and deliver any security of Subtenant to the transferee of the Tenant’s/Lessee’s interest under the Master Lease, and thereupon Sublandlord shall be discharged from any further liability with respect thereto if such transferee assumes in writing Sublandlord’s obligations with regard to such security in a writing delivered to Subtenant.

 

13

ARTICLE 13

BROKER’S COMMISSIONS

13.1 Commission. Sublandlord and Subtenant represent and warrant to each other that each has not dealt with any broker and with no other agent, finder, or other such person with respect to this Sublease.

ARTICLE 14

NOTICES AND PAYMENTS

14.1 Certified Mail. Any notice, demand, request, consent, approval, submittal or communication that either party desires or is required to give to the other party or any other person shall be in writing and either served personally or sent by prepaid, first-class certified mail or commercial overnight delivery service. Such Notice shall be effective on the date of actual receipt (in the case of personal service or commercial overnight delivery service) or two days after deposit in the United States mail, to the following addresses:

 

To the Sublandlord:	  	260 East Grand Ave.
  	South San Francisco, CA 94080
  	Attention: Jeanne Jew
with a copy to:	  	Hopkins &amp; Carley, ALC
  	70 South First Street
  	San Jose, CA 95113
  	Attention: Garth E. Pickett, Esq.
To the Subtenant:	  	At the Subleased Premises, whether or not Subtenant has abandoned or vacated the Subleased Premises or notified the Sublandlord of any other address
With a copy to:	  	Compugen Ltd.
  	Pinellas Rosen 72, Tel Aviv 69512
  	Tel: 972-765-8546
  	Fax: 972-3-765-8555
  	Attn: Dikla Czaczkes Axselbrad
  	with a copy to General Counsel
14.2 When this Sublease requires service of a notice, that notice shall replace rather than supplement any equivalent or similar statutory notice, including any notices required by Code of Civil Procedure Section 1161 or any similar or successor statute. When a statute requires service of a notice in a particular manner, service of that notice (or a similar notice required by this Sublease) shall replace and satisfy the statutory service-of-notice procedures, including those required by Code of Civil Procedure Section 1162 or any similar or successor statute

 

14

ARTICLE 15

ATTORNEYS’ FEES AND COSTS

15.1 Sublandlord Made Party to Litigation. If Sublandlord becomes a party to any litigation brought by someone other than Subtenant and concerning this Sublease, the Subleased Premises, or Subtenant’s use and occupancy of the Subleased Premises to the extent, based upon any real or alleged act or omission of Subtenant or its authorized representatives, Subtenant shall be liable to Sublandlord for reasonable attorneys’ fees and court costs incurred by Sublandlord in the litigation.

15.2 Certain Litigation Between the Parties. In the event any action or proceeding at law or in equity or any arbitration proceeding be instituted by either party, for an alleged breach of this Sublease, to recover rent, to terminate the tenancy of Subtenant at the Subleased Premises, or to enforce, protect, or establish any right or remedy of a party to this Sublease Agreement, the prevailing party (by judgment or settlement (it being understood that for the purpose of any settlement, the prevailing party shall be the party receiving substantially the relief requested) in such action or proceeding shall be entitled to recover as part of such action or proceeding such reasonable attorneys’ fees, expert witness fees, and court costs as may be fixed by the court or jury. The Prevailing Party, for the purpose of any settlement, dismissal or summary judgment, shall be the party receiving substantially the relief requested

15.3 Sublandlord’s Costs. In any case where Subtenant requests permission from Sublandlord to assign, sublet, make alterations, or receive any other consent or obtain any waiver from or modification to the terms of this Sublease, Subtenant shall pay to Sublandlord Sublandlord’s reasonable attorney’s fees incurred by Sublandlord in reviewing such request.

ARTICLE 16

EXHIBITS

16.1 Exhibits and Attachments. All exhibits and attachments to this Sublease are a part hereof.

 

15

IN WITNESS WHEREOF, Sublandlord and Subtenant have executed and delivered this Sublease on the date first set forth above.

 

SUBLANDLORD	 		 	SUBTENANT
KALOBIOS PHARMACEUTICALS, INC.,	 	 	 	COMPUGEN, INC.,
a Delaware corporation	 		 	a Delaware corporation
/s/ David W. Pritchard

 		 	
/s/ Anat Cohen-Dayag

By:	 	David W. Pritchard	 		 	By:	 	Anat Cohen-Dayag
Its:	 	Chief Executive Officer	 		 	Its:	 	President &amp; CEO
 

16
</file>
<file name="skills/summarization/data/sample-lease3-summary.txt">
Description: This is a commercial sublease agreement between Cutter &amp; Buck Inc. (Sublandlord) and Tableau Software, Inc. (Subtenant) for a portion of premises originally leased from Fremont Lake Union Center LLC (Landlord). The sublease is for office space with a term from June 1, 2012 to July 31, 2017.

&lt;parties involved&gt;

- Sublessor: Cutter &amp; Buck Inc.
- Sublessee: Tableau Software, Inc. 
- Original lessor: Fremont Lake Union Center LLC

&lt;/parties involved&gt;

&lt;property details&gt;

- Address: 701 North 34th Street, Suite 230, Seattle, WA 98103
- Description: Approximately 6,697 rentable square feet of space on the second floor
- Permitted use: General office purposes as permitted under the Master Lease

&lt;/property details&gt;

&lt;term and rent&gt;

- Start date: June 1, 2012 (or as soon thereafter as Sublandlord can deliver possession, but no later than July 1, 2012)
- End date: July 31, 2017
- Monthly rent:
  • June 1, 2012 – May 31, 2013: $25,113.75
  • June 1, 2013 – May 31, 2014: $25,867.16
  • June 1, 2014 – May 31, 2015: $26,642.90
  • June 1, 2015 – May 31, 2016: $27,440.96
  • June 1, 2016 – July 31, 2017: $28,266.92
- Security deposit: $84,800.76
- Option to extend: None
- Additional rent: Subtenant's Percentage Share of Operating Costs and Applicable Additional Rent

&lt;/term and rent&gt;

&lt;responsibilities&gt;

- Utilities: Included in Base Rent
- Maintenance: Subtenant responsible for non-structural repairs and maintenance within Subleased Premises
- Repairs: Subtenant responsible for repairs within Subleased Premises; Sublandlord responsible for structural elements and building systems
- Insurance: Subtenant required to maintain insurance as described in the Master Lease

&lt;/responsibilities&gt;

&lt;consent and notices&gt;

- Landlord's consent: Required for sublease to be effective
- Notice requirements: Written notices to be delivered personally, by registered or certified mail, prepaid nationally recognized overnight courier service, or hand delivery to specified addresses

&lt;/consent and notices&gt;

&lt;special provisions&gt;

- Parking: Non-exclusive use of 15 parking spaces at specified rates
- Signage: Building-standard suite entry signage allowed, subject to Landlord's approval
- Alterations: Require prior written consent of Sublandlord and Landlord
- Assignment and subletting: Prohibited without prior written consent of Sublandlord and Landlord, except for Permitted Transfers
- Right of First Offer: Subtenant has right of first offer on additional space in the Premises that becomes available during the Term
- Furniture: Subtenant may use certain existing furniture in the Subleased Premises

&lt;/special provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease3.txt">
Source: https://www.sec.gov/Archives/edgar/data/1303652/000119312513138700/d469057dex1016.htm

EX-10.16 16 d469057dex1016.htm SUBLEASE AGREEMENT
Exhibit 10.16

SUBLEASE AGREEMENT

This Sublease Agreement (“Sublease”), dated as of April 19, 2012, is made by and between CUTTER &amp; BUCK INC,, a Washington corporation (“Sublandlord”), and TABLEAU SOFTWARE, INC., a Delaware corporation (“Subtenant”).

RECITALS

A. Pursuant to that certain Office Lease dated October 21, 2009, between FREMONT LAKE UNION CENTER LLC, a Delaware limited liability company, as landlord (“Landlord”), and Sublandlord as tenant (together with all amendments and exhibits thereto, the “Lease”), a copy of which is attached hereto as Exhibit A, Landlord leased to Sublandlord approximately 44,692 rentable square feet of space in Suites 230 and 400 (collectively, the “Premises”), in the Plaza Building located at 701 North 34th Street, Seattle, WA 98103 (the “Building”).

B. Sublandlord wishes to sublease to Subtenant that portion of the Premises located in Suite 230, containing approximately 6,697 rentable square feet of space as shown by the cross-hatching on Exhibit B attached hereto (the “Subleased Premises”).

C. The parties acknowledge that Landlord’s consent to this Sublease is required by the Lease, and the effectiveness of this Sublease is conditioned upon the receipt of such consent by Landlord simultaneously with the execution of this Sublease substantially in the form as set forth on Exhibit C attached hereto (such, the “Landlord Consent”).

NOW, THEREFORE, in consideration of the mutual covenants contained in this Sublease, and for other good and valuable consideration, the receipt and sufficiency of which is hereby acknowledged by the parties, Sublandlord and Subtenant hereby agree as follows:

AGREEMENT

1. Sublease of Subleased Premises. Sublandlord hereby subleases to Subtenant and Subtenant hereby subleases from Sublandlord, for the Term, at the rental, and upon all of the conditions set forth herein, the Subleased Premises, together with the right to use, in common with others entitled thereto, the hallways, stairways and elevators necessary for access to the Subleased Premises and the lavatories nearest to the Subleased Premises.

2. Term. The term of this Sublease (“Term”) shall be for a period commencing on June 1, 2012 or as soon thereafter as Sublandlord is able to deliver possession of the Sublease Premises to Subtenant but in no event later than July 1, 2012 (the “Commencement Date”), and expiring on July 31, 2017 (the “Expiration Date”), except to the extent this Sublease is earlier terminated as described herein. Any delay in the Commencement Date shall not subject Sublandlord to liability for loss or damage resulting therefrom; provided that as Subtenant’s sole recourse Subtenant shall be entitled to one (1) day of free rent for each day that the Commencement Date is delayed, subject to the provisions of Section 25 below.

 

1.

3. Condition of Subleased Premises. On the Commencement Date, Sublandlord shall deliver to Subtenant possession of the Subleased Premises substantially in the same condition as the Subleased Premises is as of the date hereof, in an “as-is, where-is”, broom clean condition except that, prior to the Commencement Date, Sublandlord shall remove all of its furniture, fixtures and movable equipment from the Subleased Premises. Should Subtenant desire to make any improvements to the Subleased Premises, any such improvements shall be subject to the prior written consent of Sublandlord and Landlord in accordance with Section 8 below.

4. Base Rent, Operating Costs and Additional Rent.

(a) Base Rent. Subtenant shall pay to Sublandlord rent (“Base Rent”) as follows:

 

Rental Payment Period

  	Rent
psf/yr.	 	  	Monthly
Installment	 
June 1, 2012 – May 31, 2013

  	$	45.00	  	  	$	25,113.75	  
June 1, 2013 – May 31, 2014

  	$	46.35	  	  	$	25,867.16	  
June 1, 2014 – May 31, 2015

  	$	47.74	  	  	$	26,642.90	  
June 1, 2015 – May 31, 2016

  	$	49.17	  	  	$	27,440.96	  
June 1, 2016 – July 31, 2017

  	$	50.65	  	  	$	28,266.92	  
(b) Operating Costs and Additional Rent.

(i) In addition to the Base Rent payable pursuant to Section 4.a above, Subtenant shall pay to Sublandlord (1) from and after January 1, 2013, for each calendar year of the Term, Subtenant’s Percentage Share (as defined below) of the amount by which Operating Costs (as defined in the Lease) payable by Sublandlord for the Premises for the then current calendar year exceeds the Base Operating Costs (as defined below) (such amount, “Subtenant’s Percentage Share of Operating Costs”), and (2) an amount equal to all Additional Rent (as defined in the Lease) attributable to the Subleased Premises during the Term of this Sublease; provided, however, Subtenant shall not be responsible for, and shall have no obligation to pay Additional Rent incurred in connection with (i) the negligent acts or omissions of Sublandlord under Section 18.2 of the Lease, or any other acts or omissions of Sublandlord for which, but for this Sublease, Sublandlord would be responsible under the Master Lease, (ii) a Transfer (as defined in the Lease) by Sublandlord under Article 8 of the Lease, and (iii) Operating Costs (as defined in the Lease) that are not included in Subtenant’s Percentage Share of Operating Costs (the Additional Rent payable by Subtenant, the “Applicable Additional Rent”).

(ii) Sublandlord shall give Subtenant written notice of Sublandlord’s estimate of the amount of Operating Costs per month payable pursuant to this Section 4.b for each calendar year of the Term following the Base Year (as defined below), promptly following the Sublandlord’s receipt of Landlord’s estimate of the Operating Costs payable under the Lease for the applicable calendar year. Such estimate may be adjusted by Sublandlord if Landlord has made such an adjustment from time to time during the calendar year, by written notice to Subtenant. From and after January 1, 2013, on or before the first day of each month during each calendar year, Subtenant shall pay to Sublandlord as Subtenant’s Percentage Share of Operating Costs one-twelfth (1/12th) of such estimated amount together with the Base Rent.

 

2.

(iii) Sublandlord shall also give Subtenant written notice of the actual amount of Operating Costs payable for each calendar year, promptly following Sublandlord’s receipt of the annual statement of such amounts from Landlord, which notice shall include a copy of Landlord’s annual statement. If on the basis of such statement Subtenant owes an amount that is less than the estimated payments for the calendar year just ended, previously paid by Subtenant, Sublandlord shall credit such excess to the next payments of Base Rent coming due or, if the term of this Sublease is about to expire, refund such excess to Subtenant within thirty (30) days after such expiration. If on the basis of such statement Subtenant owes an amount that is more than the estimated payments for the calendar year just ended previously made by Subtenant, Subtenant shall pay the deficiency to Sublandlord within thirty (30) days after delivery of the statement from Sublandlord to Subtenant.

(iv) For partial calendar years during the term of this Sublease, the amount of Operating Costs payable by Subtenant that is applicable to that partial calendar year shall be prorated based on the ratio of the number of days of such partial calendar year falling during the term of this Sublease divided by 365. The obligations of Subtenant and Sublandlord pursuant to this Section 4.b which arise during the term of this Sublease shall survive the expiration or earlier termination of this Sublease.

(v) The amounts of any Applicable Additional Rent due from Subtenant during the Term of this Sublease shall be paid by Subtenant to Sublandlord within ten (10) days of an itemized invoice from Sublandlord for such amounts.

(vi) For purposes of this Sublease and in addition to the terms defined elsewhere in this Sublease, the following terms shall have the meanings set forth below:

(1) “Base Operating Costs” shall mean Operating Costs payable under the Lease during the Base Year.

(2) “Base Year” shall mean the calendar year 2012.

(3) “Subtenant’s Percentage Share” shall mean 14.985%; provided that Sublandlord and Subtenant acknowledge that Subtenant’s Percentage Share has been obtained by dividing the rentable square footage of the Subleased Premises by the total rentable square footage of the Premises and multiplying such quotient by 100. In the event Subtenant’s Percentage Share is changed during a calendar year by reason of a change in the rentable square footage of the Subleased Premises or the Premises, Subtenant’s Percentage Share shall thereupon be adjusted to equal the result obtained by dividing the rentable square footage of the Subleased Premises by the rentable square footage of the Premises and multiplying such quotient by 100, and Subtenant’s Percentage Share shall be determined on the basis of the number of days during such calendar year at each such percentage share.

(c) Payment. Subtenant shall commence to pay Subtenant’s Percentage Share of Operating Costs from and after January 1, 2013, and to pay Base Rent, Applicable Additional Rent and all other charges hereunder on the Commencement Date, and shall continue to pay Base Rent and Subtenant’s Percentage Share of Operating Costs in monthly installments on or before the first day of every month thereafter during the Term. The monthly installments

 

3.

of Base Rent and Subtenant’s Percentage Share of Operating Costs shall be prorated on a per diem basis for the first or last month of the Term if the Commencement Date or Expiration Date is not the first day or last day of a calendar month. For purposes of this Sublease, the word “Rent.” shall mean the Base Rent, Subtenant’s Percentage Share of Operating Costs, Applicable Additional Rent, and all other charges payable to Sublandlord by Subtenant pursuant to this Sublease.

5. Security Deposit. Concurrent with Subtenant’s execution of this Sublease, Subtenant shall deliver to Sublandlord the sum of $84,800.76 (the “Deposit”) as security for the performance by Subtenant of its obligations under this Sublease. If Subtenant is not then in default beyond any applicable cure period, the Deposit shall be returned to Subtenant upon the expiration or termination of this Sublease. If Subtenant defaults in respect of any of the terms, provisions, covenants or conditions of this Sublease beyond any applicable notice and cure period, including, but not limited to, payment of Rent, Sublandlord may, but shall not be required to, use, apply or retain the whole or any appropriate part of the Deposit for the payment of any Rent in default or for reimbursement of any reasonable expense that Sublandlord incurs because of Subtenant’s default. If the Deposit is so applied then Subtenant shall, within ten (10) days after Sublandlord’s written request, deposit additional money with Sublandlord sufficient to restore the Deposit to its original amount.

6. Data Cabling. During the Term of this Sublease, Subtenant shall be entitled to use those portions of the existing cabling in the Subleased Premises as may be necessary for Subtenant’s use of the Subleased Premises as general office space. Subtenant shall not be responsible for removing the existing cabling upon the expiration of this Sublease.

7. Use; Access. The Subleased Premises shall be used and occupied only for general office purposes as permitted under the Lease. Sublandlord shall provide Subtenant with card keys to access the Subleased Premises and Subtenant shall reimburse Sublandlord within thirty (30) days after receipt of an invoice for the cost of any card keys supplied by Sublandlord to Subtenant for purposes of access to the Subleased Premises.

8. Alterations. Subtenant shall not make any alterations to the Subleased Premises without the prior written consent of Sublandlord and Landlord, which consent shall not be unreasonably withheld, conditioned or delayed. Any alterations consented to shall he subject to the applicable terms and conditions of the Lease (including, without limitation, the provisions of Article 17 of the Lease), and shall be performed in compliance with applicable law. Notwithstanding the foregoing, Sublandlord hereby consents to Subtenant completing, at Subtenant’s sole cost, the improvements within, to and servicing the Subleased Premises (the “Subtenant Improvements”) described on Exhibit C-1 attached hereto and by this reference incorporated herein, in accordance with plans approved by Landlord in accordance with Section 17.2 of the Lease.

9. Maintenance. From and after the Commencement Date, Subtenant shall be responsible for all of Sublandlord’s maintenance obligations under the Lease with respect to the Subleased Premises. Subtenant acknowledges that the Building hours are from 7:00 a.m. until 6:00 p.m. Monday through Friday, and from 9:00 a.m. to 1:00 p.m. on Saturdays (Sundays and nationally enacted holidays excepted), and that additional after-hours HVAC services are available to Subtenant upon request and payable by Subtenant at Landlord’s then-current rates.

 

4.

10. Parking. Subtenant acknowledges that Sublandlord’s right to parking for the Building is limited by the terms and conditions set forth in Section 15.2 of the Lease. Notwithstanding the foregoing, Sublandlord shall sublease to Subtenant fifteen (15) of the parking spaces (“Subtenant Parking Spaces”) available to Sublandlord under the Lease at the same rates as Sublandlord pays under the Lease (currently $75.00 per stall per month, increasing to $100.00 per stall per month for the period August 1, 2012 through July 31, 2015, and at market rates for such stalls thereafter but in no event shall rates increase more frequently than annually thereafter), subject to the restrictions set forth in the Lease. Sublandlord shall not exercise its rights under the Lease to relinquish the Subtenant Parking Spaces without Subtenant’s prior written consent.

11. Assignment and Subletting. Subtenant shall not assign or sublet all or any portion of the Subleased Premises without Sublandlord’s prior written consent, such consent not to be unreasonably withheld, conditioned or delayed, nor without Landlord’s prior written consent under Article 8 of the Lease, provided, however, Subtenant may make a “Permitted Transfer” (as defined in the Lease), if all conditions of Section 8.6 of the Lease are satisfied (with Subtenant substituted for “Tenant” in such definition for the purposes of this Section 11), without Sublandlord consent.

12. Incorporation of Lease. This Sublease is and shall be at all times subject and subordinate to all of the terms, covenants and conditions of the Lease and to all of the rights of Landlord thereunder. Subtenant shall comply with all applicable provisions of the Lease and shall not take any action which would constitute a breach or violation of the Lease. Notwithstanding the foregoing, the following sections of the Lease shall not be applicable to Subtenant: Sections 2.26, 4.4, 5.1, 5.3, Article 6, 8.4 (with respect to Sublandlord’s payment obligations resulting from its own acts or omissions), 12.3 (with respect to Sublandlord’s payment obligations resulting from its own acts or omissions), 15.2 (with respect to Sublandlord’s payment obligations resulting from its own acts or omissions), Article 24 (with respect to removal of any Alterations existing as of the Commencement Date), 30.9, 30.11 (with respect to Sublandlord’s payment obligations resulting from its own acts or omissions), 30.25, 30.26, 30.27, 30.28, Exhibit C, Exhibit D Sections 2.1 and 2.4, and Exhibit F (such, the “Excluded Provisions”). Subtenant acknowledges that Landlord may enforce the Lease provisions directly against Subtenant in the event of any such any breach or violation thereof by Subtenant. Neither Sublandlord nor Subtenant shall commit or suffer any act or omission that will result in a violation of or a default under any of the provisions of the Lease. Sublandlord represents and warrants to Subtenant that as of the date hereof and as of the Commencement Date, to Sublandlord’s best knowledge: (i) no default exists on the part of Landlord or Sublandlord under the Lease and (ii) there are no events which, with the passage of time, or the giving of notice, or both, would create a default under the Lease. Sublandlord covenants that it shall promptly provide Subtenant with copies of all notices of default sent or received by Sublandlord with respect to the Master Lease.

 

5.

13. Interpretation. The terms, conditions and respective obligations of Sublandlord and Subtenant to each other under this Sublease shall be the terms and conditions of the Lease except for the Excluded Provisions and those provisions of the Lease which are directly contradicted by this Sublease, in which event the terms of this Sublease shall control over the Lease, Therefore, for the purposes of this Sublease, wherever in the Lease the word “Landlord” is used, it shall also be deemed to mean the Sublandlord herein (except to the extent such references impose an obligation upon Landlord, in which case same shall not refer to Sublandlord, and wherever in the Lease the word “Tenant” is used, it shall be deemed to mean the Subtenant herein (except to the extent such provision is not incorporated herein). Without limiting the terms and provisions of this Section 13, Subtenant acknowledges and agrees that Subtenant’s rights under this Sublease are as a subtenant only and that, Subtenant shall not enjoy or be entitled to exercise any of rights, including, but not limited to, rights which may be afforded to Sublandlord as the tenant under the Lease, including, but not limited to: (a) any right of early termination or of extension or renewal of the Lease; (b) any right of first offer or refusal under the Lease; (c) any expansion rights or options under the Lease; (d) any right of self-help or set-off under the Lease except as expressly set forth herein; or (e) any other rights or options pertaining to additional space in the Building; provided, however, in the event Sublandlord receives an abatement of rent under Section 7.6 or 13.2 of the Lease, Subtenant shall also be entitled to a proportionate abatement of rent hereunder to the extent that the abatement received by Sublandlord relates to the partial destruction of the Subleased Premises. Notwithstanding any statement to the contrary contained anywhere else in this Sublease, (i) if Sublandlord or Subtenant is obligated to indemnify the other, whether pursuant to the express terms of this Sublease or whether pursuant to the incorporation of terms from the Lease, the indemnifying party shall also be obligated to indemnify Landlord to the same extent and subject to the same limitations; (ii) if Subtenant is obligated to name Sublandlord as an additional insured or loss payee under Subtenant’s insurance policies, whether pursuant to the express terms of this Sublease or whether pursuant to the terms of the Lease that are incorporated herein, Subtenant shall also name Landlord as an additional insured or loss payee, as the case may be, subject to the same limitations or conditions, if any, that may apply with regard to Sublandlord; and (iii) if Landlord’s consent or approval is required under the Lease in a provision of the Lease that is incorporated into this Sublease, Subtenant must obtain the consent or approval of both Sublandlord and Landlord, the granting of which by Landlord shall be governed by the terms and conditions of the applicable Lease provision.

14. Sublandlord Liability for Landlord’s Default. Sublandlord shall have no liability to Subtenant for any default or other act of Landlord under the Lease, and Sublandlord shall not be obligated to provide any services to Subtenant or otherwise perform any obligations in connection with this Sublease except as specifically set forth herein. To the extent that Landlord fails or refuses to perform its obligations under the Lease or breaches or has breached any of its representations, warranties or covenants under the Lease, upon the written request of Subtenant, then Sublandlord agrees to use reasonable and good faith efforts to cause Landlord to perform its obligations under the Lease.

15. Indemnification. Subtenant shall indemnify, defend and hold harmless Sublandlord from and against all losses, costs, damages, expenses and liabilities, including, without limitation, reasonable attorneys’ fees and disbursements, which Sublandlord may incur or pay out (including, without limitation, to Landlord) by reason of (a) any accidents, damages or injuries to persons or property occurring in the Subleased Premises after the Commencement Date (unless the same shall have been caused by Sublandlord’s negligence or wrongful act, or a

 

6.

condition created by Sublandlord in the Premises prior to the Commencement Date), (b) any breach or default hereunder on Subtenant’s part, (c) the enforcement of Sublandlord’s rights under this Sublease or the Lease, or (d) any act, omission or negligence on the part of Subtenant and/or its officers, partners, employees, agents, customers and/or invitees, or any person claiming through or under Subtenant. Sublandlord shall indemnify, defend and hold harmless Subtenant from and against all losses, costs, damages, expenses and liabilities, including, without limitation, reasonable attorneys’ fees and disbursements, which Subtenant may incur or pay out (including, without limitation, to Landlord) by reason of (a) any accidents, damages or injuries to persons or property occurring in the Subleased Premises prior to the Commencement Date (unless the same shall have been caused by Subtenant’s negligence or wrongful act) or caused by a condition created by Sublandlord in the Premises prior to the Commencement Date, (b) any breach or default hereunder on Sublandlord’s part, (c) the enforcement of Subtenant’s rights under this Sublease, or (d) any act, omission or negligence on the part of Sublandlord and/or its officers, partners, employees, agents, customers and/or invitees, or any person claiming through or under Sublandlord. This indemnity shall survive termination of this Sublease only as to claims arising out of events that occur prior to termination of this Sublease.

16. Insurance. Subtenant shall comply with the insurance requirements set forth in the Lease with respect to the Subleased Premises, including, without limitation, maintenance of insurance for the Subleased Premises in accordance with the applicable terms and conditions set forth in Article 10 and Article 11 of the Lease,

17. Waiver of Subrogation. Neither Landlord, Sublandlord nor Subtenant shall be liable to the other or to any insurance company (by way of subrogation or otherwise) insuring the other party or parties for any loss or damage to any building, structure or other tangible property, or any resulting loss of income and benefits, even though such loss or damage might have been occasioned by the negligence of such party, its agents or employees if any such loss or damage is covered by insurance benefiting the party suffering such loss or damage or was required to be covered by insurance pursuant to this Sublease or the Lease. Landlord, Sublandlord and Subtenant shall require their respective insurance companies to include a standard waiver of subrogation provision in their respective policies.

18. Notices. All notices and demands that may or are to be required or permitted are to be given by either party on the other hereunder shall be in writing. All notices and demands by Sublandlord to Subtenant shall be personally delivered or sent by a nationally recognized private carrier of overnight mail (e.g. FedEx) or by United States Certified Mail, return receipt requested and postage prepaid, to the parties at the addresses listed below or at such other addresses as the parties may designate by notice from time to time.

 

To Sublandlord:	  	Cutter &amp; Buck Inc.	  	 
  	701 N. 34th Street, Suite 400	  	
  	Seattle, WA 98103-3415	  	
  	Attention: Chief Financial. Officer	  	
 

7.

 	  	With a copy to:	  	 
  	Lane Powell PC	  	
  	1420 Fifth Avenue, Suite 4100	  	
  	Seattle, WA 98101	  	
  	Attention: Michael E. Morgan	  	
To Subtenant:	  	Tableau Software, Inc.	  	
  	701 N. 34th Street, Suite 230	  	
  	Seattle, WA 98103-3415	  	
  	Attention: General Counsel	  	
  	With a copy to:	  	
  	Tableau Software, Inc.	  	
  	701 N. 34th Street, Suite 230	  	
  	Seattle, WA 98103-3415	  	
  	Attention: Vice President, Human Resources	  	
19. Attorneys’ Fees. If Sublandlord or Subtenant shall commence an action against the other arising out of or in connection with this Sublease, the prevailing party shall be entitled to recover its costs of suit and reasonable attorney’s fees.

20. Entire Agreement. This Sublease, the Exhibits attached hereto and the Lease, which is incorporated herein by reference, constitute the entire agreement between Sublandlord and Subtenant with respect to the Subleased Premises and may not be amended or altered except by written agreement executed by both parties.

21. Binding on Successors. Subject to the restrictions on assignment set forth in Section 11 above, this Sublease shall bind the parties’ heirs, successors, representatives and permitted assigns.

22. Brokerage Commissions. Sublandlord and Subtenant each represent to the other that they have dealt only with Washington Partners, Inc. (“Broker”), as a broker in connection with this Sublease, and that they have not dealt, directly or indirectly, in connection with the leasing of the Subleased Premises, with any other broker or person entitled to claim a commission or leasing fees. Sublandlord shall be responsible for the payment of a brokerage commission to Broker in connection with this Sublease pursuant to a separate agreement. Sublandlord and Subtenant each shall indemnify and hold each other harmless from any loss, liability, damage, or expense (including without limitation reasonable attorneys’ fees) arising from any claim for a commission or leasing fee arising out of this transaction made by any unidentified broker or other person with whom such party has dealt.

23. Severability. The invalidity of any provision of this Sublease, as determined by a court of competent jurisdiction, shall in no way affect the validity of any other provision hereof.

 

8.

24. Time of the Essence. Time is of the essence to the parties executing this Sublease.

25. Force Majeure. In the event that either party shall be delayed or hindered in or prevented from the performance of any covenant, agreement, work, service, or other act required under this Sublease or the Lease to be performed by such party (excluding the payment of money), and such delay or hindrance is due to causes entirely beyond its control such as riots, insurrections, martial law, civil commotion, war, fire, flood, earthquake, or other casualty or acts of God, the performance of such covenant, agreement, work, service, or other act shall be excused for the period of delay and the time period for performance shall be extended by the same number of days in the period of delay.

26. Authority. Each of Sublandlord and Subtenant hereby represents and warrants that this Sublease has been duly authorized, executed and delivered by and on its behalf and constitutes such party’s valid and binding agreement in accordance with the terms hereof.

27. Right of First Offer. Subject to the provisions of Article 8 of the Lease, Sublandlord shall notify Subtenant when any additional space in the Premises becomes available for sublease (“Offer Space”), including the terms upon which Sublandlord is willing to sublease the Offer Space. Any terms not included in such notice shall be the same as set forth in this Sublease. Subtenant shall have the right (“ROFO”), subject to approval by Landlord pursuant to Article 8 of the Lease, to sublease all of such Offer Space upon the terms set forth in Sublandlord’s notice; provided, that Subtenant shall have no such right, if Subtenant is then, or at any time prior to the commencement of the sublease terms for the Offer Space, in default under this Sublease. Subtenant may exercise the ROFO by written notice to Sublandlord (“Exercise Notice”) within ten (10) days after the date of Sublandlord’s notice of availability of the Offer Space. If Sublandlord receives the Exercise Notice within such 10-day period, and the terms for subleasing the Offer Space to Subtenant are approved by Landlord pursuant to Article 8 of the Lease, Sublandlord shall deliver the Offer Space to Subtenant upon the date such space is available and shall prepare an amendment to this Sublease adding the Offer Space to the Subleased Premises as of the date of delivery upon the terms set forth in Sublandlord’s notice of availability, which amendment shall be executed by Subtenant within ten (10) days after Subtenant’s receipt of same from Sublandlord. If Sublandlord does not receive the Exercise Notice within such 10-day period, Sublandlord shall be free to sublease the Offer Space to any third-party upon any terms and conditions acceptable to Sublandlord and approved by Landlord pursuant to Article 8 of the Lease.

 

9.

28. Signage. Subtenant shall have the right to install building-standard signage at the elevator bank of the floor on which the Subleased Premises is located, subject to Landlord’s prior written approval. Such signage shall comply with the provisions of Article 21 of the Lease.

IN WITNESS WHEREOF, the parties hereto hereby execute this Sublease as of the day and year first above written.

 

SUBLANDLORD:	 	
SUBTENANT:

CUTTER &amp; BUCK INC., a Washington corporation	 	
TABLEAU SOFTWARE, INC., a Delaware corporation

By:	 	/s/ David Hauge	 	By:	 	/s/ Thomas E. Walker, Jr.
Its:	 	CFO	 	Its:	 	CFO
 

10.

Sublandlord Acknowledgment:

 

STATE OF WASHINGTON

  	)
  	) ss.
COUNTY OF KING

  	)
I certify that I know or have satisfactory evidence that David Hauge is the person who appeared before me, and said person acknowledged that (s)he signed this instrument, on oath stated that (s)he was authorized to execute the instrument and acknowledged it as the CFO of Cutter &amp; Buck Inc., the corporation that executed this instrument, to be the free and voluntary act of such corporation for the uses and purposes mentioned in this instrument.

 

DATED: April 19, 2012	 	
/s/ Jacqueline F Keith

 	Print Name:  	 	Jacqueline F Keith
 	
NOTARY PUBLIC for the State of

Washington, residing at

 	Seattle, Wa 98103
 	My appointment expires: January 11, 2015
 	
 

 

 

11.

Subtenant Acknowledgment:

 

STATE OF WASHINGTON

  	)
  	) ss.
COUNTY OF King

  	)
I certify that I know or have satisfactory evidence that Thomas E. Walker, Jr. is the person who appeared before me, and said person acknowledged that (s)he signed this instrument, on oath stated that (s)he was authorized to execute the instrument and acknowledged it as the CFO of Tableau Software, Inc., the corporation that executed this instrument, to be the free and voluntary act of such corporation for the uses and purposes mentioned in this instrument.

 

DATED: 19 April 2012

  	
/s/ Tiffany Dawn Ash

  	Print Name: 	  	Tiffany Dawn Ash
  	
NOTARY PUBLIC for the State of

Washington, residing at

  	Seattle, WA
  	My appointment expires;
  	1 November 2015
 

12.

EXHIBIT A

OFFICE LEASE

This Office Lease (“Lease”) is entered into by and between FREMONT LAKE UNION CENTER LLC, a Delaware limited liability company (“Landlord”), and CUTTER &amp; BUCK INC., a Washington corporation (“Tenant”) (collectively the “Parties”) and is dated for reference purposes only as of October 21, 2009.

ARTICLE 1. BASIC LEASE TERMS

In addition to the terms defined in Article 2 and elsewhere in this Lease, the terms set forth below shall have the meanings herein specified when referred to in this Lease:

 

1.1    Rent Payment Address:	 	Fremont Lake Union Center LLC, c/o CB Richard Ellis, P.O. Box 94288, Seattle, WA 98124
1.2    Landlord Notice Address:

 	Fremont Lake Union Center LLC, c/o Union Investment Real Estate AG, Asset Management Core Markets, Property Management USA, Caffamacherreihe 8, 20355 Hamburg, Germany, Tel: +49 40 34919-464, Fax: +49 40 34919-297; with a copy sent to Metzler Realty Advisors, Inc., 700 Fifth Avenue, 61st Floor, Seattle, WA 98104, Tel: (206) 623-2700, Fax: (206) 623-4864
1.3    Tenant Notice Address:

 	Suite 400, 701 North 34th Street, Seattle, WA 98103; facsimile number (206) 691-5501.
 	With a copy to: Lane Powell PC, 1420 Fifth Avenue, Suite 4100, Seattle, WA 98101, Attn: Michael E. Morgan; facsimile number (206) 223-7107.
1.4    Premises:

 	Suites 230 and 400 on the second and fourth floors of the Building, deemed to contain 44,692 square feet of Rentable Area, as outlined in Exhibit B (sec Article 2.23).
1.5    Building:

 	Plaza Building, 701 North 34th Street, Seattle, WA 98103, in which the Premises are located. The Plaza Building is deemed to contain 136,111 square feet of Rentable Area.
1.6    Complex:

 	Waterfront Building and Plaza Building, also known as Building 1 and Building 2 of Quadrant Lake Union Center, located in the City of Seattle, State of Washington (“State”), consisting of: (i) that parcel of real property on which the Premises are located, (ii) the Common Area, and (iii) any contiguous parcels owned/ground leased by Landlord, as more particularly described in Exhibit A.
 

13

1.7    Term:

 	July 15, 2010 – July 31, 2017
1.8    Base Rent:

 	(A) Minimum Monthly:
 

Period	 	Monthly Amount	 	Annual Rate Per RSF
July 15, 2010 – July 31, 2011

 	$65,175.83	 	$17.50
August 1, 2011 – July 31, 2012

 	$67,131.11	 	$18.03
August 1, 2012 – July 31, 2013

 	$69,145.04	 	$18.57
August 1, 2013 – July 31, 2014

 	$71,219.39	 	$19.13
August 1, 2014 – July 31, 2015

 	$73,355.97	 	$19.70
August 1, 2015 – July 31, 2016

 	$75,556.65	 	$20.29
August 1, 2016 – July 31, 2017

 	$77,838.57	 	$20.90
(B) Advance Rent: None.

 

1.9	  	Security Deposit: None.
1.10	  	Permitted Use: Office (See Section 15.1)
1.11	  	Tenant’s Pro Rata Percentage: 32.84% (See Exhibit D)
1.12	  	Improvements: See Exhibit C.
1.13	  	CC&amp;Rs:	    	Amended and Restated Declaration of Covenants, Conditions, Easements and Restrictions Applicable to Quadrant Lake Union Center with an effective date of October 31, 1996 and recorded under King County Recording No. 9802231707 as may have been amended from time to time.
1.14	  	Broker:	    	        Washington Partners, Inc.
  		    	        Metzler Real Estate Advisors, Inc.
1.15	  	Contents:	    	This Lease consists of Articles 1 through 30 and the following Exhibits attached hereto and incorporated herein by this reference:
  		    	
Exhibit A – Legal Description of Complex

Exhibit B – Plan of the Complex and Floor Plan of the Premises

Exhibit C – Letter

Exhibit D – Expenses

Exhibit E – Rules and Regulations

Exhibit F – Guaranty of Lease

ARTICLE 2. DEFINITIONS

The terms defined in this Article 2 shall, for all purposes of this Lease and all agreements supplemental hereto, have the meanings herein specified unless expressly stated otherwise.

2.1 “Additional Rent” means all items specified as Additional Rent in Sections 5.2, 7.4, 8.4, 10., 17.3, 18.2, 23.5, Exhibit D, and elsewhere in this Lease.

 

14

2.2 A “Bankruptcy Event” is (1) a court filing by or against Tenant, of pleadings to initiate a bankruptcy petition of any kind, or the appointment of a receiver or trustee of any or all of Tenant’s assets, or (2) a receiver or trustee taking possession of any of the assets of Tenant, or if the leasehold interest herein passes to a receiver or trustee, or (3) Tenant making an assignment for the benefit of creditors or petitioning for or entering into an arrangement with creditors during the Term.

2.3 “Building” means the structure that contains the Premises.

2.4 “Building Standard Work” means the typical interior improvements constructed or to be constructed by Landlord, which are of the nature and quality required by specifications developed for the Complex by Landlord’s architect.

2.5 “Capital Costs” mean the following: (i) costs for capital improvements or replacements to the Complex of a type which do not normally recur more frequently than every five years in the normal course of operation and maintenance of facilities such as the Complex; (ii) costs incurred for the purpose of reducing other operating expenses or utility costs payable by Tenant; and/or (iii) costs of capital improvements made by Landlord that are required by Laws or Regulations. Capital Costs are includable in Operating Costs each year only to the extent of that fraction allocable to the year in question calculated by amortizing such Capital Costs over the reasonable useful life of the improvement resulting therefrom, with interest on the unamortized balance at an interest rate equal to the Wall Street Journal Prime Rate plus one percent (1%) at the time of the expenditure.

2.6 “Commencement Date” means July 15, 2010.

2.7 “Common Areas” include all areas and facilities outside the Premises, within the exterior boundaries of the Complex, that are provided by Landlord for the general use and convenience of Tenant and of other Complex tenants and their authorized representatives and invitees. Common Areas include corridors, stairways, elevator shafts, janitor rooms, driveways, parking areas, and landscaped areas, all as generally described or shown on Exhibit B attached hereto, Common Areas also include systems within the Premises and Complex that also serve other tenants such as plumbing, fire sprinkler or non-exclusive HVAC. Exhibit B is tentative, and Landlord reserves the right to make additions, changes and alterations to it from time to time. Regardless of the foregoing, Landlord may not unilaterally modify the Common Areas or any other area inside the Premises in any way that materially and adversely affects Tenant’s operation of its business upon the Premises.

2.8 “Complex” is that parcel of real property of which the Premises forms a part, together with the parcels in common ownership therewith, and contiguous thereto, which property is described with particularity in Exhibit A attached hereto and made a part hereof by reference, all as leased by Landlord. Landlord may remove any lot and building or buildings thereon from the Complex at its sole discretion.

2.9 “Electrical Costs” mean: (a) charges paid by Landlord for electricity; (b) costs incurred in connection with an energy management program for the Property; (c) reasonable out-of-pocket costs incurred by Landlord in connection with negotiating electrical contracts for the

 

15

Complex. Electrical Costs shall be adjusted as follows: (i) amounts received by Landlord as reimbursement from tenants for above standard electrical consumption shall be deducted from Electrical Costs; (ii) the cost of electricity incurred to provide overtime HVAC to specific tenants (as reasonably estimated by Landlord) shall be deducted from Electrical Costs; and (iii) if any tenants of the Complex, including Tenant, are billed directly by a utility company for the cost of electricity to their premises as a separate charge, the cost of electricity to such tenant spaces in the Complex shall be deducted from Electrical Costs.

2.10 “Environmental Laws” mean any federal, State, local or administrative agency ordinance, law, rule or regulation, order or requirement relating to Hazardous Materials, radioactive materials, medical wastes, or which deal with air or water quality, air emissions, soil or ground conditions or other environmental matters of any kind.

2.11 “Hazardous Materials” mean any substance, chemical, waste or material which is now or hereafter listed, defined or otherwise identified as “hazardous” or “toxic” under any of the Environmental Laws, including formaldehyde, urea, polychlorinated biphenyls, petroleum, petroleum products, crude oil, natural gas, radioactive materials, radon, asbestos, or any by-product of same.

2.12 “Landlord Parties” means Landlord’s directors, officers, members, employees, shareholders, contractors, property managers, agents, Lenders, and other lien holders, but excluding other tenants in the Complex.

2.13 “Laws and Regulations” mean all municipal ordinances and state and federal statutes, laws and regulations now or hereafter in force, including the Environmental Laws and the Americans with Disabilities Act, 42 U.S.C. §§ 12101-12213 as well as any requirements of municipal, state, federal, or quasi-governmental authorities or utility providers now in force, or which may hereafter be in force, affecting the Complex, the Premises and/or Tenant’s use thereof.

2.14 “Lease Year” means any calendar year, or portion thereof, following the commencement hereof, the whole or any part of which period is included within the Term.

2.15 [Intentionally deleted.]

2.16 “Lines” mean communications, computer, audio and video, security and electrical (other than electrical wiring terminating at or connected to Building standard electrical outlets), cables, wires, lines, duct work, sensors, switching equipment, control boxes and related improvements at the Complex, Building or the Premises.

2.17 “Losses” mean Claims (defined in Section 12.3), liability, damages (to the extent reasonably foreseeable and proximately caused), penalties, fines, liabilities, losses (including property damage, diminution in value of Landlord’s interest in the Premises, Building or Complex, damages for the loss of use of any space or amenity within the Premises, Building, or Complex, damages arising from any adverse impact on marketing space in the Complex, sums paid in settlement of claims and any costs and expenses associated with injury, illness or death to or of any person), suits, administrative proceedings, costs and fees, including Professional Fees and expenses.

 

16

2.18 Intentionally deleted.

2.19 “Operating Costs” mean all costs and expenses incurred by or on behalf of Landlord in each Lease Year in connection with the maintenance, repair, replacement, management or operation of the Complex (including all areas and facilities within the exterior boundaries of the Complex) including, without limitation: (a) Electrical Costs and the charges for water, gas, steam, sewer, but excluding those charges for which Landlord is otherwise directly reimbursed by tenants; (b) the cost of periodic relamping and reballasting of lighting fixtures; (c) the total charges of any independent contractors employed in the repair, care, operation, maintenance, and cleaning of the Complex; (d) the amount paid or payable for all supplies and tools; (e) the, costs of climate control, window and exterior wall cleaning for buildings in the Complex; (f) costs of maintenance, repair and replacement of all improvements and structures in the Complex, including the Building and the Common Areas (subject to the requirements set forth herein on amortizing Capital Costs); (g) fees for legal, accounting, inspection and consulting services; (h) the cost of operating, repairing and maintaining elevators and utility and mechanical systems, including Lines; (i) the cost of guards and monitoring other protection services, if provided by Landlord; (j) the cost of supplying all services pursuant to Article 7 hereof to the extent not paid directly by individual tenants; (k) property owner’s association dues, assessments and other costs and expenses imposed upon Landlord by any Restrictions; (l) the cost of property, liability and other insurance for the Complex and any deductibles or self insurance related thereto, including earthquake and flood if Landlord elects to obtain such coverage; (m) Taxes; (n) management fees (but not in excess of four percent (4%) of gross Complex income); (o) any other costs or fees reasonably related to the use, operation or enjoyment of any part of the Complex; (p) amortized Capital Costs; (q) the repair, replacement, resurfacing and repaving of any paved areas, curbs, gutters or other surfaces or areas within the Complex, including reasonable reserves thereof; (r) the repair and replacement of any equipment or facilities located in or serving the Complex; (s) governmental fees and charges; and (t) reasonable costs incurred in the management and administration of the Complex, including wages, salaries, payroll taxes and fringe benefits and operating the Building management office, if any. Operating Costs shall include the foregoing costs and expenses relating to the Complex (and not directly related to the Building) to the extent of the prorated portion of such costs and expenses that is allocated to the Building. Operating Costs shall not include any Excluded Costs as defined in Exhibit D. If Landlord elects to create, such Operating Costs also include costs associated with the creation, operation and maintenance of a shower and related service facility in the Complex for use as part of Common Areas, including in Operating Expenses an amount equal to the fair market value of any previously income generating area devoted to such facility, but with Capital Costs related to such facility to be amortized as provided for in the definition of Capital Costs.

2.20 “Premises” means the portion of space in the Complex leased to Tenant hereunder, as depicted on Exhibit B-3.

2.21 “Release” means the generation, discharge, disposal, release, deposit, transport, or storage of Hazardous Materials.

2.22 “Rent” means Base Rent, Additional Rent, and all other sums required to be paid by Tenant pursuant to the terms of this Lease.

 

17

2.23 “Rentable Area” as used in the Lease means the Rentable Area of the Premises and the Rentable Area of the Building set forth in Sections 1.4 and 1.5, respectively.

2.24 “Restrictions” mean any covenants, conditions, restrictions, easements, Security Instruments, leases and any other matters or documents of record, including the CC&amp;Rs, and all amendments or modifications thereto affecting the Complex. Landlord agrees not to modify the CC&amp;Rs in any manner that would have a material adverse impact on Tenant’s use of the Premises or any of Tenant’s rights or obligations under this Lease.

2.25 “Structural” as herein used means any portion of the Premises or Complex which provides bearing support to any other integral member of the Complex such as, by limitation, the roof structure (trusses, joists, beams), posts, load bearing walls, foundations, girders, floor joists, footings, and other load bearing members constructed by Landlord.

2.26 “Sublease” means that Sublease between Tenant, or Subtenant, and Adobe Systems Incorporated, as Sublandlord, dated April, 2002, as amended by First Amendment dated October 27, 2008 and Second Amendment dated May 25, 2005, the Sublandlord’s interest in which was assigned to Landlord.

2.27 “Taxes” mean: (1) all real estate taxes and other assessments on the Building and/or Complex, as well as the real property upon which the Building and Complex are located (hereinafter the “Property”), including assessments for special improvement districts and building improvement districts, taxes and assessments levied in substitution or supplementation in whole or in part of any such taxes and assessments and the Property’s share of any real estate taxes and assessments under any reciprocal easement agreement, common area agreement or similar agreement as to the Property; (2) all personal property taxes for property that is owned by Landlord and used in connection with the operation, maintenance and repair of the Property; (3) if included in the taxes for the Building or Complex, the cost or value of any Leasehold Improvements made in or to the Premises by or for Tenant, regardless of whether title to such improvements shall be in Tenant or Landlord; and (4) all costs and fees incurred in connection with seeking reductions in any tax liabilities described in (1), (2) and (3), including any costs incurred by Landlord for compliance, review and appeal of tax liabilities. Taxes do not include any income, gross receipts, business and occupation, capital levy, franchise, capital stock, gift, estate or inheritance tax; provided, however, if after the date of this Lease, any new taxes or assessments are imposed that are based upon rents received from real property, Landlord shall be entitled to include such taxes or assessments as part of Taxes. If an assessment is payable in installments, Taxes for the year shall include the amount of the installment and any interest due and payable during that year. For all other real estate taxes, Taxes for that year shall, at Landlord’s election, include either the amount accrued, assessed or otherwise imposed for the year or the amount due and payable for that year, provided that Landlord’s election shall be applied consistently throughout the Term. If a change in Taxes is obtained for any year of the Term, then Taxes for that year will be retroactively adjusted and Landlord shall provide Tenant with a credit, if any, based on the adjustment.

2.28 “Tenant Parties” means Tenant’s directors, officers, employees, members, partners, shareholders, invitees, agents, contractors, assigns, subtenants or occupants.

 

18

2.29 [Intentionally deleted.]

2.30 “Term” means the term of the lease as specified in Section 4.3 hereof, as it may be extended for the Renewal Term, as provided for in Section 4.4.

ARTICLE 3. PREMISES

3.1 Demising Clause. Landlord leases to Tenant and Tenant leases from Landlord the Premises upon the terms and conditions set forth in this Lease. Landlord may change the shape, size, location, number and extent of the improvements to any portion of the Complex, including the Building (but not the interior of the Premises), without the consent of Tenant and without affecting Tenant’s obligations hereunder if such change does not have a material adverse impact on Tenant’s access to or parking for the Premises. Landlord reserves the area beneath and above the Building with the right to install, maintain, use, repair and replace pipes, ducts, Lines, and structural elements leading through the Premises serving other parts of the Complex, so long as such items are concealed by wails, flooring or ceilings and Landlord uses reasonable efforts to minimize their effect on Tenant’s operation of its business in the Premises, which measures shall include, without limitation, scheduling any such work for weekends or nights, whenever reasonably possible, accelerating the work whenever reasonably possible, and daily clean up of the affected portions of the Premises. Such reservation in no way affects the maintenance obligations imposed herein. Tenant shall be entitled to use the Common Areas in common with other tenants of the Complex. If in the future Landlord builds a shower and locker room in the Complex that is available to all Complex tenants, Tenant shall be permitted to use such under the terms and conditions on which such is generally made available to Complex users.

3.2 Restrictions. The Parties agree that this Lease is subject and subordinate to the effect of and Tenant will comply with (a) any Restrictions; (b) the Laws and Regulations; and (c) general and special taxes not delinquent.

ARTICLE 4. TERM AND POSSESSION

4.1 Commencement Date. July 15, 2010 is the Commencement Date for this Lease.

4.2 Compliance with Laws; Possession; Landlord Delay. Landlord warrants that, to its actual knowledge, the Premises are in compliance with all Laws and Regulations in effect as of the date of this Lease. Other than the foregoing warranty, and as Tenant has been, and will be, occupying the Premises under terms of the Sublease, the Premises are accepted by Tenant in “AS IS” condition and configuration without any representations or warranties by Landlord.

4.3 Term. The base Term of this Lease shall start on the Commencement Date and shall be for the term specified in Section 1.7 hereof.

4.4 Renewal. If Tenant is not in default hereunder and has not previously been in default beyond the applicable cure period, Tenant shall have the option to renew this Lease for a five (5) year (the “Renewal Term”), which shall begin at the end of the Section 4.3 base Term of this Lease. To exercise its renewal option Tenant must give Landlord written notice thereof not less than twelve (12) months, not more than fifteen (15) months prior to the end of the base Term of this Lease. If Tenant timely .exercises its renewal option, this Lease shall continue in

 

19

effect as written, except that Base Rent for the Renewal Term shall be adjusted as provided for in Section 5.1 (b) and there shall be no further renewal options. The renewal option is personal to the Tenant which signed the Lease and may not be exercised by an assignee, subtenant or successor except in connection with a Permitted Transfer.

4.5 Closures. Landlord has the right, but not the obligation; in its sole and absolute discretion to temporarily close the Building or access to portions thereof, including any Common Area and the Premises, if there is any act or threat of any act of terrorism, war, violence, vandalism, civil unrest, riot or other event that may pose a threat to the public safety or damage to the Building, including any advisory warning or notice from the Office of Homeland Security or any other federal, state or local governmental or enforcement agency (herein referred to as an event of “Civil Unrest”). Tenant agrees to comply with any notice from Landlord or any governmental agency to close the Building or portions thereof and to immediately cause all of its employees, agents, contractors and invitees to vacate the Building. Landlord will not be responsible for any loss or damage to Tenant’s business as a result, and Tenant will not be entitled to any abatement in rent or other relief of its obligations under this Lease for any period of time when Tenant may not have access to the Premises or Building due to any Civil Unrest

ARTICLE 5. RENT

5.1 Payment.

(a) As consideration for this Lease, Tenant shall pay Landlord all Rent specified in this Lease. Base Rent is payable in advance on the first day of each month of the Term at the Rent Payment Address or such other address specified by Landlord. Additional Rent or sums other than Rent requested by Landlord under the terms of this Lease are payable within ten days of Notice or demand unless a different time period is expressly specified in the Lease. If the Term commences on other than the first clay of the month, the Rent for the first partial month shall be prorated accordingly.

(b) If Tenant exercises its renewal option, the Base Rental rate(s) for the Renewal Term shall be equal to the fair market rate(s), including all concessions, for a five (5) year term for a comparable lease for comparable Class A space located in Fremont/South Lake Union area of the City of Seattle (collectively “Fair Market Rent”). Landlord shall advise Tenant in writing of Landlord’s calculation of Fair Market Rent by no later than ten (10) months prior to the end of the base Lease Term. If Tenant disagrees with such calculation, it shall advise Landlord in writing thereof within twenty (20) days thereafter. If there is a disagreement on such calculation, the parties shall promptly meet to attempt to resolve their differences. If these differences as to Fair Market Rent arc not resolved within a two (2) month period, then the parties shall submit the matter to arbitration in accordance with the terms of Section 5.1(c) so that Fair Market Rent is determined no later than two (2) months prior to the end of the base Term of this Lease.

(c) If the parties are unable to reach agreement on Fair Market Rent during the period specified in Section 5.1(b), then within ten (10) days thereafter either party may advise the other in writing of the name and address of its arbitrator. The arbitrator shall be an appraiser or commercial real estate broker with at least ten (10) years of experience with

 

20

commercial rental rates in Fremont/South Lake Union area of the City of Seattle. Within ten (10) business days after receipt of such notice from the initiating party (the “Instigator”) designating its arbitrator, the other party (the “Recipient”) shall give notice to Instigator, specifying the name and address of the person designated by Recipient to act as arbitrator on its behalf who shall be similarly qualified. If Recipient fails to notify Instigator of the appointment of its arbitrator, within or by the time above specified, then the arbitrator appointed by Instigator shall be the arbitrator to determine the issue. The duty of the arbitrator(s) shall be to determine the Fair Market Rent. If the two (2) arbitrators are so chosen the arbitrators so chosen shall meet within ten (10) business days after the second arbitrator is appointed and, if within ten (10) business days after such first meeting the two arbitrators shall be unable to agree promptly upon a determination of Fair Market Rent, they, themselves, shall appoint a third arbitrator, who shall be a competent and impartial person with qualifications similar to those required of the first two arbitrators. If they are unable to agree upon such appointment within five (5) business days after expiration of said ten (10) day period, the third arbitrator shall be selected by the parties themselves, if they can agree thereon, within a further, period of ten (10) business days. If the parties do not so agree, then either party, on behalf of both, may request appointment of such a qualified person by the then presiding judge of King County Superior Court acting in his or her private non judicial capacity, and the other party shall not raise any question as to such judge’s full power and jurisdiction to entertain the application for and make the appointment, and the parties agree to indemnify and hold the presiding judge fully and completely harmless from and against all claims arising out of the presiding judge’s appointment of an arbitrator. The three (3) arbitrators shall decide the dispute, if it has not been previously resolved, by following the procedure set forth in this Section. Where the issue cannot be resolved by agreement between the two arbitrators selected by Landlord and Tenant or settlement between the parties during the course of arbitration, the issue shall be resolved by the three arbitrators in accordance with the following procedure. The arbitrators selected by each of the parties shall state in writing his or her determination of the Fair Market Rent supported by the reasons therefor with counterpart copies to each party. The arbitrators shall arrange for a simultaneous exchange of such proposed resolutions. The role of the third arbitrator shall be to select which of the two proposed resolutions most closely approximates his or her determination of Fair Market Rent. The third arbitrator shall have no right to propose a middle ground or any modification of either of the two proposed resolutions. The resolution he or she chooses as most closely approximating his or her determination shall constitute the decision of the arbitrators and be final and binding upon the parties.

(i) In the event of a failure, refusal or inability of any arbitrator to act, his or her successor shall be appointed by him, but in the case of the third arbitrator, his or her successor shall be appointed in the same manner as provided for appointment of the third arbitrator. The arbitrators shall attempt to decide the issue within ten (10) business days after the appointment of the third arbitrator. Any decision in which the arbitrator appointed by Landlord and the arbitrator appointed by Tenant concur shall be binding and conclusive upon the parties. Each party shall pay the fee and expenses of its respective arbitrator and both shall share equally the fee and expenses of the third arbitrator, if any, and the attorneys’ fees and expenses of counsel for the respective parties and of witnesses shall be paid by the respective party engaging such counsel or calling such witnesses.

 

21

The arbitrators shall have the right to consult experts and competent authorities with factual information or evidence pertaining to a determination of Fair Market Rent. The arbitrators shall render their decision and award in writing with counterpart copies to each party. The arbitrators shall have no power to modify the provisions of this Lease.

5.2 No Set Off. All Rent due under this Lease shall be paid without prior notice, demand, deduction, setoff, offset, counterclaim, suspension or abatement except as expressly provided in Articles 13 and 19.

5.3 Advance Rent. [Intentionally deleted].

5.4 Late Charges; Interest. Tenant acknowledges that late payment of Rent or other sums due under the Lease will cause Landlord to incur costs not contemplated by this Lease, the exact amount being extremely difficult and impractical to fix. Such costs include processing and accounting charges, late charges that may be imposed on Landlord by the terms of any encumbrance covering the Premises, and interest costs. If Landlord does not receive Rent or any other payment due from Tenant five (5) days after Notice from Landlord that such payment is past due, Tenant shall pay to Landlord an additional sum of ten percent (10%) of such Rent or other payment as a late charge; provided, however, after the first notice in any twelve (12) month period, no further notice shall be required and the late charge shall be imposed after five (5) days. The Parties agree that this late charge represents a fair and reasonable estimate of the cost Landlord will incur by reason of Tenant’s late payment. Accepting any late charge does not waive Tenant’s default with respect to the overdue amount or prevent Landlord from exercising any other rights or remedies available to Landlord. In addition to the late charge, Tenant shall pay interest at the rate of twelve percent (12%) per annum on any Rent or other sum not paid by the date due.

ARTICLE 6. SECURITY DEPOSIT

Intentionally omitted.

ARTICLE 7. SERVICE AND EQUIPMENT

7.1 Climate Control. Landlord shall provide climate control to the Premises from 7:00 a.m. to 6:00 p.m. on weekdays and from 9:00 a.m. to 1:00 p.m. on Saturdays (Sundays and nationally enacted holidays excepted) (the “Climate Control Hours”) to maintain a temperature adequate for comfortable occupancy, provided that Landlord shall have no responsibility or liability for failure to supply climate control service when making repairs, alterations or improvements or when prevented from so doing by strikes or any cause beyond Landlord’s reasonable control, so long as Landlord uses reasonable and diligent efforts to restore service and minimize any interruptions after receiving notice of any failure or interruption of service from Tenant. Any climate control furnished for periods not within the Climate Control Hours pursuant to Tenant’s request shall be at Tenant’s sole cost and expense in accordance with rate schedules promulgated by Landlord from time to time which reflect all of Landlord’s costs related thereto. As of the date of mutual execution of this Lease, the rate for after hours service is $35 per hour. Tenant acknowledges that Landlord has installed in the Building a system for the purpose of climate control. Any use of the Premises not in accordance with the design

 

22

standards or any arrangement of partitioning which interferes with the normal operation of such system may require changes or alterations in the system or ducts through which the climate control system operates. Any changes or alterations so occasioned, if such changes can be accommodated by Landlord’s equipment, shall be made by Tenant at its cost and expense but only with the written consent of Landlord first had and obtained, and in accordance with drawings and specifications and by a contractor first approved in writing by Landlord. If installation of partitions, equipment or fixtures by Tenant necessitates the re-balancing of the climate control equipment in the Premises, Landlord will perform the re-balancing at Tenant’s expense. Any charges to be paid by Tenant hereunder shall be due within ten (10) business days of receipt of an invoice from Landlord, which invoice may precede Landlord’s expenditure for the benefit of Tenant.

7.2 Elevator Service. Landlord shall provide elevator service (which may be with or without operator at Landlord’s option) provided that Tenant, its employees, and all other persons using such services shall do so at their own risk. Usage after normal business hours may require a card or other form of identification for access to the elevator.

7.3 Cleaning Public Areas. Landlord will maintain and keep clean the street level lobbies, sidewalks, truck dock, public corridors and other public portions of the Building.

7.4 Refuse Disposal. Tenant shall pay Landlord as Additional Rent the cost of any removal from the Premises and the Building of such refuse and rubbish of Tenant that is disproportionate in quantity or unusual in nature to what is being generated by other tenants in the Building.

7.5 Janitorial Service. Landlord shall provide routine cleaning and janitorial service for the Premises and in and about the Complex after hours Sunday through Thursday (holidays excepted) in accordance with standards for similar standards for like buildings in Seattle, Washington.

7.6 Interruptions. Landlord does not warrant that any of the services referred to above or any other services and/or utilities that Landlord may supply or which are supplied will be free from interruption and/or the need for maintenance and repairs or replacement. Landlord shall not be responsible or liable for any interruption or failure in utility, telecommunication or other services, including the Lines, so long as Landlord uses reasonable and diligent efforts to restore service and minimize any interruptions after receiving notice of any failure or interruption of service from Tenant, nor shall such interruption or failure affect the continuation or validity of this Lease; provided, that Base Rent and Additional Rent shall abate during any period that Tenant is unable to conduct normal business operations in the Premises as a result of such an interruption that is attributable to Landlord’s negligence or breach of this Lease and continues for longer than two (2) business days, but only for the period thereafter. Tenant acknowledges that any one or more such services may be suspended or reduced by reason of unavoidable emergency repairs, by strikes or accidents, by any cause beyond the reasonable control of Landlord, or by orders or regulations of any federal, state, county or municipal authority. In addition, Landlord shall have no liability for damages arising from, and Landlord does not warrant that Tenant’s use of any Lines will be free from, (a) any eavesdropping or wire-tapping by unauthorized parties, (b) any failure of any Lines to satisfy Tenant’s requirements, or

 

23

(c) any shortages, failures, variations, interruptions, disconnections, loss or damage caused by installation, maintenance, replacement, use or removal of Lines by or for other occupants of the Complex, by any failure of the environmental conditions or the power supply for the Building to conform to any requirements for the Lines or any associated equipment or any other problems associated with any Lines by any other cause. Landlord shall use reasonable, diligent and good faith efforts to minimize the impact and duration of any shortages, failures, variations, interruptions, disconnections. Any such interruption or suspension of services shall not be deemed an eviction or disturbance of Tenant’s use and possession of the Premises or any part thereof, nor render Landlord liable to Tenant for damages by abatement of Rent, nor relieve Tenant of performance of Tenant’s obligations under this Lease except as provided above.

7.7 Alternative Telecommunications Provider. If Tenant wishes to utilize the services of a telephone or telecommunications provider whose equipment is not servicing the Building as of the date of Tenant’s execution of this Lease (“Provider”), no such Provider shall be permitted to install its Lines or other equipment within the Building without first securing the prior written consent of Landlord which consent shall not be unreasonably withheld. Landlord shall incur no expense whatsoever with respect to any aspect of Provider’s provision of its services, including without limitation, the costs of installation, removal, relocation or modification or materials and services. Prior to the commencement of any work in or about the Building by Provider, Provider must agree in writing to abide by such rules and regulations, job site rules, and such other requirements as reasonably determined by Landlord to be necessary to protect the interests of Landlord.

ARTICLE 8. ASSIGNMENT AND SUBLETTING

8.1 Restriction on Transfer. Except as expressly provided in Article 8, Tenant will not, either voluntarily or by operation of law, assign, mortgage, hypothecate, encumber or otherwise transfer this Lease or any interest herein or sublet or license the Premises or any part thereof, or permit the use or occupancy of the Premises by any party other than Tenant (each a “Transfer”), without the prior written consent of Landlord, which Landlord agrees it shall not unreasonably withhold, condition or delay. For purposes of this Article, and except in the case of a Permitted Transfer (as defined in Section 8.6 below), if Tenant is a corporation, limited liability company, partnership or other entity any transfer, assignment, encumbrance or hypothecation of fifty percent (50%) or more (individually or in the aggregate) of any stock or other ownership or beneficial interest hi such entity, if made for the purpose of circumventing the restrictions on Transfer contained in this Article 8, will be deemed a Transfer and will be subject to all of the restrictions and provisions contained in this Article. The immediately preceding sentence will not apply to public corporations, the stock of which is traded through a public exchange.

8.2 Transfer Notice. If Tenant desires to effect a Transfer, at least thirty (30) days prior to the date when Tenant desires the Transfer to be effective (the “Transfer Date”), Tenant will give Notice (the “Transfer Notice”), stating the name, address and business of the proposed assignee, subtenant or other transferee (the “Transferee”) a description of the Premises, or portion thereof, to be Transferred (the “Transfer Premises”), the proposed Transfer Date, the relationship, if any, between Tenant and the Transferee, a current balance sheet and most recent quarterly and annual profit and loss statement and a business history of the Transferee. The Notice must be accompanied by such other information in such detail as Landlord may reasonably require concerning the character and ownership.

 

24

8.3 Landlord’s Options. Within ten (10) days of receipt of a Transfer Notice and all financial information, Landlord will notify Tenant of its election to do one of the following: (i) consent to the proposed Transfer subject to such reasonable conditions as Landlord may impose in providing such consent (which shall not entail changes to the rights or the obligations of either party under the Lease); (ii) refuse such consent, which refusal shall be on reasonable grounds; or (iii) terminate this Lease as to any portion of the Premises which is proposed to be assigned, or any portion of the Premises Which exceeds, individually or in the aggregate when combined with prior subleases, 6,700 square feet which is proposed to be sublet, and recapture that portion of the Premises for reletting by Landlord, unless Tenant elects to terminate the Transfer and retain the Premises.

8.4 Additional Conditions. A condition precedent to any Transfer will be the delivery to Landlord of evidence of insurance as required under the Lease and the correct legal name and notice address for the Transferee. Tenant (“Transferor”) agrees to pay Landlord, as Additional Rent, seventy-five percent (75%) of all sums and other consideration payable to and for the benefit of Tenant by the Transferee in excess of the Rent payable under the Lease for the same period and portion of the Premises. In calculating excess Rent-or other consideration which may be payable to Landlord under this paragraph, Tenant will be entitled to deduct a monthly amortization of commercially reasonable third party brokerage commissions and attorney’s fees and other amounts reasonably and actually expended by Tenant in connection with the Transfer if acceptable written evidence of such expenditures is provided to Landlord. No Transfer will release Transferor (or any prior Transferor) of Tenant’s obligations under this Lease or-alter the primary liability of Transferor (or any prior Transferor) to perform all obligations to be performed by Tenant hereunder. Landlord may require that Transferee remit directly to Landlord on a monthly basis, all monies due Transferor by said Transferee. Consent by Landlord to one Transfer will not be deemed consent to any subsequent Transfer. In the event of default by Transferee, Tenant or any successor of Tenant in the performance of any other terms hereof; Landlord may proceed directly against Transferor without the necessity of exhausting remedies against Transferee or successor. If Tenant requests the consent of Landlord to a Transfer, Tenant will pay Landlord a review fee of $500.00 and shall also reimburse Landlord for all of Landlord’s reasonable attorney’s fees.

8.5 Recapture. By Notice to Tenant (the “Termination Notice”) within ten (10) days after Landlord receives the information specified in Section 8.2, Landlord may terminate this Lease in the event of a Transfer of the Lease as to the entire Premises, or terminate this Lease as to the portion of the Premises to be transferred, if the Transfer is for less than the entire Premises, unless Tenant elects to terminate the Transfer and retain the Premises as provided in Section 8.3 above. If Landlord elects to terminate this Lease as to the Transfer Premises, an amendment to this Lease shall be executed restating the description of the Premises and reducing Tenant’s obligations for Rent and other charges in proportion to the reduction in rentable area of the Premises. In the event Landlord elects to recapture Tenant may elect to terminate the transfer and retain the premises. In such event, unless the parties otherwise agree, the date, on which the termination shall take effect, shall be the date of the proposed transfer identified in Tenant’s notice. If Landlord elects a whole or partial termination hereunder, Landlord may enter into a

 

25

new lease with the intended Transferee or any other person covering the Transfer Premises on such terms as Landlord and such person may agree. In such event, Tenant shall not be entitled to any portion of the profit that Landlord may realize on account of such termination and reletting. Upon the termination of this Lease, the Parties shall have no further obligations to each other under this Lease except for matters occurring or obligations arising prior to the date of such termination.

8.6 Permitted Transfers. Notwithstanding anything contained herein to the contrary, provided that the net worth of the resulting or successor entity is at least equal to the greater of (i) $52,200,000 or (ii) the audited (if available) or tangible net worth of Tenant (as certified by an independent certified public accountant, if there are not audited financial statements) immediately prior to such merger or consolidation, Landlord hereby consents to an assignment of this Lease or a subletting of all or part of the Premises to (a) the parent of Tenant or to a wholly-owned subsidiary of Tenant, (b) to any corporation in whom or with which Tenant may be merged or consolidated, (c) any entity to whom all of Tenant’s stock is sold, or to whom substantially all of Tenant’s assets are sold, (d) the resulting entity following the conversion, merger or consolidation of Tenant into a limited liability company or limited liability partnership, provided in all of the above instances (“Permitted Transfers”), that (x) such entity expressly assumes all of Tenant’s obligations hereunder, (w) Tenant shall remain liable under this Lease, (x) Landlord is provided with evidence that insurance required of Tenant under this Lease is in effect on the transfer date, (y) the named Guarantor affirms in writing that its guaranty remains in full force and effect, unaffected by the Permitted Transfer and (z) Landlord shall receive a copy of the executed Transfer document promptly after execution.

ARTICLE 9. PROPERTY INSURANCE

9.1 Landlord’s Insurance. Landlord (i) shall maintain (a) Real Property – Special Form (All Risk) or comparable insurance covering the Building and (b) Commercial General Liability insurance, and (ii) may maintain earthquake, pollution legal liability, terrorism, boiler and machinery, and any other insurance commonly maintained by institutional owners of commercial real estate or that is required by Lender (collectively “Landlord Insurance”). Such insurance shall be issued in the names of Landlord and Lender, as their interests appear, shall be for the sole benefit of such parties and under their sole control, and shall provide for waiver of subrogation consistent with Section 12.2 of this Lease.

9.2 Use of Premises. No use shall be made or permitted to be made on the Premises, nor acts done, by Tenant or any of its invitees, contractors or agents which will increase the existing rate of insurance upon the Building in which the Premises are located or upon any other building or improvement in the Complex or cause the cancellation of any Landlord Insurance. Tenant or Tenant Parties shall not sell, or permit to be kept, used or sold, in or about the Premises, any article that may be prohibited by Landlord Insurance. At its sole cost and expense, Tenant shall comply with all requirements of any insurance company, necessary to maintain property damage and commercial general liability insurance covering the Premises, Building, or Complex.

9.3 Increase in Premiums. Tenant agrees to pay to Landlord, as Additional Rent and not as part of Operating Costs, any increase in premiums on policies which may be carried by

 

26

Landlord on the Premises, the Building or the Complex., or any blanket policies which include the Building or Complex, covering damage thereto and loss of Rent caused by fire and other perils resulting from the nature of Tenant’s occupancy or any act or omission of Tenant. These payments are in addition to any insurance payments under Exhibit E.

ARTICLE 10. TENANT’S INSURANCE

At its expense, Tenant shall obtain and keep in force during the Term, and provide coverage after expiration of the Term for events occurring during the Term, insurance as set forth below against claims for injuries to persons or damages to property arising from or in connection with Tenant’s operation and use of the Premises, If Tenant fails to obtain any insurance required of it under this Lease, Landlord may, at its option, but is not obligated to, obtain such insurance on behalf of Tenant and bill the cost to Tenant, as Additional Rent.

(a) Special Form (all risk) insurance policy covering: (i) business personal property, leasehold improvements on a replacement cost basis, subject to a deductible no greater than $25,000; (ii) one year’s business income and extra expense from Tenant’s operations on the Premises; which policy shall include waiver of subrogation rights of insurer against Landlord consistent with Section 12.2.

(b) Commercial General Liability policy for bodily injury, personal injury and property damage with limits of not less than $1,000,000 per occurrence and $2,000,000 annual aggregate basis. Landlord shall have the right to require an increase in such limits during the Term to reflect changes in industry standards, Endorsements satisfying the following requirements shall be affixed: (i) Landlord, Lender and, if specifically designated by Landlord in writing, Landlord’s affiliates and Landlord’s property manager, shall be named as additional insureds; (ii) Tenant’s policy shall be primary, not contributing with, and not in excess of any other applicable insurance carried by Landlord; (iii) Tenant’s policy shall extend to and include injuries to persons and damage to property arising in connection with any alterations or improvements to or about the Premises performed by or on behalf of Tenant; and (iv) Tenant’s policy shall include contractual liability coverage.

(c) Business Auto Liability covering all owned, non-owned and hired vehicles with a limit of $1,000,000 per accident.

(d) Workers’ Compensation on a statutory basis.

(e) Umbrella Liability with a $5,000,000 per occurrence/annual aggregate limit.

ARTICLE 11. INSURANCE POLICY REQUIREMENTS

All insurance policies to be carried by Tenant hereunder shall conform to the following requirements:

(a) The insurer in each case shall carry a designation in “Best’s Insurance Reports” as issued from time to time throughout the Term as follows: Policyholders’ rating of A-; financial rating of not less than VII;

 

27

(b) The insurer shall be qualified to do business in the State;

(c) Certificates of insurance shall be delivered to Landlord at commencement of the term and certificates of renewal at least five (5) business days prior to the expiration of each policy; and

(d) Each policy shall require that the insurer notify Landlord in writing at least thirty (30) days prior to any cancellation or expiration of such policy, or any reduction in the amounts of insurance carried.

ARTICLE 12. INDEMNIFICATION, WAIVER OF CLAIMS AND SUBROGATION

12.1 Intent and Purpose. The Parties intend that the indemnity and waiver of claims provisions of this Lease assigns the risk for a particular casualty to the party obligated to carry the insurance for such risk (which is not a limitation of the assignment of the risk), without respect to the causation (other than due to the intentional and wrongful acts of a party), but including the Parties’ negligence.

12.2 Waiver of Subrogation. The Parties release each other from any claims for damage to the Promises, Building and Complex, and to the furniture, fixtures, and other business personal property, Tenant’s improvements and alterations of either Landlord or Tenant, in or on the Premises, Building and Complex, and for loss of income, to the extent such damages or loss are actually covered and proceeds are actually paid by insurance policies maintained by the Parties or that would have been covered by insurance policies required of the Parties under this Lease.

12.3 Indemnity. Except to the extent caused by Landlord’s negligence or willful acts and subject to the waiver of subrogation set forth in Section 12.2, Tenant shall indemnify, defend, protect and hold harmless Landlord from and against all actions, claims, demands, damages, liabilities, Losses, penalties and expenses of any kind (“Claims”) brought against or imposed upon Landlord or which Landlord may pay or incur by reason of injury to person or property, from whatever cause including the negligence of the Parties hereto, in any way connected with (a) the use of the Premises or Alterations, improvements or personal property therein or thereon, by Tenant or Tenant Parties; (b) any violation or alleged violation by Tenant or any Tenant Parties of any Laws and Regulations; (c) any liability under any Laws and Regulations by Tenant or any Tenant Parties; (d) any breach of the provisions of Article 16 by Tenant or any Tenant Parties; or (e) any Release of Hazardous Materials on the Premises, Building or Complex by Tenant or Tenant Parties. Tenant shall also reimburse Landlord costs of cleanup, remediation, removal and restoration that are in any way related to any matter covered by the foregoing indemnity. Except to the extent caused by Tenant’s negligence or willful acts and subject to the waiver of subrogation set forth in Section 12.2, Landlord shall indemnify, defend, protect and hold harmless Tenant from and against all actions, Claims brought against or imposed upon Tenant or which Tenant may pay or incur by reason of injury to persons to the extent caused by Landlord’s or Landlord Parties’ gross negligence, any violation or alleged violation by Landlord or Landlord Parties of any Laws and Regulations, or the Release of Hazardous Materials on the Premises, Building or Complex by Landlord or Landlord Parties. In the event a Claim was caused by the concurrent negligence of an indemnified party, the

 

28

indemnifying party’s indemnification obligation with respect to the indemnified party shall be limited to the extent of the negligence of the indemnifying party, and provided further that in no event shall the indemnifying party be obligated to indemnify an indemnified party for a Claim which arises out of or results from the sole negligence of the indemnified party. For the sole purpose of giving full force and effect to the indemnification obligations under this Agreement and not for the benefit of any employees of Tenant or any third parties unrelated to the parties indemnified under this Agreement, Tenant specifically and expressly waives any immunity that may be granted it under the Washington State Industrial Insurance Act, Title 51 RCW. Further the indemnification obligations under this Agreement shall not be limited in any way by any limitation on the amount or type of damages, compensation or benefits payable to or for any third party under the Washington State Industrial Insurance Act or other employee benefit acts. Tenant’s obligations under this Section survive the expiration or termination of the Lease.

 

 	
/s/ JS

 	
 	Tenant’s Initials	 	
12.4 Waiver of Claims. Except as arising from the gross negligence or willful misconduct of Landlord, the breach of any express warranties made by Landlord, Tenant releases and waives all Claims against Landlord for damages or injury from any cause arising at any time, including the negligence of the Parties, for damages to goods, wares or merchandise of Tenant or any Tenant Parties and loss of business in, upon or about the Premises or Complex and personal injury to Tenant’s agents or employees, invitees or third persons in, upon, or about the Premises or Complex. It is understood and agreed that the release set forth herein extends to all claims of every nature and kind whatsoever, known or unknown, suspected or unsuspected.

12.5 References. Wherever the term Landlord, Tenant or the Parties is used in this Article, and such party is to receive the benefit of a provision of this Article, such term shall also refer also to the Party’s officers, directors, shareholders, employees, partners, agents, mortgagees and other lien holders.

ARTICLE 13. DESTRUCTION

13.1 Rights of Termination. If the Premises suffer an Uninsured Property Loss or a property loss which cannot be repaired within one hundred ninety five (195) days from the date of destruction, as determined by Landlord, Landlord may terminate this Lease as of the date of the damage (the “Loss Date”) upon Notice to Tenant, If the Premises cannot be repaired within one hundred ninety five (195) days of the Loss Date, as determined by Landlord and stated in Landlords Notice to Tenant, Tenant may elect to terminate this Lease by Notice to Landlord given within twenty (20) days of Landlord’s Notice that the restoration time will exceed one hundred ninety five (195) days. Landlord’s Notice shall be given within forty five (45) days of the Loss Date or as soon thereafter as the restoration time can be determined. “Uninsured Property Loss” is any damage or destruction for which the insurance proceeds available to Landlord are insufficient to pay for the repair or reconstruction of the Premises.

13.2 Repairs. In the event of a casualty that may be repaired within one hundred ninety five (195) days from the Loss Date, or if the Parties do not elect to terminate this Lease under Section 13.1, this Lease shall continue in full force and effect and Landlord shall promptly

 

29

undertake to make repairs to reconstitute the Premises to as near as practicable to the condition as existed prior to the Loss Date. The partial destruction shall .in no way void this Lease but Tenant shall be entitled to a proportionate reduction of Base Rent and any Additional Rent following the property loss until the time the Premises are restored to the extent of Landlord’s recovery under its rent abatement insurance for the Premises. Landlord’s obligations to restore shall in no way include any construction originally performed by Tenant or subsequently undertaken by Tenant.

13.3 Repair Costs. The cost of any repairs to be made by Landlord pursuant to Section 13.2 shall be paid by Landlord using available insurance proceeds.

13.4 Waiver. Tenant hereby waives all statutory or common law rights of termination in respect to any partial destruction or property loss which Landlord is obligated to repair or may elect to repair under the terms of this Article. Further, in event of a property loss occurring during the last two years of the original term hereof or of any extension, Landlord need not undertake any repairs and may cancel this Lease unless Tenant has the right under the terms of this Lease to extend the term for an additional period of at least five (5) years and does so within thirty (30) days of the date of the property loss.

13.5 Landlord’s Election. If the Complex or Building is destroyed by more than thirty percent (30%) of the replacement cost, Landlord may elect to terminate this Lease, whether the Premises are damaged or not, as set forth in Section 13.1. A total destruction of the Complex terminates this Lease.

ARTICLE 14. ACCORD AND SATISFACTION

No payment by Tenant or receipt by Landlord of less than the full Rent due hereunder shall be deemed to be other than on account of the earliest due Rent. No endorsement or statement on any check or any letter accompanying any check or payment will be deemed an accord and satisfaction and Landlord may accept such payment without prejudice to Landlord’s right to recover the balance of such Rent or pursue any other remedy available in this Lease, at law or in equity. Landlord may accept partial payment from Tenant without invalidation of any contractual notice required to be given herein and without invalidation of any notice required to be given by law.

ARTICLE 15. USE

15.1 Use. The Premises may be used and occupied only for general office use (hereinafter “Permitted Use”) and for no other use. Tenant shall not use or permit the use of the Premises in any manner that will disturb any other tenant in the Building or Complex, or obstruct or interfere with the rights of other tenant or occupants of the Building or Complex, or injure or annoy them or create any unreasonable smells, noise or vibrations (taking into account the nature and tenant-mix of the Building). Tenant shall not allow the Premises to be used for any unlawful or objectionable purpose, nor shall Tenant cause, maintain, or permit any nuisance or waste in, on or about the Premises, Building or Complex. Tenant shall comply with all Laws and Regulations affecting the operation of Tenant’s business and the use, condition, configuration and occupancy of the Premises. Tenant shall comply with the rules and regulations of the Building attached as Exhibit F (the “Rules and Regulations”) and such other reasonable rules and regulations adopted by Landlord from time to time.

 

30

15.2 Parking. Tenant shall be entitled to use and shall in all cases be charged for, one hundred thirty (130) parking stalls on levels P1 and P2 of the Complex garage at locations designated on Exhibit B-4. Tenant will relinquish ten (10) of its currently subleased parking stalls on the earlier of (a) July 15, 2010, or (b) another tenant’s occupancy of the Relinquished Space, as defined in Section 30.25, with all of the relinquished stalls to be on Level P2 as noted on Exhibit B-4. Thereafter, Tenant shall have the right at any time on ninety (90) days prior written notice to Landlord specifying the parking stalls to be relinquished to relinquish use of up to twenty (20) parking stalls in the locations indicated on Exhibit B-4 for a minimum period of at least twelve (12) consecutive months. If Tenant so elects to relinquish use of such parking stalls, it shall have the right to resume use of all or paid of such relinquished parking stalls after the twelve (12) month period upon ninety (90) days prior written notice specifying the relinquished stalls which it intends to use. If it elects to resume such use, it must continue such use for at least twelve (12) consecutive months. Tenant shall not be charged for any relinquished parking stalls during the period of such relinquishment. Parking rates for Tenant’s stalls shall be as follows: $75 per month per stall for the period July 15, 2010 – July 31, 2012; $100 per month per stall for the period August 1, 2012 – July 31, 2015; and at market rates for such stalls thereafter, but in no event shall rates for Tenant’s Stalls be increased more frequently than annually thereafter. As used herein “market rates” refers to parking rates charged for the following properties in the general Fremont area, being deemed comparable properties for parking purposes the parking rates which were in the $125 - $130 per month range at the date of the execution of this Lease: Park View Building, Waterside Building, Canal View Building, Evanston Building and Lake View Building. Tenant shall comply with the rules and regulations applicable to the Complex garage.

15.3 New Climate Measures; LEED.

(a) Landlord and Tenant acknowledge that it is likely that new laws will be enacted dealing with energy conservation, CO2 emissions, transportation and other matters related to global climate change (“Climate Measures”) and that existing Climate Measures policies will be implemented through the adoption of governmental rules and regulations (such laws, rules and regulations being collectively referred to herein as “New Climate Measures”) which could increase the obligations of, and restrictions on, Landlord related to the Building from those which existed on the date of this Lease. Tenant covenants to comply with the requirements of New Climate Measures applicable to Tenant and to cooperate reasonably with Landlord in connection with satisfying Landlord’s compliance requirements with respect to the climate measures and to any U.S. Green Building Council’s Leadership in Energy and Environmental Design programs (“LEED”) measures implemented by Landlord, including, but not limited to, providing Landlord with monitoring data and reporting duties related to the Premises.

(b) Tenant acknowledges that the Building is or may become in the future certified under the LEED rating system. Landlord’s sustainability practices address whole-building operations and maintenance issues including chemical use; indoor air quality; energy efficiency; water efficiency; recycling programs; exterior maintenance programs; and systems

 

31

upgrades to meet green building energy, water, indoor air quality, and lighting performance standards. All construction and maintenance methods and procedures, material purchases, and disposal of waste must be in compliance with minimum standards and specifications, in addition to all applicable laws. Tenant shall cooperate reasonably with Landlord to comply with Landlord’s sustainability practices.

(c) Effective as of the Commencement Date, Tenant shall use proven energy and carbon reduction measures, including energy efficient bulbs in task lighting; use of lighting controls; daylighting measures to avoid overlighting interior spaces; closing shades in the Premises to avoid overheating the space; turning off lights and equipment at the end of the work day; purchasing ENERGY STAR® qualified equipment, including but not limited to lighting, office equipment, commercial and residential .quality kitchen equipment, vending and ice machines; and purchasing products certified by the U.S. EPA’s Water Sense® program.

ARTICLE 16. COMPLIANCE WITH LAWS AND REGULATIONS

16.1 Tenant’s Obligations. At its sole cost and expense, Tenant shall comply with and faithfully observe all Laws and Regulations in the use or occupancy of the Premises, Tenant’s obligation to comply with and observe the Laws and Regulations shall apply regardless of whether such Laws and Regulations regulate or relate to Tenant’s particular use Of the Premises or relate to the use of premises in general, and regardless of the cost thereof. A judgment of any court of competent jurisdiction, or the admission of Tenant in any action or proceeding against Tenant, whether Landlord be a party thereto or not, that any Laws and Regulations pertaining to the Premises have been violated, is conclusive of that fact as between Landlord and Tenant.

16.2 Condition of Premises. Tenant hereby accepts the Premises in “AS IS” condition as of the date of this Lease, subject to all applicable Laws and Regulations, Restrictions, and requirements in effect during any part of the Term regulating the Premises, and without other representation, warranty or covenant by Landlord, express or implied, as to the condition, habitability or safety of the Premises, the suitability or fitness thereof for their intended purposes. Tenant acknowledges that the Premises in such condition are in good and sanitary order, condition and repair.

16.3 Hazardous Materials. Tenant shall use and store in the Premises and Complex only ordinary and general office, dental and cleaning supplies containing Hazardous Materials in normal and customary amounts and such other Hazardous Materials as have been previously approved by Landlord in writing (which approval may be withheld in Landlord’s sole and absolute discretion) and which are reasonably necessary for Tenant’s business. All such Hazardous Materials approved by Landlord shall be limited to quantities consistent with the approved use of the Premises and shall be used, stored and disposed of in full compliance with all Environmental Laws. All medical and dental waste shall be separately stored in accordance with the requirements of all Laws and Regulations and good industry practices and removed on a regular basis by a licensed medical waste removal contractor. Tenant shall not suffer or allow the introduction of any contaminating agent that would adversely impact the indoor air quality in the Building, and shall at its sole cost and expense, provide any venting or any other precautionary measures for the Hazardous Materials stored and used by it in the Premises, as may be required under applicable Laws and Regulations and as is otherwise consistent with standard industry practice.

 

32

16.4 Mold. Tenant shall give Landlord Notice of any evidence of Mold, water leaks or water infiltration in the Premises promptly after their discovery. To the extent that Tenant fails to give such Notice to Landlord on a timely basis or the mold is attributable to the use and occupancy of the Premises by Tenant or any Tenant Parties, then, at its expense, Tenant shall investigate, clean up and remediate any Mold in the Premises that is attributable to the use and occupancy of the Premises by Tenant or any Tenant Parties. Investigation, clean up and remediation may be performed only after Tenant has Landlord’s written approval of a plan. If Tenant gives timely Notice of the discovery of Mold and such Mold is not attributable to the use and occupancy of the Premises by Tenant or any Tenant Parties, then Landlord shall investigate, clean up and remediate any such Mold in the Premises. All clean up and remediation shall be done in compliance with any applicable Laws and to the reasonable satisfaction of Landlord and Lender.

16.5 Lines. Tenant shall comply with all Laws and Regulations with respect to all Lines installed by Tenant within the Premises or anywhere in the Building outside the Premises, including, without limitation, the plenums or risers of the Building. If Tenant discontinues the use of all or any part of the Lines, Tenant shall within thirty (30) days thereafter notify Landlord of such discontinued use in writing, which notice must be accompanied by a description of the current type, number, points of commencement and termination, and routes of the Lines, sufficiently detailed to allow Landlord to determine if Landlord wishes to retain the Lines. Within thirty (30) days after either (a) Landlord receives such a discontinuation notice from Tenant, or (b) the expiration or sooner termination of the Lease, Landlord may elect by written notice to Tenant to either (i) retain any or all of the Lines, (ii) remove any or all of the Lines and restore the Premises or the Building, as the case may be, to their condition existing prior to the installation of the Lines or (iii) require Tenant, at Tenant’s sole cost and expense, to remove any or all Lines installed by Tenant after the date of this Lease and restore the Premises or the Building, as the case may be, to their condition existing prior to the installation of the Lines unless lines were in place prior to Tenant’s occupancy of the Premises under the Sublease.

ARTICLE 17. ALTERATIONS

17.1 Consent of Landlord; Ownership. Tenant shall not make or allow alterations, additions or improvements to the Premises (collectively “Alterations”), unless such Alterations cost less than $5,000 and do not affect Building systems, structure or exterior and otherwise comply with this Article 17, including any increasing telecommunication demands or requiring the addition or expansion of Lines dedicated to the Premises without the prior written consent of Landlord, which shall not be unreasonably withheld, conditioned or delayed. Tenant may not make any Alterations that affect Structural elements. Upon expiration or termination of this Lease, all Alterations shall be removed by Tenant to the extent Landlord shall inform Tenant at time of its approval thereof that the improvements will need to be removed at the end of the Term. Alterations shall become a part of the realty and belong to Landlord if such removal is not required. Notwithstanding the foregoing, Tenant shall have the right to remove its trade fixtures placed upon the Premises provided that Tenant restores the Premises as indicated below.

 

33

17.2 Requirements. Landlord may condition its consent for any Alterations upon Tenant complying at its expense commercially with reasonable conditions and requirements, including preparation of all construction plans, drawings and specifications for approval by Landlord; the use of contractors and subcontractors approved by Landlord; the delivery of performance and payment bonds showing Landlord as a beneficiary; and the delivery to Landlord of duplicate originals of all marked construction drawings. In requesting Landlord’s consent, Tenant may (x) ask Landlord to provide the approval set forth in Section 17.1 and if Landlord does not so approve, in writing, it shall be deemed that Tenant must remove the Alteration unless Landlord later exercises its right under Section 17.1 or (y) condition Tenant’s willingness to do the Alteration on Landlord’s written agreement that Tenant can remove the Alteration at the end of the Lease Term. Tenant shall obtain all necessary permits for any Alterations as its sole obligation and expense, and strictly comply with the following requirements:

(a) Following approval by Landlord of Alterations, Tenant shall give Landlord at least ten days’ prior Notice of commencement of work in the Premises so that Landlord may post notices of non-responsibility in or upon the Premises as provided by law; and

(b) The Alterations must use materials of at least equal quality to Leasehold Improvements at the Commencement Date, and must be performed in compliance with all laws, ordinances, rules and regulation now or hereafter in effect and in a manner such that they will not interfere with the quiet enjoyment of the other tenants in the Complex.

17.3 Liens. Tenant will keep the Premises and the Complex free from any liens arising out of any Alterations done by Tenant. If a mechanic’s or other lien is filed against the Premises, Building or Complex through Tenant, Landlord may demand that Tenant furnish a satisfactory lien release bond in such form and amount as necessary to accomplish the release of such contested lien claim under RCW 64.04.161. Such bond must be posted ten (10) business days after Notice from Landlord. In addition, Landlord may require Tenant to pay Landlord’s attorneys’ fees and costs in participating in any action contesting such lien or the foreclosure thereof, if Landlord elects to do so. Landlord may pay the claim prior to the enforcement thereof in which event Tenant shall reimburse Landlord in full, including attorneys’ fees, for any such expense, as Additional Rent, with the next due Rent payment.

ARTICLE 18. MAINTENANCE AND REPAIRS

18.1 Landlord’s Obligations. Subject to the other provisions of this Lease imposing obligations in this respect upon Tenant, Landlord shall repair, replace and maintain the external and structural parts of the Complex that are not leased to others, janitor and equipment closets and shafts within the Premises designated by Landlord for use by it in connection with the operation and maintenance of the Complex, and all Common Areas. Landlord shall perform such repairs, replacements and maintenance with reasonable dispatch; in a good and workmanlike manner; but Landlord shall not be liable for any damages, direct, indirect or consequential, or for damages for personal discomfort, illness or inconvenience of Tenant by reason of failure of equipment, Lines, facilities or systems or reasonable delays in the performance of such repairs, replacements and maintenance. The cost for such repairs, maintenance and replacement shall be included in Operating Costs in accordance with Section 2.19 hereof except to the extent that any such repairs, replacements or maintenance costs arose from the wrongful acts or willful misconduct of Landlord.

 

34

18.2 Negligence of Tenant. If the Building, the elevators, boilers, engines, pipes or apparatus used for the purpose of climate control of the Building or operating the elevators, or if the water pipes, drainage pipes, electric lighting or other equipment, Lines, systems and/or facilities of the Building or the Complex, or the roof or the outside walls of the Building, fall into a state of disrepair or become damaged or destroyed through the negligence or misuse of Tenant, its agents, employees or anyone permitted by it to be in the Complex, or through it in any way, the cost of the necessary repairs, replacements or alterations shall be borne by Tenant who shall pay the same to Landlord as Additional Rent.

18.3 Tenant’s Obligations. Tenant shall repair and maintain the Premises (excluding any structural elements thereof), but including all interior partitions and walls, fixtures, Tenant’s Work, Alterations to the Premises and all electrical and telephone outlets and conduits, fixtures and shelving, and special mechanical and electrical equipment which equipment is not a normal part of the Premises installed by or for Tenant, excepting only reasonable wear and tear and damage which Landlord has an obligation to repair as provided in Sections 13.2 and 18.1. Prior to commencement of any repairs, Tenant shall give Landlord at least ten (10) business days’ prior Notice so that Landlord may post notices of non-responsibility in or upon the Premises as provided by law. Tenant must obtain the prior written approval from Landlord for Tenant’s contractor before the commencement of the repair. Landlord may require that Tenant use a specific contractor for repairs that affect the mechanical, heating, air conditioning, or electrical systems. Landlord may enter and view the state of repair and Tenant will repair in a good and workmanlike manner. Notwithstanding the foregoing, Tenant shall not make any repairs to the equipment, Lines, facilities or systems of the Building or Complex which are outside of the Premises or which do not exclusively serve the Premises.

18.4 Cleaning. Tenant shall maintain the appearance of the Premises consistent with the character, use and appearance of the Complex.

18.5 Common Areas. Subject to reimbursement as an Operating Cost, Landlord shall maintain the Common Area, establish and enforce reasonable rules and regulations therefor, close any of the Common Areas to whatever extent required in Landlord’s opinion to prevent a dedication of or the accrual of any rights of any person or of the public to the Common Areas, close temporarily any of the Common Areas for maintenance purposes, and make changes to the Common Areas including changes in the location of driveways, entrances, exits, vehicular parking spaces, parking area, the designation of areas for the exclusive use of others, the direction of the flow of traffic or construction of additional buildings thereupon, except that Landlord may not modify the Common Areas or any other area inside the Premises in any way that materially and adversely affects Tenant’s operation of its business upon the Premises for any extended period of time. Tenant acknowledges that Landlord is under no obligation to provide security for the Common Areas.

18.6 Waiver. Tenant waives all rights it may have under law or at equity to make repairs or to perform any obligation of Landlord arising under this Lease at Landlord’s expense.

 

35

ARTICLE 19. CONDEMNATION

Either party may terminate this Lease if any material part of the Premises, Building or parking is taken or condemned for any public or quasi-public use under Law, by eminent domain or private purchase in lieu thereof (a “Taking”), such that Tenant cannot reasonably operate its business with in the Premises. Landlord shall also have the right to terminate this Lease if there is a Taking of any portion of the Building or Property which would have a material adverse effect on Landlord’s ability to profitably operate the remainder of the Building. The terminating party shall provide written notice of termination to the other party within 45 days after it first receives notice of the Taking. The termination shall be effective on the date the physical taking occurs. All compensation awarded for a Taking, or sale proceeds, shall be the property of Landlord, including any award for the leasehold value. Tenant may seek a separate award for Tenant’s trade fixtures, tangible personal property, tenant improvements and relocation expenses, if specified in the award by the condemning authority and so long as such award does not reduce Landlord’s award. In the event of a non-material Taking, Landlord shall diligently restore the remainder of the Premises, Building and parking to a condition as close as reasonably possible to its condition prior to the Taking, taking into account the nature and extent of the Taking and Taking proceeds available for such restoration.

ARTICLE 20. ENTRY BY LANDLORD

Tenant shall permit Landlord and any lender with a loan secured by the Building and their agents (each a “Lender”) to enter the Premises at all reasonable times following .one business days’ notice by phone or in person to the onsite manager of Tenant (except in case of emergency, when no such notice shall be required) for the purpose of (a) inspecting them, (b) maintaining the Building, (c) making repairs, replacements, alterations or additions to any, portion of the Building, including the erection and maintenance of such scaffolding, canopies, fences and props as may be required, (d) posting notices of non-responsibility for alterations, additions or repairs, (e) placing upon the Building any usual or ordinary “for sale” signs and showing the space to prospective purchasers, investors and lenders, or (f) placing on the Premises “to lease” signs or marketing and showing the Premises to prospective tenants at any time Tenant is in uncured default hereunder or otherwise within one hundred eighty (180) days prior to the expiration of this Lease, without any rebate of Rent and without any liability to Tenant for any loss of occupation or quiet enjoyment of the Premises thereby occasioned. In the case of entering the Premises for the purposes identified in clauses (b) and (c) above, Landlord shall give Tenant at least 24 hours prior Notice and use commercially reasonable efforts to minimize their effect on Tenant’s operation of its business in the Premises.

ARTICLE 21. SIGNS

Tenant shall be entitled to retain in place its existing building standard suite entry signage on the interior main lobby building directory and at the entrance to the Premises. Tenant shall not place on the Premises or Complex any exterior signs or advertisements nor any interior signs or advertisements that are visible from the exterior of the Premises, without Landlord’s prior written consent, which Landlord may withhold in its sole and absolute discretion; provided, that subject to the terms oldie next sentence, Landlord shall not unreasonably withhold its consent to Tenant’s installation of external signage comparable in size and visibility to other tenants of the

 

36

Building in location(s) approved by Landlord. All Tenant’s signage shall comply with the Landlord’s sign criteria, as such may be modified from time to time, and with the guidelines of the Quadrant Lake Union Center Owner’s Association (the “QLUCOA”). Landlord will cooperate with and support Tenant to get signage that is of similar size, quality and placement as other full floor users of the building. The cost of installation and maintenance of any approved signs shall be at the sole expense of Tenant. At the end of the Term, Tenant shall remove all its signs and damage caused by the installation or removal thereof and shall be repaired at Tenant’s expense.

ARTICLE 22. DEFAULT

22.1 Tenant Default. Without limiting or superseding any separate cure rights that Tenant may have under applicable law, the occurrence of any of the following shall constitute an immediate default and breach of this Lease by Tenant (except where cure periods are expressly provided):

(a) Any failure by Tenant to pay when duo the Rent or make any other required payment (cure period of three (3) days) after Notice to Tenant that such payment is past due;

(b) Tenant’s failure to observe or perform any Lease provision where such failure continues for twenty (20) days after Notice thereof to Tenant; provided, if the nature of the default is such that it cannot reasonably be cured within the twenty-day period, Tenant shall not be deemed in default if, in the twenty-day period, Tenant commences to cure and thereafter diligently prosecute the cure to completion;

(c) If at any time during the Term there is a Bankruptcy Event involving Tenant;

(d) Any attempted Transfer in violation of Article 8 or any default by Tenant under its Sublease of other space in the Building; or

(e) Any abandonment of the Premises.

22.2 Landlord Default. Subject to the terms of Article 28 Landlord shall be in default if it fails to observe or perform any of the covenants, conditions or provisions of this Lease for a period longer than thirty (30) days after Notice from Tenant; provided, however, that if more than thirty (30) days is required for performance, Landlord shall not be in default if it commences performance within thirty (30) days of Tenant’s Notice and thereafter completes such performance diligently and within a reasonable time.

 

37

ARTICLE 23. REMEDIES UPON DEFAULT

23.1 Termination and Damages. In the event of any Tenant default, in addition to any other remedies available to Landlord herein or at law or in equity, Landlord shall have the immediate option to terminate this Lease and all rights of Tenant hereunder by giving Notice of such intention to terminate. If Landlord shall elect to so terminate this Lease, then Landlord may recover from Tenant:

(a) The worth at the time of award of any unpaid Rent which had been earned at the time of such termination; plus

(b) The worth at the time of award of the amount by which the unpaid Rent which would have been earned after termination until the time of award exceeds the amount of such Rent loss Tenant proves could have been reasonably avoided. As used in Sections 23.1(a) and (b) the “worth at the time of award” is computed by including interest at twelve percent (12%) per annum; plus

(c) The worth at the time of award of the amount by which the unpaid Rent for the balance of the term after the time of award exceeds the amount of such Rent loss (computed by discounting such amount at the rate of four percent (4%) per annum;

(d) Any other amount necessary to compensate Landlord for the detriment proximately caused by Tenant’s failure to perform its obligations under this Lease.

23.2 Personal Property. In the event of default by Tenant, Landlord shall have the right, with or without terminating this Lease, to reenter the Premises and remove all persons and property from the Premises. Such property may be stored in a public warehouse and disposed of at the cost of and for the account of Tenant.

23.3 Recovery of Rent; Relating.

(a) In the event of the abandonment of the Premises by Tenant or if Landlord elects to either reenter as provided for in this Lease or take possession of the Premises either pursuant to legal proceeding or pursuant to any notice provided by law, then if Landlord does not elect to terminate this Lease as provided in subsection (c), below, this Lease shall continue in effect, and Landlord may enforce all its rights and remedies under this Lease, including Landlord’s right to recover all Rent as it becomes due and/or to relet all or part of the Premises for lease term(s), Rent on such terms as are commercially reasonable. Alterations, acts of maintenance or preservation, efforts to relet the Premises, the appointment of a receiver upon initiation of Landlord or other legal proceeding granting Landlord or its agent possession to protect Landlord’s interest under this Lease shall not constitute a termination of Tenant’s right to possession.

(b) If Landlord elects to relet, the Rent received by Landlord from reletting shall be applied in the following order: (1) to the payment of any indebtedness other than Rent due hereunder from Tenant; (2) to the payment of any cost of reletting, including brokerage fees; (3) to the payment of the cost of any alterations and repairs to the Premises; (4) to the payment of Rent due and unpaid hereunder; and (5) any residue shall be held by Landlord and applied in payment of future Rent as the same may become due and payable hereunder. If the portion of Rent received under clause (b) (4) is less than the Rent payable during that month by Tenant hereunder, Tenant shall pay such deficiency to Landlord immediately upon demand. Tenant shall also pay to Landlord when ascertained, any costs and expenses inclined by Landlord in such reletting or in making such alterations and repairs not covered by the Rents received from such reletting.

 

38

(c) No reentry or taking possession of the Premises or any other action under this Section shall be construed as an election to terminate this Lease unless a Notice of such intention be given to Tenant or unless the termination thereof be decreed by a court of competent jurisdiction. Notwithstanding any relating without termination by Landlord because of any default by Tenant, Landlord may at any time after such reletting elect to terminate this Lease for any such default.

23.4 No Waiver. Efforts by Landlord to mitigate the damages caused by Tenant’s default in this Lease shall not constitute a waiver of Landlord’s right to recover damages hereunder.

23.5 Curing Defaults. If Tenant fails to repair, maintain, keep clean, or service any of the Premises or fails to perform any other Lease obligation, then after having given Tenant reasonable Notice of any failure and a reasonable opportunity to remedy the failure, which in no case shall exceed twenty (20) days, Landlord may enter upon the Premises and perform or contract for the performance of the repair, maintenance, or other Tenant obligation, and .Tenant shall pay Landlord as Additional Rent all direct and indirect costs incurred in connection therewith.

23.6 Cumulative Remedies. The various rights, options, election powers, and remedies of Landlord contained in this Article and elsewhere in this Lease are cumulative. None of them is exclusive of any others or of any legal or equitable remedy that Landlord might otherwise have in the event of breach or default, and the exercise of one right or remedy by Landlord will not in any way impair its right to any other right or remedy.

23.7 Duty to Mitigate. Notwithstanding anything to the contrary in this Lease, each party shall have an affirmative obligation to use commercially reasonable efforts to mitigate its damages, adverse impacts and costs (and in Landlord’s case, the costs of reletting) in the event of a default, error or delay by the other party; provided, however, in all eases Landlord shall be entitled to lease other vacant space in the Building first before reletting some or all of the Premises following a Tenant default.

ARTICLE 24. SURRENDER OF LEASE

At the termination of this Lease or Tenant’s right of possession, Tenant shall return the Premises to Landlord in good and sanitary order, condition and repair, free of rubble and debris, broom clean, reasonable wear and tear excepted. Tenant shall ascertain from Landlord at least thirty (30) days prior to the termination of this Lease, which Alterations are to be removed in accordance with Article 17 and then Tenant shall forthwith remove the appropriate Alterations and restore the Premises to the condition required herein, entirely at its own expense. At its sole cost and expense, Tenant shall repair all damage to the Premises caused by the removal of trade fixtures or personal property that Tenant is permitted or required to remove.

ARTICLE 25. NOTICES

All notices required or permitted to be given under this Lease (“Notice”), shall be in writing and shall be given or made to the respective party at the address or number set forth in Sections 1.2 and 1.3 of this Lease by (1) personal service; (ii) mailing by registered or certified

 

39

mail, return receipt requested, postage prepaid; or (iii) reputable courier which provides written evidence of delivery. Either Party may change its address for Notice by a Notice sent to the other. Each Notice shall be deemed given or made upon receipt or refusal to receive except that facsimile notices sent on an non-business day or after 5:00 p.m. on a business day shall not be deemed delivered until the next business day.

ARTICLE 26. SUBORDINATION

26.1 Priority of Encumbrances. This Lease shall be subordinate to any ground lease, first mortgage, or first deed of trust now or hereinafter affecting the real property of which the Premises are a part (each a “Security Instrument”) and to any and all advances made on the security thereof and to all renewals, modifications, consolidations, replacements and extensions thereof. Notwithstanding such subordination, but subject to all of Landlord’s remedies for a default by Tenant and except as otherwise provided by any Lender Carve Outs (as defined in Article 26.3 below), Tenant’s rights under the Lease will be recognized. If a Lender or ground lessor gives Tenant Notice of its election to have this Lease prior to the lien of its Security Instrument, this Lease shall be deemed prior to such Security Instrument, whether this Lease is dated prior or subsequent to the date of said Security Instrument or the date of recording thereof.

26.2 Execution of Documents. Tenant agrees that no documentation other than this Lease is required to evidence such subordination, however, within ten business (10) days after receipt of Notice by Landlord, Tenant agrees to execute any documents reasonably required to effectuate such subordination and any attornment (including non-disturbance provisions) or to make this Lease prior to the lien of any Security Instrument, as the case may be, so long as the same do not materially change the rights and duties of the parties hereunder, except insofar as any of the Lender Carve Outs apply. Failure to comply with this Article within the ten-day period set forth above shall be an immediate breach of this Lease by Tenant, without opportunity to cure, giving Landlord all rights and remedies under Article 23 hereof, as well as a right to damages caused by the loss of a loan, lease or sale which may result from such failure by Tenant.

26.3 Attornment. If a Lender or a ground lessor enforces its remedies provided by law or under the pertinent Security Instrument and succeeds to Landlord’s interest in the Premises (a “Successor-in-Interest”), Tenant shall, upon request of any Successor-in-Interest, automatically become the tenant of said Successor-in-Interest without change in the terms or other provisions of this Lease. The Successor-in-Interest shall not be (1) bound by any payment of Rent for more than thirty (30) days in advance; (ii) bound by any modification or amendment of this Lease to shorten the term or decrease the Base Rent or otherwise materially changes the terms of this Lease without the consent of the Lender or ground lessor; (iii) liable for any act or omission of Landlord or any previous landlord, except to the extent the same constitutes a continuing event of default after such party succeeds to Landlord’s interest; (iv) bound by any obligation of Landlord under the Lease that is not reasonably susceptible to performance by the Successor-in-Interest; (v) subject to any offset, defense, recoupment or counterclaim that Tenant may have as against Landlord or any previous landlord (other than with respect to a breach of Landlord’s obligations under the Lease that continues to exist after the Successor-in-Interest succeeds to Landlord’s interest); or (vi) liable for any deposit with the exception of prepaid rent that Tenant may have made with respect to Landlord or previous landlord that has not been transferred to the Successor-in-Interest (collectively, the “Lender Carve Outs”). Within ten business (10) days

 

40

after Notice of a request by Successor-in-Interest, Tenant shall deliver an executed attornment agreement in a form required by such Successor-in-Interest (including non-disturbance provisions), so long as the same do not materially change the rights and duties of the parties hereunder, except insofar as any of the Lender Carve Outs apply.

ARTICLE 27. ESTOPPEL CERTIFICATES

27.1 Execution by Tenant. Within ten (10) business days after receipt of Notice by Landlord, Tenant shall execute and deliver to Landlord and entities designated by Landlord an estoppel certificate acknowledging that (i) this Lease is in full force and effect, binding and enforceable in accordance with its terms and unmodified (or if modified, specifying the written modification documents); (ii) to the best knowledge of Tenant, no default exists on the part of Landlord or Tenant under this Lease (or, if there are, then stating them); (iii) to the best knowledge of Tenant, there are no events which with the passage of time, or the giving of notice, or both, would create a default under this Lease (or, if there are, then stating them); (iv) no Rent m excess of one month’s Rent has been paid in advance; (v) Tenant has not sold, assigned, transferred, mortgaged or pledged this Lease or the Rent nor has it received notice of same (or, if it has, then so stating); (vi) to the best knowledge of Tenant, Tenant has no defense, setoff, recoupment or counterclaim against Landlord (or, if it has, then so stating), and (vii) such other matters as Landlord may reasonably request (so long as such other statements do not materially change the rights and/or duties of the parties). Landlord, any Lender, or any prospective purchaser of the Building or Complex may rely upon such estoppel certificate. Failure to comply with this Article within the ten-day period set forth above shall mean that Tenant is deemed to have made the representations set forth in items (i) through (vii) above.

27.2 Financing, Sale or Transfer. If Landlord desires to finance, refinance, sell, or otherwise transfer the Premises, Building or Complex, or any part thereof, Tenant agrees, within ten (10) business days of request therefor by Landlord, to deliver to Landlord and any lender, prospective buyer or transferee designated by Landlord financial statements of Tenant and any parent company as may be reasonably required by such party. All such financial statements shill be received by Landlord in confidence and shall be used only for the purposes herein set forth.

ARTICLE 28. LENDER PROTECTION

Tenant agrees to give any Lender, by registered mail, a copy of any notice of default served upon Landlord, provided that prior to such notice Tenant has been given Notice of the address of such Lender, either pursuant to an estoppel certificate, subordination agreement or otherwise. Tenant agrees that if Landlord fails to cure the default within the time provided for in this Lease, Lender shall have an additional thirty (30) days within which to cure the default or, if the default cannot be cured within that time, then such additional time as may be necessary if, within the thirty (30) days, Lender has commenced and is diligently pursuing the remedies necessary to cure the default (including commencement of foreclosure proceedings, if necessary). This Lease shall not be terminated while such remedies are being pursued.

 

41

ARTICLE 29. BANKRUPTCY

If at any time during the Term there is a Bankruptcy Event, the following provisions shall apply:

(a) Any receiver, assignee for the benefit of creditors (“assignee”), trustee of any kind, or Tenant as debtor-in-possession (“debtor”) shall either expressly assume or reject this Lease within sixty days following the assignment to the assignee or the filing of the pleading initiating the receivership or bankruptcy case. All such parties agree that they will not seek Court permission to extend such time for assumption or rejection. Failure to assume or reject in the time set forth herein shall mean that the Lease may be terminated at Landlord’s option. Rejection of the Lease shall be a default under the Lease.

(b) If the Lease is assumed by a debtor, receiver, assignee or trustee, such party shall immediately after such assumption (1) cure any default or provide adequate assurances that defaults will be promptly cured; (2) pay Landlord for actual pecuniary loss or provide adequate assurances that compensation will be made for such loss; and (3) provide adequate assurance of future performance.

(c) Where a default exists under the Lease, the party assuming the Lease may not require Landlord to provide services or supplies incidental to the Lease before its assumption by such trustee or debtor, unless Landlord is compensated under the terms of the Lease for such services and supplies provided before the assumption of such Lease.

(d) Landlord reserves all remedies available to Landlord in Article 23 or at law or in equity in respect of a Bankruptcy Event by Tenant, to the extent applicable law permits such remedies.

(e) Tenant agrees that all attorney’s fees and costs incurred by Landlord in dealing with a bankruptcy of Tenant are an actual pecuniary loss of Landlord and Tenant agrees that it shall pay all such costs and expenses in the event of any assumption or Transfer of the Lease.

ARTICLE 30. MISCELLANEOUS PROVISIONS

30.1 Captions. The captions of this Lease are for convenience only and are not a part of this Lease and do not in any way limit or amplify the terms and provisions of this Lease.

30.2 Construction. Whenever the singular is used in this Lease and when required by the context, the same shall include the plural, the plural shall include the singular. Items following the terms “include” or “including” are descriptive only and not by way of limitation. All approvals to be given by a Party to the Lease are not to be unreasonably withheld, conditioned or delayed unless specifically indicated to the contrary in the Lease.

30.3 Modifications. This instrument contains all the agreements, conditions and representations made between the Parties and may only be modified by a written agreement signed by all of the Parties, including that, if any, required from any Lender or ground lessor under Section 26.3 above.

 

42

30.4 Severability. The invalidity of any provision of this Lease, as determined by a court of competent jurisdiction, shall in no way affect the validity of any other provision hereof.

30.5 No Offer. The preparation and submission of a draft of this Lease by either party to the other shall not constitute an offer, nor shall either party be bound to any terms of this Lease or the entirety of the Lease itself until the Parties have fully executed a final document. Until such time as described in the previous sentence, either party is free to terminate negotiations with no obligation to the other.

30.6 Limitation of Liability. In the event of default, breach, or violation by Landlord of any of Landlord’s obligations under this Lease, Landlord’s liability to Tenant shall be limited to its ownership interest in the Building or the proceeds of a public sale of such interest pursuant to foreclosure of a judgment against Landlord. Landlord shall not be personally liable for any deficiency beyond its interest in the Building.

30.7 Joint and Several Liability. Should Tenant consist of more than one person or entity, they shall be jointly and severally liable on this Lease.

30.8 Survival. All obligations of Tenant which may accrue or arise during the Term of this Lease or as a result of any act or omission of Tenant during the Term shall, to the extent they have not been fully performed, satisfied or discharged, survive the expiration or termination of this Lease.

30.9 Brokers. Landlord and Tenant each represent and warrant to the other party that it has not authorized or employed, or acted by implication to authorize or employ, any real estate broker or salesman to act for it in connection with this Lease, except for the Brokers identified in Section 1.14. Landlord shall pay Washington Partners, Inc, (“Tenant’s Broker”) a fee of One Dollar ($1.00) per RSF of Premises area per year for the Term specified in Section 1.7 (prorated for partial year) which commission shall be paid upon full execution of the Lease and execution and delivery of the Guaranty. Except for the commission to Tenant’s Broker just specified, Landlord and Tenant shall each indemnify, defend and hold the other party harmless from and against any and all claims by any real estate broker or salesman whom the indemnifying party authorized or employed, or acted by implication to authorize or employ, to act for the indemnifying party in connection with this Lease.

30.10 Non-liability of Landlord. Except as otherwise expressly stated in this Lease, the consent or approval, whether express or implied, or the act, failure to act or failure to object, by Landlord in connection with any plan, specification, drawing, proposal, request, act, omission, notice or communication by or for Tenant, shall not create any responsibility or liability on the part of Landlord, and shall not constitute a representation by Landlord, with respect to the completeness, sufficiency, efficacy, propriety, quality or legality of such act.

30.11 Attorneys’ Fees. In the event of litigation or arbitration between the Parties with respect to this Lease, then all costs and expenses, including all reasonable fees of appraisers, accountants, experts, consultants and attorneys (collectively “Professional Fees”) incurred by the prevailing party shall be paid by the other party.

 

43

30.12 Effect of Waiver. Landlord’s waiver of any breach of a Lease provision is not a waiver of such Lease provision or any subsequent breach of the same or any other term, covenant or condition of the Lease. Landlord’s acceptance of any Rent shall not be a waiver of any breach or rights, including the right to possession, other than the failure of Tenant to pay the particular Rent so accepted, regardless of Landlord’s knowledge of any existing breach at the time of acceptance of such Rent.

30.13 Holding-Over. If Tenant remains in possession of the Premises after the expiration of the Term, with Landlord’s written consent, then such holding over shall be construed as a month-to-month tenancy, subject to all the conditions, provisions and obligations of this Lease (as applicable to a month-to-month tenancy) as existed during the last month of the Term, except the Base Rent shall be increased to one hundred twenty five (125%) of the Base Rent then payable. Any option or right to extend, renew or expand shall not be applicable. Landlord’s acceptance of Rent after such expiration or termination shall not constitute a holdover hereunder or result in a renewal of this Lease. If Tenant holds over without Landlord’s consent such shall constitute a termination at will at two hundred percent (200%) of the Base Rent then payable and shall be immediately terminate upon written notice from Landlord. Tenant shall be liable for all losses or damages suffered by Landlord if Tenant holds over without Landlord’s prior written consent.

30.14 Binding Effect. The covenants and conditions of this Lease, subject to the provisions as to assignment, apply to and bind the heirs, successors, executors, administrators and assigns the Parties.

30.15 Time of the Essence. Time is of the essence of this Lease.

30.16 Release of Landlord. If Landlord sells its interest in the Building or Complex, then from and after the effective date of the sale or conveyance, Landlord shall be released and discharged from any and all obligations and responsibilities under this Lease except those already accrued. If Tenant provides a Security Deposit, Landlord may transfer the Security Deposit to a purchaser of the Building and Landlord shall be discharged from any further liability in reference thereto.

30.17 Waiver by Tenant. The Parties have negotiated numerous provisions of this Lease, some of which are covered by statute. Whenever a provision of this Lease and a provision of any statute or other law cover the same matter, the provisions of this Lease shall control.

30.18 Non-Business Days. Whenever action must be taken (including the giving of notice or the delivery of documents) under this Agreement during a certain period of time (or by a particular date) that ends (or occurs) on a non-business day, then such period (or date) shall be extended until the immediately following business day. As used herein, “business day” means any day other than a Saturday, Sunday or federal or State holiday.

30.19 Waiver of Jury Trial. Landlord and Tenant hereby waive trial by jury in any action, proceeding or counterclaim brought by either of the Parties against the other on any matters whatsoever arising out of this Lease, or any other claims.

 

44

30.20 Authorization. Each person executing this Lease on behalf of a Party represents and warrants that he or she is duly authorized to execute this Lease on behalf of such Party.

30.21 Quiet Enjoyment. Landlord covenants and agrees that, so long as this Lease is in full force and effect and Tenant is not in default under this Lease beyond any applicable cure periods, Tenant shall have quiet enjoyment of the Premises during the Term of this Lease as to matters arising by, through or under Landlord.

30.22 Name. Landlord reserves the right to change the name of the Building and Complex.

30.23 Entire Agreement - Applicable Law. This Lease and the Exhibits attached hereto, and by this reference incorporated herein, set forth the entire agreement of Landlord and Tenant concerning the Premises, and supersede any other agreements or understanding, oral or written, between Landlord and Tenant. This Lease shall be governed by, and construed in accordance with the laws of the state of Washington.

30.24 Execution by Landlord and Tenant; Approval of Lender. Landlord shall not be deemed to have made an offer to Tenant by furnishing Tenant with a copy of this Lease with particulars inserted. No contractual or other rights shall exist or be created between Landlord and Tenant until all parties hereto have executed this Lease and, if so indicated by Landlord, until it has been approved in writing by Landlord’s lender and fully executed copies have been delivered to Landlord and Tenant. Tenant agrees to make such changes herein as may be requested by Landlord’s lender so long as such do not increase amounts due from Tenant hereunder or otherwise materially alter its rights or obligations hereunder.

30.25 Sublease Modification. Landlord and Tenant agree that upon mutual execution of this Lease, Base Rent payable under the Sublease will be reduced by                     per month through December 31, 2009 and                     per month through July 15, 2010, prorated for partial months, and Subtenant’s Percentage Share under the Sublease shall be reduced to seventeen and 57/100ths percent (17.57%). If Subtenant’s right to occupancy of the Premises under the Sublease shall be terminated, this Lease shall terminate.

30.26 Guaranty of Lease. Landlord’s obligations under the Lease are made expressly contingent upon its receipt of a Guaranty of Lease in form attached hereto as Exhibit F, duly executed by New Wave Group, AB (Publ), a corporation organized under the laws of Sweden (“Guarantor”) concurrently with Tenant’s execution and delivery of this Lease.

30.27 Right of First Opportunity. Landlord hereby grants to Tenant the right of first opportunity with respect to any space in the Building that is-or becomes vacant and available for lease during the base Term, after expiration of leases currently in effect at the execution of this Lease and expiring in 2010. If any space in the Building (the “RFO Space”) becomes vacant and available for lease at any time during the base Term, after expiration of leases currently in effect at the execution of this Lease and expiring in 2010, then Landlord shall give Tenant notice of the availability of the RFO Space (the “Offer Notice”), the date on which the RFO Space will become available, and the terms, including rent which shall be equal to the then market rent (including all concessions) (the “Market Rent”) for the RFO Space as reasonably determined by

 

45

Landlord, on which Landlord is willing to lease the RFO Space. To exercise the right of first opportunity, Tenant must within five (5) business days after receipt of the Offer Notice give Landlord notice of Tenant’s desire to enter into negotiations with Landlord to lease such space at Market Rent and offered terms and otherwise on terms mutually acceptable to Landlord and Tenant (the “Negotiation Notice”). If Tenant gives the Negotiation Notice within such five (5) business day period, then Landlord and Tenant shall promptly enter into good faith negotiations to lease such space at Market Rent and otherwise on terms mutually acceptable to Landlord and Tenant. If Tenant fails to give the Negotiation Notice within such space within five (5) business days after Tenant gives the Negotiation Notice, then the right of first opportunity shall immediately terminate as to the RFO Space, and Landlord shall be free to lease the RFO Space, or portions thereof, to third parties. The term “vacant and available for lease” as used in this Section shall mean that such space has been vacated by the previous tenant and is not subject to any prior options to expand, rights of first offer or rights of first refusal held by any other tenant or third party. Tenant acknowledges and agrees that Landlord may elect to enter into new lease(s) with existing tenant(s) of part or all of the RFO Space and that if Landlord does so, then the portion of the RFO space occupied by such existing tenant(s) shall not be deemed vacant and available for lease, Landlord shall only be obligated to submit an Offer Notice to Tenant under this Section 30.27 or to lease RFO Space to Tenant under this Section 30.27 if: (a) Tenant is not in default under this Lease and would not be but for the passage of time or the giving of notice; (b) Tenant has not previously been in default under this Lease beyond the applicable cure period; (c) Tenant has not previously assigned this Lease or sublet any part of the Premises individually or in the aggregate, individually or in the aggregate in excess of 6,700 square feet; (d) this Lease is in full force and effect; (e) Tenant’s or Guarantor’s net worth and/or net current assets are not below the level which existed at the time this Lease was signed; and (f) Tenant is not the subject of a petition in bankruptcy, has not made an assignment for the benefit of creditors or has not had a receiver appointed with respect to it or to a material portion of its assets.

30.28 Communication Device. Tenant shall have the right to install an antenna or satellite “dish” or similar device for the reception and transmission of signals of a size approved by Landlord (“Device”) on the roof of the Complex in a location selected by Landlord, but only for Tenant’s own use and only in accordance with the terms of this Section 30.28. The Device shall be installed, maintained, operated, repaired and removed at the end of the Term, or its earlier termination, at Tenant’s sole cost and expense, Tenant shall comply with all laws, rules, regulations and ordinances relating to the installation, use, maintenance, repair or removal of the Device and shall not permit it to be operated in a manner which will interfere with other tenant’s Devices. The plans for the Device and its location shall be provided to Landlord for its review and approval at least thirty (30) days prior to its installation of the Device, and Tenant shall comply with Landlord’s directions with regard to its installation, use, maintenance, repair and removal. Tenant shall install the Device in such manner as will not reduce the coverage afforded Landlord under its roof warranty and shall reimburse Landlord for all of Landlord’s costs reasonably incurred in connection with the installation, use, maintenance, repair or removal of the Device within ten (10) days of Tenant’s receipt of each invoice thereafter. If Landlord so requires, Tenant shall at its sole expense provide a double membrane over the roof to be used as a walkway for Device installation, service, maintenance and removal. Tenant shall remove the Device as and when necessary for Landlord’s roof maintenance work and at the end of the Lease term or upon its earlier termination and shall repair any damage resulting from its removal. Tenant’s obligations under this Section shall survive termination of this Lease.

 

46

IN WITNESS WHEREOF, Landlord and Tenant have executed this Lease as of the date first above written.

 

“Tenant”	    	“Landlord”
CUTTER &amp; BUCK INC., a Washington corporation	    	
FREMONT LAKE UNION CENTER LLC,

A Washington limited liability company

By:	 	
/s/ Jen Petersson

    	By:	 	
/s/ Dr. Martin Leinemann

Its:	 	CEO	    	Name:	 	Dr. Martin Leinemann
 		    	Title:	 	Director of LLC
 		    	By:	 	
/s/ Berit Emme

 		    	Name:	 	Berit Emme
 		    	Title:	 	Director of LLC
 

47

STATE OF WASHINGTON)

                                                )ss.

COUNTY OF KING             )

On this 21 day of October, 2009, before me, the undersigned, a Notary Public in and for the State of Washington, duly commissioned and sworn personally appeared Jen Petersson, known to me to be the CEO of CUTTER &amp; BUCK INC., the corporation that executed the foregoing instrument, and acknowledged the said instrument to be the free and voluntary act and deed of said corporation, for the purposes therein mentioned, and on oath stated that he/she was authorized to execute said instrument.

I certify that I know or have satisfactory evidence that the person appearing before me and making this acknowledgment is the person whose true signature appears on this document.

WITNESS my hand and official seal hereto affixed the day and year in the certificate above written.

 

/s/ Nancy Pethick

Signature
Nancy Pethick

Print Name
NOTARY PUBLIC in and for the State of
Washington, residing at Seattle.
My commission expires 5-2-2011
 

48

Roll of Documents No. 1872/2009 HE

Hereby I,

Dr. Rolf-Hermann Henniges, Notary Public

practising Alstertor 14, D-20095 Hamburg,

certify, that the above are the true signatures, subscribed in my presence, of

 

1.	Dr. Martin Leinemann,
  	
and

 

2.	Mrs. Berit Emme, born Winkler,
both acting on behalf of the

FREMONT LAKE UNION CENTER LLC, a Washington limited liability company.

/s/ Dr. Rolf-Hermann Henniges

 

49

EXHIBIT A

LEGAL DESCRIPTION OF THE LAND

PARCEL A:

THOSE PORTIONS OF BLOCK 84 OF DENNY &amp; HOYT’S SUPPLEMENTAL PLAT TO THE CITY OF SEATTLE, ACCORDING TO PLAT RECORDED IN VOLUME 3 OF PLATS AT PAGE(S) 3, IN KING COUNTY, WASHINGTON, AND OF THE BURLINGTON NORTHERN, INC. RIGHT OF WAY FOR ITS FORMER SUMAS BRANCH IN SECTION 18, TOWNSHIP 25 NORTH, RANGE 4 EAST, WM., IN SAID KING COUNTY, SAID PORTIONS BEING DESCRIBED, AS A WHOLE AS FOLLOWS:

COMMENCING AT THE INTERSECTION OF THE NORTHERLY PROLONGATION OF THE EAST LINE OF THE WEST 7.00 FEET OF SAID BLOCK 84 AND THE NORTHERLY MARGIN OF SAID BURLINGTON NORTHERN RIGHT OF WAY;

THENCE SOUTH 77°28’32” EAST 194.84 FEET ALONG SAID NORTHERLY MARGIN;

THENCE SOUTH 06°16’09” WEST 117.67 FEET;

THENCE SOUTH 77°28’32” EAST 69.78 FEET;

THENCE SOUTH 12°31’28” WEST 31.25 FEET;

THENCE SOUTH 77°28’32” EAST 70.75 FEET;

THENCE SOUTH 12°31’28” WEST 24.72 FEET;

THENCE SOUTH 77°28’32” EAST 50.92 FEET;

THENCE SOUTH 12°31’28” WEST 121.78 FEET;

THENCE NORTH 77°28’32” WEST 172.20 FEET;

THENCE WEST 158.54 FEET TO SAID EAST LINE OF THE WEST 7.00 FEET OF BLOCK 84 AND THE EAST MARGIN OF FREMONT AVENUE NORTH;

THENCE NORTH 00°09’34” EAST 336.91 FEET ALONG SAID EAST MARGIN AND ITS NORTHERLY PROLONGATION TO THE POINT OF BEGINNING;

(ALSO KNOWN AS LOT A OF CITY OF SEATTLE LOT BOUNDARY ADJUSTMENT NO. 9700157, RECORDED UNDER RECORDING NO. 9706050452.)

PARCEL B:

THOSE PORTIONS OF BLOCK 84 AND OF LOTS 1 THROUGH 3, INCLUSIVE, IN BLOCK 85 OF DENNY &amp; HOYT’S SUPPLEMENTAL PLAT TO THE CITY OF SEATTLE, ACCORDING TO PLAT RECORDED IN VOLUME 3 OF PLATS AT PAGE(S) 3, IN KING COUNTY, WASHINGTON, AND OF LOT I IN BLOCK 98 OF LAKE UNION SHORELANDS, ACCORDING TO THE OFFICIAL MAPS ON FILE IN THE OFFICE OF THE COMMISSIONER OF PUBLIC LANDS IN OLYMPIA, WASHINGTON, SAID PORTIONS BEING DESCRIBED AS A WHOLE AS FOLLOWS:

COMMENCING AT THE INTERSECTION OF THE NORTHERLY PROLONGATION OF THE EAST LINE OF THE WEST 7.00 FEET OF SAID BLOCK 84 AND THE NORTHERLY MARGIN OF SAID BURLINGTON NORTHERN, INC., RIGHT OF WAY FOR ITS FORMER SUMAS BRANCH IN SECTION 18, TOWNSHIP 25 NORTH, RANGE 4 EAST, W.M., IN SAID KING COUNTY;

 

50

THENCE SOUTH 77°28’32” EAST 194.84 FEET ALONG SAID NORTHERLY MARGIN;

THENCE SOUTH 06°16’09” WEST 117.67 FEET;

THENCE SOUTH 77°28’32” EAST 69.78 FEET;

THENCE SOUTH 12°31’78” WEST 31.25 FEET;

THENCE SOUTH 77°28’32” EAST 70.75 FEET;

THENCE SOUTH 12°31’28” WEST 24.72 FEET;

THENCE SOUTH 77°28’32” EAST 50.92 FEET;

THENCE SOUTH 12°31’78” WEST 121.78 FEET TO THE TRUE POINT OF BEGINNING;

THENCE NORTH 77°28’32” WEST 172.20 FEET;

THENCE WEST 158.54 FEET TO SAID EAST LINE OF THE WEST 7.00 FEET OF BLOCK 84 AND THE EAST MARGIN OF FREMONT AVENUE NORTH;

THENCE SOUTH 00°09’34” WEST 192.81 FEET ALONG SAID EAST MARGIN AND ITS NORTHERLY PROLONGATION TO THE NORTHEASTERLY MARGIN OF THE LAKE WASHINGTON SHIP CANAL AS CONDEMNED ON NOVEMBER 25, 1898 UNDER KING COUNTY SUPERIOR COURT CAUSE NO. 21942;

THENCE SOUTH 56°49’54” EAST 452.56 FEET ALONG SAID NORTHEASTERLY MARGIN AND THE SOUTHWESTERLY LINE OF SAID BLOCK 98 TO THE MOST SOUTHERLY CORNER OF SAID BLOCK 98;

THENCE NORTH 63°49’55” EAST 106.00 FEET ALONG THE SOUTHEASTERLY LINE OF SAID BLOCK 98 TO THE WEST LINE OF THE EAST 50.71 FEET OF SAID LOT 1 IN BLOCK 98, AND THE WEST MARGIN OF AURORA AVENUE NORTH;

THENCE NORTH 00°18’53” EAST 345.29 FEET ALONG SAID WEST LINE AND MARGIN;

THENCE WEST 99.03 FEET TO A POINT WHICH BEARS NORTH 77°28’32” EAST FROM THE TRUE POINT OF BEGINNING;

THENCE NORTH 77°28’32” WEST 50.86 FEET TO THE TRUE POINT OF BEGINNING;

(ALSO KNOWN AS LOT B OF CITY OF SEATTLE LOT BOUNDARY ADJUSTMENT NO. 9700157, RECORDED UNDER RECORDING NO. 9706050452.)

 

51

EXHIBIT B-1

PLAN OF THE COMPLEX

 

LOGO

 

52

EXHIBIT B-2

PLAN OF THE BUILDING

 

LOGO

 

53

EXHIBIT B-3

FLOOR PLAN OF THE PREMISES

 

LOGO

 

54

 

LOGO

 

55

EXHIBIT B-4

PARKING STALLS

(See attached pages)

 

56

 

LOGO

 

57

 

LOGO

 

58

EXHIBIT C

WORK LETTER

1. Improvements Allowance.

1.1 Allowance. Landlord shall provide Tenant with an allowance of Forty and 89/100 Dollars ($40.89) per RSF of Premises area (the “Allowance”). Landlord agrees to reimburse Tenant for the Cost of Tenant’s Work, as hereinafter defined, up to the total of the Allowance, in accordance with the terms of this Section 1.

1.2 Cost of Tenant’s Work. As used herein the “Cost of Tenant’s Work” means the following out-of-pocket improvements casts incurred by Tenant in performing Tenants Work:

(a) Payments to contractors and subcontractors.

(b) Fees for building permits and inspections;

(c) Fees of Tenant’s engineers, surveyors, architects, attorneys and others providing professional or other services in connection with the construction of Tenant’s Work or the supervision thereof;

(d) Other direct and indirect costs incurred in connection with Tenant’s Work; and

(e) All costs necessary to keep the HVAC systems for the Premises in balance and fully operational and to ensure that all Premises systems are fully operational.

The Cost of Tenant’s Work does not include the cost of acquiring, delivering or installing Tenant’s furniture, fixtures or equipment.

1.3 Disbursement. Landlord shall disburse directly to Tenant, the Cost of Tenant’s Work, but not in excess of the Allowance within thirty (30) days following receipt of a schedule reflecting such costs, together with paid invoices supporting such costs, and satisfaction of all of the following conditions, but in no event earlier than July 16, 2010:

(a) Receipt by Landlord of a set of “as built” drawings for Tenants Work and a copy of all warranties, in effect, with respect to Tenant’s Work;

(b) Receipt by Landlord of a certificate from Tenant’s architect that all of Tenant’s Work has been fully completed and all punch list items have been corrected;

(c) Receipt by Landlord of evidence of payment by Tenant of all other costs, including extras and change orders, if any, with respect to Tenant’s Work in excess of the Allowance;

 

59

(d) The receipt of lien releases from the general contractor and all other persons who performed work on or supplied materials for use in or have lien rights with respect to Tenant’s Work;

(e) Issuance of a certificate of occupancy for the Premises by the City of Seattle, if required; and

(f) The Term of the Lease has commenced.

No payment shall be made while Tenant is in default under this Lease or the Sublease.

If, and to the extent that the full Allowance is not spent on the cost of Tenant’s Work, then so long as Tenant is not in default under this Lease or the Sublease, upon Tenant’s request on or after July 16, 2010 Landlord shall apply any remaining balance of the Allowance to the Rents coming due under this Lease until the remaining balance has been exhausted, If this Lease is terminated prior to exhaustion of the remaining balance of the Allowance, all Tenant rights as to the then-remaining balance shall terminate.

 

60

EXHIBIT D

EXPENSES, TAXES AND INSURANCE COSTS

1. Definitions.

1.1 “Excluded Costs” are all of the following: Capital Costs (to the extent not permitted by Section 2.5); depreciation; principal or interest payments of mortgage and other debts of Landlord; the cost of repairs or other work to the extent Landlord is reimbursed by insurance or condemnation proceeds; costs in connection with leasing space in the Building, including brokerage commissions, lease concessions, rental abatements and construction allowances granted to specific tenants; costs incurred in connection with the sale, financing or refinancing of the Complex; fines, interest and penalties incurred due to the late payment of Taxes or Expenses; or any penalties or damages that Landlord pays to tenants in the Complex under their respective leases; and excluding the following:

(i) Property management fees in excess of four percent (4%) of the Base Rent payable under the Lease;

(ii) Executive’s salaries above the grade of general manager;

(iii) Expenditures which under generally accepted accounting principles are considered capital expenditures, except to the extent of Capital Costs defined in Section 2.5 of the Lease;

(iv) Consulting fees, marketing fees, advertising and promotional expenditures;

(v) Legal, accounting and auditing fees, other than legal, accounting and auditing fees reasonably incurred in connection with the maintenance and operation of the Property or in connection with the preparation of the statements required pursuant to the Lease;

(vi) Rents payable in connection with any ground or underlying lease of all or any portion of the Property;

(vii) Penalties due to any violation of law by Landlord or other tenants;

(viii) Costs of preparing tenant space for tenant occupancy;

(ix) Costs of any utilities, services, or capital improvements relating to all or any portion of the Property which were paid directly by Tenant or any other tenant;

(x) Damages incurred by Landlord for any of its defaults under any leases or contracts relating to the Building or Complex, or breaches of law;

(xi) Premium rates paid on service or other contracts, except in an emergency; and

(xii) Landlord’s general administrative overhead.

 

61

1.2 “Pro Rata Percent” is a fraction the numerator of which is the Rentable Area of the Premises and the denominator of which is the Rentable Area of the Building. Tenant’s Pro Rata Percent as of the Commencement Date is specified in Section 1.11 of the Lease, Tenant’s Pro Rata Percent will be recalculated as required effective at the commencement of any period to which the calculation is applicable in this Lease. Notwithstanding the preceding provisions of this Section, Tenant’s Pro Rata Percent as to certain expenses may be calculated differently to yield a higher percentage share for Tenant as to certain expenses in the event Landlord permits other tenants in the Complex to directly incur such expenses rather than have Landlord incur the expense in common for the Complex (such as, by way of illustration, wherein a tenant performs its own janitorial services). In such case Tenant’s Pro Rata Percent of the applicable expense shall be calculated as having as its denominator the Rentable Area of the Building less the Rentable Area of tenants who have incurred such expense directly. Furthermore, in the event Tenant consumes extraordinary amounts of any provided utility or other service as determined in Landlord’s good faith judgment, Tenant’s Pro Rata Percent for such utility or service may, at Landlord’s election, be based on usage as opposed to Rentable Area of the Building, that is, Tenant’s Pro Rata Percent of such a utility or service would be calculated as having as its denominator the total usage of such utility or service in the Complex (or Building as the case may be), and having as its numerator Tenant’s usage of such utility or service, as determined by Landlord. If Tenant, with Landlord’s consent, which Landlord may grant or withhold in its arbitrary judgment, incurs such expenses directly, Tenant’s Pro Rata Percent will be calculated specially so that expenses of the same character which are incurred by Landlord for the benefit of other tenants in the Complex shall not be prorated to Tenant. If repairs are required for systems exclusively serving the Premises (whether within or outside of said Premises) and Landlord historically has not passed through such costs as Operating Cost borne by all tenants of the Building or Complex, then Tenant shall pay one hundred percent of such repair costs; provided however, if the costs are of a capital nature they shall be amortized and charged to Tenant in the same way that Capital Costs are amortized and charged under the Lease.

2. Additional Rent.

2.1 Operating Costs. Tenant shall pay to Landlord, as Additional Rent, Tenant’s Pro Rata Percent of the Operating Costs for the Building or Complex, as the case may be, for any Lease Year, calculated by multiplying the Pro Rata Percent times (a) the greater of either (i) actual Operating Costs; or (ii) Operating Costs computed as if the Building or Complex were at least ninety-five percent (95%) occupied and operational for the whole Lease Year. If any Lease Year of less than twelve months is included within the Term, the amount payable by Tenant for such period shall be prorated on a per diem basis (using a 360-day year).

2.2 Personal Property, Gross Receipts, Leasing Taxes. This Section is intended to deal with taxes directly attributed to Tenant or this transaction, as distinct from Taxes attributable to the Complex which are to be allocated among various tenants and others and which are included in Operating Costs. Tenant shall reimburse Landlord for all taxes required to be paid by Landlord, whether or not now customary or within the contemplation of the parties hereto, which are: (a) upon, measured by, or reasonably attributable to (i) the cost or value of Tenant’s equipment, furniture, fixtures and other personal property located in the Premises or (ii) if separately assessed by the tax assessor, the cost or value of any Leasehold Improvements made in or to the Premises by or for Tenant, other than Building Standard Work, regardless of

 

62

whether title to such improvements shall be in Tenant or Landlord; (b) upon or with respect to the possession, leasing, operation, management, maintenance, alteration, repair, use or occupancy by Tenant of the Premises or any portion thereof to the extent such taxes are not included as Taxes and are not a gross receipts -tax or Business and Occupations tax, provided, however, if after the date of this Lease, any new taxes or assessments are imposed that are based upon rents received from Tenant and are not otherwise included in Taxes, Landlord shall be entitled to collect reimbursement for such taxes or assessments from Tenant; and (c) upon this transaction or any document to which Tenant is a party creating or transferring an interest or an estate in the Premises.

2.3 Refuse Disposal. Tenant shall pay Landlord, within ten days of being billed therefor, for the removal from the Common Area, the Complex, or the Building of any amounts of refuse or rubbish that Tenant has generated in excess of amounts typically generated by other tenants of the Complex or of typical types of waste. However, Landlord shall have no responsibility for the removal of medical or dental wastes which shall be wholly Tenant’s responsibility as detailed in the Lease.

2.4 Method of Payment. Any Additional Rent payable by Tenant under Sections 2.1, 2.2 and 2.3 hereof shall be paid as follows, unless otherwise provided: (a) During the Term, Tenant shall pay to Landlord monthly in advance with its payment of Base Rent, one-twelfth of the amount of such Additional Rent as estimated by Landlord in advance, in good faith, to be due from Tenant during the Lease Year; and (b) annually, within ten business days after receipt of Landlord’s Operating Cost Statement. As soon as is reasonably possible after the expiration of each Lease Year, Landlord shall prepare in good faith and deliver to Tenant a comparative statement setting forth (1) the Operating Costs for such Lease Year, and (2) the amount of any other Additional Rent as determined in accordance with the provisions of this Section (“Landlord’s Operating Cost Statement”). If the aggregate amount of estimated Additional Rent payments made by Tenant in any Lease Year is less than the Additional Rent due for such year, Tenant shall pay to Landlord as Additional Rent the amount of such deficiency. Any delay in Landlord delivering the Landlord’s Operating Cost Statement shall not relieve Tenant from its obligation to pay any Additional Rent. If the aggregate amount of such Additional Rent payments made by Tenant in any Lease Year of the Term should be greater than the Additional Rent due for such year, Landlord will apply the amount of such excess to the next succeeding installments of Base Rent or such Additional Rent due hereunder; and if there is any such excess for the last year of the Term, the amount thereof will be refunded by Landlord to Tenant, within 45 days after the expiration of the Lease, to the extent Tenant is not otherwise in default under the terms of this Lease.

3. Audit Rights. Not later than 120 days of receiving Landlord’s Operating Cost Statement, Tenant may give Landlord written notice (“Review Notice”) that Tenant intends to review Landlord’s records of the Operating Costs for the Lease Year to which the statement applies. Within ten (10) business days after receipt of the Review Notice, Landlord shall make all pertinent records available for inspection that are reasonably necessary for Tenant to conduct its review. If any records are maintained at a location other than the management office for the Building, Tenant may either inspect the records at such other location or pay for the reasonable cost of copying and shipping the records, If Tenant retains an agent to review Landlord’s records, the agent must be with a CPA firm licensed to do business in the State. No audit may be

 

63

conducted wholly or partially on a contingent fee basis. Tenant is solely responsible for all costs, expenses and fees incurred for the audit, unless the Operating Costs were overstated by more than 5% in which case Landlord shall pay the reasonable out-of-pocket cost of the audit. Within ninety (90) days after the records are made available to Tenant, Tenant shall have the right to give Landlord written notice (an “Objection Notice”) stating in reasonable detail any objection to Landlord’s Operating Cost Statement for that Lease Year. If Tenant fails to give Landlord an Objection Notice within the 90-day period or fails to provide Landlord with a Review Notice within the 120-day period described above, Tenant shall be deemed to have approved Landlord’s Operating Cost Statement and shall be barred from raising any claims regarding the Expenses for that Lease Year. The records obtained by Tenant shall be treated as confidential. In no event shall Tenant be permitted to examine Landlord’s records or to dispute any Operating Cost Statement unless Tenant shall not be in default under this Lease.

 

64

EXHIBIT E

RULES AND REGULATIONS

 

1.	No sign, placard, picture, advertisement, name or notice shall be inscribed, displayed or printed or affixed on the Building or to any part thereof, or which is visible from the outside of the Building, without the prior written consent of Landlord, first had and obtained and Landlord shall have the right to remove any unapproved sign, placard, picture, advertisement, name or notice which was affixed by Tenant without notice and at the expense of Tenant.
 

  	All approved signs or lettering on doors shall be printed, affixed or inscribed at the expense of Tenant by a person approved by Landlord.
 

  	Tenant shall not place anything or allow anything to be placed near the glass of any window, door, partition or wall which may appear unsightly from outside the Premises.
 

2.	If a directory is located at the Building, it is provided exclusively for the display of the name and location of tenants only and Landlord reserves the right to exclude any other names therefrom.
 

3.	The sidewalks, passages, exits, entrances, and stairways in and around the Building shall not be obstructed by Tenant or used by it for any purpose other than for ingress to and egress from the Premises. The passages, exits, entrances, stairways, and roof are not for the use of the general public and Landlord shall in all cases retain the right to control and prevent access thereto by all persons whose presence in the judgment of Landlord shall be prejudicial to the safety, character, reputation and interests of the Building and its Tenants, provided that nothing herein contained shall be construed to prevent such access to persons with whom Tenant normally deals in the ordinary course of Tenant’s business unless such persons are engaged in illegal activities. Neither Tenant nor any employees or invitees of Tenant shall go upon the roof of the Building (except to service or inspect any Tenant-installed HVAC system or Device).
 

4.	Tenant shall not be permitted to install any additional lock or locks on any door in the Building unless written consent of Landlord shall have first been obtained. Two keys will be furnished by Landlord for every room.
 

5.	The toilets and urinals shall not be used for any purpose other than those for which they were constructed, and no rubbish, newspapers or other substances of any kind shall be thrown into them. Waste and excessive or unusual use of water shall not be allowed. Tenant shall be responsible for any breakage, stoppage or damage resulting from the violation of this rule by Tenant or its employees or invitees.
 

6.	Tenant shall not overload the floor of the Premises or mark, drive nails, screw or drill into the partitions, woodwork or plaster (except to hang shelving, art work and other such normal uses) or in any way deface the Premises or any part thereof.
 

65

7.	Tenant shall not use, keep or permit to be used or kept any foul or noxious gas or substance in the Premises, or permit or suffer the Premises to be occupied or used in a manner offensive or objectionable to Landlord or other occupants of the Building by reason of noise, odors and/or vibrations, or interfere in any way with other Tenants or those having business therein. Tenant shall have the right to establish locked rooms or other secured areas within the Premises at Tenant’s sole cost and risk so long as keys and/or other access devices to such spaces are provided to Landlord.
 

8.	The Premises shall not be used for the storage of merchandise (with the exception of a limited quantity of sample merchandise), for washing clothes, for lodging, or for any improper, objectionable, or immoral purposes.
 

9.	Tenant shall not use or keep in the Premises or the Building any kerosene, gasoline, or inflammable or combustible fluid or material (except as otherwise Remained by the Lease) or use any method of heating or air conditioning other than that supplied by Landlord.
 

10.	Landlord will direct electricians as to the manner and location in which telephone and telegraph wires are to be introduced. No boring or cutting for wires will be allowed without the consent of Landlord. The location of telephones, call boxes and other office equipment affixed to the Premises shall be subject to the approval of Landlord.
 

11.	Tenant shall not lay linoleum, tile, carpet or other similar floor covering so that the same shall be affixed to the floor of the Premises in any manner except as approved by Landlord. The expense of repairing any damage resulting from a violation of this rule or removal of any floor covering shall be borne by Tenant.
 

12.	Exterior blinds are furnished for each window by Landlord. Any additional window covering desired by Tenant shall be approved by Landlord.
 

13.	Landlord reserves the right to exclude or expel from the Building any person who, in the judgment of Landlord, is intoxicated or under the influence of liquor or drugs, or who shall in any manner do any act in violation of any of the rules and regulations of the Building.
 

14.	Tenant shall not disturb, solicit, or canvass any occupant of the Building.
 

15.	Without the written consent of Landlord, Tenant shall not use the name of the Building in connection with or in promoting or advertising the business of Tenant except as Tenant’s address.
 

16.	Tenant shall not permit any contractor or other person making any alterations, additions or installations within the Premises to use the hallways, lobby or corridors as storage or work areas outside of the Premises without the prior written consent of Landlord. Tenant shall be liable for and shall pay the expense of any additional cleaning or other maintenance required to be performed by Landlord as a result of the transportation or storage of materials or work performed with the Building by or for Tenant.
 

66

17.	Tenant shall be entitled to use parking spaces as designated in the Lease, subject to such reasonable conditions and regulations as may be imposed from time to time by Landlord. Tenant agrees that vehicles of Tenant or its employees, or agents shall not park in driveways nor occupy parking spaces or other areas reserved for any use such as Visitors, Delivery, Loading, or other tenants. Landlord or its agents, shall have the right to cause or be removed any car of Tenant, its employees or agents, that may be parked in unauthorized areas, and Tenant agrees to save and hold harmless Landlord, its agents and employees from any and all claims, losses, damages and demands asserted or arising in respect to or in connection with the removal of any such vehicle. Tenant, its employees, or agents shall not park campers, trucks or cars on the Building parking areas overnight or over weekends. Tenant will from time to time, upon request of Landlord, supply Landlord with a list of license plate numbers of vehicles owned or operated by its employees and agents.
 

18.	Landlord reserves the right to make reasonable modifications hereto and such other and further reasonable rules and regulations as in its reasonable judgment may be required for the safety, care and cleanliness of the Premises and the Building and for the preservation of good order therein. Tenant agrees to abide by all such rules and regulations, so long as the some are not inconsistent with the Lease.
 

19.	Canvassing, soliciting and peddling is prohibited in the Building and each Tenant shall cooperate to prevent the same.
 

20.	Landlord is not responsible for the violation of any rule contained herein by any other Tenant.
 

21.	Landlord may waive any one or more of these rules for the benefit of any particular Tenant, but no such waiver shall be construed as a waiver of Landlord’s right to enforce these rules against any or all Tenants occupying the Building.
 

22.	Tenant is responsible for purchasing and installing a security system if required by Law or Regulation. The cost of purchasing and installation of any such system is the sole cost and expense of Tenant.
 

67

EXHIBIT F

GUARANTY OF LEASE

As an inducement to FREMONT LAKE UNION CENTER, LLC, a Delaware limited liability company (“Landlord”) to enter into that Lease dated                     , 2009 which covers certain premises located in the Plaza Building at 701 North 34th Street, Seattle, Washington (the “Lease”) with CUTTER &amp; BUCK INC., a Washington corporation (“Tenant”), the undersigned (hereinafter “Guarantor”), being financially interested in Tenant and benefiting from the Lease, hereby guarantees to Landlord the full and prompt payment of all sums, including, but not limited to, the rent, taxes, insurance, utility charges and any and all other sums and charges payable by the Tenant under the Lease, including during the Renewal Term, if extended, and the full and prompt performance and observance of all the covenants, terms conditions and agreements therein provided to be performed and observed by Tenant. Guarantor hereby covenants and agrees to and with Landlord that if Tenant or its successors or assigns at any time defaults in the payment of any such sum or in the performance of any of the terms, covenants, provisions or conditions contained in the Lease and such default is not cured within the applicable cure period, Guarantor will immediately pay such sum or will forthwith perform and fulfill such terms, covenants and conditions and agreements, and will immediately pay to Landlord, its successors and assigns all damages that may arise as a consequence of any default by Tenant under the Lease, including without limitation, all reasonable attorneys’ fees incurred by Landlord. This is an absolute and unconditional guaranty of payment and performance.

The obligations hereunder are independent of the obligations of Tenant, and a separate action or actions may be brought and prosecuted against Guarantor, regardless of whether an action is brought against Tenant and regardless of whether Tenant is joined in such action or actions. The liability of Guarantor hereunder is primary and shall not be affected or diminished by any transfer, of Tenant’s interest in the Lease.

Guarantor authorizes Landlord, without notice or demand and without affecting Guarantor’s liability hereunder, from time to time to (a) accelerate or otherwise change the time for payments under or otherwise change the terms of, the Lease or any part thereof, by agreement with Tenant; (b) release or substitute any one or more guarantors; (c) modify or alter the liability of Tenant under the Lease; or (d) to settle or compromise any claim of Landlord against Tenant. Landlord may assign the Lease and/or this Guaranty in whole or in part, without notice and without in any manner affecting Guarantor’s obligations hereunder.

Guarantor waives any right to require Landlord to (a) proceed against Tenant; (b) proceed against or exhaust any security held from Tenant; or (c) pursue any other remedy in Landlord’s power whatsoever. Guarantor waives any defense arising by reason of any disability or other defense of Tenant or by reason of the cessation from any cause whatsoever of the liability of Tenant. Until all obligations of Tenant to Landlord under the Lease shall have been fully paid and performed, Guarantor shall have no right of subrogation, and waives any right to enforce any remedy which Landlord now has or may hereafter have against Tenant, and waives any benefit of, and any right to participate in any security now or hereafter held by Landlord, Except for the right to receive notice of default as set forth below, and the cure periods provided to Tenant under the Lease, Guarantor waives all presentments, demands for performance, notices of

 

68

nonperformance, protests, notices of protest, notices of dishonor, notices of acceptance of this Guaranty and of the existence, creation or incurring of new or additional indebtedness and all other notices of every kind and nature to which Guarantor might otherwise be entitled as a matter of law.

Any indebtedness of Tenant now or hereafter held by Guarantor is hereby subordinated to the indebtedness of Tenant to Landlord and such indebtedness of Tenant to Guarantor, if Landlord so requests, shall be collected, enforced and received by Guarantor as a trustee for Landlord and be paid over to Landlord on account of the indebtedness of Tenant to it, but without reduction or affecting in any manner the liability of Guarantor under the other provisions of this Guaranty. Until such time as the Lease has been paid and performed in full, Guarantor agrees not to exercise any rights any of them may now or hereafter acquire against Tenant (whether by subrogation, reimbursement, or otherwise) arising out of payments to Landlord hereunder. Guarantor hereby waives and relinquishes in favor of Landlord and Tenant any claim or right to payment Guarantor may now have or hereafter have or acquire against Tenant, by subrogation or otherwise.

Notwithstanding anything to the contrary in this Guaranty, in the event Guarantor (i) sells or transfers (including without limitation a transfer resulting from a sale of stock or a merger, consolidation or reorganization) a controlling ownership interest in Tenant to a Qualified Transferee (as defined below), and provides to Landlord a substitute guaranty executed by such Qualified Transferee in substantially the same form, and with the same legal effect, as this Guaranty, or (ii) provides to Landlord a substitute for this Guaranty in the form of a letter of credit in a form, from an issuer and in an amount acceptable to Landlord in its sole discretion, then in either case this Guaranty shall be deemed terminated and Guarantor shall be released from all further liability under this Guaranty and/or the Lease accruing after the date of the substitution. The term “Qualified Transferee” shall mean any person or entity having an audited Tangible Net Worth (as defined below) not less than 550,300,000 Swedish Krona, being the Tangible Net Worth of Guarantor as of the date hereof. The term “Tangible Net Worth” shall Mean the excess of total assets over total liabilities, in each case as determined in accordance with International Financial Reporting Standards (IFRS), excluding, however, from the determination of total assets all assets which would be classified as intangible assets under IFRS, including goodwill, customer relations, licenses, patents, trademarks, trade names, copyrights and franchises.

Guarantor agrees that it is not necessary for Landlord to inquire into the powers of Tenant or any officers, directors or agents acting or purporting to act on its behalf, and any indebtedness made or created in reliance upon the professed exercise of such powers shall be guaranteed hereunder. Guarantor warrants that this Guaranty has been duly authorized by all necessary authorities.

The Guarantor agrees to assume full responsibility for keeping itself informed as to the financial condition of Tenant and all other circumstances bearing upon risk of non-payment or non-performance of the Obligations which diligent inquiry would reveal with Lender to have no duty to advise the Guarantor of any information, whether known to Landlord or otherwise, regarding the financial or other condition of Tenant.

 

69

This Guaranty shall bind the successors and assigns of Guarantor and shall inure to the benefit of the heirs, personal representatives, successors, and assigns of Landlord. In the event that the Lease is assigned or transferred by Landlord (“Landlord Assignment”), this Guaranty may likewise be assigned and/or endorsed by Landlord to the assignee of the Lease (assignment of the Lease to also be deemed to be an assignment of this Guaranty), and in such event, the holder of this Guaranty may enforce this Guaranty as if such holder had been originally named as the Landlord hereunder.

This Guaranty shall be governed by and construed in accordance with the laws of the State of Washington. Guarantor hereby irrevocably agrees that any legal action or proceedings against Guarantor with respect to this Guaranty may be brought in the courts of the State of Washington sitting in King County, Washington, or in any United States District Court for the Western District of Washington, and by Guarantor’s execution and delivery of this Guaranty, Guarantor hereby irrevocably submits to each such jurisdiction and hereby irrevocably waives any and all objections which Guarantor may have as to venue in any of such courts.

Guarantor agrees to pay all costs of enforcement of this Guaranty, including Landlord’s reasonable attorneys’ fees and all costs and expenses of suit and in preparation therefor and on appeal therefrom. Any sums due hereunder which are not paid when due shall bear interest at the rate specified for delinquent payments in the lease.

This Guaranty shall continue in full force and effect and shall be unaffected by any bankruptcy, reorganization or insolvency of Tenant or any successor or assign of Tenant or any disaffirmance or rejection of the Lease by a trustee of Tenant or any trustee of any successor or assign of Tenant.

The Guarantor hereby waives its right to a jury trial with respect to any legal proceeding involving or enforcing this Guaranty.

Landlord agrees to provide Guarantor with a copy (if any written notice of default given by Landlord to Tenant. Any notices to be sent to Guarantor shall be given by and be effective upon personal delivery or deposit with any recognized overnight delivery services (such as Federal Express) addressed to Guarantor at the address set forth below the signature line below, or at any replacement address designated in writing received by Landlord not later than ten (10) days prior to any such notice by Landlord.

This instrument may not be changed, modified, discharged, or terminated orally or in any manner other than by an agreement in writing signed by Guarantor and the Landlord.

If any provision of this Guaranty or the application thereof to any person or circumstances shall, for any reason and to any extent, be invalid or unenforceable, the remainder of this Guaranty and the application of that provision to other persons or circumstances shall not be affected but rather shall be enforced to the extent permitted by law. This Guaranty shall be construed without regard to any presumption or other rule requiring construction against the party causing this Guaranty to be drafted.

 

70

IN WITNESS WHEREOF, Guarantor has executed this Guaranty as of this 19 day of October, 2009.

 

GUARANTOR
NEW WAVE GROUP AB (Publ), a corporation organized under the laws of Sweden
By:	 	
/s/ Lars Jansson

Its:	 	CFO
U.S. Address for Notice:
 

 

 

 

71

EXHIBIT B

 

LOGO

 

72

EXHIBIT C

LANDLORD’S CONSENT TO SUBLEASE

FREMONT LAKE UNION CENTER LLC, a Delaware limited liability company, being landlord (“Landlord”) under terms of a lease dated October 21, 2009 (the “Master Lease”) consents to the foregoing Sublease (the “Sublease”) from CUTTER &amp; BUCK INC., a Washington corporation, tenant under the Master Lease (“Tenant”), to TABLEAU SOFTWARE, INC., a Delaware corporation, as sublessee (“Sublessee”), subject expressly to Tenant’s and Sublessee’s written agreement to all of the following:

1. Nothing contained herein shall be construed to modify, waive or affect (i) any of the provisions, covenants or conditions in the Master Lease, (ii) any of Tenant’s obligations under the Master Lease or those of any guarantor (“Guarantor”) of Tenant’s obligations under the Master Lease, or (iii) any rights or remedies of Landlord under the Master Lease or otherwise or to enlarge or increase Landlord’s obligations or Tenant’s rights under the Master Lease or otherwise or be construed to waive any present or future breach or default on the part of Tenant or Sublessee under the Master Lease. Notwithstanding the foregoing, Landlord hereby (i) consents to Sublessee installing, at Sublessee’s cost, building-standard signage at the elevator bank of the floor on which the Subleased Premises is located, and (ii) conceptually approves Sublessee installing, at Sublessee’s sole cost, the improvements within, to and servicing the Subleased Premises (the “Subtenant Improvements”) described on Exhibit C-1 attached hereto and by this reference incorporated herein, subject to Sublessee first obtaining Landlord’s approval of the plans and specifications therefor and otherwise complying in full with the requirements of Article 17 of the Master Lease with respect thereto and not permitting occupancy of the Subleased Premises at a level which will exceed the designed HVAC system level for the Building or Premises.

2. Nothing contained herein shall release or discharge Tenant or Guarantor from any liability under the Master Lease, and Tenant and Guarantor shall remain primarily liable and responsible for the full performance and observance of all of the provisions, covenants and conditions set forth in the Master Lease on the part of Tenant to be performed and observed. Any breach or violation of any provisions of the Master Lease by Sublessee shall be deemed to be and shall constitute a default by Tenant in fulfilling such provision. Tenant shall be obligated to pay Landlord upon demand all reasonable attorneys’ fees and other costs resulting from disputes or lawsuits in which Landlord is involved as a consequence of disagreements between Tenant and Sublessee or the bankruptcy or insolvency of Sublessee.

3. The Sublease is subordinate to the Master Lease, and any termination of the Master Lease shall result in an automatic termination of the Sublease unless otherwise first agreed in writing by Landlord.

4. Sublessee shall have no right to enforce Tenant’s rights under the Master Lease, all of which enforcement rights are personal to Tenant.

5. Landlord’s consent shall not be construed as a consent by Landlord to any further sublease. Landlord’s consent shall be required for any amendment or modification of the Sublease. Sublessee’s interest under the Sublease may not be assigned, transferred or encumbered, nor shall the Premises, or any part thereof, be further sublet without the express prior written consent of Landlord.

 

73

6. Tenant shall be and continue to remain liable for all bills and charges incurred by or imposed under the Master Lease for services rendered and materials supplied to the Premises during the term of the Master Lease. While Tenant consents thereto, Landlord’s acceptance of a payment from Sublessee shall not be deemed an attornment by Sublessee to Landlord or to release Tenant from liability.

7. Upon the expiration or any earlier termination of the term of the Master Lease, or in case of the surrender of the Master Lease by Tenant to Landlord, except as provided in the following sentence, the Sublease and its term shall expire and come to an end as of the effective date of such expiration, termination, or surrender and Sublessee shall vacate the subleased premises on or before such date. If the Master Lease shall expire or terminate during the term of the Sublease for any reason other than condemnation or destruction by fire or other cause, or if Tenant shall surrender the Master Lease to Landlord during the term of the Sublease, Landlord, in its sole discretion (upon written notice given to Tenant and Sublessee not more than thirty (30) days after the effective date of such expiration, termination or surrender and without any additional or further agreement of any kind on the part of Sublessee), may elect to continue the Sublease with the same force and effect as if Landlord as lessor and Sublessee as lessee had entered into a lease as of such effective date for a term equal to the then unexpired term of the Sublease and containing the same terms and conditions as those contained in the Sublease. In such event, Sublessee shall attorn to Landlord and Landlord and Sublessee shall have the same rights, obligations and remedies thereunder as were had by Tenant and Sublessee thereunder prior to such effective date, respectively, except that in no event shall Landlord be (a) liable for any act or omission by Tenant, (b) subject to any offsets or defenses which Sublessee had or might have against Tenant, (c) bound by any rent or additional rent or other payment paid by Sublessee to Tenant in advance, (d) obligated to honor any right of first opportunity, right of first refusal, or expansion rights granted to Sublessee under the Sublease, or (e) bound by any amendment to the Sublease not consented to by Landlord. Upon expiration of the Sublease pursuant to the provisions of the first sentence of this Paragraph 7, in the event of the failure of Sublessee to vacate the subleased premises as therein provided, Landlord shall be entitled to all the rights and remedies available to a landlord against a tenant holding over after the expiration of a term.

8. Tenant shall reimburse Landlord within five (5) business days of demand for Landlord’s reasonable attorneys’ fees and costs incurred in connection with the Sublease and this Consent, which sums shall bear interest at the rate of twelve percent (12%) per annum from due date until paid.

9. Tenant shall reimburse Landlord within five (5) business days of demand for all of Landlord’s costs and expenses incurred in connection with its review of Sublessee’s proposed alterations of, and improvements to, the Subleased Premises and the monitoring of such work.

10. Sublessee shall concurrently herewith provide Landlord with a certificate evidencing that Sublessee has in place the insurance required of Tenant by the terms of the Master Lease.

 

74

Dated: 26 April, 2012.

 

LANDLORD
FREMONT LAKE UNION CENTER LLC,

a Delaware limited liability company

By

 	UNION INVESTMENT REAL ESTATE GMBH
 	By	 	
/s/ Illegible

 	Its	 	Director of LLC
 	By	 	
/s/ Illegible

 	Its	 	Authorized Officer
Agreed and accepted this 19th day of April, 2012.

TENANT

CUTTER &amp; BUCK INC., a Washington corporation

 

 	By	 	
/s/ David Hauge

 	Its	 	CFO
SUBLESSEE

TABLEAU SOFTWARE, INC., a Delaware corporation

 

 	By	 	
/s/ Thomas E. Walker, Jr.

 	Its	 	CFO
 

75

EXHIBIT C-1

SUBTENANT IMPROVEMENTS

All planned subtenant improvements are within, to and servicing the Subleased Premises (as defined in the Sublease), which Subleased Premises comprise a portion of Suite 230 (“Suite 230”) of the Premises containing approximately 6,697 rentable square feet of space as shown by the cross-hatching on Exhibit B attached to the Sublease. Terms not otherwise defined herein shall have the meanings given them in the Sublease.

1. Run fiber to the Tenant Intermittent Distribution Frame/server closet (the “Tenant IDF Server Closet”) located in Suite 230. Run conduit and fiber from the network core located at Subtenant’s existing premises (the “Subtenant Headquarters”) in the building (the “Lakeview Building”) located at 837 North 34th Street, Seattle, Washington, through the Building to the Tenant IDF Server Closet, and connect thereto. Routing will be from tenant IDF through Building IDF, down riser to P2 Main Point of Entry. Routing from Subtenant Headquarters to Main Point of Entry to be determined and approved by Lakeview Landlord.

2. Run power to the Tenant IDF Server Closet. Run additional power to the wiring in the Tenant IDF Server Closet, and connect thereto. The Tenant IDF Server Closet currently has a single 110-volt outlet, which is not adequate for Subtenant’s network system and equipment (“Subtenant’s Network”). Subtenant to add four (4) additional 110-volt 20-amp circuits.

3. Install UPS in the Tenant IDF Server Closet. Purchase and install Uninterruptible Power Supply (“UPS”) in the Tenant IDF Server Closet to protect Subtenant’s Network from power spikes. System will not have sufficient battery backup to allow operations during a power outage, but will be upgradable if this is desired in the future and will be submitted to landlord for approval.

4. Install cooling in the Tenant IDF Server Closet. Sub-tenant has submitted load calculations (4996 btu/h) to Landlord for approval of additional cooling which will either be exhaust fan or water cooled wall mounted cooling unit with the primary requirement to keep IDF room temperature at a maximum of 75 degrees on a 7x24 basis.

5. Install network gear in the Tenant IDF Server Closet. Install Cisco 4510 switch and patch panels in the Tenant IDF Server Closet, and connect as needed with Subtenant’s Network.

6. Install cabling. Install data cables for interconnecting the network gear and patch panels referenced above and Subtenant’s Network.

7. Install horizontal wiring from the Tenant IDF Server Closet to workstations in the Subleased Premises. Install data wiring from the Tenant IDF Server Closet to each office, cubicle and conference room in the Subleased Premises. Per Subtenant standard, each cubicle will get two network jacks.

8. Replace flooring/carpet in the Subleased Premises.

9. Install furniture including new workstation components, office desks, and conference room equipment in the Subleased Premises.

 

76
</file>
<file name="skills/summarization/data/sample-lease4-summary.txt">
Description: Sublease Agreement Summary: Blue Coat Systems to Infoblox Inc. This document summarizes a sublease agreement for office space in Sunnyvale, California, between Blue Coat Systems and Infoblox Inc., subject to the master lease with Sunnyvale VIII Trust.

&lt;parties_involved&gt;
- Sublessor: Blue Coat Systems (formerly CacheFlow Inc.), a Delaware corporation
- Sublessee: Infoblox Inc., a Delaware corporation
- Original Lessor: Sunnyvale VIII Trust, a Maryland business trust
&lt;/parties_involved&gt;

&lt;property_details&gt;
- Address: 475-477 Potrero Avenue, Sunnyvale, California
- Description: Approximately 45,823 square feet of space
- Permitted use: General office use, research and development, and other legal related uses
&lt;/property_details&gt;

&lt;term_and_rent&gt;
- Start date: October 7, 2004 (Commencement Date)
- Rent Commencement Date: October 15, 2004
- End date: June 30, 2006
- Monthly rent: $23,827.96
- Security deposit: $23,827.96
- Additional security: Letter of Credit for $37,000
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Sublessee responsible for utilities and janitorial costs
- Maintenance and repairs: Sublessee to keep premises in the same condition as received, ordinary wear and tear excepted
- Operating expenses: Sublessor responsible for all other operating expenses under the Master Lease
&lt;/responsibilities&gt;

&lt;consent_and_notices&gt;
- Landlord's consent: Required and obtained from Sunnyvale VIII Trust
- Notice requirements: Written notices to be served personally or sent by prepaid, first-class certified mail or commercial overnight delivery service
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
- Furniture: Sublessee has use of existing furniture, fixtures, and equipment (FF&amp;E) at no additional cost
- Parking: Sublessee has the right to use all parking spaces associated with the premises as specified in the Master Lease
- Subletting restrictions: Sublessee may not assign or sublet without prior written consent from both Sublessor and Master Lessor
- Signage: Sublessee may place signs on or about the premises in compliance with the Master Lease
- Insurance: Sublessee required to provide insurance as described in the Master Lease, including additional insureds
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease4.txt">
Source: https://www.sec.gov/Archives/edgar/data/1095600/000119312504210218/dex104.htm

EX-10.4 5 dex104.htm COMMERCIAL SUBLEASE AGREEMENT
Exhibit 10.4

 

SUBLEASE AGREEMENT

 

This Sublease Agreement (“Sublease”) is made effective as of the 7th day of October, 2004, (the “Effective Date”) by and between Blue Coat Systems, a Delaware corporation (“Sublessor”), and Infoblox Inc., a Delaware corporation (“Sublessee”). Sublessor agrees to sublease to Sublessee, and Sublessee agrees to sublease from Sublessor, those certain premises situated in the City of Sunnyvale, County of Santa Clara, State of California, consisting of approximately 45,823 square feet of space known as 475-477 Potrero Avenue, more particularly set forth on Exhibit “A” hereto (the “Subleased Premises”).

 

ARTICLE 1

 

MASTER LEASE AND OTHER AGREEMENTS

 

1.1 Subordinate to Master Lease. Except as specifically set forth herein, this Sublease is subject and subordinate to all of the terms and conditions of the lease (the “Lease”) dated as of March 20, 2001, between Sunnyvale VIII Trust, a Maryland business trust (“Master Lessor”) and CacheFlow Inc., a Delaware corporation, now known as Blue Coat Systems, as “Lessee”. The Lease is sometimes referred to herein as the “Master Lease”. Sublessee hereby assumes and agrees to perform the obligations of Lessee under the Master Lease as more particularly set forth hereafter and Sublessor agrees to perform the obligations of Lessee under the Lease to the extent not assumed by Sublesee under this Sublease. Unless otherwise defined, all capitalized terms used herein shall have the same meanings as given them in the Master Lease. A copy of the Master Lease is attached hereto as Exhibit “A” and incorporated herein by this reference. With respect to the obligations assumed by Sublessee, Sublessee shall not commit or permit to be committed any act or omission which would violate any term or condition of the Master Lease. With respect to the obligations assumed by Sublessee, Sublessee shall neither do nor permit anything to be done which would cause the Master Lease to be terminated or forfeited by reason of any right of termination or forfeiture reserved or vested in Master Lessor under the Master Lease. Sublessee and Sublessor shall each indemnify and hold the other harmless from and against all liability, judgments, costs, demands, claims, and damages of any kind whatsoever (including, without limitation, attorneys’ fees and court costs) by reason of any failure on the part of Sublessee to perform any of the obligations of Lessee under the Master Lease which Sublessee and Sublessor are obligated hereunder to perform. In the event of the termination of Sublessor’s interest as Lessee under the Master Lease by Master Lessor, then this Sublease shall terminate automatically upon such termination without any liability of Master Lessor or Sublessor to Sublessee. If there is any right to terminate the Lease on the part of Lessee under the Master Lease, to the extent Master Lessor consents to the assignment by Sublessor of such right to terminate, such right is hereby assigned to Sublessee and only Sublessee, and not Sublessor, may exercise such right. Sublessee represents and warrants to Sublessor that it has read and is familiar with the Master Lease.

 

1.2 Applicable Provisions. All of the terms and conditions contained in the Master Lease as they may apply to the Subleased Premises, except those directly contradicted by the terms and conditions contained in this document, and specifically except for Sections 1, 2, 3, 4, 5, 6(e), 8, 9, 13(a), 21, 29, 30, 31, 36, 41, 42, 43, 51, Exhibits C, and C-1 through C-3, and

Exhibit D are incorporated herein and shall be terms and conditions of this Sublease (with each reference therein to “Landlord” or “Lessor”, “Tenant” or “Lessee” and “Lease” to be deemed to refer to Sublessor, Sublessee, and Sublease, respectively, as appropriate except the following provisions that are incorporated herein, the reference to Landlord or Lessor shall mean Master Lessor only: Sections 19 and 10(e)-(f)), and along with all of the following terms and conditions set forth in this document, shall constitute the complete terms and conditions of this Sublease.

 

1.3 Obligations of Sublessor. The only services or rights to which Sublessee is entitled hereunder from Master Lessor are those to which Sublessor is entitled under the Master Lease, and for all such services and rights Sublessee shall look solely to the Master Lessor under the Master Lease, and the obligations of Sublessor hereunder shall be limited to using its reasonable good faith efforts to obtain the performance by Master Lessor of its obligations. Should Sublessor be unable to obtain any performance by Master Lessor, Sublessor hereby assigns to Sublessee the right to seek to obtain such performance, such right to include legal action against Master Lessor. Sublessor shall have no liability to Sublessee or any other person for damage of any nature whatsoever as a result of the failure of Master Lessor to perform said obligations except for Master Lessor’s termination of the Sublessor’s interest as Lessee under the Master Lease in the event of Sublessor’s breach of the Master Lease, and Sublessee shall indemnify and hold Sublessor harmless from any and all claims and liability whatsoever for any such damage (unless such damage is caused by Sublessor’s breach of the Master Lease) including, without limitation, all costs and attorneys’ fees incurred in defending against same. With respect to any obligation of Sublessee to be performed under this Sublease other than a monetary obligation, when the Master Lease grants Sublessor a specific number of days to perform its obligations thereunder, Sublessee shall have two (2) fewer days to perform, provided that if Sublessor is in receipt of a notice of default from Master Lessor, Sublessor agrees to promptly transmit such notice by facsimile to Sublessee, attention: Eric Carlsen at (408) 716-4400 and Sublessee shall have two (2) fewer days than the number of days specified in such notice or the number of days to perform as provided in the Master Lease. With respect to any monetary obligation of Sublessee to be performed under this Sublease, Sublessee shall make the payments on or before the date that such payment is due. With respect to approval required to be obtained from “Landlord” under the Master Lease, such consent must be obtained from Master Lessor and Sublessor and the approval of Sublessor may be withheld if Master Lessor’s consent is not obtained.

 

ARTICLE 2

 

TERM

 

2.1 Term. The term of this Sublease shall commence on the date Sublessee fully executes and delivers this Sublease to Sublessor accompanied by the Security Deposit and the Letter of Credit (which Letter of Credit may be delivered within ten (10) days after such full execution) required pursuant to Section 4.2 hereof, and provide copies of all licenses and authorizations that may be required for the lawful operation of Sublessee’s business upon the Premises, including, without limitation, any business licenses that may be required by the City of Sunnyvale. This shall be referred to as the “Commencement Date.” The Rent shall commence on October 15, 2004 (the “Rent Commencement Date”). The term of this Sublease shall end on June 30, 2006, unless sooner terminated pursuant to any provision of the Master Lease applicable to the Subleased Premises (the “Expiration Date”). Sublessor shall have no obligation to Sublessee to exercise any of its options to extend under the Master Lease.

 

-2-

2.2 Option to Extend. Sublessee shall have no option to extend this Sublease.

 

2.3 Sublessee’s Early Occupancy of the Subleased Premises. If Sublessee, with Sublessor’s consent, takes possession prior to Rent Commencement Date, Sublessee shall do so subject to all the covenants and conditions hereof, and Sublessee shall not be required to pay Rent for such early possession prior to the Rent Commencement Date.

 

ARTICLE 3

 

RENT

 

3.1 Rent. Commencing on the Rent Commencement Date, Sublessee shall pay to Sublessor each month during the term of this Sublease, rent in the amount of Twenty Three Thousand Eight Hundred Twenty Seven and 96/100 Dollars ($23,827.96), in advance, on execution hereof for the first month and on or before the first of each month thereafter (“Base Rent”). Rent for partial months at the commencement or termination of this Sublease shall be prorated. Rent shall be paid to the Sublessor at its business address noted herein, or at any other place Sublessor may from time to time designate by written notice mailed or delivered to Sublessee.

 

3.2 Additional Rent. If Sublessee shall procure any additional services from Master Lessor, or if additional rent or other sums are incurred for Sublessee’s sole benefit, Sublessee shall make such payment to Sublessor or Master Lessor, as Sublessor shall direct and such charges shall not be pro rated between Sublessor and Sublessee. Any other rent or other sums payable by Sublessee under this Article 3 shall constitute and be due as additional rent. Base Rent and additional rent shall herein be referred to as “Rent”.

 

3.3 Operating Expenses. This Sublease shall be gross in nature. Sublessee shall be responsible for utilities and janitorial costs. All other operating expenses under the Master Lease shall be the responsibility of Sublessor.

 

ARTICLE 4

 

SECURITY DEPOSIT

 

4.1 Security Deposit. Upon execution hereof, Sublessee shall deposit with Sublessor the sum of Twenty Three Thousand Eight Hundred Twenty Seven and 96/100 Dollars ($23,827.96) as and for a Security Deposit to secure Sublessee’s full and timely performance of all of its obligations hereunder. If Sublessee fails to pay Rent or any other sums as and when due hereunder, or otherwise defaults and/or fails to perform with respect to any provision of this Sublease, Sublessor may (but shall not be obligated to) use, apply, or retain all or any portion of said deposit for payment of any sum for which Sublessee is obligated or which will compensate Sublessor for any loss or damage which Sublessor may suffer thereby and to which Sublessor may be entitled by law, including, without limitation, any damage that will result in the future through the term of the Sublease, to repair damage to the Subleased Premises, to clean the

 

-3-

Subleased Premises at the end of the term or for any loss or damage caused by the act or omission of Sublessee or Sublessee’s officers, agents, employees, independent contractors or invitees. Sublessee waives the provisions of California Civil Code Section 1950.7 and all other provisions of law now in force or that become in force after the date of execution of this Sublease that provide that Sublessor may claim from a security deposit only those sums reasonably necessary to remedy defaults in the payment of Rent, to repair damage caused by Sublessee or to clean the Subleased Premises. Any such use, application, or retention shall not constitute a waiver by Sublessor of its right to enforce its other remedies hereunder, at law, or in equity. If any portion of said deposit is so used, applied, or retained, Sublessee shall, within ten (10) days after delivery of written demand from Sublessor, restore said deposit to its original amount. Sublessee’s failure to do so shall constitute a material breach of this Sublease, and in such event Sublessor may elect, among or in addition to other remedies, to terminate this Sublease. Sublessor shall not be a trustee of such deposit, and shall not be required to keep this deposit separate from its accounts. Sublessor alone shall be entitled to any interest or earnings thereon and Sublessor shall have the free use of same. If Sublessee fully and faithfully performs all of its obligations hereunder, then the deposit, less any amounts used by Sublessor as permitted by this section and not reimbursed by Sublessee, shall be returned to Sublessee (without payment of interest or earnings thereon) within 30 days after the later of (i) expiration or sooner termination of the term hereof, or (ii) Sublessee’s surrender of possession of the Subleased Premises to Sublessor.

 

4.2 Letter of Credit. Two (2) business days after Sublessee’s receipt of a copy of the Consent by Master Lessor to this Sublease, Sublessee shall provide to Sublessor an unconditional, clean, irrevocable Letter of Credit (“Letter of Credit”) in the amount of Thirty Seven Thousand and no/100 Dollars ($37,000) in favor of Sublessor and issued by a bank (which accepts deposits, maintains accounts and will negotiate a letter of credit, and whose deposits are insured by the FDIC) located in the Bay Area and reasonably acceptable to Sublessor (“Issuer”). The Letter of Credit shall (1) be fully transferable by Sublessor to a successor in its interest under this Sublease without payment of transfer fees, (2) permit multiple drawings, and (3) provide that draws, including partial draws, at Sublessor’s election, will be honored upon the delivery to the Issuer a certificate signed by Sublessor, or its authorized agent, that Sublessee is in default under this Sublease and that as a result thereof Sublessor is entitled to make the requested draw pursuant to the terms of the Sublease. The Letter of Credit is to be issued pursuant to ISP98 rather than UCP 500. If Sublessee fails to pay Rent or any other sums as and when due hereunder, or otherwise defaults with respect to any provision of this Sublease, Sublessor may (but shall not be obligated to) use, apply or retain all or any portion of the Letter of Credit for payment of any sum for which Sublessee is obligated or which will compensate Sublessor for any loss or damage which Sublessor may suffer thereby. Any draw or partial draw of the Letter of Credit shall not constitute a waiver by Sublessor of its right to enforce its other remedies hereunder, at law or in equity. If any portion of the Letter of Credit is drawn upon, Sublessee shall, within ten (10) days after delivery of written demand from Sublessor, restore said Letter of Credit to its original amount. The Letter of Credit shall be in effect for the entire term of this Sublease plus sixty (60) days beyond the expiration of the Sublease term. The Letter of Credit will automatically renew each year during the Sublease term unless the beneficiary under the Letter of Credit is given at least thirty (30) days prior notice of a non-renewal by the issuing bank, and Sublessor shall be able to draw on the Letter of Credit in the event of such notice. The parties agree that the provisions of Civil Code Sections 1950.7 and 1951.7 do not apply to the Letter of Credit.

 

-4-

ARTICLE 5

 

CONDITION OF SUBLEASED PREMISES

 

5.1 Condition of the Subleased Premises. Sublessee acknowledges that as of the Commencement Date, the Subleased Premises, and every part thereof, are in good condition and without need of repair, and Sublessee accepts the Subleased Premises “as is”, Sublessee having made all investigations and tests it has deemed necessary or desirable in order to establish to its own complete satisfaction the condition of the Subleased Premises. Sublessee accepts the Subleased Premises in their condition existing as of the Commencement Date, subject to all applicable zoning, municipal, county and state laws, ordinances, and regulations governing and regulating the use of the Subleased Premises and any covenants or restrictions of record. Sublessee acknowledges that neither Sublessor nor Master Lessor have made any representations or warranties as to the condition of the Subleased Premises or its present or future suitability for Sublessee’s purposes. Notwithstanding the foregoing, Sublessor shall deliver possession of the Subleased Premises to Sublessee professionally cleaned (which shall consist of vacuuming the carpet and cleaning the windows) and the operating systems in good working condition, including but not limited to HVAC, electrical, elevator, plumbing, and lighting.

 

5.2 Surrender. Sublessee shall keep the Subleased Premises, and every part thereof in at least the same condition it was received from Sublessor, ordinary wear and tear excepted. Sublessee shall surrender the Subleased Premises in the same condition as received, ordinary wear and tear excepted, provided Sublessee performs all necessary maintenance, repair and cleaning to maintain the Subleased Premises in the condition it was delivered at the Commencement Date.

 

ARTICLE 6

 

INSURANCE

 

6.1 Sublessee’s Insurance With respect to the Tenant’s insurance under the Master Lease, the same is to be provided by Sublessee as described in the Master Lease, and such policies of insurance shall include as additional insureds Master Lessor, Sublessor and any lender as required by Master Lessor.

 

6.2 Waiver of Subrogation. With respect to the waiver of subrogation contained in the Master Lease, such waiver shall be deemed to be modified to constitute an agreement by and among Master Lessor, Sublessor and Sublessee (and Master Lessor’s consent to this Sublease shall be deemed to constitute its approval of this modification).

 

-5-

ARTICLE 7

 

USE OF SUBLEASED PREMISES; PARKING; IMPROVEMENTS

 

7.1 Use of Subleased Premises Sublessee shall occupy and use the Subleased Premises only for general office use, research and development and other legal related uses. Sublessee shall not allow the Premises to be used in any manner that is inconsistent or prohibited under Section 6 of the Master Lease.

 

7.2 Furniture, Fixture and Equipment (FF&amp;E) Sublessee shall have use of all of the existing wired cubicle systems, desks, chairs, office furniture, conference room furniture, filing cabinets, book shelves, white boards, kitchen appliances, networking systems, and phone handsets and phone system that currently exist in the Subleased Premises throughout the entire term of the Sublease at no additional cost to Sublessee. Sublessor shall provide a list of furnishings, fixtures and equipment and attach it to this Sublease as Exhibit B. Sublessee accepts such FF&amp;E “as is, where is” with no warranty, and at termination of this Sublease shall deliver same back to Sublessor in the same condition as received, ordinary wear and tear excepted; provided, however, that if Sublessee enters into a lease with Master Lessor for the Subleased Premises to continue immediately after the Expiration Date, and if Sublessee is not otherwise in breach of this Sublease, the FF&amp;E shall become the property of Sublessee on the Expiration Date. Sublessee will insure the FF&amp;E against casualty for its replacement value. Sublessor shall cooperate with Sublessee to permit Sublessee to be able to use such FF&amp;E, by providing to Sublessee, to the extent same are available to Sublessor, all manuals, instructions and other documents and information necessary or convenient to the operation of such FF&amp;E, including access codes, passwords and other keys to properly use such FF&amp;E.

 

7.3 Parking. So long as Sublessee is not in default and subject to the rules and regulations imposed from time to time by Master Lessor or Sublessor, Sublessee shall have the right to use all of the parking spaces associated with the Premises as specified in the Master Lease.

 

ARTICLE 8

 

ASSIGNMENT, SUBLETTING &amp; ENCUMBRANCE

 

8.1 Consent Required. Sublessee shall not assign this Sublease or any interest therein nor shall Sublessee sublet, license, encumber or permit the Subleased Premises or any part thereof to be used or occupied by others, without Sublessor’s and Master Lessor’s prior written consent. Sublessor’s consent shall not be unreasonably withheld provided, however, Sublessor’s withholding of consent shall in all events be deemed reasonable if for any reason Master Lessor’s consent is not obtained. The consent by Sublessor and Master Lessor to any assignment or subletting shall not waive the need for Sublessee (and Sublessee’s assignee or subtenant) to obtain the consent of Sublessor and Master Lessor to any different or further assignment or subletting. All Conditions and Standards set forth in the Master Lease regarding assignments and subletting shall apply, and to the extent there is any Bonus Rents (Rent paid by such Assignee or SubSublessee in excess of Rent paid by Sublessee hereunder), the Bonus Rent shall first be split per the Master Lease and any Bonus Rent to go to Sublessee shall be split 50/50 with Sublessor to be paid to Sublessor within five (5) days of receipt by Sublessee.

 

-6-

8.2 Form of Document. Every assignment, agreement, or sublease shall (i) recite that it is and shall be subject and subordinate to the provisions of this Sublease, that the assignee or subtenant assumes Sublessee’s obligation hereunder, that the termination of this Sublease shall at Sublessor’s sole election, constitute a termination of every such assignment or sublease, and (ii) contain such other terms and conditions as shall be reasonably requested or provided by Sublessor’s attorneys.

 

8.3 No Release of Sublessee. Regardless of Sublessor’s consent, no subletting or assignment shall release Sublessee of Sublessee’s obligation or alter the primary liability of Sublessee to pay the Rent and to perform all other obligations to be performed by Sublessee hereunder. The acceptance of Rent by Sublessor from any other person shall not be deemed to be a waiver by Sublessor of any provision hereof. In the event of default by any assignee, subtenant or any other successor of Sublessee, in the performance of any of the terms hereof, Sublessor may proceed directly against Sublessee without the necessity of exhausting remedies against such assignee, subtenant or successor.

 

8.4 Default. An involuntary assignment shall constitute a default and Sublessor shall have the right to elect to terminate this Sublease, in which case this Sublease shall not be treated as an asset of Sublessee.

 

ARTICLE 9

 

DEFAULT

 

9.1 Default Described. The occurrence of any of the following shall constitute a material breach of this Sublease and a default by Sublessee: (i) failure to pay Rent or any other amount within three (3) business days after due; (ii) all those items of default set forth in the Master Lease which remain uncured after the cure period provided in the Master Lease; or (iii) Sublessee’s failure to perform timely and subject to any cure periods any other material provision of this Sublease or the Master Lease as incorporated herein.

 

9.2 Sublessor’s Remedies. Sublessor shall have the remedies set forth in the Master Lease as if Sublessor is Master Lessor. These remedies are not exclusive; they are cumulative and in addition to any remedies now or later allowed by law.

 

9.3 Sublessee’s Right to Possession Not Terminated. Sublessor has the remedy described in California Civil Code Section 1951.4 (lessor may continue lease in effect after lessee’s breach and abandonment and recover rent as it becomes due, if lessee has right to sublet or assign, subject only to reasonable limitations). Sublessor may continue this Sublease in full force and effect, and Sublessor shall have the right to collect rent and other sums when due. During the period Sublessee is in default, Sublessor may enter the Subleased Premises and relet them, or any part of them, to third parties for Sublessee’s account and alter or install locks and other security devices at the Subleased Premises. Sublessee shall be liable immediately to Sublessor for all costs Sublessor incurs and as permitted by law in reletting the Subleased

 

-7-

Premises, including, without limitation, attorneys’ fees, brokers’ commissions, expenses of remodeling the Subleased Premises required by the reletting, and like costs. Reletting may be for a period equal to, shorter or longer than the remaining term of this Sublease and rent received by Sublessor shall be applied to (i) first, any indebtedness from Sublessee to Sublessor other than rent due from Sublessee; (ii) second, all costs incurred by Sublessor in reletting, including, without limitation, brokers’ fees or commissions and attorneys fees, the cost of removing and storing the property of Sublessee or any other occupant, and the costs of repairing, altering, maintaining, remodeling or otherwise putting the Subleased Premises into condition acceptable to a new Sublessee or Sublessees; (iii) third, rent due and unpaid under this Sublease. After deducting the payments referred to in this subsection 9.3, any sum remaining from the rent Sublessor receives from reletting shall be held by Sublessor and applied in payment of future rent and other amounts as rent and such amounts become due under this Sublease. In no event shall Sublessee be entitled to any excess rent received by Sublessor.

 

9.4 All Sums Due and Payable as Rent. Sublessee shall also pay without notice, or where notice is required under this Sublease, immediately upon demand without any abatement, deduction, or setoff, as additional rent all sums, impositions, costs, expenses, and other payments which Sublessee in any of the provisions of this Sublease assumes or agrees to pay, and, in case of any nonpayment thereof, Sublessor shall have, in addition to all other rights and remedies, all the rights and remedies provided for in this Sublease or by law in the case of nonpayment of rent.

 

9.5 No Waiver. Sublessor may accept Sublessee’s payments of less than full amount of rent due without waiving any rights under the Sublease, including rights under a previously served notice of default. So long as there is a default hereunder, no payment by Sublessee or receipt by Sublessor of a lesser amount than any installment of rent due or other sums shall be deemed as other than a payment on account of the amount due, nor shall any endorsement or statement on any check or accompanying any check or payment be deemed an accord and satisfaction; and Sublessor may accept such check or payment without prejudice of Sublessor’s right to recover the balance of such rent or other sum or pursue any other remedy provided in this Sublease, at law or in equity. If Sublessor accepts payments after serving a notice of default, Sublessor may nevertheless commence and pursue an action to enforce rights and remedies under the previously served notice of default without giving Sublessee any further notice or demand. Furthermore, the Sublessor’s acceptance of rent from Sublessee when the Sublessee is holding over without express written consent does not convert Sublessee’s tenancy from a tenancy at sufferance to a month-to-month tenancy. No waiver of any provision of this Sublease shall be implied by any failure of Sublessor to enforce any remedy for the violation of that provision, even if that violation continues or is repeated. Any waiver by Sublessor of any provision of this Sublease must be in writing. Such waiver shall affect only the provisions specified and only for the time and in the manner stated in the writing. No delay or omission in the exercise of any right or remedy by Sublessor shall impair such right or remedy or be construed as a waiver thereof by Sublessor. No act or conduct of Sublessor, including, without limitation the acceptance of keys to the Subleased Premises shall constitute acceptance or the surrender of the Subleased Premises by Sublessee before the Expiration Date. Only written notice from Sublessor to Sublessee of acceptance shall constitute such acceptance or surrender of the Subleased Premises. Sublessor’s consent to or approval of any act by Sublessee which requires Sublessor’s consent or approval shall not be deemed to waive or render unnecessary Sublessor’s consent to or approval of any subsequent act by Sublessee.

 

-8-

9.6 Sublessor Default. For purposes of this Sublease, Sublessor shall not be deemed in default hereunder unless and until Sublessee shall first deliver to Sublessor written notice of such default, and Sublessor shall fail to promptly cure said default or to commence to cure said default and thereafter diligently prosecute the same to completion

 

9.7 Notice of Event of Default under Master Lease. Sublessor shall notify Sublessee of any Event of Default under the Master Lease, or of any other event of which Sublessor has actual knowledge which will impair Sublessee’s ability to conduct its normal business at the Subleased Premises, as soon as reasonably practicable following Sublessor’s receipt of notice from Master Lessor of an Event of Default or Sublessor’s actual knowledge of such impairment.

 

ARTICLE 10

 

CONSENT OF MASTER LESSOR

 

10.1 Precondition. The Master Lease requires that Sublessor obtain the consent of Master Lessor to any subletting by Sublessor. This Sublease shall not be effective unless and until Master Lessor signs a consent to this subletting satisfactory to Sublessor.

 

ARTICLE 11

 

MISCELLANEOUS

 

11.1 Conflict with Master Lease; Interpretation. In the event of any conflict between the provisions of the Master Lease and this Sublease, the Master Lease shall govern and control except to the extent directly contradicted by the terms of this Sublease. No presumption shall apply in the interpretation or construction of this Sublease as a result of Sublessor having drafted the whole or any part hereof.

 

11.2 Remedies Cumulative. The rights, privileges, elections, and remedies of Sublessor in this Sublease, at law, and in equity are cumulative and not alternative.

 

11.3 Waiver of Redemption. Sublessee hereby expressly waives any and all rights of redemption to which it may be entitled by or under any present or future laws in the event Sublessor shall obtain a judgment for possession of the Subleased Premises.

 

11.4 Damage and Destruction; Condemnation. In the event of any damage, destruction, casualty, condemnation or threat of condemnation affecting the Subleased Premises, Rent payable hereunder shall be abated but only to the extent that Rent is abated under the Master Lease. Sublessee shall have no right to terminate this Sublease in connection with any damage, destruction, casualty, condemnation or threat of condemnation except to the extent the Master Lease is also terminated as to the Premises or any portion thereof.

 

11.5 Furniture. Sublessee may use certain furniture and furnishings located in the Subleased Premises as set forth on Exhibit C (“Furniture”). Sublessee accepts the Furniture in its “as is” condition and Sublessor makes no warranty as to the condition of the Furniture or its present or future suitability for Sublessee’s purposes. Subject to the provisions of section 7.2, upon termination of this Sublease, Sublessee shall return the Furniture to Sublessor in the same

 

-9-

condition as received, ordinary wear and tear excepted conditioned on the obligation of Sublessee to use the Furniture in a careful and proper manner and to clean and repair the Furniture in the manner necessary to maintain the Furniture in the condition it was initially provided to Sublessee. Sublessee shall be liable for any damage to the Furniture and solely responsible for all costs associated with the maintenance, cleaning and repair of the Furniture.

 

11.6 Signage. Sublessee may place signs on or about the Subleased Premises in compliance with Section 18 of the Master Lease. All signs shall be at Sublessee’s sole cost and shall comply with all local, federal and state rules, regulations, statutes, and ordinances at all times during the term hereof. Sublessee, at Sublessee’s cost, shall remove all such signs and graphics prior to the termination of this Sublease and repair any damage caused by such removal. Sublessor shall, at its expense, remove its signs on the Premises prior to the Commencement Date of this Sublease.

 

11.7 Offer. Preparation of this Sublease by either Sublessor or Sublessee or either parties’ agent and submission of same to Sublessor or Sublessee shall not be deemed an offer to Sublease. This Sublease is not intended to be binding until executed and delivered by all Parties hereto.

 

11.8 Due Authority. If Sublessee signs as a corporation, each of the persons executing this Sublease on behalf of Sublessee represent and warrant that they have the authority to bind Sublessee, Sublessee has been and is qualified to do business in the State of California, that the corporation has full right and authority to enter into this Sublease, and that all persons signing on behalf of the corporation were authorized to do so by appropriate corporate actions. If Sublessee signs as a partnership, trust or other legal entity, each of the persons executing this Sublease on behalf of Sublessee represent and warrant that they have the authority to bind Sublessee, Sublessee has complied with all applicable laws, rules and governmental regulations relative to its right to do business in the State of California and that such entity on behalf of the Sublessee was authorized to do so by any and all appropriate partnership, trust or other actions. Sublessee agrees to furnish promptly upon request a corporate resolution, proof of due authorization by partners, or other appropriate documentation evidencing the authorization of Sublessee to enter into this Sublease.

 

11.9 Multiple Counterparts. This Sublease may be executed in two or more counterparts, which when taken together shall constitute one and the same instrument. The parties contemplate that they may be executing counterparts of this Sublease transmitted by facsimile and agree and intend that a signature by facsimile machine shall bind the party so signing with the same effect as though the signature were an original signature.

 

11.10 Building Contaminants. To prevent the contamination, growth, or deposit of any mold, mildew, bacillus, virus, pollen, or other micro-organism (collectively, “Biologicals”) and the deposit, release or circulation of any indoor contaminants including emissions from paint, carpet and drapery treatments, cleaning, maintenance and construction materials and supplies, pesticides, pressed wood products, insulation, and other materials and products (collectively with Biologicals, “Contaminants”) that could adversely affect the health, safety or welfare of any tenant, employee, or other occupant of the Building or their invitees (each, an “Occupant”), Sublessee shall, at Sublessee’s sole cost and expense, at all times during the term hereof

 

-10-

(1) operate the Subleased Premises in such a manner to reasonably prevent or minimize the accumulation of stagnant water and moisture in planters, kitchen appliances and vessels, carpeting, insulation, water coolers, and any other locations where stagnant water or moisture could accumulate, and (2) otherwise operate the Subleased Premises to prevent the generation, growth, deposit, release or circulation of any Contaminants.

 

ARTICLE 12

 

BROKER’S COMMISSIONS

 

12.1 Commission. Sublessor and Sublessee represent and warrant to each other that each has dealt with the following brokers CPS, A Commercial Real Estate Company, Inc. (Sublessor’s Broker) and Cornish &amp; Carey Commercial (Sublessee’s Broker) and with no other agent, finder, or other such person with respect to this Sublease and each agrees to indemnify and hold the other harmless from any claim asserted against the other by any broker, agent, finder, or other such person not identified above as Sublessor’s Broker or Sublessee’s Broker. The Commission to the Brokers is pursuant to separate agreement.

 

ARTICLE 13

 

NOTICES AND PAYMENTS

 

13.1 Certified Mail. Any notice, demand, request, consent, approval, submittal or communication that either party desires or is required to give to the other party or any other person shall be in writing and either served personally or sent by prepaid, first-class certified mail or commercial overnight delivery service. Such Notice shall be effective on the date of actual receipt (in the case of personal service or commercial overnight delivery service) or two days after deposit in the United States mail, to the following addresses:

 

To the Sublessor:	  	Blue Coat Systems
 	  	650 Almanor Avenue
 	  	Sunnyvale, CA 94085
 	  	Attention: Director of Facilities and Real Estate
To the Sublessee:	  	At the Subleased Premises, whether or not Sublessee has abandoned or vacated the Subleased Premises or notified the Sublessor of any other address
with a copy to:	  	Berliner Cohen
 	  	10 Almaden Blvd., Suite 1100
 	  	San Jose, CA 95113-2233
 	  	Attention: Eric Wong, Esq.
 

13.2 When this Sublease requires service of a notice, that notice shall replace rather than supplement any equivalent or similar statutory notice, including any notices required by Code of Civil Procedure Section 1161 or any similar or successor statute. When a statute requires service of a notice in a particular manner, service of that notice (or a similar notice required by this Sublease) shall replace and satisfy the statutory service-of-notice procedures, including those required by Code of Civil Procedure Section 1162 or any similar or successor statute

 

-11-

ARTICLE 14

 

ATTORNEYS’ FEES AND COSTS

 

14.1 Sublessor Made Party to Litigation. If Sublessor or Sublessee becomes a party to any litigation brought by someone other than the other party and concerning this Sublease, the Subleased Premises, or the other party’s use and occupancy of the Subleased Premises to the extent, based upon any real or alleged act or omission of such other party or its authorized representatives, such other party shall be liable to the first party for reasonable attorneys’ fees and court costs incurred by the other in the litigation.

 

14.2 Certain Litigation Between the Parties. In the event any action or proceeding at law or in equity or any arbitration proceeding be instituted by either party, for an alleged breach of any obligation of Sublessee under this Sublease, to recover rent, to terminate the tenancy of Sublessee at the Subleased Premises, or to enforce, protect, or establish any right or remedy of a party to this Sublease Agreement, the prevailing party (by judgment or settlement) in such action or proceeding shall be entitled to recover as part of such action or proceeding such reasonable attorneys’ fees, expert witness fees, and court costs as may be fixed by the court or jury, but this provision shall not apply to any cross-complaint filed by anyone other than Sublessor in such action or proceeding.

 

14.3 Sublessor’s Costs. In any case where Sublessee requests permission from Sublessor to assign, sublet, make alterations, or receive any other consent or obtain any waiver from or modification to the terms of this Sublease, Sublessee shall pay to Sublessor a reasonable administrative charge and Sublessor’s reasonable attorney’s fees incurred by Sublessor in reviewing such request.

 

ARTICLE 15

 

EXHIBITS

 

15.1 Exhibits and Attachments. All exhibits and attachments to this Sublease are a part hereof.

 

-12-

IN WITNESS WHEREOF, Sublessor and Sublessee have executed and delivered this Sublease on the date first set forth above.

 

SUBLESSOR	 	SUBLESSEE
Blue Coat Systems, a Delaware corporation	 	Infoblox Inc., a Delaware corporation
 

By:	 	
 

    	By:	 	
 

Its:	 	
 

    	Its:	 	
 

    	
By:	 	
 

    	By:	 	
 

Its:	 	
 

    	Its:	 	
 

 

-13-

Exhibit A

 

[Attach Master Lease]

 

Exhibit B

 

Furniture:

 

2 Brown chairs second floor

1 split round table

26 training tables

19 black plastic chairs

48 multi color chairs

2 chairs with writing table

7 red chairs

1 coffee table blue with wheels

4 glass tables with stands

2 lobby chairs

1 coffee table /yellow on wheels

1 sofa-blue/yellow on wheels

2 dog chairs on wheels, 1 yellow/ blue, 1 red

4 bookcases 4 shelf

8 bookcases 5 shelf

4 storage racks, 8’

2 storage rack, 3’

7 trash receptacles, red

 

Conference rooms:

 

66 Stylex chairs

11 Phone stands

(5) Tables 6’

(1) Table 7’

(2) Tables 16’

(4) 48” round tables

 

Cubicles:

 

186 8x8 cubicles – 5 additional cubes are utilized as printer stations

2 additional cubes upstairs with column obstructions

140 cubes are Allsteel

51 cubes are Teknion

 

Security System:

 

Building Security System is Lenel Onguard 2000

Stand-alone system w/6 cameras, PC based with hard drive data storage &amp; CDROM video capture

Exterior doors and sliding doors upstairs are alarmed with proximity readers

Fully programmable for alarm timing and security access levels

Security is setup in room # 125. System is expandable

 

Other:

 

Showers and lockers in downstairs restrooms

Kitchen 1 Refrigerator, 1 freezer

(4) 42” tables

Folding tables 4’ (2), 5’ (8), 6’ (5)

Two large mail rooms/copy centers and 2 mail sorters

Cabinets - 3 small, 8 large

All electrical circuits are clearly labeled; at the source &amp; in the panels

 

IT lab:

 

Wiring to all cubes, conference rooms, and other labs terminate in on row of racks

Qty 4 – Fiber data connections to each lab

Qty 4 – CAT5e data connections to each cube and conference room

Qty 2 – Telecom lines (digital or analog) to each cube and conference room

Qty ? – 20 amp / 4 receptacles 110VAC power

Qty ? – 30 amp 220VAC power

5 tons of dedicated air conditioning

 

Software Lab #1:

 

Dedicated block terminated CAT5e data wiring between racks and fiber termination rack (from IT lab)

Qty 50 – Chasworth 19” racks and wire handlers (powder coated and grounded)

Qty 50 – 20 amp / 4 receptacles 110VAC power

15 tons of dedicated air conditioning

 

Software Lab # 2:

 

Dedicated block terminated CAT5e data wiring between racks and fiber termination rack (from IT lab)

Qty 36 – Chasworth 19” racks and wire handlers (powder coated and grounded)

Qty 36 – 20 amp / 4 receptacles 110VAC power

20 tons of dedicated air conditioning

 

-16-

Hardware Lab:

 

Dedicated block terminated CAT5e data wiring between racks and fiber termination rack (from IT lab)

Qty 4 – Chasworth 19” racks and wire handlers (powder coated and grounded)

Qty 4 – 20 amp / 4 receptacles 110VAC power

Qty 2 – 30 amp 220VAC power

7.5 tons of dedicated air conditioning

 

Wiring (Other):

 

Qty 8 – Dedicated 110VAC power and CAT5e data wiring in ceiling panels for wireless network (4 upstairs and 4 downstairs)

Qty 6 – In-Floor 110VAC power in expandable training room

 

Telcom Equipment (Installed):

 

Model: Avaya Definity R3

Software licenses: 300

DS1 cards: 3

Digital ports: 144

Analog ports: 48

Handsets (6408): 66

Handsets (6402): 5

Handsets (6210): 14

Handsets (Operator): 1

 

Video Conferencing Equipment:

 

Model: Polycom ViewStation 512MP

Accessories:

Qty 1 – IMUX ISDN Expansion Module

Qty 1 – Remote Control

Qty 2 – Sony Trinitron 32” Televisions

Qty 2 – Black Television Stands

 

-17-

LANDLORD’S CONSENT TO SUBLEASE

(Blue Coat Systems/ Infoblox Inc.)

 

SUNNYVALE VIII TRUST, a Maryland business trust (“Landlord”), landlord under that certain Lease Agreement dated March 30, 2001 (the “Master Lease”), by and between Landlord and, CACHEFLOW INC., a Delaware corporation now known as BLUE COAT SYSTEMS (“Tenant”) hereby consents to the subleasing of a portion of the Premises (as defined in the Master Lease) by Tenant, as sublessor, to INFOBLOX INC., a Delaware corporation (“Subtenant”) as subtenant, specifically under the terms and with respect to such subleased premises (the “Sublease Premises”) as described in the Sublease Agreement dated as of October     , 2004 attached hereto as Exhibit A (the “Sublease”) by and between Tenant and Subtenant, subject to the following:

 

1. Occupancy of the Sublease Premises by Subtenant is in all respects subject to the Master Lease, and Landlord hereby informs Tenant and Subtenant that Landlord requires strict compliance by Tenant and Subtenant with all the terms and conditions of the Master Lease. Neither the Sublease nor this consent shall release or discharge Tenant from any liability under the Master Lease and Tenant shall remain liable and responsible for the full performance and observance of all of the provisions, covenants, and conditions set forth in the Master Lease on the part of Tenant to be performed and observed. The breach or violation of any provision of the Master Lease by Subtenant shall constitute a default by Tenant in fulfilling such provision and any breach of the Master Lease by either Tenant or Subtenant shall entitled Landlord to all the rights and remedies provided in the Master Lease in the event of a breach, and any other available remedy, against both Tenant and Subtenant.

 

2. This consent shall not be construed as approval or consent to any provision(s) of the Sublease which may conflict with or be interpreted to restrict Landlord’s rights or Tenant’s obligations under the Master Lease, or to expand upon Tenant’s rights or Landlord’s obligations under the Master Lease, and Landlord shall not be bound or estopped in any way by the provisions of the Sublease, including any provision which purports to bind Landlord in any way contrary to the terms of the Master Lease; provided, that as set forth in Section 6.2 Waiver of Subrogation, the waiver of subrogation set forth in the Master Lease shall apply among Landlord, Tenant and Subtenant. This consent shall not create in Subtenant, as a third party beneficiary or otherwise, any rights except as specifically set forth herein. All communications with Landlord will be recognized by Landlord only if made by Tenant, not Subtenant, including without limitations requests for approvals as required under the Master Lease. Tenant hereby appoints Subtenant as Tenant’s agent for the purpose of communicating with Landlord with regard to matters arising in the ordinary course of tenancy (e.g. parking matters, after hours HVAC requirements, excess janitorial services, ordinary repairs and maintenance), and notwithstanding the provisions of the immediately preceding sentence, Landlord agrees to recognize Subtenant as Tenant’s agent with respect to such matters and to communicate with Subtenant, as agent for Tenant, with respect to such matters. Tenant hereby agrees that Landlord may rely on Subtenant’s authority as Tenant’s agent with respect to any matter which may be reasonably understood to fall within the foregoing description of Subtenant authority.

 

Blue Coat Systems (Cacheflow)/Infoblox Sublease Consent

477 Potrero – Central Research Park

 

1

3. Upon the expiration or earlier termination of the term of the Master Lease the Sublease shall terminate as of the effective date (“Termination Date”) of such expiration or termination and Subtenant shall vacate the Sublease Premises on or before the Termination Date. Notwithstanding anything to the contrary contained in the Sublease, Landlord shall not have any liability to Subtenant (and the Sublease shall terminate as of the Termination Date as provided herein) in the event Tenant elects to terminate the Master Lease. In no event shall the foregoing be construed to grant to Tenant any right to terminate the Master Lease.

 

4. Subtenant shall be bound by the use provisions set forth in Section 6 of the Master Lease.

 

5. Tenant’s indemnity obligations under Section 14 of the Master Lease shall include any liabilities which arise by virtue of the Sublease or Subtenant’s occupancy of the Sublease Premises. Notwithstanding anything to the contrary contained in the Sublease, Subtenant agrees that the terms and conditions of Section 14 of the Master Lease shall apply to Subtenant as though Subtenant were the Tenant and Landlord the Landlord modified as appropriate so as to make such terms applicable only to Subtenant’s leasing of the Sublease Premises.

 

6. Landlord shall charge Tenant, and Tenant shall pay, all costs incurred by Landlord in connection with the approval of the Sublease, including reasonable attorneys, architects or consultants’ fees or costs (up to a maximum of Three Thousand Dollars ($3,000.00), and Subtenant’s move into, improvement of and occupancy of the Sublease Premises pursuant to the terms of Section 21 of the Master Lease. Invoices with respect to the costs chargeable to Tenant under this Paragraph 6 shall be addressed to Tenant in care of Subtenant at the Sublease Premises, copy to Tenant.

 

7. Nothing in the Sublease shall limit Tenant’s obligation for Additional Rent due for the Sublease Premises under Section 5 of the Master Lease. Tenant will be charged for any utilities or other services furnished by Landlord to the Sublease Premises for Subtenant in accordance with Section 7 of the Master Lease and shall remain liable for all utilities provided directly to the Sublease Premises as set forth in said Section 7.

 

8. Subtenant is not entitled to occupy any space other than the Sublease Premises, and any additional extension or addition of space shall require Landlord’s prior additional written consent. Notwithstanding any provision of the Sublease to the contrary, Subtenant shall not be permitted to occupy the Sublease Premise until after full execution and delivery of this Consent.

 

9. Notwithstanding anything to the contrary in the Sublease, the provisions of the Master Lease regarding Alterations or improvements to the Premises shall apply to any Alterations or improvements made to the Sublease Premises. This consent shall not

 

Blue Coat Systems (Cacheflow)/Infoblox Sublease Consent

477 Potrero – Central Research Park

 

2

serve as Landlord’s approval of any Alterations proposed in the Sublease. To the extent not previously approved by Landlord in writing, Landlord will approve or disapprove any proposed Alterations after execution of this consent by Tenant and Subtenant upon Landlord’s review of the plans for the proposed Alterations and in accordance with Section 11 of the Master Lease. Any such Landlord approval shall not be (or be deemed to be) relied upon by Tenant, Subtenant or any third party with respect to the adequacy of such plans or compliance of the improvements described therein with any governmental rule or regulation.

 

10. This consent does not extend to, and expressly excludes, consent to (a) any portion of the Sublease term that extends beyond the present term of the Master Lease, (b) any renewal or extension of the Sublease term, or (c) any expansion of the Sublease Premises. Any of the foregoing shall be conditioned upon Landlord’s express prior written consent thereto at the appropriate time as if for a new subletting.

 

11. In consideration of Landlord’s consent to the Sublease, Subtenant agrees that Landlord and the holders (“Holders”) of any mortgage, deed of trust or like encumbrance affecting any part of the Premises, the Property (as defined in the Master Lease) or any of the improvements located thereon (the “Improvements”)(the Premises, the Property, and the Improvements are herein collectively referred to as the “Landlord’s Property”) or any interest of Landlord therein which is now existing or hereafter executed or recorded, any present or future modification, amendment or supplement to any of the foregoing, and to any advances made thereunder (any of the foregoing being a “Superior Interest”) shall not be liable to Subtenant, and Subtenant hereby waives all claims against such parties, for any loss, injury or other damage to person or property in or about the Sublease Premises or the Landlord’s Property from any cause whatsoever other than such parties’ gross negligence or willful misconduct, and Subtenant further agrees that Landlord and the Holders shall in no event be liable for any consequential or resulting damages or lost profits or lost revenue. Except to the extent caused by Landlord’s gross negligence or willful misconduct, Landlord shall not be liable for losses due to theft, vandalism or like causes.

 

12. Subtenant shall cause Landlord, Managing Agent, and any Holders (as identified by Landlord in writing to Subtenant) to be named as additional insured on the policy of commercial general liability insurance which Subtenant carries pursuant to the Sublease and shall provide Landlord with such policy or a certificate thereof upon commencement of the term of the Sublease and shall provide Landlord with a renewal policy or certificate at least thirty (30) days prior to the expiration date thereof.

 

13. Tenant and Subtenant agree to indemnify, defend and hold Landlord harmless from and against any loss, cost, expense, damage or liability, including reasonable attorneys’ fees, incurred as a result of a claim by any person or entity based, upon the act or omission of the indemnifying party, (a) that it is entitled to a commission, finder’s fee or like payment in connection with the Sublease, or (b) relating to or arising out of the Sublease or any related agreements or dealings.

 

Blue Coat Systems (Cacheflow)/Infoblox Sublease Consent

477 Potrero – Central Research Park

 

3

14. Subtenant agrees that the Sublease shall at all times be subject and subordinate to the right, title and interest of the Holders of the Superior Interests, and any other document memorializing or securing same, and Subtenant and Tenant agree to execute any such further subordination documents as such Holder may require pursuant to the terms of Section 38 of the Master Lease. Without limiting the generality of the foregoing, Tenant and Subtenant agree to comply with all of the obligations and requirements of any present subordination, attornment and non-disturbance or similar agreement by and between any Holder, Landlord and Tenant.

 

15. The foregoing consent shall apply only to the subject subletting and shall not be deemed to be consent to any other subletting nor to any subsubletting under the Sublease, nor shall this consent be construed to release Tenant from any of its obligations under the Master Lease.

 

16. Tenant and Subtenant and each person executing this Consent on behalf of them represents and warrants to Landlord that (a) each is duly incorporated (or organized) and validly existing under the laws of its state of incorporation (or organization), (b) each is qualified to do business in California, (c) each has full right, power and authority to enter into this Consent and to perform all of their obligations hereunder, and (d) the execution, delivery and performance of this Consent has been duly authorized by Tenant and Subtenant and each person signing this Consent on behalf of the of them is duly and validly authorized to do so.

 

17. To facilitate execution hereof, this Consent may be executed in one or more counterparts as may be convenient or required, and an executed copy hereof delivered by facsimile shall have the effect of an original, executed instrument. All counterparts hereof shall collectively constitute a single instrument; but, in making proof of this Consent, it shall not be necessary to produce or account for more than one such counterpart. It shall not be necessary for the signature of, or on behalf of each party hereto, or that the signature of all persons required to bind any such party, appear on each counterpart hereof. Each signature page to any counterpart hereof may be detached from such counterpart without impairing the legal effect of the signatures thereon and thereafter attached to another counterpart hereof identical thereto except having attached to it additional signature pages.

 

Blue Coat Systems (Cacheflow)/Infoblox Sublease Consent

477 Potrero – Central Research Park

 

4

18. This consent is conditioned upon the signed acceptance by Tenant and Subtenant of the terms and conditions set forth herein.

 

October     , 2004.

 

Landlord: SUNNYVALE VIII TRUST,

a Maryland business trust

 

By:	 	
 

 	 	Gary E. Block
Its:	 	Vice President
 

ACCEPTANCE BY TENANT AND SUBTENANT

 

Tenant: BLUE COAT SYSTEMS, INC.

a Delaware corporation

    	
Subtenant: INFOBLOX, INC.

a Delaware corporation

By:

 	
 

    	By:	 	
Its:

 	
 

    	Its:	 	
 

By:

 	
 

    	By:	 	
Its:

 	
 

    	Its:	 	
 

Blue Coat Systems (Cacheflow)/Infoblox Sublease Consent

477 Potrero – Central Research Park

 

5
</file>
<file name="skills/summarization/data/sample-lease5-summary.txt">
Description: Sublease Agreement Summary: ConocoPhillips Company to ZymoGenetics, Inc. This document summarizes a sublease agreement for office space in Seattle, Washington, between ConocoPhillips Company and ZymoGenetics, Inc., subject to the master lease with 1144 Eastlake LLC.

&lt;parties_involved&gt;
- Sublessor: ConocoPhillips Company, a Delaware corporation
- Sublessee: ZymoGenetics, Inc., a Washington corporation
- Original Lessor: 1144 Eastlake LLC, a Washington limited liability company
&lt;/parties_involved&gt;

&lt;property_details&gt;
- Address: 1144 Eastlake Avenue E, Seattle, Washington 98109
- Description: Approximately 7,128 rentable square feet of space on the 2nd floor (Suite 201) of the Building
- Permitted use: General business office use
&lt;/property_details&gt;

&lt;term_and_rent&gt;
- Start date: Later of October 1, 2005, or date Sublessor delivers the Sublease Premises
- End date: October 31, 2008
- Monthly rent: Varies by period (e.g., $13,929.30 from 12/1/05 to 10/31/06)
- Security deposit: None initially; $20,000 may be required if Sublessee defaults
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Sublessee responsible for utilities
- Maintenance and repairs: Sublessee responsible for interior, non-structural portions of the Premises
- Operating expenses: Sublessee pays pro-rata share of expenses exceeding base year (2005) costs
&lt;/responsibilities&gt;

&lt;consent_and_notices&gt;
- Landlord's consent: Required and obtained from 1144 Eastlake LLC
- Notice requirements: Written notices to be sent to specified addresses for each party
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
- Furniture: Sublessee has use of existing furniture, fixtures, and equipment at no additional cost
- Parking: Sublessee entitled to use 14 parking stalls in the Building and 3 additional stalls either in the Building or nearby surface lots
- Subletting restrictions: Sublessee may not assign or sublet without prior written consent from both Sublessor and Master Lessor
- Signage: Not specified in the sublease agreement
- Insurance: Sublessee required to maintain comprehensive general liability insurance with $10,000,000 per occurrence limit
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease5.txt">
Source: https://www.sec.gov/Archives/edgar/data/1129425/000119312505215661/dex104.htm

EX-10.4 5 dex104.htm OFFICE SUB-LEASE AGREEMENT
Exhibit 10.4

 

LANDLORD’S CONSENT TO SUBLEASE

 

This Agreement is made as of September 22, 2005, among (“Landlord”), Teutsch Partners, Conoco Phillips Company, a Delaware corporation (“Tenant”), and Zymogenetics, (“Subtenant”).

 

RECITALS:

 

A. Pursuant to a Lease dated as of September 19, 2003 (the “Lease”), between Landlord and Tenant, Tenant is leasing from Landlord certain premises (the “Premises”) situated on the 2nd floor of the building (the “Building”) currently known as the 1144 Eastlake Building, located at 1144 Eastlake Ave. East, Seattle WA.

 

B. Pursuant to a Sublease in the form attached to this Agreement as Exhibit A (the “Sublease”), Tenant has agreed to sublease to Subtenant a portion of the Premises, as more particularly described in the Sublease.

 

C. Pursuant to the terms of the Lease, Tenant must obtain the prior written consent of Landlord to any sublease of all or any portion of the Premises. Landlord is prepared to consent to the Sublease on the terms and conditions of this Agreement.

 

AGREEMENT:

 

Landlord hereby consents to the Sublease, subject to the following terms, covenants and agreements of the parties, and in consideration of such consent, Tenant and Subtenant agrees as follows:

 

1. Neither the Sublease nor this Agreement shall be construed to relieve Tenant of any liabilities or obligations whatsoever under the lease. Tenant shall continue to be fully and primarily liable for the full performance of all obligations of the tenant under the Lease.

 

2. Subtenant and Tenant acknowledge and agree the Sublease and all of Subtenant’s rights thereunder shall be subject and subordinated in all respects to the Lease. If the Lease terminates or is terminated prior to the expiration of the term of the Sublease, the Sublease also shall terminate; provided, however, at Landlord’s sole option, following a termination of the Lease, the Sublease shall remain in full force and effect, in which event Subtenant shall attorn to Landlord and recognize Landlord as Subtenant’s landlord under the Sublease, upon the terms and conditions and at the rental rate specified in the Sublease, and for the then remaining term of the Sublease, except Landlord shall not be bound by any provision of the Sublease which in any way increases Landlord’s duties, obligations or liabilities to Subtenant beyond those owed to tenant under the Lease. Subtenant shall execute and deliver at any time and from time to time upon the request of landlord, any instruments which may be necessary or appropriate to evidence such attornment. Landlord shall not in any event (i) be liable to Subtenant for any act, omission or breach of the Sublease by Tenant, (ii) be subject to any offsets or defenses which Subtenant might have against Tenant, (iii) be bound by any rent or additional rent which Subtenant might have paid in advance to Tenant, or (iv) be bound to honor any rights of Subtenant in and to any

security or other deposits paid by Subtenant pursuant to the Lease except to the extent Tenant has turned over such security or other deposits to Landlord. If Tenant is in default under the terms of the Lease, Landlord shall have the right to take all actions available to Landlord under the Lease and by law, including but not limited to the right to commence an unlawful detainer action against Tenant and Subtenant.

 

3. Whenever the Lease gives Landlord a right of involvement, such as a right to approve, consent, cooperate or decide, Landlord shall have such right with respect to both Tenant and Subtenant. If Landlord and Tenant disagree over any decision requiring both of their consents or approvals, Landlord’s decision shall control. For example, the Lease requires Landlord’s prior consent to any alterations or additions to the Premises. If Subtenant desires to make alterations or additions to the Premises, it must obtain the prior consent of both Landlord and Tenant.

 

4. Tenant will pay Landlord’s attorneys’ fees in reviewing the Sublease and preparing this Agreement, not to exceed $1,500.00.

 

5. The indemnity and other agreements contained in the Sublease (or incorporated therein by reference) shall apply with equal force and effect between Subtenant and Landlord (with Subtenant indemnifying Landlord in accordance with the terms of the Sublease), and Landlord shall be named as an additional insured on any insurance maintained by Subtenant under the Sublease.

 

6. This Agreement shall not relieve Tenant of its obligation to obtain Landlord’s consent to (a) any further sublease of all or part of the Premises, or (b) any assignment of the Lease; nor shall the Sublease or this Agreement be construed as conferring upon Subtenant any right to further sublease the Premises or assign its rights under the Sublease in either case without Landlord’s consent.

 

7. A failure by Tenant or Subtenant to comply with any of the terms or conditions of this Agreement shall constitute a default under the Lease. If any party to this Agreement commences an action or other legal proceeding to enforce performance of any of the terms or provisions hereof or of the Lease, the prevailing party in such action or proceeding shall, in addition to such other relief as it may obtain, be entitled to recover from the other parties all of its costs incurred, including reasonable attorneys’ fees, in any such action or proceeding or any appeal from any order, award or judgment therein.

 

8. In addition to Landlord’s rights under this Agreement, the Lease, at law or in equity, if Tenant is in default under any of the terms or provisions of the Lease, Landlord may elect to receive directly from Subtenant all sums due or payable to Tenant by Subtenant pursuant to the Sublease, and upon receipt of written notice from Landlord to do so, Subtenant shall thereafter pay Landlord any sums becoming due or payable under the Sublease. Tenant hereby consents to such direct payment and authorizes and directs Subtenant to comply with any notice given by Landlord to Subtenant pursuant to the proceeding sentence. Neither the service of such written notice nor the receipt and acceptance of such direct payments shall cause Landlord to be deemed to have assumed any of Tenant’s duties, obligations and/or liabilities to Subtenant under the Sublease, nor shall such event impose upon the Landlord the duty or obligation to accept an attornment by Subtenant following a termination of the Lease.

9. Any options to extend the Lease, rights of first refusal to lease additional space or right to expand the Premises may not be exercised by or for the benefit of Subtenant.

 

10. Subtenant and Tenant shall not amend or modify the Sublease without Landlord’s prior written consent.

 

11. This Agreement shall be binding and inure to the benefit of the parties and their respective successors and assigns, subject, however, to all restrictions on assignment and subletting contained in the Lease or in this Agreement. In the event of any litigation or other legal proceeding between the parties to enforce or interpret this Agreement, the unsuccessful party or parties shall pay to the prevailing party or parties, all costs, expenses and reasonable attorneys’ fees incurred by the prevailing party or parties, whether such fees and expenses are incurred in trial court, on appeal, in bankruptcy court or in any other legal proceeding.

 

Dated as of the day and year first above written.

 

LANDLORD:
Teutsch Partners (1144 Eastlake, LLC)
 	 	
By

 	
/s/ John S. Teutsch

 	 	 	 	
John S. Teutsch

TENANT:
Conoco Phillips Company
Delaware Corporation

 	 	
By

 	
/s/ Tim R. Thompson

 	 	 	 	
Tim R. Thompson

 	 	 	 	
[Print Name and Title]

 

SUBTENANT:
Zymogenetics
By	 	
/s/ James A. Johnson

 	 	James A. Johnson, Sr. VP &amp; CFO
 	 	[Print Name and Title]
SUBLEASE AGREEMENT

 

THIS AGREEMENT (hereinafter referred to as the “Sublease”) is made and entered into as of the          day of September 2005, between ConocoPhillips Company, a Delaware corporation, (hereinafter referred to as “Sublessor”) and ZymoGenetics, Inc., a Washington corporation, (hereinafter referred to as “Sublessee”).

 

W I T N E S S E T H:

 

WHEREAS, Sublessor desires to sublease its interest in a portion of the “Premises”, as defined in the Prime Lease (as such term is hereinafter defined), to Sublessee; and

 

WHEREAS, Sublessee desires to sublease the Sublease Premises from Sublessor upon the terms and conditions contained herein.

 

NOW, THEREFORE, for good and valuable consideration, the receipt, sufficiency and adequacy of which are hereby acknowledged by said parties, the parties hereto do hereby agree as follows:

 

1. Sublease Premises. Sublessor hereby leases to Sublessee and Sublessee hereby leases from Sublessor approximately 7,128 rentable square feet of space on the 2nd floor (currently identified as Suite 201) of 1144 Eastlake Building (the “Building”) which is located at 1144 Eastlake Avenue E, Seattle, Washington 98109, as shown on the floor plan, less the area shown hatched in black, attached hereto as Exhibit “A” and made a part hereof (the “Sublease Premises”) for a term of 37 months, commencing on the later of October 1, 2005 or the date Sublessor delivers the Sublease Premises to Sublessee (the “Commencement Date”)-and ending at 11:59 p.m. on October 31, 2008, regardless of the actual Commencement Date, (hereinafter sometimes referred to as the “Sublease Term”), unless sooner terminated as hereinafter provided, and subject to the contingencies specified in Article 14 hereof. Sublessee agrees that the Sublease Commencement Date shall be the later of October 1, 2005, or the date of actual delivery of the Sublease Premises to Sublessee. Sublessor and Sublessee further agree that if the Commencement Date is later than October 1, 2005, Sublessee’s payment of Monthly Rental and Additional Rent in the amounts applicable for the specific period of time on the actual Commencement Date as reflected in the rent schedule shown below in Article 2(a) and Article 2(c) shall be payable on or before the actual date of commencement. Upon the request of either party or Prime Lessor, Sublessor and Sublessee shall execute a Commencement Date Certificate in the form attached hereto as Exhibit “C.”

 

(b) Late or Early Delivery. In the event Sublessor is unable to deliver possession of the Premises at the commencement of the term, Sublessor shall not be liable for any damage caused thereby, nor shall this Sublease be void or voidable but Sublessee shall not be liable for rent until such time as Sublessor offers to deliver possession of the Premises to Sublessee, but the term hereof shall not be extended by such delay. If Sublessee, with Sublessor’s and Prime Lessor’s consents, takes possession prior to the commencement of the term, Sublessee shall do so subject to all the covenants and conditions hereof except for the payment of Monthly Rent and Additional Rent which shall be free from such prior date to the commencement of the term until October 1, 2005 which Monthly Rent and Additional Rent thereafter shall be as reflected in the rent schedule shown below in Article 2.

 

2. Rent; Security Deposit; Parking.

 

(a) Sublessee agrees to pay to Sublessor at the address Sublessor designates herein, or at such other place as Sublessor may designate in writing, without demand, counterclaim, deduction or setoff, in legal tender, base rental for the Sublease Term payable in monthly base rental installments (“Monthly Rental”) as follows:

 

Date/Term

  	Monthly Installment
of Base Rent
  	Yearly Rental Rate
Per Rentable Square Foot
10-01-05 to 11-30-05

  	$	0.00	  	$	0.00
12-01-05 to 10-31-06

  	$	13,929.30	  	$	23.45
11-01-06 to 10-31-07

  	$	14,523.30	  	$	24.45
11-01-07 to 10-31-08

  	$	15,117.30	  	$	25.45
Sublessee shall pay the Monthly Rental and any other sum due hereunder as rent, whether or not designated as rent, to ConocoPhillips Company, ATTN: Tax ID 91-1144498, 21064 Network Place, Chicago, IL 60673-1210. The reference “Tax ID 91-1144498” shall to be inserted on all rental checks. Sublessee shall pay the Monthly Rental in advance not later than the 1st day of every month during the Sublease Term. Notwithstanding the above, concurrently with its execution hereof, Sublessee has paid to Sublessor the first month’s rent due under this Sublease.

 

Notwithstanding the foregoing, if Sublessee receives a notice from the Prime Lessor that the Sublessor has defaulted on its monetary obligations under the Prime Lease, then from and after that date Sublessee receives such notice, regardless of any subsequent cure of such default, Sublessee shall have the right but not the obligation to deliver all subsequent Monthly Rental and Additional Rent accruing hereunder directly to the Prime Lessor for Sublessor’s account (or to continue to pay Sublessor directly).

 

(b) The Base Year for the Sublease shall be 2005.

 

(c) Sublessee shall pay monthly as “Additional Rent” the Sublessee’s Pro Rata Share of Expenses, Taxes and Insurance, as defined in Article 4.2 of the Prime Lease that exceeds the Base Year Operating Costs as defined therein. The Sublessee’s Pro Rata Share is estimated in Article 1.4 of the Prime Lease as 8.92% or as modified by the Prime Lessor. Any cap (currently at 5%) on such expenses stated in the Prime Lease’s paragraph 4.2 shall apply to this Sublease as well.

 

(d) Sublessor and Sublessee agree that there shall be no initial security deposit required. Sublessor reserves the right to demand, and Sublessee agrees to pay, a deposit of $20,000 should Sublessee default per the terms of Article 10 below, if such default is not cured within the applicable notice and cure period. Upon notice to Sublessee by Sublessor, the following language shall be added language to the Sublease:

 

“Sublessee shall pay to Sublessor $20,000.00 as security for Sublessee’s payment of Monthly Rental and performance of its other obligations under this Sublease and any renewals or extensions of this Sublease. If Sublessee defaults in its payment of Monthly Rental or performance of its other obligations under this Sublease, Sublessor may use all or part of the security deposit for the payment of Monthly Rental or any other amount in default, or for the payment of any other amount that Sublessor may spend or become obligated to spend by reason of Sublessee’s default, or for the payment to Sublessor of any other loss or damage that Sublessor may suffer by reason of Sublessee’s default. If Sublessor so uses any portion of the security deposit, Sublessee will restore the security deposit to its original amount within five (5) days after written demand from Sublessor. Sublessor will not be required to keep the security deposit separate for its own funds and Sublessee will not be entitled to interest on the security deposit. The security deposit will not be a limitation on Sublessor’s damages or other rights under this Sublease, or a payment of liquidated damages, or an advance payment of the Monthly Rental. Upon expiration of the Sublease Term or earlier termination of this Sublease the security deposit shall be returned to Sublessee within a reasonable amount of time after such termination, reduced by such amounts as may be required by Sublessor to remedy defaults on the part of Sublessee in the payment of Monthly Rental, to repair damage to the Sublease Premises and the Building caused by Sublessee, its agents, employees, invitees and licensees and to clean the Sublease Premises.”

 

(e) At no additional charge to Sublessee, Sublessee shall be entitled to the use, on a non-exclusive basis, fourteen (14) parking stalls in the Building and the non-exclusive use of three (3) additional parking stalls located either in the Building or in surface parking lots in the vicinity of the Building. Use of such parking stalls shall be upon such terms and conditions and subject to such reasonable rules and regulations as

Prime Lessor or Sublessor may publish from time to time and otherwise strictly in accordance with and subject to the terms and conditions of Article 30 of the Prime Lease (but without any requirement that Sublessee pay the amounts stated therein for such stalls) as such amounts are included in the Monthly Rental as stated in Article 2 above.

 

3. Subordinate to Prime Lease, Sublessor Covenants.

 

(a) That certain so-called Office Lease entered into as of the 19th day of September, 2003 by and between Sublessor, as tenant therein, and 1144 Eastlake LLC, as landlord therein (“Prime Lessor”), pursuant to which Sublessor leases and occupies approximately 7,128 rentable square feet of space on the 2nd floor of the Building (the “Premises”), is herein referred to as the “Prime Lease”. The Sublease Premises is comprised of the entire Premises. A copy of the Prime Lease, including all amendments and exhibits thereto is attached hereto as Exhibit “B” and made a part hereof. Sublessee acknowledges that it is familiar with the terms of the Prime Lease. In the event of any termination of the Prime Lease, this Sublease shall automatically terminate and Sublessor shall have no further liability to Sublessee. Except as may be inconsistent with the terms hereof, and subject to Sublessor performing its covenants stated in Article 3(b) below, all the terms, covenants, restrictions and conditions in the Prime Lease contained as of the date of this Sublease, shall be applicable to this Sublease with the same force and effect as if the Sublessor were the “lessor” under the Prime Lease (except with respect to Prime Lessor’s obligations to provide services under the Prime Lease, as to which Section 6 hereof shall prevail) and Sublessee were the “lessee” thereunder; and in the case of any breach hereof by Sublessee, Sublessor shall have all the rights against Sublessee as would be available to Prime Lessor against Sublessor as “lessee” under the Prime Lease. This Sublease is in all respects subject to and subordinate to the terms and conditions of the Prime Lease. Except as expressly contradicted by the terms of this Sublease, Sublessee agrees to be bound by all of the covenants, restrictions, terms and conditions of the Prime Lease in its use and occupancy of the Sublease Premises, and Sublessee covenants and agrees to perform all obligations of Sublessor arising under the Prime Lease during the term of this Sublease, and to refrain from violating or breaching any of the terms, covenants, restrictions and conditions of the Prime Lease.

 

(b) Sublessor hereby covenants and agrees for the Sublessee’s benefit as follows:

 

(i) To timely pay all Base Rent, Additional Rent and any other amounts due to Prime Lessor or otherwise under the Prime Lease;

 

(ii) Sublessor hereby waives irrevocably its Extension Rights under the Prime Lease at Article 1.5(c), covenants not to exercise such rights and agrees that the Prime Lessor may rely upon its statement in this subsection as a complete waiver;

 

(iii) Not to voluntarily cause, permit or consent to the termination or alternation of the Prime Lease, without first obtaining Sublessee’s consent which consent shall not be unreasonably withheld.

 

(iv) Sublessee shall and may peacefully have, hold and enjoy the Sublease Premises free from any person claiming a right thereto through Sublessor, subject to the terms of this Sublease and the Prime Lease, provided Sublessee pays the Monthly Rental and Additional Rent and fully performs all of its covenants and agreements;

 

(v) To deliver, as soon as practicable via facsimile, copies of all notices it receives from the Prime Lessor relating to the Sublease Premises, this Sublease or otherwise under the Prime Lease; and

 

(vi) Upon request by Sublessee, if reasonably determined necessary by Sublessee to establish privity of contract or other standing to compel Prime Lessor to perform, Sublessor will agree join as a co-plaintiff or co-petitioner with Sublessee in any action against Prime Lessor concerning a breach of Prime Lessor’s obligations under the Prime Lease; provided, however, that as a condition concurrent with Sublessor’s agreement to join in such action, Sublessee agrees (A) to reimburse Sublessor

immediately upon demand as Additional Rent, all of Sublessor’s expenses, including attorney’s fees, in connection with such action; (B) that by virtue of making a request for joinder, Sublessee has agreed to indemnify, defend and hold Sublessor harmless, for any of Sublessor’s claims, losses, costs, expenses and/or damages arising from or relating to Sublessee’s actions under this Subsection 3(b)(vi), including, but not limited to attorney’s fees and costs.

 

4. Insurance. Sublessee shall maintain at all times during the term of this Sublease, at its sole expense, comprehensive general liability insurance against claims for bodily injury, personal injury, and property damage occurring on, in or about the Sublease Premises in the amount of $10,000,000 per occurrence and shall name Sublessor and Prime Lessor as additional insureds. Sublessee shall also maintain, at its sole expense, physical damage insurance, on all of its personal property, including removable trade fixtures, located in the Sublease Premises and on all additions and leasehold improvements in the Sublease Premises. Such insurance shall be written on an “all risks” of physical loss or damage basis, for the full replacement cost value new without deduction for depreciation of the covered items and in amounts that meet any coinsurance clauses of the policies of insurance and shall include a vandalism and malicious mischief endorsement, sprinkler leakage coverage and earthquake sprinkler leakage coverage. All such insurance policies shall comply with all requirements of the Prime Lease, and shall be maintained with an insurance company licensed in the State of Washington with a Best’s rating of “A-VIII” or better in Best’s Insurance Guide. Sublessee shall deliver the certificate(s) of all such insurance prior to the commencement date of this Sublease and upon request, at any time thereafter. The insurance certificates shall provide that such insurance shall not be cancelled or materially adversely amended without at least thirty (30) days prior written notice to Sublessor and Prime Lessor. Sublessee agrees to have any and all physical damage coverage and all material damage insurance that will either include in the policy a right of Sublessee to waive subrogation without affecting the insureds’ rights to recover under the policy, or endorsed with the following subrogation clause: “This insurance shall not be invalidated should the insurer waive in writing prior to a loss any or all right of recovery against any party for loss occurring to the property described herein.” Sublessee hereby expressly waives all rights of recovery which it might otherwise have against Sublessor or Prime Lessor, for any loss or damage to personal property to the extent that such loss is covered, or would be covered by the insurance, required by this Article 4, if it were in effect. Sublessee shall further cause its insurers to waive any right of subrogation that they might otherwise have against Sublessor or Prime Lessor. Should premiums paid by the Sublessor or Prime Lessor increase due to Sublessee’s operations, the contents within the Sublease Premises or improvements made to the Sublease Premises, Sublessee shall promptly pay the increased amount of the premium upon request to Sublessor or Prime Lessor, respectively.

 

5. “As Is” Condition; Use; Alterations. Sublessee shall assume all of Sublessor’s obligations in Article 8 of the Prime Lease and shall take the Sublease Premises on an “as is” basis, subject to Sublessor delivering the Sublease Premises with the equipment listed on attached Exhibit “DD” (the “Sublease Premises FF&amp;E”). As used herein “as is” means the condition the Sublease Premises and the Sublease Premises FF&amp;E are in as of the execution date of this Sublease, subject to ordinary wear and tear. Sublessee’s taking possession of any portion of the Sublease Premises with such Sublease Premises FF&amp;E shall be conclusive evidence against Sublessee that such portion of the Sublease Premises was in a good order and satisfactory condition when Sublessee took possession. No promise of Sublessor to alter, remodel, repair or improve the Sublease Premises and no representation respecting the condition of the Sublease Premises or the Building or any portion thereof have been made by Sublessor to Sublessee except as otherwise provided above in this Article 5. SUBLESSOR HEREBY EXPRESSLY DISCLAIMS AND NEGATES, AND SUBLESSEE HEREBY WAIVES, ALL WARRANTIES OF ANY KIND OR TYPE WHATSOEVER WITH RESPECT TO THE SUBLEASED PREMISES, THE SUBLEASE PREMISES FF&amp;E, THE BUILDING, OR ANY IMPROVEMENTS LOCATED THEREON, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BY WAY OF DESCRIPTION BUT NOT LIMITATION ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, CONDITION OR SAFETY. SUBLESSEE EXPRESSLY

AGREES THAT NEITHER SUBLESSOR, NOR ANYONE ACTING FOR OR ON BEHALF OF THE SUBLESSOR, HAS MADE ANY REPRESENTATION, WARRANTY, STATEMENT OR PROMISE, EXPRESS OR IMPLIED, TO SUBLESSEE CONCERNING THE QUALITY, VALUE, PHYSICAL ASPECTS OR CONDITIONS OF THE SUBLEASED PREMISES, THE SUBLEASE PREMISES FF&amp;E, THE BUILDING OR ANY IMPROVEMENTS LOCATED THEREON, OR ANY OTHER MATTER WITH RESPECT THERETO, AND THAT SUBLESSEE HAS NOT RELIED UPON ANY REPRESENTATION, WARRANTY, STATEMENT OR PROMISE. SUBLESSEE AGREES THAT IT HAS MADE A PERSONAL INSPECTION OF THE SUBLEASED PREMISES, THE SUBLEASE PREMISES FF&amp;E, THE BUILDING, AND ANY BUILDINGS AND OTHER IMPROVEMENTS LOCATED THEREON AND IS IN ALL RESPECTS SATISFIED WITH THE CONDITION AND FITNESS THEREOF AND ACCEPTS THE SAME “AS IS”, “WHERE IS” AND WITH ALL FAULTS, IN ITS PRESENT CONDITION AND STATE OF REPAIR. THE PARTIES ACKNOWLEDGE AND AGREE THAT DISCLAIMERS OF THE WARRANTIES CONTAINED IN THIS SECTION ARE “CONSPICUOUS” DISCLAIMERS FOR THE PURPOSES OF ANY APPLICABLE LAW, RULE OR ORDER. SUBLESSOR DOES NOT WARRANT EITHER EXPRESSLY OR IMPLIEDLY THE CONDITION OR FITNESS OF THE PROPERTY SUBLEASED HEREUNDER, ANY SUCH WARRANTY BEING HEREBY EXPRESSLY NEGATIVED. The Sublease Premises shall be used and occupied by Sublessee solely for the purpose of general office uses and for no other purpose. Sublessee covenants and agrees that it will, at its expense, comply with all laws, ordinances, orders, directions, requirements, rules and regulations of all governmental authorities (including federal, state, county and municipal authorities), now in force or which may hereafter be in force, which shall impose any duty upon Prime Lessor, Sublessor or Sublessee with respect to the use, occupancy or alteration of the Sublease Premises and of all insurance bodies applicable to the Sublease Premises and to the Sublessee’s use or occupancy thereof. Sublessee shall not use or permit the use of the Sublease Premises in any manner that will tend to create waste or a nuisance or to disturb other tenants of the Building or that will violate any of the terms or provisions of the Prime Lease.

 

Any alterations, additions or improvements desired by Sublessee shall be at Sublessee’s sole cost and expense and must be first approved in writing by Sublessor and Prime Lessor, with the requirements for approvals, the standards and timetables therefore as set forth and pursuant to the provisions stated in the Prime Lease at Article 9.3 therein, but including both Sublessor and Prime Lessor as approving parties, when applicable. Any such additions, alterations or modifications shall be carried out by Sublessee, at its own expense, in accordance with the provisions of the Prime Lease. Sublessee shall indemnify and hold harmless Sublessor and Prime Lessor from any and all costs, expenses, claims or liabilities, incurred in connection with the installation by Sublessee of any additions, alterations or modifications to or of the Sublease Premises, except to the extent done at the direction of the Sublessor or Prime Lessor.

 

6. Services. Notwithstanding anything to the contrary contained herein, the only services or rights to which Sublessee is entitled hereunder are those to which Sublessor is entitled to as “lessee” under the Prime Lease and that for all such services and rights Sublessee will look to Prime Lessor under the Prime Lease. Except as expressly setforth in Article 3(b) above, nothing contained in this Sublease shall in any way obligate Sublessor to perform any act required to be performed by the Prime Lessor under the Prime Lease, nor shall Sublessor incur any liability of Sublessee by virtue of the Prime Lessor’s failure to perform any act required of it or Prime Lessor’s failure to give any consent under the Prime Lease. Sublessor agrees to use reasonable efforts to cause Prime Lessor to provide the services required of Prime Lessor under the Prime Lease.

 

7. No Acts. Sublessee shall neither do nor permit anything to be done which would cause the Prime Lease to be terminated or forfeited or any claims to accrue to the benefit of Prime Lessor by reasons of any right of termination or forfeiture reserved or vested in Prime Lessor under the Prime Lease, or any rights to damages accruing to or for the benefit of Prime Lessor under the Prime Lease, and Sublessee shall indemnify and hold Sublessor harmless from and against all loss, cost, damage or expense, including,

but not limited to, attorneys’ fees and court costs, incurred by Sublessor by reason of any default on the part of Sublessee by reason of which the Prime Lease may be terminated or forfeited, or any claim shall accrue to the benefit of or for Sublessor under the Prime Lease. Sublessee agrees to indemnify, defend, protect and hold Sublessor harmless from and against any and all claims, demands, actions, suits, judgments, decrees, orders, liabilities, or expenses including reasonable attorneys’ fees and disbursements arising out of or on account of any damage or injuries, including wrongful death sustained or claimed to have been sustained to any person or property in or upon the Sublease Premises by any person whatsoever unless the same shall result directly and exclusively from the gross negligence or intentional misconduct of Sublessor. Sublessor shall not be liable for damage to person or property sustained by Sublessee or any other person, however such damage may have been caused, except to the extent resulting from the Sublessor’s gross negligence or intentional misconduct.

 

8. Surrender. Upon the termination or expiration of this Sublease at any time and for any reason, Sublessee will immediately quit and peacefully surrender possession of the Sublease Premises and Sublessee agrees to return the Sublease Premises in the same condition as they existed at the date of Sublessee’s occupancy, except for ordinary wear and tear and except for alterations and improvements approved by Sublessor and Prime Lessor, and Sublessee shall remove all of its personal property therefrom. If Sublessee remains in possession of the Sublease Premises after the end of the term of this Sublease with the prior consent of Sublessor, and the Prime Lease is still in effect, then Sublessee will occupy the Sublease Premises as a tenant from month to month, subject to all conditions, provisions and obligations of this Sublease in effect on the last day of the term. If Sublessee remains in possession of the Sublease Premises after the end of the term of this Sublease without the consent of Sublessor, and the Prime Lease is still in effect, then Sublessee shall indemnify Sublessor against all claims, losses, costs, expenses, and damages arising therefrom.

 

9. No Assignment. Except as otherwise expressly provided herein, Sublessee shall not assign this Sublease or any interest hereunder or further sublet all or any part of the Sublease Premises, or permit the use of the Sublease Premises by any party other than Sublessee and the employees of Sublessee, without the prior written consent of Sublessor and Prime Lessor in each instance, which will not be unreasonably withheld, conditioned or delayed, all in accordance with the terms and conditions of Article 12 of the Prime Lease. Sublessee shall not permit Sublessee’s interest in this Sublease to be vested in any third party by operation of law or otherwise. In the event such consent is obtained, any rents or other consideration received under any such proposed sublease which exceed the rent as defined in this Sublease or any consideration for an assignment shall be paid to Sublessor as and when received by Sublessee. For purposes of this Article 9, an assignment of this Sublease shall be deemed to occur upon any change in the ownership of Sublessee as described in Article 12 of the Prime Lease, provided however that Sublessee shall be permitted to transfer this Sublease or its interest in the Sublease Premises without obtaining Sublessor or Prime Lessor’s consent for those transfers described in the Prime Lease’s Article 12.4.

 

10. Default. The following events shall be deemed to be events of default by Sublessee under this Sublease:

 

(a) Sublessee shall fail to pay any installment of rent hereby reserved as and when the same shall become due if the failure continues for three (3) business days after written notice to Sublessee (“Monetary Default). Sublessor may, at its sole option, invoke the provisions of Article 2(d) above regardless or whether or not a Monetary Default is cured;

 

(b) Sublessee shall fail (other than a Monetary Default) to comply with any term, provision or covenant of the Prime Lease or this Sublease and shall not cure such failure within thirty (30) days after written notice thereof to Sublessee. However, if Sublessee’s failure to comply cannot reasonably be cured within thirty (30) days, Sublessee shall be allowed additional time as is reasonably necessary to cure the failure so long as: (1) Sublessee commences to cure the failure within thirty (30) days, and (2) Sublessee diligently pursues a course of action that will cure the failure and bring

Sublessee back into compliance with the Prime Lease and the Sublease. However, if Sublessee’s failure to comply creates a hazardous condition, the failure must be cured immediately upon notice to Sublessee;

 

(c) Sublessee shall become insolvent, or shall make a transfer in order to defraud creditors or shall make an assignment for the benefit of creditors or admits in writing its inability to pay its debts when due;

 

(d) Sublessee shall file a petition under any section or chapter of the National Bankruptcy Act, as amended, or under any similar law or statute of the United States or any state thereof; or Sublessee shall be adjudged bankrupt or insolvent in proceedings filed against Sublessee thereunder;

 

(e) A receiver or trustee shall be appointed for all or substantially all of the assets of Sublessee not removed or dismissed within sixty (60) days;

 

(f) Sublessee shall otherwise cause Sublessor to be in default under the Prime Lease.

 

(g) Sublessee shall abandon the entire Sublease Premises.

 

Upon the occurrence of any such events of default, which is not cured within the applicable notice and cure periods stated above, Sublessor shall have all the Landlord rights set forth in Article 20 of the Prime Lease and Sublessee shall be deemed “Tenant” for all purposes therein and herein.

 

10A. Sublessor Default.

 

(a) If Sublessor breaches any covenant or agreement of this Sublease, then and in such event Sublessee shall have the remedies set forth in Article 21 of the Prime Lease as if Sublessee was the Tenant and Sublessor was the Landlord as those terms are used therein. The limitation of liability for Landlord contained in Article 21 of the Prime Lease shall not apply to this Sublease.

 

(b) To its knowledge, Sublessor represents and warrants to Sublessee that (i) neither Sublessor or Landlord is in breach of or in default under the Prime Lease and no event has occurred that, with notice and/or lapse of time, would constitute a breach or default by Sublessor or Prime Lessor under the Prime Lease, and (ii) a true, correct, and complete copy of the Prime Lease as in effect on the Effective Date is attached hereto as Exhibit “B”.

 

11. Force Majeure. Sublessor and Sublessee shall not be liable for delay caused by strikes, riots, acts of God, national emergencies, acts of public enemy, civil insurrection, difficulty in obtaining materials or any other causes beyond Sublessor’s or Sublessee’s control (except insufficiency of funds) in performing any of the covenants required hereunder to be performed by Sublessor and Sublessee, except the payment of rent and other sums to be paid by Sublessee hereunder.

 

12. Default Rate. Sublessor and Sublessee further agree that in the event Sublessee at any time during the Sublease Term is in default in the payment of rent, Sublessor shall have the right to charge interest at the rate of eighteen percent (18%) per annum or the highest rate allowed by law, whichever is lower (the “Default Rate”), commencing on the sixth (6th) day after rent is due and continuing until rental payments are current. Sublessee hereby agrees to pay said interest upon notification by Sublessor.

 

13. Indemnity. Sublessee agrees that, to the extent not expressly prohibited by law, Sublessor and Prime Lessor, and their respective officers, agent and employees, shall not be liable for nor shall rent abate as a result of, any direct or consequential damage (including damage claimed for actual or constructive eviction) either to person or property, sustained by Sublessee or by other persons, due to the Building or any part thereof or any appurtenances thereof becoming out of repair, or due to any act or neglect of any tenant or occupant of the Building, or any other person. To the fullest extent permitted by law, Sublessee shall protect, indemnify and hold Sublessor and

Prime Lessor and their respective officers, agents, servants and employees harmless from and against any and all loss, costs, damages, claims, liabilities and expenses (including, without limitation, court costs and attorneys’ fees) of whatever nature arising from (i) injury to persons or damage to property on the Sublease Premises or in or about the Building arising out of or in connection with Sublessee’s use or occupancy of the Sublease Premises or Sublessee’s activities in the Building, or arising from any act or negligence of Sublessee, or its agents, contractors, servants, employees or invitees, or (ii) failure of Sublessee to perform its obligations under this Sublease, including those provisions of the Prime Lease incorporated herein by reference.

 

14. Consent of Prime Lessor. This Sublease and the obligations of both parties hereunder, are conditioned upon the written consent of Prime Lessor under the Prime Lease. This Sublease and any modifications or amendments thereof shall not take effect and be binding upon Sublessor until Sublessor obtains the written consent of Prime Lessor. Sublessor shall not be liable to Sublessee for any delay in delivering the Sublease Premises to Sublessee beyond the commencement date.

 

15. Notices. Any notice or demand which either party may or must give to the other hereunder shall be in writing and shall be deemed delivered when personally delivered or deposited in the United States mail, postage prepaid, certified with return receipt requested, addressed to the parties hereto at the respective addresses set out opposite their names below, or at such other address as they have hereafter specified by written notice:

 

Sublessor:

 

ConocoPhillips Company

ATTN: Marilynn Jackson

Plaza Office Building, 830C

Bartlesville, OK 74004

Office: 918-661-0993

Fax: 918-662-2226

Email: marilynn.l.jackson@conocophillips.com

 

With a copy to:

 

ConocoPhillips Company

ATTN: Randy Booth

1232 Park Street, Suite 300

Paso Robles, CA 93446

Office: 805-226-2641

Fax: 805-239-4410

Email: randy.w.booth@conocophillips.com

 

Sublessee:

 

ZymoGenetics, Inc.

ATTN: Shinko Campos, VP Operations

1144 Eastlake Avenue E., Suite 201

Seattle, WA 98109

Office: 206-442-6620

Fax: 206-442-6608

Email: shc@zgi.com

 

16. Brokerage. Grubb &amp; Ellis Company, 601 Union Street, Suite 1400, Seattle, WA 98101 (“Sublessor’s Agent”) has acted as agent for Sublessor in this transaction. The Staubach Company, 2025 First Avenue, Suite 1212, Seattle, WA 98121 (“Sublessee’s Agent”) has acted as agent for Sublessee in this transaction. Sublessor and Sublessee hereby covenant and agree to one another that no brokerage fees or commissions are due any other Brokerage with respect to or in conjunction with this Sublease. Sublessor and Sublessee hereby indemnify one another, and hold one another harmless, from and against all loss, cost, damage or expense, including but not limited to, attorneys’ fees and court costs incurred by a party hereto as a result of any claims for brokerage fees or commissions due which are made by, through or under the other party hereto except those due Sublessor’s Agent by Sublessor per a separate agreement and except those due Sublessee’s Agent by Sublessor of a fee equal to $1.00 per square foot per year based on the sublease term.

17. Service of Process. Sublessee hereby appoints, as its agent to receive service of all dispossessory or restraint proceedings and notices thereunder, and all notices required under this Sublease, the person in charge of the Sublease Premises at the time of occupying said Sublease Premises; and if no person is in charge of, or occupying the Sublease Premises, then such service or notice may be made by attaching the same on the main entrance of the Sublease Premises and mailing a copy thereof to Sublessee’s last known address or any other address which Sublessee may have requested that notices be mailed by written notice to Sublessor.

 

18. No Other Agreements. All prior understandings and agreements between the parties are merged within this Sublease which alone fully and completely sets forth the understanding of the parties hereto. This Sublease may not be changed or terminated in any manner other than by an agreement in writing, executed by the party against whom enforcement of the change or termination is sought.

 

19. Binding Effect. This Sublease shall inure to the benefit of and be a burden upon Prime Lessor, Sublessor and Sublessee and their respective transferees, successors and permitted assigns, subject, in the case of Sublessee, to the provisions of Section 9 hereof.

 

20. Governing Law. This Sublease shall be governed by and interpreted in accordance with the laws of the State of Washington and the parties hereby consent to the jurisdiction and venue of the King County Superior Court, in Seattle, Washington.

 

21. Miscellaneous.

 

(a) Rights Reserved by Sublessor.

 

(i) Sublessor may enter the Sublease Premises at reasonable times during normal business hours, on twenty-four (24) hours’ advance notice to Sublessee for the purpose of inspecting the Sublease Premises. Sublessor shall at all times be accompanied by Sublessee’s agents and shall not be permitted access to those areas containing confidential or trade secret information. Sublessee shall conduct such inspections so as to minimize the inconvenience or disturbance to Sublessee in its business. Prime Lessor’s entry to the Sublease Premises shall be governed by the Prime Lease.

 

(ii) If Sublessee breaches any covenant or condition of this Sublease and as a result of such breach Sublessor shall be in default under the terms of the Lease, Sublessor may, after the expiration of any applicable notice and cure period, and thereafter upon notice to Sublessee (except that no notice need be given in cases of emergency), to cure such breach at Sublessee’s expense. The cost of such cure shall be deemed Additional Rental payable hereunder on demand.

 

(b) Jointly Prepared Document. This Sublease is the result of prior negotiations, agreements and understandings of the parties hereto and is to be construed as the jointly prepared product of the parties hereto.

 

(c) Conflict. In the event of a conflict between the terms of this Sublease and the terms of Prime Lease as to and between the parties hereto, the terms of this Sublease shall control.

 

(d) Time. Time is of the essence of this Sublease.

 

(e) Severability. If any term or provision of this Sublease or the application thereof to any person or circumstance shall to any extent be invalid or unenforceable, the remainder of this Sublease, or the application of such term or provision to persons or circumstances other than those to which it is held invalid or unenforceable, shall not be affected thereby and each remaining term or provision of this Sublease shall be valid and enforced to the fullest extent permitted by law.

 

(g) Captions. The captions used herein are for identification only and are not a part of this Sublease.

IN WITNESS WHEREOF, the Sublessor, Sublessee and Prime Lessor have duly fixed their names on the dates indicated below but effective as of the date first above written.

 

“SUBLESSOR”:
CONOCOPHILLIPS COMPANY
By:	 	
/s/ Tim R. Thompson

Typed/Printed Name:	 	Tim R. Thompson
Title:	 	Attorney In Fact
Date:	 	
9-27-05

Federal Tax ID Number:	 	73-0400345
“SUBLESSEE”:
ZYMOGENETICS, INC.
By:	 	
/s/ James A. Johnson

Typed/Printed Name:	 	James A. Johnson
Title:	 	Sr VP &amp; CFO
Federal Tax ID Number:	 	91-1144498
Date:	 	9.23.05
 

The undersigned, being the Prime Lessor under the Prime Lease, hereby consents to the foregoing Sublease and to the terms and provisions contained therein.

 

“PRIME LESSOR”
1144 EASTLAKE LLC

a Washington limited partnership

By:	 	J&amp;J Eastlake LLC
 	 	
a Washington limited liability

company, its Manager

By:	 	
/s/ John S. Teutsch

Title:	 	
Managing Member

Date:	 	
9-29-05

SUBLESSEE’S ACKNOWLEDGMENT

 

STATE OF WASHINGTON	  	§
 	  	§
COUNTY OF KING	  	§
 

I, the undersigned, a Notary Public, in and for the County and State aforesaid, do hereby certify that James A. Johnson, personally known to me to be the authorized agent of ZymoGenetics, Inc., a Washington corporation, and personally known to me to be the same person whose name is subscribed to the foregoing instrument, appeared before me this day in person and acknowledged that as the authorized agent of said entity being authorized so to do, he executed the foregoing instrument on behalf of said entity, by subscribing the name of such entity by himself as such managing member, as a free and voluntary act, and as the free and voluntary act and deed of said entity under the foregoing instrument for the uses and purposes therein set forth.

IN WITNESS WHEREOF, I hereunto set my hand and official seal.

 

Notary Public	 	
/s/ Carol A. Alto

Printed Name	 	Carol A. Alto
Residing at	 	Seattle, WA
My Commission Expires	 	3.7.06
 

[Notary Seal]

SUBLESSOR’S ACKNOWLEDGMENT

 

STATE OF CALIFORNIA	  	§
 	  	§
COUNTY OF SAN LUIS OBISPO	  	§
 

On                      before me, Tracey R. Gutierrez, Notary Public, personally appeared Tim R. Thompson, personally known to me (or proved to me on the basis of satisfactory evidence) to be the person whose name is subscribed to the within instrument and acknowledged to me that he executed the same in his authorized capacity, and that which the person acted, executed the instrument.

 

WITNESS my hand and official seal.

 

Notary Public

/s/ Tracey R. Gutierrez

Tracey R. Gutierrez

 

[Notary Seal]

PRIME LESSOR’S ACKNOWLEDGMENT

 

STATE OF WASHINGTON	  	§
 	  	§
COUNTY OF KING	  	§
 

I, the undersigned, a Notary Public, in and for the County and State aforesaid, do hereby certify that John Teutsch, personally known to me to be the authorized agent of 1144 Eastlake LLC, a Washington limited liability company, and personally known to me to be the same person whose name is subscribed to the foregoing instrument, appeared before me this day in person and acknowledged that as the authorized agent of said entity being authorized so to do, he executed the foregoing instrument on behalf of said entity, by subscribing the name of such entity by himself as such managing member, as a free and voluntary act, and as the free and voluntary act and deed of said entity under the foregoing instrument for the uses and purposes therein set forth.

GIVEN under my hand and official seal this 30th day of September, 2005.

 

Notary Public	  	
/s/ Mai Huynh

  	[Notary Seal]
Printed Name	  	
Mai Huynh

  
Residing at:	  	
Covington, WA

  
My Commission Expires:	  	
3-19-09

  
OFFICE LEASE AGREEMENT

 

This Office Lease Agreement (the “Lease”) is made and entered into as of the 19th day of September, 2003, (“Effective Date”) by and between, 1144 Eastlake LLC, a Washington limited liability company (“Landlord”), and Conoco Phillips Company, a Delaware corporation (“Tenant”).

 

1.	Basic Lease Information.
 

 	1.1	“Property” shall mean the building (“Building”) and associated real property located at 1144 Eastlake Avenue, Seattle, Washington and legally described on Exhibit A-Z “Building” is the structure located on the Property.
 

 	1.2	“Premises” shall mean the Rentable Area, as defined below, of the portion of the second (2nd) floor of the Building as depicted on the floor plan attached as Exhibit A-1 to this Lease. The “Rentable Area of the Premises” is approximately seven thousand one hundred twenty-eight (7,128) rentable square feet, and the Rentable Area of the Building is approximately seventy-nine thousand eight hundred sixty-eight (79,888) rentable square feet. “Rentable Area” shall have the same meaning as set forth in the 1996 “BOMA Standard Method for Measuring Floor Area in Office Buildings” (American National Standard ANSI/BOMA Z65.1-1996) (“BOMA Measurement”). Tenant hereby accepts the above Rentable Areas. Landlord may remeasure the Rentable Area of the Premises and/or Building Prior to the Commencement Date.
 

 	1.3	“Base Rent”: (“Month” refers to the applicable period through the full calendar month)
 

Period

  	Monthly Base Rent
Commencement Date through Month 12

  	 
Month 13 through Month 24

  	 
Month 25 through Month 36

  	 
Month 37 through Month 48

  	 
Month 49 through Month 60

  	 
 

 	1.4	“Tenant’s Pro Rata Share” is estimated to be eight and 92/100 percent (8.92%), but is subject to change if Landlord remeasures the Premises or Building as described in Section 1.2.
 

 	1.5	“Term”:
 

(a) The “Term” shall be a period of Sixty (60) calendar months, plus any partial month in which the Commencement Date occurs. The Term shall commence on the date (“Commencement Date”) that is the first to occur of the following events (i) seven (7) days following the date on which Landlord notifies Tenant that Landlord’s Work (defined in Exhibit C) is substantially complete, (ii) the date on which Tenant takes possession or commences beneficial occupancy of the Premises. or (iii) if substantial completion of Landlord’s Work is delayed due to Tenant’s failure to perform its obligations under this Lease, then seven (7) days following the date determined by Landlord as the date upon which Landlord’s Work would have been substantially completed, but for Tenant’s failure to perform. Unless terminated early in accordance with this Lease the Term shall end Sixty (60) calendar months after the Commencement Date (the “Termination Date”), provided however if the Lease commences on any day other than the first of the month the Lease shall terminate Sixty (60) calendar months after the last day of the month in which the Lease commenced. Landlord shall use commercially reasonable efforts to complete Landlord’s Work prior to November 1, 2003.

 

(b) Notwithstanding the foregoing, Tenant shall have a one time right to terminate this Lease as of the end of the thirty-sixth (36th) full calendar month of the Term by giving Landlord written notice at least six (6) months prior to such data; provided that Tenant shall pay Landlord, at least ten (10) days prior to the date of such early termination, an amount equal to the sum of (i) the unamortized tenant improvement expenditures (including without limitation permits, design, construction costs, etc.) made by Landlord to prepare the Premises for Tenant, (ii) the unamortized leasing commissions paid by Landlord with respect to this Lease, and (iii) an amount equal to twelve (12) months of Base Monthly Rent at the rates applicable to the twelve (12) months immediately following the date of early termination. As used herein, the “unamortized” portion of an expenditure means the amount remaining after amortization of the expenditure over the first thirty-six (36) months of the Lease Term, assuming that the entire expenditure was to be amortized over the sixty (60) month term in equal monthly installments with interest at ten percent (10%) per annum.

 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 1
 	 	SEPTEMBER 12, 2003
(c) Tenant is granted the right (“Extension Right”) to extend the term of this Lease beyond the Termination Date of the initial Term for one period of sixty (60) months (the “Extended Term”). Tenant may not exercise its Extension Right if it is then in default beyond any applicable cure period or if it has ever been in default beyond any applicable cure period more than two (2) times in any twelve (12) month period. Tenant may exercise its Extension Right by delivering written notice thereof to Landlord not later than nine (9) months prior to the expiration of the initial term. In the Extended Term, all terms and conditions of this Lease shall apply except (i) there shall be no additional renewal terms; (ii) the Base Monthly Rent for the Extended Term shall be the then prevailing Fair Market Rent, provided that in no event shall the Base Monthly Rent for the Extended Term be less than the Base Monthly Rent for the last month of the initial term; (iii) parking rates during the Extended Term shall be at the than-prevailing rates for the Building; and (iv) the Base Year and Base Year Operating Expenses shall be reset to the calendar year in which falls the first day of the Extended Term.

 

Extension Rights shall apply to all of the Premises than under lease to Tenant. Tenant’s Extension Right is personal and may not be exercised by any assignee or sublessee other than an affiliate of Tenant or a successor by merger or consolidation.

 

The term “Fair Market Rent” for the purposes of this Lease shall mean the annual amount per rentable square foot that Landlord has accepted in current, new comparable transactions in the Building for comparable space, for a comparable period of time, with improvements comparable to those existing in the Premises on the date Tenant exercises its Extension Right (or with such restoration as Tenant would be required to make upon termination of the Lease, if such would increase the Fair Market Rent) from non-expansion, non-renewal and non-equity tenants, or if there are not a sufficient number of current comparable transactions in the Building, what a willing, comparable, new, non-expansion, non-renewal, non-equity tenant would pay, and a willing, comparable landlord of a comparable building would accept under the transaction as further defined above.

 

If Landlord and Tenant are not able to agree on the Fair Market Rent for the Extended Term within thirty (30) days after Tenant’s notice of election to renew, then such Fair Market Rent shall be determined as follows. Landlord and Tenant shall each select an appraiser with at least ten years experience in the Seattle commercial market. If the two appraisers are unable to agree within ten (10) days after their selection, they shall select a similarly qualified third appraiser (the “Neutral Appraiser”). Within twenty (20) days after selection of the Neutral Appraiser, the three appraisers shall simultaneously exchange determinations of Fair Market Rent. If the lowest appraisal is not less than ninety percent (90%) if the highest appraisal, then the three appraisals shall be averaged and the result shall be the Fair Market Rent. If the lowest appraisal is less than ninety percent (90%) of the highest appraisal, then the Fair Market Rent shall be deemed the rent set forth in the appraisal submitted an appraiser appointed by a party that is closest in dollar amount to the appraisal submitted by the Neutral Appraiser.

 

 	1.6	“Base Year”: calendar year 2004.
 

 	1.7	Security Deposit: None.
 

 	1.8	“Permitted Use”: General business office for energy company.
 

 	1.9	“Notice Addresses”: Notices shall be sent to the parties at the following addresses:
 

Tenant:
Prior to occupancy:
 	 	
Conoco Phillips Company

1500 North Priest Drive

Tempe, Arizona 85281

Attn: Ernie Vituccl

Phone: (602) 728-7452

Fax: (602) 728-5313

 

 	 	
With a copy to:

 	 	
ConocoPhillips

P.O. Box 7500

Bertlesville, OK 74005-7500

Attn: Bill Sealy

Phone: (918) 661-0505

Fax: (918) 661-7772

Landlord:	 	
1144 Eastlake LLC

 	 	
c/o JSH Properties

Attn: Diane Decker

14900 Interurban Ave. South, Suite 210

Seattle, WA 98168

 
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 2
 	 	SEPTEMBER 12, 2003
Rent (defined in Section 4.1) is payable to the order of Landlord at its notice address, or at such other address as Landlord may specify from time to time by written notice given in accordance with Section 27.

 

 	1.10	“Business Day(s)” are Monday through Friday (and Saturday mornings) of each week, exclusive of New Year’s Day, President’s Day, Memorial Day, Independence Day, Labor Day, Thanksgiving Day and Christmas Day (“Holidays”). Landlord may designate additional Holidays, provided that the additional Holidays are commonly recognized by other office buildings in the area where the Property is located.
 

 	1.11	“Landlord Work” means the work, if any, that Landlord is obligated to perform in the Premises pursuant to Exhibit C.
 

 	1.12	“Law(s)” means all applicable statutes, codes, ordinances, orders, rules and regulations of any municipal or governmental entity.
 

 	1.13	“Normal Business Hours” for the Property are 7:00 A.M. to 6:00 P.M. on Business Days and 8:00 A.M. to 12:00 noon on Saturdays.
 

 	1.14	“Property” includes the Building and the parcel(s) of land on which it is located and other Improvements serving the Building, if any, and the parcel(s) of land on which they are located.
 

 	1.15	“Class A” building, or office building, as used in this Lease, shall mean first-class commercial office buildings of the type which are located in the South Lake Union area, and which are reasonably comparable in age and available amenities to the Building which is the subject of this Lease.
 

2.	Lease Grant. Landlord leases the Premises to Tenant and Tenant leases the Premises from Landlord , together with the right in common with others to use any portions of the Property that are designated by Landlord for the common use of tenants and others, such as common corridors, elevator foyers, restrooms, vending areas, parking areas, sidewalks and lobby areas (the “Common Areas”).
 

3.	Possession; Acceptance of Condition of Premises.
 

 	3.1	Landlord shall use commercially reasonable efforts to furnish Tenant with the right to enter and access the Premises one (1) week prior to the Commencement Date, for purposes of installing furniture and cabling. If Tenant enters and accesses the Premises prior to the Commencement Date for the such purpose, such early entry and access shall be subject to all of the terms and conditions of this Lease, but Tenant will not be obligated to pay Base Rent or a Pro Rate Share of Expenses, Taxes or Insurance until the Commencement Date. Tenant and Landlord agree to cooperate with each other in making mutually acceptable arrangements for such early entry and access by Tenant and to cooperate with Landlord’s contractor during the period of any such early entry and access so as not to interfere with Landlord’s performance of Landlord’s Work. Landlord’s operations in the Building or the quiet enjoyment of other occupants of the Building.
 

 	3.2	Except as provided elsewhere in this Lease, and subject to Landlord’s promise to perform “Landlord’s Work” as described in Exhibit C, attached hereto and made a part hereof, Tenant accepts the Premises in its “as-is, where-is” condition.
 

 	3.3	The occurrence of the Commencement Date prior to the completion in full of all work required to be performed by Landlord as provided herein shall not relieve Landlord of its obligation thereafter to complete Landlord’s Work in a reasonable, timely and workmanlike manner.
 

4.	Rent.
 

 	4.1	Payments. As consideration for this Lease, Tenant shall pay Landlord, without any setoff or deduction (except if expressly set forth in this Lease), the total amount of Base Rent and Additional Rent due for the Term. “Additional Rent” means all sums (exclusive, of Base Rent) that Tenant is required to pay Landlord. Additional Rent and Base Rent are sometimes collectively referred to as “Rent”. Tenant shall pay and be liable for all rental, sales and use taxes (out excluding income taxes), if any, imposed upon or measured by Rent under applicable Law, Base Rent and recurring monthly charges of Additional Rent shall be due and payable in advance on the first day of each calendar month without notice or demand. All other items of Additional Rent shall be due and payable by Tenant on or before thirty (30) days after billing by Landlord. All payments of Rent shall be by good and sufficient check or by other means (such as automatic debit or electronic transfer) acceptable to Landlord. If Tenant fails to pay any Item or Installment of Rent within three (3) business days after such payment is due, Tenant shall pay Landlord an administration fee equal to five percent (5)% of the past due Rent. If the Term commences on a day other than the first day of a calendar month or terminates on a day other than the last day of a calendar month, the monthly Base Rent and Tenant’s Pro Rate Share of Expenses (defined in Section 4.3) for the month shall be prorated based on the number of days in such calendar month. Landlord’s acceptance of less than the total amount of Rent due or billed shall be considered a payment on account of the
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 3
 	 	SEPTEMBER 12, 2003
earliest Rent due. No endorsement or statement on a check or letter accompanying a check or payment shall be considered an accord and satisfaction, and either party may accept the check or payment without prejudice to that party’s right to recover the balance or pursue other available remedies. Tenant’s covenant to pay Rent is independent of every other covenant in this Lease.

 

 	4.2	Payment of Tenant’s Pro Rata Share of Expenses. Taxes and Insurance. Expenses, Taxes and insurance are collectively referred to in this Section 4.2 as “Operating Costs.” For each year following the Base Year (as defined in Section 1.6 above), Tenant shall pay Landlord as Additional Rent for Tenant’s Pro Rata Share of Operating Costs for a given calendar year to the extent the same exceed Tenant’s Pro Rata Share of Operating Costs for the Base Year (“Base Year Operating Costs”). Landlord shall annually provide Tenant with a good faith estimate of the amount by which Tenant’s Pro Rata Share of Operating Costs for each calendar year are expected to exceed the Base Year Operating Costs. On or before the first day of each month, Tenant shall pay to Landlord a monthly installment equal to one-twelfth of the amount by which Tenant’s Pro Rata Share of Operating Costs are so estimated to exceed the Base Year Operating costs. If during any consecutive twelve (12) month period of the Term, Landlord determines that its good faith estimate was incorrect by a material amount. Landlord may provide Tenant with a revised estimate during such twelve (12) month period. After its receipt of the revised estimate, Tenant’s monthly payments of Tenant’s Pro Rata Share of Operating Costs shall be based upon the revised estimate. If Landlord does not provide Tenant with such estimate by January 1 of a calendar year, Tenant shall continue to pay monthly installments based on the previous year’s estimate until Landlord provides Tenant with the new estimate. Upon delivery of the new estimate, an adjustment shall be made for any month for which Tenant paid monthly installments based on the previous year’s estimate. Tenant shall pay Landlord the amount of any underpayment within thirty (30) days after receipt of the new estimate. Any overpayment shall be refunded to Tenant within thirty (30) days or credited against the next due future installment(s) of Additional Rent.
 

 	    	Notwithstanding the foregoing, for purposes of calculating the amount payable by Tenant, under this Section 4.2, Expenses (with the exception of Uncontrollable Expenses (defined below)) shall not exceed for any calendar year during the Term of this Lease, other than the first calendar year, the amount of Expenses for the preceding calendar year plus five percent (5%) (compounded annually). Any increases in Expenses not recovered by Landlord due to the foregoing limitation shall be carried forward into all succeeding calendar years during the Term (subject to the foregoing limitation) until fully recouped by Landlord. The term “Uncontrollable Expenses” means expenses relating to the cost of utilities, insurance, and other uncontrollable expenses (such as, but not limited to, increases in the minimum wage which may affect the cost of service contracts).
 

 	    	By May 1 following the end of each calendar year, Landlord shall furnish Tenant with a statement of the actual amount of Tenant’s Pro Rata Share of Operating Costs incurred in the preceding calendar year, and the difference (“Actual Owed Amount”) between such actual amount and the Base Year Operating Costs. If the Actual Owed Amount is less than the sum of estimated payments made by Tenant during the preceding calendar year, Landlord shall apply such overpayment by Tenant against Additional Rent due or next becoming due, provided if the Term expires before the determination of the overpayment, Landlord shall refund any overpayment to Tenant after first deducting the amount of Rent due. If the Actual Owed Amount is greater than the sum of estimated payments made by Tenant during the preceding calendar year. Tenant shall pay Landlord, within thirty (30) days after its receipt of the statement of Operating Costs, any underpayment for the prior calendar year.
 

 	4.3	Expenses Defined. “Expenses” means all cost and expenses incurred by Landlord in connection with operating, maintaining, repairing, and managing the Building as a “Class A office building,” as defined herein, including, but not limited to (1) utilities, including, but not limited to utilities and lighting for areas occupied by tenants as well as Common Areas; (2) maintenance costs for performance of any Landlord’s maintenance and repair obligations hereunder for the Building located on the Property, Common Areas, Property, including, but not limited to parking facilities and landscaping, maintaining and repairing sewer main, ducts, conduits and similar items, fire protection systems, sprinkler and security alarm systems, elevators, storm and sanitary drainage systems and other utility and mechanical systems; materials and services for operation, maintenance or the security or protection of the Property including any janitorial services, pest control, HVAC service contracts, any other repair and maintenance by Landlord; (3) roof and other exterior maintenance; (4) the amortized cost (with a reasonable rate of Insurance) of capital improvements made to the Property which are for the purpose of reducing operating expense costs, or which are required to comply with any laws, rules or regulations of any governmental authority first enacted after the Commencement Date or a requirement of Landlord’s insurance carrier first enacted after the Commencement Date; (5) property management fees not exceeding market rate; (6) all sums expended in connection with any Common Areas for maintenance and repairs; (7) operation, maintenance and repair of any heating, ventilation and air conditioning system, including repair of any HVAC components or units as reasonably needed; (8) the cost of utilities
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 4
 	 	SEPTEMBER 12, 2003
consumed on the Property if paid for by Landlord; (9) the cost of any governmentally required license, permit, or inspection for or of the Property (other than those required in connection with Landlord’s Work); (10) replacement or supplemental directional and other signage other than the initial signage installed in the Building or on the Property by Landlord as part of Landlord’s Work; and (11) and any other costs and expenses of any other kind whatsoever which are generally considered expenses in accordance with generally accepted accounting principles and which are reasonably incurred by Landlord in connection with owning, operating or maintaining the Property and any expense designated by this Lease to be an Expense. Expenses shall be “net” only and for that purpose shall be deemed reduced by the amounts or any insurance reimbursement or other reimbursement received by Landlord in connection with such expenses. In the event the average occupancy level of the Building for any year is less than one hundred percent (100%), the actual Expenses for such year shall be proportionately adjusted to reflect those costs which Landlord estimates would have been incurred, had the Building been one hundred percent (100%) occupied during such year.

 

The following shall not be Expenses: (1) repairs or other work occasioned by insured casualty except for the deductible portion of any insured casualty loss; (2) marketing costs including, without limitation, leasing commissions, attorneys’ fees in connection with the negotiation and preparation of letters, deal memos, letters of intent, leases, subleases and/or assignments, space planning costs, tenant improvement costs, and other costs and expenses incurred in connection with lease, sublease and/or assignment negotiations, disputes and transactions with present or prospective tenants; (3) depreciation and amortization (except as set forth above); (4) interest on debt or principal payments to a Lender or rental under a ground lease; (5) costs of Landlord’s general overhead and general and administrative expense; provided this limitation shall not be construed to limit Landlord’s right to require Tenant to pay as an Expense the property management fee provided for above:- (6) specific costs incurred for the account of specific tenants only; (7) salaries of officers, executives and partners of Landlord, and salaries of Building employees to the extent allocated to properties other than the Property; (8) penalties incurred as a result of Landlord’s negligence, inability or unwillingness to make payments, or penalties incurred due to the Building not being in compliance with applicable law; (9) capital improvements, except as otherwise provided above; (10) the cost of tenant improvements; (11) costs relating to any parking garage in the Building (such as utilities, attendants, cashiers and janitorial services); (12) costs resulting from the correction of any construction or design defects in all or any portion of the Premises or Building in connection with any of Landlord’s Work; and (13) penalties due to any violation of Law by Landlord.

 

 	4.4	Taxes and Insurance Defined. “Taxes shall mean: (1) all real estate taxes and other assessments on the Property, including, but not limited to, assessments for special improvement districts and building improvement districts, taxes and assessments levied in substitution or supplementation in whole or in part of any such taxes and assessments and the Premises’ share of any real estate taxes and assessments under any reciprocal easement agreement, common area agreement or similar agreement as to the Property; (2) all personal property taxes for property that is owned by Landlord and used in connection with the operation, maintenance and repair of the Premises or the Property; and (3) all reasonable costs and fees incurred in connection with seeking reductions in any tax liabilities described in (1) and (2), including, without limitation, any costs incurred by Landlord for compliance, review and appeal of tax liabilities. Without limitation, Taxes shall not include any income, capital levy, franchise, capital stock, gift, estate or inheritance tax. If an assessment is payable in installments, Taxes for the year shall include the amount of the installment and any interest due and payable during that year. For all other real estate taxes, Taxes for that year shall, at Landlord’s election, include either the amount accrued, assessed or otherwise imposed for the year or the amount due and payable for that year, provided that Landlord’s election shall be applied consistently throughout the Term. If a change in Taxes is obtained for any year of the Term, then Taxes for that year will be retroactively adjusted and Landlord shall provide Tenant with a credit, if any, based on the adjustment. “Insurance” shall mean the cost of premiums for any hazard insurance or liability insurance carried by Landlord, for the benefit of Landlord or at the expense of Landlord, on or in connection with the Property.
 

 	4.5	Intentionally Deleted.
 

5.	Compliance with Laws; Use.
 

 	5.1	The Premises shall be used only for the Permitted Use and for no other use whatsoever. Tenant shall not use or permit the use of the Premises for any purpose which is illegal, dangerous to persons or property or which, in Landlord’s reasonable opinion, unreasonably disturbs any other occupants of the Property or unreasonably interferes with the operation of the Premises or the Property. Tenant shall comply with all Laws, including the Americans with Disabilities Act, regarding the operation of Tenant’s business and the use, condition, configuration and occupancy of the Premises. Tenant, within ten (10) days after receipt, shall provide Landlord with copies of any notices it receives regarding a violation or alleged violation of any laws relating to the use, condition, configuration or occupancy of the Premises. Tenant shall comply with the rules and regulations of the Property attached as Exhibit B and such other reasonable
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 5
 	 	SEPTEMBER 12, 2003
rules and regulations adopted by Landlord from time to time. Tenant shall also cause its agents, contractors, subcontractors, employees, customers, and subtenants to comply with all rules and regulations. Landlord shall enforce the rules and regulations uniformly with respect to violations thereof of which it either has been notified or otherwise has actual knowledge, and shall not knowingly discriminate against Tenant in Landlord’s enforcement of the rules and regulations.

 

 	5.2	Tenant may have access to the Premises 24 hours per day, 365 days per year after Normal Business Hours with a reasonable number of door keys and/or access cards provided by Landlord for which Landlord may impose a reasonable charge approximately Landlord’s cost.
 

6.	Intentionally Deleted.
 

7.	Services and Utilities.
 

 	7.1	Landlord shall furnish Tenant with the following services: (1) hot and cold water service for use in the lavatories on each floor on which the Premises are located, and for drinking purposes (provided, that Landlord shall not be required to provide special filtration or otherwise provide treatment to the available tap water in order to make it more desirable to Tenant for drinking or cooking purposes); (2) heat, ventilation and air conditioning in season during Normal Business Hours, at such temperatures and in such amounts as are standard for comparable Class A office buildings or as required by governmental authority. Tenant, upon such advance notice (which may be telephonic) as is reasonably required by Landlord, shall have the right to receive HVAC service during hours other than Normal Business Hours (Tenant shall pay Landlord’s reasonable charge for the additional service, which charge shall approximate Landlord’s actual expense in providing such additional service); (3) maintenance and repair of the Premises or Property as described in Section 9.2 and to fulfill its obligations in Section 4.3.; (4) elevator services; (5) reasonable quantities of electricity and other utilities to the Premises for general office use; (6) washing of interior and exterior surfaces of exterior windows with reasonable frequency; and (7) such other services as Landlord reasonably determines are necessary or appropriate for the Premises or the Property as a Class A office building.
 

 	7.2	Tenant’s failure to receive or any interruption or termination of, services due to the application of Laws, the failure of any equipment, the performance of repairs, improvements or alterations, or the occurrence of any event or cause (a “Service Failure”) shall not render Landlord liable to Tenant for damages, constitute a constructive eviction of Tenant, give rise to an abatement of Rent, nor relieve Tenant from the obligation to fulfill any covenant or agreement. Landlord shall use its commercially reasonable best efforts to correct the Service Failure as soon as possible.
 

8. Leasehold Improvements. All improvements to the Premises other than Tenant’s personal property and trade fixtures (collectively, “Leasehold Improvements”) shall be owned by Landlord and shall remain upon the Premises without compensation to Tenant. However, Landlord, by written notice to Tenant within thirty (30) days prior to the Termination Date, may require Tenant to remove, at Tenant’s expense, the following (the “Required Removables”): (1) Cable (defined in Section 9.1) installed by or for the exclusive benefit of Tenant and located in the Premises or other portions of the Premises or the Property; and (2) any Leasehold Improvements and Alterations that are performed by or for the benefit of Tenant (including, without limitation, internal stairways, raised floors, personal baths and showers, vaults, rolling file systems and structural alterations and modifications of any type). The Required Removables designated by Landlord shall be removed by Tenant before the Termination Date. Tenant shall repair damage caused by the installation or removal of Required Removables, if Tenants fails to remove any Required Removables or perform related repairs in a timely manner, Landlord, at Tenant’s expense, may remove and dispose of the Required Removables and perform the required repairs. Tenant, within thirty (30) days after receipt of an invoice, shall reimburse Landlord for the reasonable costs incurred by Landlord. Notwithstanding the foregoing, Tenant, at the time it requests approval for a proposed Alteration (as defined in this Lease), may request in writing that Landlord advise Tenant whether the Alteration or any portion of the Alteration will be designated as a Required Removable. Within ten (10) days after receipt of Tenant’s request, Landlord shall advise Tenant in writing as to which portions of the Alteration, if any, will be considered to be Required Removables, and if Landlord does not respond within such ten (10) day period, such Alterations will not be considered Required Removables (and, in such event, Landlord shall not have the right under the second sentence of this Section 8 to later require Tenant to remove such Alterations).

 

9.	Repairs and Alterations.
 

 	9.1	Tenant’s Repair. Except as provided in Section 9.2, Tenant shall, at its sole cost and expense, keep the interior, non-structural portions of the Premises in good condition and repair. Tenant’s repair obligations include, without limitation, repairs to: (1) floor covering, if needed due to wear and tear; (2) interior partitions; (3) interior doors; (4) the interior side of demising walls; (5) electronic, phone and data cabling and related equipment (collectively, “Cable”) that is installed by or for the benefit of Tenant and located in the Premises and that was not part of or included in Landlord’s Work; (6) supplemental air conditioning units, hot water healers, plumbing, and similar facilities serving Tenant exclusively; and (7) Alterations performed after the Commencement Date by contractors retained by Tenant, including related HVAC balancing. All work shall be performed in
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 6
 	 	SEPTEMBER 12, 2003
accordance with the rules and procedures described in Section 9.3 below. If Tenant falls to make any repairs to the Premises for more than thirty (30) days after notice from Landlord (although notice shall not be required if there is an emergency), Landlord may make the repairs, and Tenant shall pay the reasonable cost of the repairs to Landlord within (30) days after receipt of an invoice, together with an administrative charge in an amount equal to ten percent (10%) of the cost of the repairs.

 

 	9.2	Landlord’s Maintenance and Repair, Landlord shall provide daily janitorial service to the Premises (exclusive of Saturdays, Sundays and holidays) including vacuuming, dusting, trash removal and such regular maintenance as is normally conducted in a comparable Class A office building in the geographical area of the Premises including but not limited to window cleaning, pest control and snow shoveling; provided that janitorial service shall not include shampooing the carpets, except for the Common Areas. Tenant shall make repairs and replacements to the Premises, common area, or Property needed because of any negligent or intentional act or omission of Tenant or Tenant’s agents, employees or invitees, except to the extent that the repairs or replacements are covered by Landlord’s Insurance. Except for the repairs and replacements that Tenant must make under the preceding sentence and in Section 9.1 regarding Tenant’s repairs. Landlord shall pay for, subject to reimbursement as an Expense if and to the extent provided in Section 4.3, and make all other repairs and replacements to the Common Area and Building, and shall maintain the Building in good condition as a Class A office building, including, but not limited to, structural parts of the Building, foundations, bearing and exterior walls (including glass), subflooring and roof (including roof membrane and skylights), electrical, plumbing and sewage systems, Cable installed as part of Landlord’s Work, gutters and down spouts, the heating, ventilating and air conditioning system, interior walls, floors, ceilings, interior and exterior doors and windows and their appurtenant sills and frames, together with all fixtures, lighting, appliances, elevators, equipment and plumbing and utility lines, and the sidewalks, grounds, landscaping, parking and loading areas. In no event shall Tenant be entitled to undertake any such maintenance or repairs, whether at the expense of Tenant or Landlord, and Tenant hereby waives the benefits of any law now or hereafter in effect which would otherwise provide Tenant with such right. The Lease and Tenant’s obligation hereunder shall in no way be affected, impaired or excused because Landlord is unable to fulfill any of its obligations under this Lease due to fire, earthquake, inclement weather or other acts of God, acts of the public enemy, riot, insurrection, governmental regulation of the sales of materials or supplies or the transportation thereof, strikes or boycotts, shortages of materials or labor, or any other cause beyond the control of Landlord.
 

 	9.3	Alterations. Tenant shall not make alterations, additions or improvements to the Premises or other portions of the Property after the Commencement Date which are not part of the initial Tenant’s Work provided for herein (collectively referred to as “Alterations”) without first obtaining the written consent of Landlord in each instance, which consent shall not be unreasonably withheld or delayed. If Landlord does not respond to Tenant’s request for consent within ten (10) business days, Landlord shall be deemed to have granted its consent. However, Landlord’s consent shall not be required for any Alteration that satisfies all of the following criteria (a “Cosmetic Alteration”): (1) is of a cosmetic nature such as painting, wallpapering, hanging pictures and Installing carpeting; (2) is not visible from the exterior of the Premises or Property; (3) will not affect the systems or structure of the Property; and (4) does not require work to be performed inside the walls or above the ceiling of the Premises (other than installation of telephone, computer, data transmission, internet and other telecommunications cables and wires). However, even though consent is not required, the performance of Cosmetic Alterations shall be subject to all the other provisions of this Section 9.3. Prior to starting work, Tenant shall furnish Landlord with plans and specifications reasonably acceptable to Landlord: names of contractors reasonably acceptable to Landlord (provided that Landlord may designate specific contractors with respect to Property systems); necessary permits and approvals; and evidence of contractor’s and subcontractor’s insurance in amounts reasonably required by Landlord. Material changes to the plans and specifications must also be submitted to Landlord for its approval, which approval shall not be unreasonably withheld or delayed. Alterations shall be constructed in a good and workmanlike manner using materials of a quality that is at least equal to the quality designated by Landlord as the minimum standard for the Premises. Landlord may designate reasonable rules, regulations and procedures for the performance of work, in the Premises and, to the extent reasonably necessary to avoid disruption to the occupants of the Building, shall have the right to designate the time when Alterations may be performed. Tenant shall reimburse Landlord within thirty (30) days after receipt of an invoice for reasonable sums paid by Landlord for third party examination of Tenant’s plans for non-Cosmetic Alterations, provided that no such reimbursement shall be due with respect to Tenant’s initial Alterations in the Premises. Upon completion, Tenant shall furnish “as-built” plans (except for Cosmetic Alterations), completion affidavits, full and final waivers of lien and receipted bills covering all labor and materials. Tenant shall assure that the Alterations comply with all insurance requirements and Laws. Landlord’s approval of an Alteration shall not be a representation by Landlord that the Alteration complies with applicable Laws or will be adequate for Tenant’s use.
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 7
 	 	SEPTEMBER 12, 2003
10.	Use of Electrical Services by Tenant.
 

 	10.1	Electricity used by Tenant in the Premises shall be paid for by Tenant through inclusion in Expenses (except as provided herein as to excess usage). Electrical service to the Premises may be furnished by one or more companies providing electrical generation, transmission and distribution services, and the cost of electricity may consist of several different components or separate charges for such services, such as generation, distribution and stranded cost charges, Landlord shall have the exclusive right to select any company providing electrical service to the Premises, to aggregate the electrical service for the Property and Premises with other buildings, to purchase electricity through a broker and/or buyers group and to change the providers and manner of purchasing electricity. In the event that any other tenant of the Building utilizes such tenants premises, or any material portion thereof, for permitted uses which cause such tenant to use electrical service in excess of that associated with general office purposes, Landlord shall provide a separate meter to such tenant and separately charge such tenant for its electrical service, so that Tenant is not required to pay for any such excess use of electrical service by another tenant as part of the Expenses.
 

 	10.2	Tenant’s use of electrical service shall not exceed, either in voltage, rated capacity, use beyond Normal Business Hours or overall load, which Landlord reasonably deems to be standard for normal office use in Class A office buildings. If Tenant requests permission to consume excess electrical service, Landlord may condition consent upon conditions that Landlord reasonably elects (including, without limitation, the installation of utility service upgrades, meters, submeters, air handlers or cooling units), and the additional usage (to the extent permitted by Law), installation and maintenance costs shall be paid by Tenant. Landlord shall have the right, at Landlord’s cost, to separately meter electrical usage for the Premises and to measure electrical usage by survey or other commonly accepted methods.
 

11. Entry by Landlord. Landlord, Landlord’s agents, contractors and representatives may enter the Premises to inspect or show the Premises, to clean and make repairs, alterations or additions to the Premises, and to conduct or facilitate repairs, alterations or additions to any portion of the Property, including other tenants’ premises. Except in emergencies or to provide janitorial and other Property services alter Normal Business Hours, Landlord shall provide Tenant with reasonable prior notice of entry into the Premises, which may be given orally. If reasonably necessary for the protection and safety of Tenant and its employees. Landlord shall have the right to temporarily close all or a portion of the Premises and/or the Premises to perform repairs, alterations and additions. However, except in emergencies, Landlord will not close the Premises or the Premises if the work can reasonably be completed on weekends and after Normal Business Hours. Entry by Landlord shall not constitute constructive eviction or entitle Tenant to an abatement or reduction of Rent. Any entry by Landlord and its agents and employees (including, but not limited to the janitorial company servicing the Premises), shall be conducted in compliance with reasonable confidentiality and security measures which may be required by Tenant (including, but not limited to, an escort by one of Tenant’s employees and execution of confidentiality or nondisclosure agreements) in order to protect the confidentiality and security of Tenant’s business and employees, and Landlord acknowledges and accepts that Tenant considers the entire Premises as highly confidential and Landlord would have access to the Premises only if escorted by one of Tenant’s employees.

 

12.	Assignment and Subletting.
 

 	12.1	Except in connection with a Permitted Transfer (defined in Section 12.4 below), Tenant shall not assign, sublease, transfer or encumber any interest in this Lease or allow any third party to use all or any portion of the Premises (collectively or individually, a “Transfer”) without the prior written consent of Landlord, which consent shall not be unreasonably withheld or delayed. Without limitation, it is agreed that Landlord’s consent shall not be considered unreasonably withheld if: (1) in the event of a proposed assignment, the proposed transferee’s financial condition does not meet Landlord’s reasonable criteria used to select Building tenants having similar leasehold obligations; (2) the use of the Premises by the proposed transferee is not substantially the same as Tenant’s use of the Premises (3) the proposed transferee is a governmental agency, or occupant of the Property with whom Landlord is then negotiating for other space in the Building; or (4) Tenant is in default after the expiration of the notice and cure periods in this lease. Tenant shall not be entitled to receive monetary damages based upon a claim that Landlord unreasonably withheld its consent to a proposed Transfer and Tenant’s sole remedy shall be an action to enforce any such provision through specific performance or declaratory judgment. Any attempted Transfer in violation of this Article shall, at Landlord’s option, be void. Consent by Landlord to one or more Transfer(s) shall not operate as a waiver of Landlord’s rights to approve any subsequent Transfers. In no event shall any Transfer or Permitted Transfer release or relieve Tenant from any obligation under this Lease.
 

 	12.2	As part of its request for Landlord’s consent to a Transfer, Tenant shall provide Landlord with financial statements for the proposed transferee (in the event of a proposed assignment), a complete copy of the proposed assignment, sublease and other contractual documents and such other information as Landlord may reasonably request. Landlord shall, by written notice to Tenant within fifteen (15) business days of its receipt of the required information and documentation, either consent to the Transfer by the
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 8
 	 	SEPTEMBER 12, 2003
execution of a consent agreement in a form reasonably designated by Landlord or reasonably refuse to consent to the Transfer in writing. Tenant shall pay Landlord a review fee not exceeding $1,500.00 for Landlord’s review of any Permitted Transfer or requested Transfer for its actual reasonable costs and expenses (including reasonable attorney’s fees).

 

 	12.3	Tenant shall pay Landlord fifty percent (50%) of all rent and other consideration which Tenant receives as a result of a Transfer that is in excess of the Rent payable to Landlord for the portion of the Premises and Term covered by the Transfer. Tenant shall pay Landlord for Landlord’s share of any excess within thirty (30) days after Tenant’s receipt of such excess consideration. If Tenant is in Monetary Default (defined in Section 19.1 below), Landlord may require that all sublease payments be made directly to Landlord, in which case Tenant shall receive a credit against Rent in the amount of any payments received (less Landlord’s share of any excess).
 

 	12.4	Notwithstanding anything to the contrary contained in this Lease. Tenant may assign its entire interest under this Lease to a successor to Tenant by purchase, merger, consolidation or reorganization without the consent of Landlord, provided that all of the following conditions are satisfied (a “Permitted Transfer”); (1) Tenant is not in default under this Lease beyond applicable notice and cure periods; (2) Tenant’s successor shall own all or substantially all of the assets of Tenant; (3) no material change of use of the Premises occurs; (4) Tenant shall give Landlord written notice at least fifteen (15) days prior to the effective date of the proposed purchase, merger, consolidation or reorganization; and (5) all individuals then existing as guarantors execute a reaffirmation of the guarantee provided for by this Lease, if any, which is reasonably satisfactory in substance and form to Landlord. Tenant’s notice to Landlord shall include information and documentation showing that each of the above conditions has been satisfied. If requested by Landlord in the event of an assignment, Tenant’s successor shall sign a commercially reasonable form of assumption agreement.
 

13.	Intentionally Omitted.
 

14.	Indemnity and Waiver of Claims.
 

 	14.1	Tenant shall not permit mechanic’s or other liens to be placed upon the Property, the Premises or Tenant’s leasehold interest in connection with any work or service done or purportedly done by or for benefit of Tenant. If a lien is so placed, Tenant shall, within ten (10) days of notice from Landlord of the filing of the lien, fully discharge the lien by setting the claim which resulted in the lien or by bonding or insuring over the lien in the manner prescribed by the applicable lien Law, unless the lien arises out of Landlord’s failure to perform Landlord’s Work in accordance with Exhibit C (In which event Landlord shall be responsible for discharging the lien). If Tenant fails to discharge the lien when Tenant is required to do so, then, in addition to any other right or remedy of Landlord. Landlord may bond or insure over the lien or otherwise discharge the lien. Tenant shall reimburse Landlord for any amount paid by Landlord to bond or insure over the lien or discharge the lien, including, without limitation, reasonable attorney’s fees (if and to the extent permitted by Law) within thirty (30) days after receipt of an invoice from Landlord.
 

 	14.2	Except to the extent caused by the negligence or willful misconduct of Landlord or any Landlord Related Parties (defined below), Tenant shall indemnify, defend and hold Landlord, its trustees, members, principals, beneficiaries, partners, officers, directors, employees, Mortgagee(s) (as defined elsewhere in this Lease) and agents (“Landlord Related Parties”) harmless against and from all liabilities, obligations, damages, penalties, claims, actions, costs, charges and expenses. Including, without limitation, reasonable attorneys’ fees and other professional fees (if and to the extent permitted by Law), which may be imposed upon, incurred by or asserted against Landlord or any of the Landlord Related Parties and arising out of or in connection with any damage or injury occurring in the Premises or any acts or omissions (including violations of Law) of Tenant, the Tenant Related Parties (defined below) or any of Tenant’s contractors or licensees.
 

 	14.3	Except to the extent such damage or loss results from the negligence or willful misconduct of Landlord or any Landlord Related Parties. Landlord and the Landlord Related Parties shall not be liable for, and Tenant waives, all claims for loss or damage to Tenant’s business or loss, then or damage to Tenant’s Property or the property of any person claiming by, through or under Tenant resulting from; (1) wind or weather; (2) the failure of any sprinkler, heating or air-conditioning equipment, any electric wiring or any gas, water or steam pipes; (3) the backing up of any pipe or drain; (4) the bursting, leaking or running of any tank, water closet, drain or other pipe; (5) water, snow or ice upon or coming through the roof, skylight, stairs, doorways, windows, walks or any other place upon or near the Property; (6) any act or omission of any party other than Landlord or Landlord Related Parties; and (7) any causes not reasonably within the control of Landlord. Tenant shall insure itself against such losses consistent with Tenant’s normal practices and procedures for insuring against such losses.
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 9
 	 	SEPTEMBER 12, 2003
15.	Insurance.
 

 	15.1	By Tenant. Tenant shall carry and maintain the following insurance (“Tenant’s insurance”), at its sole cost and expense: (1) Commercial General Liability Insurance, written on an occurrence basis (ISO CG 00 01 01 98 or equivalent), applicable to the Premises and its appurtenances providing a minimum combined single limit of $2,000,000.00; (2) All Risk Property Insurance (ISO CP 00 10 or equivalent) on a Special Cause of Loss form (ISO CP 10 30 06 95 or equivalent), including flood and earthquake (if available at reasonable cost), and business interruption insurance, all written at 100% replacement cost value and with a replacement cost endorsement covering all of Tenant’s trade fixtures, equipment, furniture and other personal property within the Premises (“Tenant’s Property”), with any co-insurance penalties removed, and with Ordinance or Law Coverage at a limit accurately reflecting the condition of the building (CP 04 05); and (3) Worker’s Compensation as mandated by state law (which may not be self-insured) and Employer’s Liability (CG 00 01 07 98 or equivalent) In the minimum amount of $1,000,000.00. Any company writing any of Tenant’s Insurance shall have an A.M. Best rating of not less than A-VIII. All Commercial General Liability Insurance policies shall name Tenant as a named insured and Landlord (or any successor) as additional insureds, and shall be primary and non-contributory (CG 00 01 07 98 or equivalent). All policies of Tenant’s Insurance shall contain endorsements that the insurer(s) shall give Landlord and its designees at least thirty (30) days’ advance written notice of any cancellation, termination or lapse of Insurance. Tenant shall provide Landlord with a certificate of insurance evidencing Tenant’s Insurance prior to the earlier to occur of the Commencement Date or the date Tenant is provided with possession of the Premises for any reason, and upon renewals at least fifteen (15) days prior to the expiration of the Insurance coverage.
 

So long as (i) there has been no assignment or subletting of all or any part of the Lease or Premises and (ii) Conoco Philips Company maintains a net worth equal to or greater than the its net worth as reflected in its annual report for calendar year 2002. Tenant may elect by written notice to Landlord to Insure its Insurance obligations under this Lease (other than worker’s Compensation) through a self-insurance retention program maintained by Conoco Philips Company with the same obligations as would have been assumed by a commercial insurance company issuing the policies described above.

 

 	15.2	By Landlord.
 

 	15.2.1	Building and Improvements. Landlord shall obtain and keep in force during the term of this Lease a policy or policies in the name of Landlord, with loss payable to Landlord and to any Lender(s), Insuring against loss or damage to the Property with such commercially reasonable deductible amount as is selected by Landlord. Such Insurance shall be for full replacement cost, as the same shall exist from time to time, or the amount required by any Lender(s), but in no event more than the commercially reasonable and available insurable value thereof if, by reason of the unique nature or age of the improvements involved, such latter amount is less than full replacement cost. If the coverage is available and commercially reasonable, Landlord’s policy or policies may insure against all risks of direct physical loss or damage (including flood and/or earthquake), including coverage for any additional costs resulting from debris removal and reasonable amounts of coverage for the enforcement of any ordinance or law regulating the reconstruction or replacement of any undamaged sections of the Premises required to be demolished or removed by reason of the enforcement of any building, zoning, safety or land use laws as the result of a covered loss. Such policies may also contain an agreed valuation provision in lieu of any co-insurance clause, waiver of subrogation, and inflation guard protection causing an increase in the annual property insurance coverage amount by a factor selected by the insurer.
 

 	15.2.2	Rental Value. Landlord also may obtain and keep in force during the term of this Lease a policy or policies in the name of Landlord, with loss payable to Landlord and any lender(s) to Landlord, insuring the loss of the full rental and other charges (including Operating Expenses) payable by all tenants of the Premises to Landlord for one year, Said insurance may provide that in the event the Lease is terminated by reason of an insured loss. The period of indemnity for such coverage shall be extended beyond the date of the completion of repairs or replacement of the Premises, to provide for one full year’s loss of rental revenues from the date of any such loss. Said Insurance shall contain an agreed valuation provision in lieu of any co-insurance clause, and the amount of coverage shall be adjusted annually to reflect the projected payments payable by Tenant for the next 12-month period.
 

 	15.2.3	Increases Caused by Tenant. Tenant shall pay for any increase in the premiums charged to Landlord for the Property or Common Areas if said increase is caused by Tenant’s acts, omissions, use or occupancy of the Premises.
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 10
 	 	SEPTEMBER 12, 2003
 	15.2.4	Liability for Common Areas. Landlord shall carry and maintain with respect to the Common Areas Commercial General Liability Insurance, written on a claims made basis, applicable to the Premises and its appurtenances providing a minimum combined single limit of $2,000,000.00, which shall name Landlord as a named Insured and Tenant as an additional insured. Upon Tenant’s request, Landlord shall provide Tenant with a certificate of insurance evidencing such liability insurance.
 

16. Subrogation. Notwithstanding anything in this Lease to the contrary, Landlord and Tenant hereby waive, and shall cause their respective insurance carriers to waive, any and all rights of recovery, claim, action or causes of action against the other and their respective trustees, principals beneficiaries, partners, officers, directors, agents, and employees, for any loss or damage that may occur to Landlord or Tenant or any party claiming by, through or under Landlord or Tenant, as the case may be, with respect to Tenant’s Property, the Property, the Premises, any additions or improvements to the Property, or Premises, or any contents thereof, including all rights of recovery, claims, actions or causes of action arising out of the negligence of Landlord or any Landlord Related Parties or the negligence of Tenant or any Tenant Related Parties, which loss or damage is (or would have been, had the insurance required by this Lease been carried) covered by Insurance.

 

17.	Casualty Damage.
 

 	17.1	If all or any part of the Premises are damaged by fire or other casualty, Tenant shall immediately notify Landlord in writing. During any period of time that all or a portion of the Premises is rendered untenantable as a result of a fire or other casualty, the Rent shall abate for the portion of the Premises that is untenantable and not used by Tenant. Landlord shall have the right to terminate this Lease if: (1) the Property or the Premises shall be damaged so that, in Landlord’s reasonable judgment, substantial alteration or reconstruction of the Property not covered by insurance shall be required (whether or not the Premises has been damaged) and Landlord is therefore terminating all leases in the Building; (2) Landlord is not permitted by law to rebuild the Property or the Premises in substantially the same form as existed before the fire or casualty (in which event Tenant may also terminate this Lease): (3) the Premises have been materially damaged and there is less than two(2) years of the Term remaining on the date of the casualty: (4) any Mortgages requires that such insurance proceeds be applied to the payment of the mortgage debt: or (5) a material uninsured loss to the Property or the Premises occurs. Landlord may exercise its right to terminate this Lease by notifying Tenant in writing within ninety (90) days after the date of the casualty. If landlord does not terminate this Lease, Landlord shall commence and proceed with reasonable diligence to repair and restore the Premises and the Leasehold improvements (excluding any Alterations that were performed by Tenant in violation of this Lease). However, in no event shall Landlord be required to spend more than the insurance proceeds received by Landlord. Landlord shall not be liable for any loss or damage to Tenant’s Property or to the business of Tenant resulting in any way from the fire or other casualty or from the repair and restoration of the damage. Landlord and Tenant hereby waive the provisions of any Law relating to the matters addressed in this Article, and agree that their respective rights from damage to or destruction of the Premises shall be those specifically provided in this Lease.
 

 	17.2	If all or any portion of the Premises shall be made untenantable by fire or other casualty, Landlord shall, with reasonable promptness, cause an architect or general contractor selected by Landlord to provide Landlord and Tenant with a written estimate of the amount of time required to substantially complete the repair and restoration of the Premises and make the Premises tenantable again, using standard working methods (“Completion Estimate”). If the Completion Estimate indicates that the Premises cannot be made tenantable within one hundred eighty (180) days from the date the repair and restoration is started, then regardless of anything in Section 17.1 above to the contrary, either party shall have the right to terminate this Lease by giving written notice to the other of such election within ten (10) days after receipt of the Completion Estimate.
 

18. Condemnation. Either party may terminate this Lease if the whole or any material part of the Premises shall be taken or condemned for any public or quasi-public use under Law, by eminent domain or private purchase in lieu thereof (a “Taking”). Landlord shall also have the right to terminate this Lease if there is a Taking of any portion of the Property or the Premises which would leave the remainder of the Property or the Premises unsuitable for use as an office building in a manner comparable to the Property’s or the Premises use prior to the Taking. In order to exercise its right to terminate the Lease, Landlord or Tenant, as the case may be, must provide written notice of termination to the other within forty-five (45) days after the Taking. Any such termination shall be effective as of the date the physical taking of the Premises or the portion of the Property or the Premises occurs. If this Lease is not terminated, the Rentable Area of the Property, the Rentable Area of the Premises, Tenants Pro Rate Share shall, if applicable, be appropriately adjusted. In addition, Rent for any portion of the Premises taken or condemned shall be abated during the unexpired Term of this Lease effective when the physical taking of the portion of the Premises occurs. All compensation awarded for a Taking, or sale proceeds, shall be the property of Landlord, any right to receive compensation or proceeds being expressly waived by Tenant. However, Tenant may file a separate claim at its sole cost and expense for Tenant’s Property and Tenant’s reasonable relocation expenses, provided the filing of the claim does not diminish the award which would otherwise be receivable by Landlord.

 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 11
 	 	SEPTEMBER 12, 2003
19. Events of Default. Tenant shall be considered to be in default of this Lease upon the occurrence on any of the following events of default:

 

 	19.1.	Tenant’s failure to pay when due all or any portion of the Rent, if the failure continues for three (3) business days after written notice to Tenant (“Monetary Default”).
 

 	19.2	Tenant’s failure (other than a Monetary Default) to comply with any term, provision or covenant of this Lease, if the failure is not cured within thirty (30) days after written notice to Tenant. However, if Tenant’s failure to comply cannot reasonably be cured within thirty (30) days, Tenant shall be allowed additional time as is reasonably necessary to cure the failure so long as; (1) Tenant commences to cure the failure within thirty (30) days, and (2) Tenant diligently pursues a course of action that will cure the failure and bring Tenant back into compliance with the Lease. However, if Tenant’s failure to comply creates a hazardous condition, the failure must be cured immediately upon notice to Tenant.
 

 	19.3	Tenant becomes insolvent, makes a transfer in fraud of creditors or makes an assignment for the benefit of creditors, or admits in writing its inability to pay its debts when due.
 

 	19.4	Tenant’s leasehold estate is taken by process or operation of Law.
 

20.	Remedies.
 

 	20.1	Upon any default, Landlord shall have the right without notice or demand (except as provided in Article 19) to pursue any of its rights and remedies at Law or in equity, including any one or more of the following remedies:
 

 	20.1.1	Terminate this Lease, in which case Tenant shall immediately surrender the Premises to Landlord, if Tenant fails to surrender the Premises. Landlord may, in compliance with applicable Law and without prejudice to any other right or remedy, enter upon and take possession of the Premises and expel and remove Tenant, Tenant’s Property and any party occupying all or any part of the Premises. Tenant shall pay Landlord on demand the amount of all past due Rent and other losses and damages which Landlord may suffer as a result of Tenant’s default, whether by Landlord’s inability to relet the Premises on satisfactory terms or otherwise, including, without limitation, all Costs of Reletting (defined below) and any deficiency that may arise from reletting or the failure to relet the Premises. “Costs of Reletting” shall include all costs and expenses incurred by Landlord in reletting or attempting to relet the Premises, including, without limitation, reasonable legal fees, brokerage commissions, the cost of alterations and the value of other concessions or allowance granted to a new tenant.
 

 	20.1.2	Terminate Tenant’s right to possession of the Premises and, in compliance with applicable Law, expel and remove Tenant, Tenant’s Property and any parties occupying all or any part of the Premises. Landlord may (but shall not be obligated to, except to the extent required by law) relet all or any part of the Premises, without notice to Tenant, for a term that may be greater or less than the balance of the Term and on such conditions (which may include concessions, free rent and alterations of the Premises) and for such uses as Landlord in its absolute discretion shall determine. Landlord may collect and receive all rents and other income from the reletting. Tenant shall pay Landlord on demand all past due Rent, all Costs of Reletting and any deficiency arising from the reletting or failure to relet the Premises. Landlord shall not be responsible or liable for the failure to relet all or any part of the Premises or for the failure to collect any Rent. The re-entry or taking of possession of the Premises shall not be construed as an election by Landlord to terminate this Lease unless a written notice of termination is given to Tenant.
 

 	20.1.3	In the event that Landlord shall elect to terminate this Lease under Section 20.1.1, then upon such termination Tenant shall (if it has not already done so) quit and surrender the Premises to Landlord and Landlord may recover from Tenant:
 

(i) The worth at the time of award of any unpaid Rent which had been earned at the time of such termination; plus

 

(ii) The worth at the time of award of the amount by which the unpaid Rent which would have been earned after termination until the time of award exceeds the amount of such rental loss that Tenant proves could have been reasonably avoided; plus

 

(iii) The worth at the time of award of the amount by which the unpaid Rent for the balance of the term after the time of award exceeds the amount of such rental loss that Tenant proves could be reasonably avoided; plus

 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 12
 	 	SEPTEMBER 12, 2003
(iv) Any other amount necessary to compensate Landlord for all the damage proximately caused by Tenant’s failure to perform Tenant’s obligations under this Lease or which in the ordinary course of things would be likely to result therefrom.

 

As used in (i) and (ii) above, the “worth at the time of award” is computed by allowing interest at 12% per annum. As used in (iii) above, the worth at the time of award” is computed by discounting such amount at the discount rate of the Federal Reserve Bank of San Francisco at the time of award plus 1%.

 

 	20.2	Unless expressly provided in this Lease, the repossession or re-entering of all or any part of the Premises shall not relieve Tenant of its liabilities and obligations under the Lease. No right or remedy of Landlord shall be exclusive of any other right or remedy. Each right and remedy shall be cumulative and in addition to any other right and remedy now or subsequently available to Landlord at Law or in equity. If Landlord declares Tenant to be in default, Landlord shall be entitled to receive interest on any unpaid item of Rent at a rate equal to 12% per annum. Forbearance by Landlord to enforce one or more remedies shall not constitute a waiver of any default.
 

21. Landlord’s Default; Limitation of Liability. Landlord’s failure to perform or observe any of its obligations under this Lease or to correct a breach of any warranty or representation made in this Lease within thirty (30) days after receipt of written notice from Tenant setting forth in reasonable detail the nature and extent of the failure (or if more than thirty (30) days is required to cure the breach, Landlord’s failure to begin curing within the thirty (30) day period and diligently prosecute the cure to completion) shall constitute a default by Landlord. In no event shall Tenant have the right to terminate this Lease as a result of Landlord’s default and Tenant’s remedies shall be limited to damages and/or an injunction: and in no case may the Tenant withhold any Rent or claim a set-off or deduction from Rent. NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED IN THIS LEASE, THE LIABILITY OF LANDLORD (AND OF ANY SUCCESSOR LANDLORD) TO TENANT SHALL BE LIMITED TO THE INTEREST OF LANDLORD IN THE PROPERTY AND ANY PROCEEDS THEREOF. TENANT SHALL LOOK SOLELY TO LANDLORD’S INTEREST IN THE PROPERTY AND ANY PROCEEDS THEREOF FOR THE RECOVERY OF ANY JUDGMENT OR AWARD AGAINST LANDLORD. NEITHER LANDLORD NOR ANY LANDLORD RELATED PARTY SHALL BE PERSONALLY LIABLE FOR ANY JUDGMENT OR DEFICIENCY. BEFORE FILING SUIT FOR AN ALLEGED DEFAULT BY LANDLORD, TENANT SHALL GIVE LANDLORD AND THE MORTGAGEE(S) (DEFINED IN ARTICLE 25 BELOW) WHOM TENANT HAS BEEN NOTIFIED HOLD MORTGAGES (DEFINED IN ARTICLE 25 BELOW) ON THE PROPERTY, BUILDING OR PREMISES, NOTICE AND REASONABLE TIME TO CURE THE ALLEGED DEFAULT. IN ADDITION, TENANT ACKNOWLEDGES THAT ANY ENTITY MANAGING THE PREMISES ON BEHALF OF LANDLORD, OR WHICH EXECUTES THIS LEASE AS AGENT FOR LANDLORD, IS ACTING SOLELY IN ITS CAPACITY AS AGENT FOR LANDLORD AND SHALL NOT BE LIABLE FOR ANY OBLIGATIONS, LIABILITIES, LOSSES OR DAMAGES ARISING OUT OF OR IN CONNECTION WITH THIS LEASE, ALL OF WHICH ARE EXPRESSLY WAIVED BY TENANT, UNLESS DUE TO THE NEGLIGENCE OR WILLFUL MISCONDUCT OF SUCH ENTITY OR AGENT.

 

22. No Waiver. Either party’s failure to declare a default immediately upon its occurrence, or delay in taking action for a default shall not constitute a waiver of the default, nor shall it constitute an estoppel. Either party’s failure to enforce its rights for a default shall not constitute a waiver of its rights regarding any subsequent default. Receipt by Landlord of Tenant’s keys to the Premises shall not constitute an acceptance or surrender of the Premises.

 

23. Quiet Enjoyment. Tenant shall, and may peacefully have, hold and enjoy the Premises, subject to the terms of this Lease, provided Tenant pays the Rent and fully performs all of its covenants and agreements. This covenant and all other covenants of Landlord shall be binding upon Landlord and its successors only during its or their respective periods of ownership of the Premises, and shall not be a personal covenant of Landlord or the Landlord Related Parties.

 

24. Holding Over. If Tenant fails to surrender the Premises at the expiration or earlier termination of this Lease, occupancy of the Premises after the termination or expiration shall be that of a tenancy at sufferance. Tenant’s occupancy of the Premises during the holdover shall be subject to all the terms and provisions of this Lease and Tenant shall pay an amount (on a per month basis without reduction for partial months during the holdover) equal to one hundred seventy five percent (175%) of the sum of the Base Rent and Additional Rent due for the period immediately preceding the holdover. No holdover by Tenant or payment by Tenant after the expiration or early termination of this Lease shall be construed to extend the Term or prevent Landlord from immediate recovery of possession of the Premises by summary proceedings or otherwise. In addition to the payment of the amounts provided above, if Landlord is unable to deliver possession of the Premises to a new tenant, or to perform improvements for a new tenant, as a result of Tenant’s holdover and Tenant fails to vacate the Premises within fifteen (15) days after Landlord notifies Tenant of Landlord’s inability to deliver possession, or perform improvements. Tenant shall be liable to Landlord for all damages, including, without limitation, consequential damages, that Landlord suffers from the holdover.

 

25.	Subordination to Mortgages; Estoppel Certificate; Mortgagee Protection.
 

 	25.1	Subject to the terms of this Section. Tenant accepts this Lease subject and subordinate to any mortgage(s), deed(s) of trust or other lien(s) now or subsequently arising upon the
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 13
 	 	SEPTEMBER 12, 2003
 	    	Premises or the Property, and to renewals, modifications, refinancings and extensions thereof (collectively referred to as a “Mortgage”). The party having the benefit of a Mortgage shall be referred to as a “Mortgagee”. This clauses shall be self-operative, but upon request from a Mortgagee, Tenant shall execute and deliver a subordination agreement in favor of the Mortgagee within ten (10) business days of the request, provided that the Mortgagee shall agree, in a non-disturbance agreement, to recognize this Lease in the event of foreclosure if Tenant is not in default at such time subject to such provisions relating to the disposition or application of Insurance or condemnation proceeds as may be contained in such Mortgagee’s loan documents. Tenant agrees to execute any reasonable documents required to effectuate such subordination. In lieu of having the Mortgage be superior to this Lease, a Mortgagee shall have the right at any time to subordinate its Mortgage to this Lease. If requested by a successor-in-interest to all or a part of Landlord’s interest in the Lease, Tenant shall, without charge, attorn to the successor-in-interest. Landlord and Tenant shall each, within ten (10) business days after receipt of a written request from the other, execute and deliver an estoppel certificate to those parties as are reasonably requested by the other (including a Mortgagee or prospective purchaser). The estoppel certificate shall include a statement certifying that this Lease is unmodified (except as identified in the estoppel certificate) and in full force and affect, describing the dates to which Rent and other charges have been paid, representing that, to such party’s actual knowledge, there is no default for stating the nature of the alleged default) and indicating other matters with respect to the Lease that may reasonably be requested.
 

 	25.2	Tenant agrees to give any mortgagee or deed of trust holder, by certified mail, a copy of any notice of default served upon the Landlord, provided that prior to such notice Tenant has been notified in writing (by way of Notice of Assignment of Rents and Leases, or otherwise) of the addresses of such mortgagee or deed of trust holder. Tenant further agrees that if Landlord shall have failed to cure such default within the time provided for in this Lease, then the mortgagees and/or trust deed holders have an additional thirty (30) days within which to cure such default or if such default cannot be cured within that time, then such additional time as may be necessary if within such thirty (30) days any mortgagee or deed of trust holder has commenced and is diligently pursuing the remedies necessary to cure such default (including but not limited to commencement of foreclosure proceedings if necessary to affect such cure), in which event this Lease shall not be terminated if such remedies are being so diligently pursed.
 

26. Attorneys’ Fees. If either party institutes a suit against the other for violation of or to enforce any covenant or condition of this Lease, or if either party intervenes in any suit in which the other is a party to enforce or protect its interest or rights, the prevailing party shall be entitled to all of its costs and expenses, including, without limitation, reasonable attorneys’ fees.

 

27. Notice. If a demand, request, approval, consent or notice (collectively referred to as a “notice”) shall or may be given to either party by the other, the notice shall be in writing and delivered by hand or sent by registered or certified mail with return receipt requested, or sent by overnight or same day courier service at the party’s respective Notice Address (es) set forth in Article 1, except that if Tenant has vacated the Premises (or if the Notice Address for Tenant is other than the Premises, and Tenant has vacated such address) without providing Landlord a new Notice Address, Landlord may serve notice in any manner described in this Article or in any other manner permitted by Law. Each notice shall be deemed to have been received or given on the earlier to occur of actual delivery or the date on which delivery is refused, or, if Tenant has vacated the Premises or the other Notice Address of Tenant without providing a new Notice Address, three (3) days after notice is deposited in the U.S. mail or with a courier service in the manner described above. Either party may, at any time, change its Notice Address by giving the other party written notice of the new address in the manner described in this Article.

 

28. Excepted Rights. This Lease does not grant any rights to light or air over or about the Property or the Premises. Landlord excepts and reserves exclusively to itself the use of : (1) roofs, (2) telephone, electrical and janitorial closets, (3) equipment rooms. Property risers or similar areas that are used by Landlord for the provision of Property services, (4) rights to the land and improvements below the floor of the Premises, (5) the improvements and air rights above the Premises, (6) the improvements and air rights outside the demising walls of the Premises, and (7) the areas within the Premises used for the installation of utility lines and other installations serving occupants of the Property. Landlord shall also have the right to make such other changes to the Property (but not the Interior of the Premises) as Landlord deems appropriate, provided the changes do not materially affect Tenant’s ability to use or access the Premises for the Permitted Use. Landlord shall also have the right (but not the obligation) to temporarily close the Property if Landlord reasonably determines that there is an imminent danger of significant damage to the Property or of personal injury to Landlord’s employees or the occupants of the Property. The circumstances under which Landlord may temporarily close the Property shall include, without limitation, electrical interruptions, hurricanes and civil disturbances. A closure of the Property under such circumstances shall not constitute a constructive eviction nor entitle Tenant to an abatement or reduction of Rent. Landlord shall have the right at any time, without thereby creating an actual or constructive eviction or incurring any liability to Tenant therefor, to change the arrangement or location of such of the following as are not contained within the Premises or any part thereof (provided such change does not adversely affect Tenant’s use of or access to the Premises): entrances, passageways, doors and doorways, corridors, stairs, toilets and other like public service portions of the Property.

 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 14
 	 	SEPTEMBER 12, 2003
29. Surrender of Premises. At the expiration or earlier termination of this Lease of Tenant’s right of possession, Tenant shall remove Tenant’s Property (defined in Article 15) from the Premises, and quit and surrender the Premises to Landlord, broom clean and otherwise in the condition required by this Lease. Tenant shall also be required to remove the Required Removables in accordance with Article B. If Tenant fails to remove any of Tenant’s Property within two (2) days after the termination of this Lease or of Tenant’s right to possession, Landlord, at Tenant’s sole cost and expense, shall be entitled (but not obligated) to remove and store Tenant’s Property. Landlord shall not be responsible for the value, preservation or safekeeping of Tenant’s Property. Tenant shall pay Landlord, upon demand, the expenses and storage charges incurred for Tenant’s Property. In addition, if Tenant fails to remove Tenant’s Property from the Premises or storage, as the case may be, within thirty (30) days after written notice. Landlord may deem all or any part of Tenant’s Property to be abandoned, and title to Tenant’s Property shall be deemed to be immediately vested in Landlord.

 

30.	Parking.
 

 	30.1	Tenant agrees to further rent from Landlord and Landlord agrees to rent to Tenant the use, on a non-exclusive basis, of fourteen (14) parking stalls in the Building. As of the Commencement Date, the fee shall be Seventy-Five Dollars ($75) per parking stall per month for the first two (2) years of the Lease Term and Ninety-Five Dollars ($95) per parking stall per month for years 3, 4 and 5 of the Lease Term. Such fees shall be paid in the same manner and at the same time as Tenant’s monthly payments of Base Rent to Landlord, and are included in the Base Rent set forth in Section 1.3 above. Tenant’s use of the parking shall be subject to such reasonable rules and regulations as Landlord may determine are appropriate.
 

 	    	Landlord also shall obtain for Tenant’s use three (3) Additional parking stalls located either in the Building or in surface parking lots in the vicinity of the Building. Tenant shall pay Landlord for such additional three (3) stalls at the rate of One Hundred Twenty-Five Dollars ($125) per month (increasing annually at the and or each calendar year by three percent (3%) on a cumulative basis). The charges for these three (3) additional parking stalls shall be added to Tenant’s monthly payments of Base Rent. The monthly Base Rent amounts set forth in Section 1.3 above include the cost of three (3) stalls at $125 per month (escalated as set forth above).
 

 	30.2	Tenant shall cooperate and comply with any legal requirements for the dissemination of information to commuters and visitors to the Property to encourage the use of available transportation alternatives and shall offer incentives to their employees to use such alternatives and otherwise comply with any governmentally sponsored traffic management or reduction plan. Landlord shall, at its cost install a bicycle parking cage in the parking area.
 

31.	Miscellaneous.
 

 	31.1	This Lease and the rights and obligations of the parties shall be interpreted, construed and enforced in accordance with the Laws of the State of Washington and Landlord and Tenant hereby irrevocably consent to the jurisdiction and proper venue of such state. If any term or provision of this Lease shall to any extent be invalid or unenforceable, the remainder of this Lease shall not be affected, and each provision of this Lease shall be valid and enforced to the fullest extent permitted by Law. The headings and titles to the Articles and Sections of this Lease are for convenience only and shall have no effect on the interpretation of any part of the Lease.
 

 	31.2	Tenant shall not record this Lease or a memorandum of the same without Landlord’s prior written consent.
 

 	31.3	Landlord and Tenant hereby waive any right to trial by jury in any proceeding based upon a breach of this Lease.
 

 	31.4	Whenever a period of time is prescribed for the taking of an action by Landlord or Tenant, the period of time for the performance of such action shall be extended by the number of days that the performance is actually due to strikes, acts of God, shortages of labor or materials, war, civil disturbances and other causes beyond the reasonable control of the performing party (“Force Majeure”). However, events of Force Majeure shall not extend any period of time for the payment Rent of other sums payable by either party.
 

 	31.5	Landlord shall have the right to transfer and assign, in whole, all of its rights and obligations under this Lease and in the Premises or the Property referred to herein, and upon such transfer and transfer of the Deposit, and provided the assignee assumes in writing all of Landlord’s obligations hereunder, Landlord shall be released from any further obligations hereunder, and Tenant agrees to look solely to the successor in interest of Landlord for the performance of such obligations.
 

 	31.6	Broker.
 

 	31.6.1	Tenant represents and warrants to Landlord that it has not engaged nor dealt with any broker, finder or other person who would be entitled to any commission or
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 15
 	 	SEPTEMBER 12, 2003
 	    	fees for the negotiation, execution, or delivery of this Lease except for Teutsch partners (“Landlord’s Broker”) and Marlanna Christlan-Griffith (Tenant’s Broker”). Landlord agrees to pay and be responsible for any commissions owing to Landlord’s Broker. Landlord agrees to pay in full satisfaction of any commission to Tenant’s Broker due from Landlord arising out of this transaction and lease a commission equal to (i) Five Dollars ($5.00) per Rantable Square Foot of the Premises, as calculated at the commencement of this Lease (subject to adjustment if the Rentable Area of the Premises is re-calculated by the Commencement Date pursuant to Section 1.2), which commission shall be payable one-half (1/2) on mutual execution of this Lease and one-half (1/2) on commencement of Tenant’s obligation to pay Base Rent. In the event of any renewal or extension of this Lease, Landlord shall have no obligation to pay any commission to Tenant’s Broker. Tenant shall indemnify, defend and hold Landlord harmless against any loss, cost, liability or expense incurred by Landlord as a result of any claim asserted by any such broker (other than Tenant’s Broker and Landlord’s Broker) on the basis of any arrangements or agreements made or alleged to have been made by or on behalf of Tenant in violation of Tenant’s warrenty in this Section.
 

 	31.6.2	Agency Disclosure. At the signing of this Lease, Landlord was represented by Landlord’s Broker. Each party signing this document confirms that the prior oral and/or written disclosure of agency was provided to such party in this transaction, as required by RCW 18.86.030 (1)(g). Landlord and Tenant, by their execution of this Lease, each acknowledge and agree that they have timely received a pamphlet on the law of real estate agency as required under RCW 18.86.030(1)(f). Tenant acknowledges that Landlord has disclosed that certain principals of Landlord are licensed real estate agents.
 

 	31.7	Tenant covenants, warrants and represents that: (1) each individual executing, attesting and/or delivering this Lease on behalf of Tenant is authorized to do so on behalf of Tenant; (2) this Lease is binding upon Tenant; and (3) Tenant is duly organized and legally existing in the state of its organization and is qualified to do business in the state in which the Premises are located. If there is more than one Tenant, or if Tenant is comprised of more than one party or entity, the obligations imposed upon Tenant shall be joint and several obligations of all the parties and entities. Notices, payments and agreements given or made by, with or to any one person or entity shall be deemed to have been given or made by, with and to all of them.
 

 	31.8	Time is of the essence with respect to Tenant’s exercise of any expansion, renewal or extension rights granted to Tenant. This Lease shall create only the relationship of landlord and tenant between the parties, and not partnership, joint venture or any other relationship. This Lease and the covenants and conditions in this Lease shall inure only to the benefit of and be binding only upon Landlord and Tenant and their successors and permitted assigns.
 

 	31.9	The expiration of the Term, whether by lapse of time or otherwise, shall not relieve either party of any obligations which accrued prior to or which may continue to accrue after the expiration or early termination of this Lease. Without limiting the scope of the prior sentence, it is agreed that Tenant’s obligations under Sections 4.1,4.2,8,14,20 and 25 shall survive the expiration or early termination of this Lease.
 

 	31.10	All understandings and agreements previously made between the parties are superseded by this Lease, and neither party is relying upon any warranty, statement or representation not contained in this Lease. This Lease may be modified only by a written agreement signed by Landlord and Tenant.
 

 	31.11	Tenant, within Fifteen (15) days after request (but not more than once per year), shall provide Landlord with a current financial statement and such other information as Landlord may reasonably request in order to create a “business profile” of Tenant and determine Tenant’s ability to fulfill its obligations under this Lease. Landlord, however, shall not require Tenant to provide such information unless Landlord is requested to produce the information in connection with a proposed financing or sale of the Property. Upon written request by Tenant, Landlord shall enter into a commercially reasonable confidentiality agreement covering any confidential information that is disclosed by Tenant.
 

 	31.12	The name of the Property may be changed by Landlord.
 

 	31.13	Tenant shall not be deemed to be a third party beneficiary of any other lease, of the Property; Landlord retains the sole right to determine, in its reasonable discretion, whether to enforce and the method of enforcement of compliance by other tenants and their employees with the terms of their respective leases including any restrictions on use and parking; the existence of any violation of any lease provision by any other tenant shall not be deemed to be a violation of this Lease by Landlord.
 

CONOCO PHILLIPS, 1144 EASTLAKE LEASE

 	PAGE 16
 	 	SEPTEMBER 12, 2003
 	31.14	Submission of this Lease for examination, even though executed by Tenant, shall not bind Landlord in any manner, and no Lease or other obligation on the part of the Landlord shall arise, until this Lease is executed and delivered by Landlord to Tenant.
 

32. Entire Agreement. This Lease and the following exhibits and attachments constitute the entire agreement between the parties and supersede all prior agreements and understandings related to the Premises, including all lease proposals, letters of Intent and other documents: Exhibit A-1 (Outline and Location of Premises), Exhibit A-2 (Legal Description of Property), Exhibit B (Rules and Regulations), Exhibit C (Landlord’s Work);

 

Landlord and Tenant have executed this Lease as of the day and year first above written.

 

LANDLORD:
1144 Eastlake LLC, a Washington limited liability company
 	 	By:	 	J&amp;J Eastlake LLC, a Washington limited liability company, its manager
 	 	 	 	By:	 	
/s/ John Teutsch

 	 	 	 	Name:	 	John Teutsch
 	 	 	 	Its:	 	Managing Member
 

TENANT:
Conoco Phillips Company, a Delaware corporation
By:	 	
/s/ Donald C. Kaplan

Name:	 	DONALD C. KAPLAN
Title:	 	Regional Manager
 

 	 	Page 17
 	 	 
LANDLORD ACKNOWLEDGEMENT

 

STATE OF WASHINGTON	  	)
COUNTY OF KING	  	) ss:
 

I, the undersigned, a Notary Public, in and for the County and State aforesaid, do hereby certify that John S. Tautsch, personally known to me to be the authorized agent of J&amp;J Eastlake LLC, a Washington limited liability company, and personally known to me to be the same person whose name is subscribed to the foregoing instrument, appeared before me this day in person and acknowledged that as the authorized agent of said entity being authorized so to do, he executed the foregoing instrument on behalf of said entity, by subscribing the name of such entity by himself as such managing member, as a free and voluntary act, and as the free and voluntary act and deed of said entity under the foregoing instrument for the uses of purposes therein set forth.

 

GIVEN under my hand and official seal this 14th day of September, 2003.

 

[Notary Seal]	 	
/s/ Christina M. Ware

 	 	Notary Public
 	 	Christina M. Ware
 	 	Printed Name
 	 	Residing at:	  	Renton
 	 	My commission Expires:	  	7/10/07
 

TENANT ACKNOWLEDGEMENT

 

STATE OF WASHINGTON	  	)
COUNTY OF KING	  	) ss:
 

I, the undersigned, a Notary Public, in and for the County and State aforesaid, do hereby certify that DONALD C. KAPLAN, personally known to me to be the authorized agent of Conoco Phillips Company, a Delaware corporation, and personally known to me to be the same person whose name is subscribed to the foregoing instrument appeared before me this day in person and acknowledged that as the authorized agent of said entity being authorized so to do, he executed the foregoing instrument on behalf of said entity, by subscribing the name of such entity by himself as such managing member, as a free and voluntary act, and as the free and voluntary act and deed of said entity under the foregoing instrument for the uses of purposes therein set forth.

 

IN WITNESS WHEREOF, I hereunto set my hand and official seal.

 

[Notary Seal]	 	
/s/ Karen Bernard

 	 	Notary Public
 	 	KAREN BERNARD
 	 	Printed Name
 	 	Residing at:	  	Kent, WA
 	 	My Commission Expires:	  	11-01-05
 

 	 	Page 18
 	 	 

</file>
<file name="skills/summarization/data/sample-lease6-summary.txt">
Description: Workrise Technologies Inc. to CS Disco, Inc. This sublease is for office space in Austin, Texas between Workrise Technologies Inc. as Sublessor and CS Disco, Inc. as Sublessee. Key details include:

&lt;parties_involved&gt;
- Sublessor: Workrise Technologies Inc., a Delaware corporation
- Sublessee: CS Disco, Inc., a Delaware corporation 
- Original Lessor: Cousins - One Congress Plaza LLC
&lt;/parties_involved&gt;

&lt;property_details&gt;
- Address: 111 Congress Avenue, Austin, Texas 78701
- Description: 46,250 rentable square feet on the 6th floor (Suite 600) and 9th floor (Suite 900) of the Building
- Permitted use: General business office use
&lt;/property_details&gt;

&lt;term_and_rent&gt;
- Start date: The later of the Effective Date or date premises are delivered 
- End date: July 31, 2028
- Monthly rent: Varies by period, starting at $167,657.67 per month
- Security deposit: $306,714.58 cash deposit plus $500,000 letter of credit
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Sublessee responsible for utilities
- Maintenance and repairs: Sublessee responsible for non-structural interior repairs and maintenance
- Operating expenses: Sublessee pays pro-rata share of expenses exceeding base year costs
&lt;/responsibilities&gt;

&lt;consent_and_notices&gt;
- Landlord's consent: Required from Master Landlord (Cousins - One Congress Plaza LLC)
- Notice requirements: Written notices to specified addresses for each party
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
- Furniture: Sublessee to purchase existing furniture and fixtures for $10
- Parking: Sublessee obligated to rent 68 unreserved and 2 reserved parking permits
- Subletting restrictions: Sublessee may not assign or sublet without prior written consent from Sublessor and Master Landlord
- Signage: Sublessee has right to install building standard suite identification signage, subject to approvals
- Insurance: Sublessee required to maintain commercial general liability insurance with $3,000,000 per occurrence limit
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease6.txt">
Source: https://www.sec.gov/Archives/edgar/data/1625641/000162564122000099/congresslease.htm

EX-10.1 2 congresslease.htm EX-10.1



Exhibit 10.1
SUBLEASE AGREEMENT

THIS SUBLEASE AGREEMENT (“Sublease”) is made and entered into on the 23 day of April, by and between Workrise Technologies Inc., a Delaware corporation (“Sublessor” or “Sublandlord”), and CS Disco, Inc. a Delaware corporation (“Sublessee” or “Subtenant”).

RECITALS

WHEREAS, Sublandlord and Cousins – One Congress Plaza LLC (“Landlord” or “Master Landlord”) entered in a lease (“Lease”) on August 20, 2018.

WHEREAS, The Lease has been amended by that certain First Amendment dated December 5, 2018 (the “First Amendment”), by that certain Second Amendment dated June 21, 2019 (the “Second Amendment”), and by that certain Third Amendment dated June 21, 2019 (the “Third Amendment”), hereinafter collectively referred to as the “Master Lease” or “Lease”, and as attached hereto as Exhibit “A”.

WHEREAS, Pursuant to the Lease, Landlord has leased to Tenant space currently containing approximately 23,108 square feet of Rentable Floor Area (the “6th Floor Space”) (being Suite Number 600) located on the entire 6th floor of the Building commonly known as One Eleven located at 111 Congress Avenue, Austin Texas 78701.

WHEREAS, Pursuant to the Lease, Landlord has leased to Tenant space currently containing approximately 23,142 square feet of Rentable Floor Area (the “9th Floor Space”) (being Suite Number 900) located on the entire 9th floor of the Building commonly known as One Eleven located at 111 Congress Avenue, Austin Texas 78701.

WHEREAS, Sublessee desires to sublet from Sublessor, and Sublessor has agreed to sublet to Sublessee, a portion of the Premises included in the Lease, specifically the 6th Floor Space and the 9th Floor Space (the “Subleased Premises”), upon the terms and conditions set forth in this Sublease.

NOW THEREFORE, for good and valuable consideration and on the terms and upon the conditions set forth herein, Sublessor and Sublessee hereby agree as follows:

1. Demise of Subleased Premises. Sublessor hereby subleases to Sublessee, and Sublessee hereby subleases from Sublessor the Subleased Premises consisting of a total of 46,250 rentable square feet (the “Subleased Premises”) on the 6th and 9th floors of the Building, as generally depicted on the floor plans attached hereto as Exhibit “B” and incorporated by this reference.

2. Master Lease.

2.1 Relationship of Sublease to Master Lease. Sublessee acknowledges that this Sublease is subject and subordinate to the Master Lease and to all the terms, covenants and conditions contained therein. To the extent that the Master Lease is also subject and




subordinate to such instruments, this Sublease is also subject and subordinate to all ground and underlying leases and all mortgages which might now or hereafter affect such leases, the leasehold estate or estates thereby created or real property of which the Subleased Premises form a part, and to any and all renewals, modifications, consolidations, replacements and extensions thereof. Sublessee covenants and agrees that: (a) Sublessee shall perform and observe all of the terms, covenants, conditions and agreements of the Master Lease on the part of Sublessor as Tenant to be performed with respect to the Subleased Premises during the term of this Sublease to the extent that the same are not modified or amended by this Sublease, and (b) with respect to the Subleased Premises, Sublessee shall not knowingly do or suffer or permit anything to be done which would constitute a default under the Master Lease. Sublessor shall fully perform all of its obligations under the Master Lease to the extent Sublessee has not expressly agreed to perform such obligations under this Sublease and shall not knowingly do or suffer or permit anything to be done which would constitute a default under the Master Lease. Notwithstanding anything herein to the contrary, Sublessor shall not terminate or take any actions giving rise to a termination right under the Master Lease, amend or waive any provisions under the Master Lease or make any elections, exercise any right or remedy or give any consent or approval under the Master Lease, directly related to the Sublessee continued use of the Sublease, without, in each instance, Sublessee’s prior written consent.

2.2 Utilization of Master Lease Provisions as Part of Sublease. Except as the terms and conditions set forth in this Sublease modify or contradict the terms and conditions of the Master Lease or any exhibits or attachments thereto, all of the terms and conditions contained in the Master Lease are hereby made a part of this Sublease and are deemed to constitute a portion of the agreement between Sublessor and Sublessee concerning the leasing of the Subleased Premises; provided, however, that to the extent any of the terms and provisions of the Master Lease are inappropriate or inapplicable to this Sublease, such terms and provisions shall not be made a part hereof. Where reference is made in the Master Lease to the “Leased Premises” or the “Premises”, the same shall be deemed to refer to the Subleased Premises. It is further understood that (i) where reference is made in the Master Lease to the “Commencement Date” the same shall be deemed to refer to the Commencement Date hereunder, (ii) where reference is made to the “Landlord” the same shall be deemed to refer to Sublessor hereunder and (iii) where references are made in the Master Lease to “this Lease” the same shall be deemed to refer to this Sublease. It is understood by Sublessee that the services, repairs and alterations referred to herein to be furnished in accordance with the provisions of the Master Lease herein by reference incorporated will in fact be furnished by Master Landlord and not by Sublessor. Sublessor shall in no event be liable to Sublessee nor shall Sublessee’s obligations hereunder be impaired or the performance thereof excused because of any failure or delay on the Master Landlord’s part in furnishing any such service or in making any of such repairs or alterations; provided that promptly upon notice thereof from Sublessee, Sublessor shall use commercially reasonable efforts to enforce the Master Lease and cause Master Landlord to furnish such service, make such repair or alteration and otherwise comply with the obligations of Master Landlord under the Master Lease and Sublessee shall be entitled to participate with Sublessor in the enforcement of Sublessor’s rights against Master Landlord.

2.3 Master Lease in Full Force and Effect. Sublessor represents, covenants and agrees that the (a) Master Lease is in full force and effect, and there exists under the Master Lease no default by Sublessor or, to Sublessor’s knowledge, Master Landlord, nor has
2



there occurred any event which, with the giving of notice or passage of time or both, could constitute such a default by Sublessor or, to Sublessor’s knowledge, Master Landlord and (b) the copy of the Master Lease attached hereto as Exhibit A is a true, correct and complete copy of the Master Lease.

3. Effectiveness of Sublease. This Sublease shall not be in full effect unless and until Master Landlord shall have executed and delivered a Consent to Sublease (the “Master Landlord Consent”). The date of Sublessee’s receipt of the Master Landlord Consent, executed by Master Landlord, shall be the “Effective Date” of this Sublease.

4. Term; Possession and Condition of Subleased Premises.

4.1 Term. The Term (as defined herein) will commence on the later of the Effective Date and the date by which the Subleased Premises are delivered by Sublessor to Sublessee in the condition required herein (such date herein the “Commencement Date”), and shall continue on through the Master Lease expiration of July 31, 2028 (the “Expiration Date”) unless sooner terminated pursuant to the terms of this Sublease. Notwithstanding anything herein to the contrary, Sublessor shall deliver possession of the Subleased Premises to Sublessee in good, vacant, broom clean condition with any broken items such as doors or door systems fixed, all appliances therein in a clean condition, all personal belongings (including, without limitation, files and papers) removed therefrom and all Sublessor-branded signs removed therefrom. With regard to the known broken door system shown in Exhibit “E”, Sublessor agrees to the following: Sublessor shall provide Sublessee a contractor’s pricing bid to perform the work shown in Exhibit “E”. Within two (2) business days of receiving said bid, Sublessee shall provide notice to Sublessor that (i) they elect to have Sublessor perform the work, or (ii) they elect to receive an allowance equal to the amount of the bid, in which case Sublessor shall no longer be responsible for said work. If Sublessee elects option (i), Sublessor shall perform the work shown on Exhibit “E”. If Sublessee elects option (ii), then Sublessor shall pay the allowance to Sublessee within ten (10) days after Sublessee delivers either (at Sublessee’s option) (x) an invoice from a contractor or (y) certificate of substantial completion from an architect. Sublessor shall also deliver to Sublessee all keys and/or access codes needed for access to the Subleased Premises and/or the Building on the Commencement Date other than those to be provided by the Master Landlord, which Sublessor shall assist Sublessee in obtaining.

4.2 Possession. Full possession of the Subleased Premises shall be delivered to Sublessee two (2) weeks following Sublessor’s receipt of the Master Landlord Consent. If Sublessor is delayed in delivering possession of the Subleased Premises to Sublessee in the condition required herein beyond July 1, 2022, Sublessee shall be entitled to a resulting 1.0 day abatement of Basic Rental and Additional Rental due and payable with respect to the Subleased Premises for each day occurring between July 1, 2022 and the date that the Subleased Premises are delivered to Sublessee in the condition required herein.

4.3 Sublessee’s Access. Notwithstanding anything to the contrary in Section 4.2 of this Sublease, Sublessee shall be permitted access to the Subleased Premises beginning on the Commencement Date. Sublessee’s access shall be subject to all the terms and conditions of this Sublease, inclusive of Sublessee’s obligation to pay Other Charges (defined below) to the extent incurred following the Commencement Date with respect to Sublessee’s use
3



and occupancy of the Subleased Premises. Prior to Sublessee’s access, Sublessee shall procure and deliver to Sublessor and Master Landlord duly executed originals of evidence of the insurance coverage required by the Master Lease as to the Subleased Premises. Such evidence of insurance coverage, as the case may be (i) shall name Sublessor, Master Landlord and any other party required by Master Landlord, as additional insureds thereunder, and (ii) shall be delivered to Sublessor at the address set forth in Section 12 below and to Master Landlord.

4.4 Condition of Subleased Premises. Sublessee acknowledges and agrees that (i) it accepts the Subleased Premises in “AS-IS WHERE IS” condition, and (ii) Sublessor shall have no obligation with respect to alteration to, or refurbishment of, the Subleased Premises, except as otherwise provided herein. Sublessee shall return the Subleased Premises to Sublessee at the expiration of the Sublease in the same condition found on the Commencement Date, normal wear and tear, repairs not Sublessee’s responsibility under this Sublease and alterations (provided Master Landlord does not require their removal), excepted. If required by Master Landlord under the Lease), Sublessor shall be responsible for removal of the current cabling, furniture and FFE (defined below) upon the end of this Sublease. To the extent that the Subleased Premises were not in compliance with the requirements of the Master Lease as of the Effective Date, Sublessor shall cause the Subleased Premises to comply with such requirements within a reasonable period after receipt of notice thereof from Master Landlord; provided, however, that the foregoing shall not apply to any failure of the Subleased Premises to be in compliance with the Master Lease as a result of Sublessee’s modifications to the Subleased Premises or Sublessee’s use of and/or business conducted in the Subleased Premises.

5. Rent. The term “Rent” shall mean individually or collectively the Basic Rental, Forecast Additional Rental, Additional Rental, or Other Charges or Late Charges described below.

5.1 Basic Rental. Sublessee shall pay to Sublessor basic rental (“Basic Rental”) for each portion of the Subleased Premises per table below, payable in monthly installments on the first day of each month in advance during the Term per table below:

Term		Size (per rsf)		Basic Rental Rate
Per Year		Monthly Basic Rent
Commencement - 10/31/23*		46,250		$43.50		$167,657.67
11/01/23 - 10/31/24		46,250		$44.81		$172,687.40
11/01/24 - 10/31/25		46,250		$46.15		$177,868.02
11/01/25 - 10/31/26		46,250		$47.53		$183,204.06
11/01/26 - 10/31/27		46,250		$48.96		$188,700.18
11/01/27 - 07/31/28		46,250		$50.43		$194,361.18
 

*Provided no event of default occurs during the term of the Sublease (subject to Sublessee’s ability to cure said default per terms of the Sublease and Master Lease), Sublessee’s obligation to pay Basic Rental with respect to the entire Subleased Premises shall be abated from the Commencement Date through 10/31/2022 (hereafter “Abatement Term”), following the expiration of which, Sublessee’s obligation to pay Rent shall commence.

4



Such abatement shall in no event limit Sublessor’s rights and remedies herein and as incorporated by the Lease. Basic Rental for any portion of a month which is included within the term of this Sublease shall be prorated at the rate of 1/30th of the applicable monthly rent per day. Rent shall be payable to Sublessor without notice, demand, deduction, offset or abatement (except as may expressly be provided for herein) in lawful money of the United States of America at the address set forth in Section 12 below or to such other person or at such other address as Sublessor may designate in writing, or electronically if requested by Sublessor. The parties acknowledge and agree that the foregoing Abatement Term has been granted to Sublessee as additional consideration for entering into this Sublease.

5.2 Forecast Additional Rental or Additional Rental or Operating Expenses. In addition to monthly installments of Basic Rental, Sublessee shall pay to Sublessor monthly payments (based on the sizes in the rental chart above) equal to its prorata share of the monthly estimated Forecast Additional Rental or Additional Rental or Operating Expenses charged by Master Landlord pursuant to the Master Lease (the “Estimated Additional Rent”). Sublessee’s share of the monthly Estimated Additional Rent for the calendar year 2022 is $29.15 per RSF or $112,348.95 per month. The parties both acknowledge and agree that this is the most up to date and accurate estimate provided by Landlord, provided that such Estimated Additional Rent is subject to change. Sublessee shall pre-pay the first month of Rent (Basic Rental and Estimated Additional Rent) at Sublease execution as prepaid rent for the first full month of rent due under the Sublease. Provided no event of default occurs during the term of the Sublease (subject to Sublessee’s ability to cure said default per terms of the Sublease and Master Lease), Sublessee’s obligation to pay the aforementioned Estimated Additional Rent shall be abated for the duration of the Abatement Term, as defined herein.

5.3 Other Charges and Late Charges. If, under the provisions of the Master Lease, any additional payments for services or other charges (e.g., late charges, additional cleaning, separately metered server room, after hours air conditioning charged at Landlord’s then quoted rate, etc) allocable in whole or in part to the Subleased Premises (such additional payments for services and other charges being hereafter collectively referred to as “Other Charges”) shall be payable by Sublessor because of Sublessee’s default hereunder or use of the Subleased Premises, Sublessee shall pay to Sublessor an amount equal to such portion of the Other Charges as may be properly attributable or allocable to Sublessee’s use and occupancy of the Subleased Premises. In addition, any payment of Basic Rent or other amount from Sublessee to Sublessor or Master Landlord under this Sublease which is not paid on the date due shall accrue interest from the date due until the date paid at the amounts prescribed in the Master Lease.

5.4 Abatement. Notwithstanding anything to the contrary set forth in this Sublease, if, as a result of casualty, condemnation or Master Lessor’s failure to provide services or perform any other obligation as required under the Master Lease to the Subleased Premises, Sublessor receives an abatement of rent for the Subleased Premises under the Master Lease or governing law, then Sublessee shall receive a corresponding abatement of the Basic Rent and Additional Rent due under this Sublease.

6. Security Deposit. Concurrently with the execution of this Sublease, Sublessee shall pay to Sublessor a security deposit in the amount of $306,714.58, in the form of cash (the “Security Deposit”) for Sublessee’s faithful performance of Sublessee’s obligations
5



hereunder. If Sublessee fails to pay any amount due to be paid by Sublessee under this Sublease, Sublessor may use, apply or retain all or any portion of the Security Deposit for the payment of any Rent or other amount due and payable from Sublessee to Sublessor pursuant to the terms and conditions set forth in this Sublease. If Sublessor uses or applies all or any portion of the Security Deposit in accordance with the preceding sentence, Sublessee shall deposit cash in an amount sufficient to restore the Security Deposit to the full amount first set forth above within thirty (30) days after Sublessee’s receipt of written demand from Sublessor. Sublessee’s failure to do so shall constitute a material breach of this Sublease. Sublessor shall not be required to keep the Security Deposit separate from its general funds. Provided Sublessee is not in Default and following application of the Security Deposit against any amounts due and payable from Sublessee to Sublessor in accordance with this Sublease, the Security Deposit or any remaining portion thereof shall be returned to Sublessee within thirty (30) days after the expiration of the term of this Sublease or any extensions thereof.

7. Use. The Subleased Premises may be used and occupied during the term of this Sublease only for general office purposes. Sublessee shall, to the extent required under the Master Lease, at Sublessee’s expense, comply promptly in all material respects with all applicable statutes, ordinances, rules, regulations, orders, restrictions of record and requirements in effect during the Term or any part of the Term hereof regulating the use by Sublessee of the Subleased Premises.

8. Sublessee’s Indemnification. Sublessee shall hold Sublessor free and harmless from any and all, actual and anticipated, claims, liabilities, losses, suit, penalty, demand, and damages (including without limitation, reasonable attorneys’ fees) (collectively, “Claims and Losses”) to the extent arising out of, by reason of, or resulting from (a) Sublessee’s failure to comply with any terms or perform any of the obligations contained in this Sublease; (b) Sublessee’s use of the Subleased Premises; and/or (c) any other act or omission of Sublessee, it’s successors and assigns, it’s employees, agents, contractors, visitors, or licensees, in or about the Subleased Premises; Provided that such indemnification obligations shall exclude any Claims and Losses arising solely from Sublessor’s negligence, or willful acts or omissions.

9. Default. If one or more of the following events (“Event of Default”) occurs, such occurrence constitutes a breach of this Sublease by Sublessee:

9.1 Sublessee fails to pay when due any Rent due hereunder and such failure shall continue for five (5) days after Sublessee’s receipt of written notice thereof from Sublessor, except that Sublessor or Landlord shall not be required to give such notice more than once in any twelve (12) month period;

9.2 Sublessee fails to comply with any other provision of this Sublease in the manner and within the time required, and such failure continues for twenty-seven (27) days after Sublessee’s receipt of written notice thereof from Sublessor, provided that if such failure cannot be cured within such twenty-seven (27) day period, an Event of Default shall not be deemed to have occurred so long as Sublessee commences such cure within such twenty-seven (27) day period and diligently pursues such cure to completion within fifty-seven (57) days after such notice;

6



9.3 the occurrence of default by Sublessor under the Master Lease which is the result of Sublessee’s default under this Sublease;

9.4 any purported or attempted Transfer of this Sublease or the Subleased Premises in contravention of this Sublease or the Master Lease; or

9.5 Sublessee (i) files or consents by answer or otherwise to the filing against it of a petition for relief or reorganization or arrangement or any other petition in bankruptcy or liquidation or to take advantage of any bankruptcy or insolvency law of any jurisdiction; (ii) makes an assignment for the benefit of its creditors; (iii) consents to the appointment of a custodian, receiver, trustee or other officer with similar powers of itself or of any substantial part of its property; or (iv) takes action for the purpose of any of the foregoing;

9.6 A court or governmental authority of competent jurisdiction, without consent by Sublessee, enters an order appointing a custodian, receiver, trustee or other officer with similar powers with respect to it or with respect to any substantial portion of its property, or constituting an order for relief or approving a petition for relief or reorganization or any other petition in bankruptcy or insolvency law of any jurisdiction, or ordering the dissolution, winding up or liquidation of Sublessee, or if any such petition is filed against Sublessee and such petition is not dismissed within sixty (60) days; or

9.7 Sublessee creates or permits anything to be done that creates a lien upon the Subleased Premises and such lien is not removed within twenty (20) days after the filing thereof.

Upon the occurrence of an Event of Default, Sublessor shall have, in addition to any other rights and remedies available to it under this Sublease and/or at law and/or in equity, any and all rights and remedies of Master Landlord set forth in the Master Lease as incorporated herein. All rights and remedies of Sublessor herein shall be cumulative and none shall exclude any other right allowed by law or in equity and said rights and remedies may be exercised and enforced concurrently and whenever and as often as occasion therefor arises. If Sublessee shall have committed an Event of Default, then Sublessor shall have the right, but not the obligation, without waiving or releasing Sublessee from any obligations hereunder, to cure such Event of Default in such manner and to such extent as Sublessor shall deem necessary, and in exercising any such right, to pay or incur any reasonable costs and expenses (including, without limitation, attorneys’ fees and costs) required in connection therewith which Sublessee shall promptly pay to Sublessor upon receipt of a request therefor.

10. Transfer of Subleased Premises.

10.1 Consent Required. Neither this Sublease nor the term and estate hereby granted, or any part hereof or thereof, shall be assigned, mortgaged, pledged, encumbered or sublet (each, a “Transfer), without obtaining the express written consent of Sublessor and Master Landlord to any such assignment or subletting (which consent Sublessor will not unreasonably withhold or delay, and Master Landlord’s obligations shall be per the Master Lease), mortgage, pledge, or encumbrance. For purposes of the foregoing, it is agreed that any transaction pursuant to which a controlling interest in Sublessee shall be transferred, directly or
7



indirectly, by operation of law or otherwise, shall be deemed an assignment; provided, however, that the foregoing shall not apply as long as Sublessee is a publicly-traded company.

10.2 Sublessee’s Notice. Any request for Sublessor’s or Master Landlord’s consent to a proposed Transfer of the Subleased Premises or any portion thereof shall be in writing (hereinafter referred to as “Sublessee’s Notice”) and shall set forth the proposed sub-sublessee’s or assignee’s name, address, nature or character of business, a then-current financial statement or other satisfactory evidence of financial responsibility commensurate with the responsibilities to be undertaken by such proposed Sublessee or assignee, the terms and conditions of the proposed subletting and any other additional information in which the Landlord has the right to request per the Master Lease. Any consent to subletting which may be given by Sublessor shall not constitute a waiver by Sublessor of the provisions of this Section 10, or a release of Sublessee from the full performance by it of the covenants on the part of Sublessee herein contained. Any violation of any provision of this Sublease by any Sublessee shall be deemed a violation of such provision by Sublessee.

10.3 Profits. If, for any proposed Transfer, Sublessee receives rent or other consideration, either initially or over the term of the assignment or sublease, in excess of the Rent called for hereunder or, in case of the sub-sublease of a portion of the Subleased Premises, in excess of such Rent fairly attributable to such portion, Sublessee shall pay to Sublessor, as additional rent hereunder, a portion of said net profit realized by Sublessee promptly after its receipt thereof, all in accordance with the terms and conditions of Section 10 of the Lease, as if Sublessor was the Master Landlord and Sublessee was the Tenant thereunder.

11. Parking. Sublessee shall be obligated to rent 68 of Sublessor’s unreserved parking permit and 2 of Sublessor’s reserved parking permit, subject to the terms and conditions of the Master Lease regarding parking, at the rate charged by Master Landlord or Master Landlord’s parking operator. Sublessee’s obligation to rent such parking spaces shall begin at the earlier of the time requested by Sublessee, or the Commencement Date. Notwithstanding the foregoing, Sublessee may at any time on thirty (30) days prior written notice to Sublessor relinquish its rights to, collectively with any previous relinquishment, up to half of the foregoing parking permits back to Sublessor.

12. Notices. Any notice required or permitted to be given hereunder shall be in writing and shall be effective only when (a) delivered in person to the recipient at the address set forth below or (b) three (3) days after deposit in a sealed envelope in the United States mail, postage pre- paid, by registered or certified mail, return receipt requested, addressed to the recipient at the address set forth below, whichever is earlier. Notices to Sublessee prior to the Commencement Date shall be addressed to: 3700 North Capital of Texas Highway, Suite 150, Austin, Texas 78746, Attention: General Counsel, and notices to Sublessee after the Commencement Date shall be addressed to CS Disco, Inc., Attention: General Counsel Notices to Sublessor shall be addressed to: Workrise Technologies Inc., 111 Congress Ave. Suite 1200, Austin, Texas 78701, Attention: Legal Dept.

13. Intentionally deleted.


8



14. Signage. Subject to compliance with the terms of this Sublease and the Master Lease, Sublessee shall have the right, at its sole cost and expense, to install building standard suite identification signage at each entry to the Premises, subject to Master Landlord’s sign criteria and Master Landlord’s prior written approval. Sublessee shall have the right to place Sublessee building standard signage on the standard lobby directory at its sole cost and expense, subject to Master Landlord’s sign criteria and Master Landlord’s prior written approval.

15. Intentionally Deleted.

16. Alterations. During the Term, Sublessee shall not make or suffer to be made any alterations, additions, or improvements to the Subleased Premises or any part thereof without complying with the provisions of the Master Lease and without obtaining the prior written consent of Sublessor and Landlord, which consent shall not be unreasonably withheld by Sublessor; provided, in the event that Landlord does not give its consent to such a request, Sublessee acknowledges and agrees that it shall be reasonable for Sublessor to withhold its consent to such a request. In the event that Landlord provides its consent to such alterations, additions, or improvements to the Subleased Premises, Sublessor acknowledges and agrees that it shall be reasonable for Sublessor to provide its consent to such alterations, additions, or improvements provided that if such alterations, additions, or improvements increase Sublessor’s financial obligations under the Master Lease, Sublessee shall be responsible for any additional costs associated with such. Sublessee acknowledges and agrees that in the event it does make any improvement(s) to the Subleased Premises which are not approved in writing by Sublessor and Landlord prior to the installation or construction of such improvement(s), or in which at the time of said improvement(s) Sublessor or Master Landlord provides notice that such improvement(s) shall need to be removed/restored, Sublessee shall be required to remove such improvement(s) at Sublessee’s sole cost and expense and repair all damage caused by the installation or removal of such improvements prior to the expiration of the Term of this Sublease unless Landlord expressly waives in writing this requirement. All improvements or alterations must be performed in conformance with the Lease. In addition, Sublessee shall be responsible for any separately metered electric service or maintenance fees charged by Landlord to Sublessor as a result of such alterations and shall be responsible for any Alterations or Construction Management fee charged by Landlord under the Master Lease.

17. Attorney Fees. If Sublessor or Sublessee shall commence an action against the other arising out of or in connection with this Sublease, the prevailing party shall be entitled to recover its costs of suit and reasonable attorneys’ fees and expenses from the non-prevailing party. Prevailing Party shall be defined as the party which obtains the closest award to the principal relief sought, whether achieved by settlement, dismissal, or judgment.

18. Holding Over. If Sublessee holds over after the expiration of the Term or earlier termination of this Sublease, with or without the express or implied consent of Sublessor, then Sublessee will become and be only a tenant at sufferance and shall be responsible for payment
9



of all holdover Rent (including any consequential damages) assessed to Sublessor pursuant to the Master Lease. Notwithstanding any provision to the contrary contained herein, (i) Sublessor expressly reserves the right to require Sublessee to surrender possession of the Subleased Premises upon the expiration of Term or upon the earlier termination of this Sublease and the right to assert any remedy at law or in equity to evict Sublessee and/or collect damages in connection with any holding over, and (ii) Sublessee will indemnify, defend and hold Sublessor harmless from and against any and all liabilities, claims, demands, actions, losses, damages, obligations, costs and expenses, including, without limitation, attorneys’ fees incurred or suffered by Sublessor by reason of Sublessee’s failure to surrender the Subleased Premises on the expiration of the Term or earlier termination of this Sublease.

19. Early Termination of Master Lease. To the extent that the Master Lease grants Sublessor any discretionary right to terminate the Master Lease, due to casualty or condemnation, Sublessor will be entitled to exercise or refrain from exercising such right in its complete and absolute discretion following advance notice thereof to Sublessee, but will not have any liability to Sublessee as a result of such exercise.

20. Broker’s Commissions. Sublessee hereby represents and warrants that it has not entered into any agreement with any broker, agent, finder or other party for the payment of a broker’s or agent’s commission, finder’s fee or like compensation payable in connection with Sublessee entering into this Sublease, other than HPI, whom shall be compensated by Sublessor per a separate written agreement. Sublessor hereby represents and warrants that it has not entered into any agreement with any broker, agent, finder or other party for the payment of a broker’s or agent’s commission, finder’s fee or like compensation payable in connection with this Sublease, other than Colliers International, whom shall be compensated by Sublessor per a separate written agreement.

21. Entire Agreement. This Sublease, including the terms of the Master Lease which are incorporated herein by reference, contains the entire agreement between the parties concerning the subject matter hereof and supersedes all prior and contemporaneous agreements, understandings, terms, warranties and representations, whether oral or written, made by the parties concerning the matters covered by this Sublease.

22. Severability. The illegality, invalidity or unenforceability of any term, condition or provision of this Sublease shall in no way impair or invalidate any other term, condition or provision of this Sublease, and all such other terms, conditions and provisions shall remain in full force and effect.

23. Intentionally Deleted.

24. Successors and Assigns. This Sublease shall be binding upon the parties hereto and upon their respective successors and assigns.

25. Counterparts. This Sublease may be executed in counterparts, each of which shall be deemed an original, but all of which together shall constitute one and the same instrument.

10



26. Density. Sublessee shall be responsible to abide by all terms of the Master Lease with respect to density restrictions, and shall reimburse Sublessor for any additional expenses caused by Sublessee’s violation of such density requirements in the Subleased Premises, including those instances where excess power consumption or density triggers Landlord’s ability to: 1) Sub-meter the Premises, 2) Cause Tenant to pay a greater share of operating expenses, or (3) Charge for additional janitorial services.

27. Computer Cabling. Sublessee shall have the right to use all existing cabling and to add additional cabling to the Subleased Premises if necessary.

28. Right of First Refusal. Should Sublessor elect to offer for sublease any additional portion of the Master Premises (the “ROFR Space”) during the Term, Sublessee shall have a first right of refusal to sublease such ROFR Space. In the event Sublessor receives or extends a bonafide offer or term sheet from another party with respect to the ROFR Space, Sublessor shall present such offer or term sheet to Sublessee. Sublessee shall have five (5) business days to provide notice to Sublessor of its election to lease such ROFR Space. The terms of the Sublessee’s sublease of the ROFR Space shall match the offer or term sheet as it relates to commencement dates, rental rate, any improvement allowance, and parking rights, however that the length of the ROFR Space term shall be coterminous with the existing Sublease through the end of the Term. Both parties agreed that Sublessee’s right to sublease the additional space shall be subject to Master Landlord approval.

29. Renewal. Sublessee shall have no right to renew the Term.

30. Telecom. Sublessee shall be responsible to determine availability of any internet or phone service providers, and shall responsible for the installation and payment of said services in the Subleased Premises.

31. Landlord Consent. Sublessor shall be responsible for all fees payable to Landlord in conjunction with the Master Landlord Consent. Both parties agree that full execution of this Sublease is binding on both Sublessor and Sublessee, however shall not be in full effect until such time as Master Landlord provides Master Landlord Consent to said Sublease. Both parties agree to use commercially reasonable efforts to supply reasonably requested information to Master Landlord in a commercial timely manner.

32. Furniture, FFE. Both parties acknowledge that the furniture, fixtures and equipment set forth in Exhibit “C” attached (the “FFE”) in the Subleased Premises shall remain in the Subleased Premises and is being sold to Sublessee. On or within ten (10) days of the Effective Date, Sublessee shall purchase the FFE from Sublessor by making payment to Sublessor in an amount equal to $10.00. Upon receipt of such payment, Sublessor shall deliver to Sublessee a Bill of Sale (in the form attached hereto as Exhibit “D”) conveying title of such FFE to Sublessee. Upon transfer of ownership, Sublessor shall have a first lien on all furniture in the Subleased Premises during the Term. No furniture shown on the 9th floor inventory shall be removed from the Premises without Sublessor consent. Sublessor shall not unreasonably withhold such consent so long as (i) Such removed furniture is replaced with equal quality furniture, and (ii) Sublessor is provided a first lien on such replacement furniture.

11



33. Negotiation By Counsel. The parties acknowledge that each party has had the opportunity to be represented by legal counsel of its independent choosing and to have such legal counsel write or review this Sublease.

34.     Counterparts, Electronic Signatures. Both parties agree that the submission of this Sublease in multiple counterparts shall be binding, and if (either separately or together) this Sublease is signed electronically via DocuSign it shall also be binding.

35. Intentionally Deleted

IN WITNESS WHEREOF, the parties have executed this Sublease as of the day and year first above written.

SUBLESSOR

Workrise Technologies Inc., a Delaware corporation

By: /s/ Mike Witte
Name: Mike Witte
Title: CEO
Date: April 23, 2022
 


SUBLESSEE

CS Disco, Inc. a Delaware corporation

By: /s/ Michael Lafair
Name: Michael Lafair
Title: CFO
Date: April 23, 2022
 
12



Exhibit “A”

COPY OF MASTER LEASE










LEASE AGREEMENT


by and between


Cousins - Once Congress Plaza LLC (“Landlord”)


and


RigUp, Inc.
(“Tenant”)


dated
August 20, 2018


for


Suite Number 900

containing approximately

23,142 square feet of Rentable Floor Area


One Eleven
111 Congress Avenue, August, Texas 78701


Term: 96 months






TABLE OF CONTENTS

PAGE
1. Basic Lease Information
1
2. Lease Grant	3
3. Lease Term; Acceptance of Demised Premises	3
4. Rent Payments; Tenant Taxes	4
5. Tenant’s Us of Demised Premises	5
6. Security Deposit	6
7. Services by Landlord	6
8. Repairs and Alterations	7
9. Entry by Landlord	8
10. Assignment and Subletting	8
11. Tenant’s Insurance	10
12. Landlord’s Insurance	11
13. Mutual Waiver of Subrogation	11
14. Liability of Tenant	12
15. Casualty	12
16. Eminent Domain	14
17. Default	15
18. Landlord’s Lien	18
19. Landlord’s Liability	18
20. Waiver of Breach	18
21. Landlord’s Covenant of Quiet Enjoyment	18
22. Intentionally deleted	18
23. Holding Over	18
24. Subordination, Non-Disturbance and Attornment; Estoppel Certificate	18
25. Attorney’s Fees	19
26. Notices	19
27. Surrender of Demised Premises	20
28. Hazardous Substances	20
29. Miscellaneous	21
 
2



Exhibit “A”	Legal Description of the Project
Exhibit “B”	Floor Plan
Exhibit “C”	Supplemental Notice
Exhibit “D”	Operating Expenses
Exhibit “E”	Tenant Work Letter
Exhibit “F”	Building Standard Services
Exhibit “G”	Rules and Regulations
Exhibit “H”	Intentionally Deleted
Exhibit “P”	Parking
Exhibit “J”	Special Stipulations
 



3



LEASE AGREEMENT


THIS LEASE AGREEMENT (the "Lease"), is made and entered into this 20th day of August, 2018 (the “Effective Date”), by and between Landlord and Tenant.

WITNESSETH:

1.Basic Lease Information. For purposes of this Lease, the following terms have the meanings hereinafter ascribed thereto:

(a)Landlord: Cousins - One Congress Plaza LLC, a Delaware limited liability company

(b)Tenant: RigUp, Inc., a Delaware corporation

(c)Building: Means the office building located at 111 Congress Avenue, Austin, Texas 78701, commonly known as One Eleven. The "Rentable Floor Area of the Building" shall mean 503,344 square feet.

(d)Demised Premises: Means the area shown on Exhibit "B" to this Lease. The Demised Premises are located on the 9th floor of the Building and known as Suite Number 900. The Rentable Floor Area of the Demised Premises is 23,142 square feet.

(e)Rental Commencement Date: The earlier of (x) February 1, 2019, or (y) the date upon which Tenant occupies the Demised Premises for the purpose of conducting business therein.

(f)Lease Term: Ninety six (96) full calendar months, commencing on the Rental Commencement Date and expiring on the ninety-sixth (96th) full calendar month after the Rental Commencement Date.

(g)Base Rental Rate:

Full Calendar Months of Lease Term (together with any partial calendar months at the beginning or end of the Lease Term, as indicate
Annual Base Rental Rat
Per Square Foot

Monthly Base Rental
(Rental Commencement Date) - (Last day of 12th full calendar month of Lease Term)*

$37.00

$71,354.50
13-24
$38.11	$73,495.14
25-36
$39.25	$75,693.63
37-48
$40.43	$77,969.26
49-60
$41.64	
$80,302.74
61-72
$42.89	$82,713.37
73-84
$44.18	
$85,201.13
85-96
$45.51	$87,766.04
 

* The first three (3) full calendar months after the Rental Commencement Date are subject to Article 4(d) below.





(h)Construction Allowance: $55.00 per square foot of Rentable Floor Area of Demised Premises (see Exhibit "E").

(i)Landlord's Work: Means the work, if any, that Landlord is obligated to perform in the Demised Premises pursuant to Exhibit "E" of this Lease.

(j)Prepaid Rent: $119,702.00 payable not later than January 1, 2019. (Article 4[a])

(k)Security Deposit; Letter of Credit: $500,000.00. (Article 6; Section 4 of Exhibit "J")

(l)Guarantor: NIA

(m)Brokers: Colliers International, representing Tenant, and Jones Lang LaSalle Brokerage, Inc., representing Landlord.

(n)Notice Addresses:

Tenant: On or after the Rental Commencement Date, notices shall be sent to Tenant at the Demised Premises. Prior to the Rental Commencement Date, notices shall be sent to Tenant at the following address:

RigUp, Inc.
98 San Jacinto Boulevard, Suite 550
Austin, Texas 78701

Landlord:		With a copy to:
Cousins - One Congress Plaza LLC		Cousins - One Congress Plaza LLC
c/o/ Cousins Properties		c/o/ Cousins Properties
3344 Peachtree Road, NE		111 Congress Plaza
Suite 1800		Suite 590
Atlanta, GA 30326		Austin, Texas 78701
Attn: Corporate Secretary		Attn: Senior Property Manager
Landlord’s Address for Rent:		
if by check, mail to:		
Cousins Properties LP		
c/o Cousins - San Jacinto Center LLC		
P.O. Box 207479		
Dallas, Texas 75320-7479		
if overnight delivery, send to:		
Lockbox Services - Cousins Properties LP		
c/o Cousins - San Jacinto Center LLC		
2975 Regent Blvd		
Lockbox #207479		
 
2




Irving, Texas 75063		
if by wire transfer or ACH:		
Account #4447759374		
ACH Routing Number: 121 000 248		
Wire Routing Number: 221 000 248		
Swift Code (International Wires): WFBIUS6S		
Wire Bank Address: San Francisco, CA		
Wire Bank Name: Wells Fargo		
 

(o)Affiliate: Any Person which directly or indirectly controls a party hereto or which is directly or indirectly controlled by or under common control with a party hereto, including any parent or subsidiary of a party hereto (the term "control" for these purposes means the ability through agreement of the parties in interest of the ownership of shares, membership interests or partnership interests, as the case may be, to elect a majority of the directors of a corporation or to make management decisions on behalf of, or to independently select the managing partner or member of, a partnership or limited liability company).

(p)Business Day: Means each day from Monday through Friday, exclusive of Holidays (as that term is defined in Exhibit "F"). Wherever the term "day" or “days” is used herein (as distinguished from "Business Day" or "Business Days"), such term will mean and refer to calendar days,

(q)Person: Any individual, or a corporation, limited liability company, partnership (whether general or limited), joint venture, trust (including a business trust or real estate investment trust), unincorporated organization, joint stock company, association or other entity, or any government, or any agency or subdivision thereof.

(r)BOMA Standard: Means the American National Standard Method for Measuring Floor Area in Office Buildings, ANSI/BOMA 265.1-1996 published by the Building Owners and Managers Association International. As a point of clarification, the floor area within the elevator lobby on any floor of the Building fully leased by Tenant will be included in the calculation of Usable Area on such floor, and the BOMA Standard will be so construed.

2.Lease Grant. Landlord leases the Demised Premises to Tenant, and Tenant leases the Demised Premises from Landlord, together with the right to use any portions of the Project that are designated by Landlord for the common use of tenants and others (the "Common Areas"). No easement for light, view or air is included in the Demised Premises or is being granted hereunder. The "Project" is comprised of that certain tract of land (the "Land") described on Exhibit "A", the office buildings, including the Building, and the appurtenant parking garage(s) (the "Parking Facility"), landscaping. fixtures, Common Areas, service buildings and related improvements now or hereafter constructed thereon or on the Land and added to the Project from time to time.

3.Lease Term; Acceptance of Demised Premises.

(a)This Lease is effective as of the Effective Date through the last day of the Lease Term specified in Article l(f) above. and, unless extended or sooner terminated as provided in this Lease. Promptly after the Rental Commencement Date Landlord shall send to Tenant a Supplemental Notice in the form of Exhibit "C" attached hereto and by this reference made a part hereof, specifying the Rental
3



Commencement Date, the date of expiration of the Lease Term in accordance with Article l(f) above and certain other matters as therein set forth. The Commencement Date shall be extended one day for each day that completion of construction of Tenant's Work is delayed directly due to Landlord Delay (defined below).

"Landlord Delay" means any negligent act or omission of Landlord or its agents, employees or contractors that actually delays the substantial completion of the Tenant's Work, including Landlord's failure to furnish information or approvals with respect to Tenant's Work within any time period specified in this Lease, including the failure to approve or object to preliminary or final Plans by any applicable due date pursuant to Exhibit "E" attached hereto. A Landlord Delay shall not exist unless Tenant delivers written notice thereof to Landlord within three (3) Business Days after Tenant becomes aware of the negligent act or omission creating such delay and identifying the nature of such delay.

(b)The Demised Premises are accepted by Tenant in "as is" condition and configuration, and there are no representations or warranties of any kind, express or implied, by Landlord regarding the Demised Premises, the Building or the Project. Tenant hereby agrees that the Demised Premises are in good order and satisfactory condition. By taking possession of the Demised Premises, Tenant waives (i) all claims due to defects in the Demised Premises, the Building and/or the Project except (x) minor finish adjustments in the Landlord's Work, if any, specified in reasonable detail in writing by Tenant contemporaneously with talking possession, and (y) latent defects in Landlord's Work (other than work performed by Tenant's Agents) of which Tenant notifies Landlord in writing within 180 days after taking possession; and (ii) all warranties of any kind, express or implied, including, without limitation, those of suitability, habitability and fitness for any particular purpose.

(c)Access to the Demised Premises prior to the Rental Commencement Date shall be subject to the terms and conditions of this Lease and Tenant shall pay Rent to Landlord for each day of such early access. However, if such early access to the Demised Premises is for the sole purpose of performing improvements or installing furniture, equipment or other personal property, Tenant shall not be required to pay Base Rental and Tenant's Additional Rental for any days of such access; provided however, Tenant shall pay for the cost of any other Building services requested by Tenant.

4.Rent Payments: Tenant Taxes.

(a)Tenant shall pay Landlord, without any setoff or deduction, unless expressly set forth in this Lease, all Base Rental, Tenant's Forecast Additional Rental, Tenant's Additional Rental, and any other amounts that Tenant assumes or agrees to pay under the provisions of this Lease that are owed to Landlord, including without limitation any and all other sums that may become due by reason of any default of Tenant or failure on Tenant's part to comply with the agreements, terms, covenants and conditions of this Lease to be performed by Tenant (collectively referred to as "Rent"). The monthly Base Rental and Tenant1s Forecast Additional Rental shall be due and payable in advance on the first day of each calendar month without notice or demand, provided that the installment of Base Rental and Tenant's Forecast Additional Rental for the first one (I) full calendar month(s) of the Lease Term shall be payable not later than January 1, 2019 and shall be applied to the first payment of Base Rental and Tenant's Forecast Additional Rental after the Rent Abatement Period (as defined below). All other items of Rent shall be due and payable by Tenant on or before thirty (30) days after billing by Landlord. Rent shall be made payable to the entity, and sent to the address, Landlord designates and shall be made by good and sufficient check or by other means acceptable to Landlord. Rent for any partial month during the Term shall be prorated. No endorsement or statement on a check or letter accompanying payment shall be considered an accord and satisfaction. Tenant's covenant to pay Rent is independent of every other covenant in this Lease.

(b)From and after the Rental Commencement Date, Tenant shall pay to Landlord Tenant's Forecast Additional Rental and Tenant's Additional Rental as set forth in Exhibit "D" to this Lease. Payment of Tenant's Forecast Additional Rental will be made as set forth in subparagraph (a) above.

4



(c)Tenant shall pay and be liable for Tenant's allocable portion of all rental, gross receipts, sales and use, or other taxes, if any, imposed upon or measured by rents, receipts or income attributable to ownership, use, occupancy, rental, leasing, operation or possession of the Project. Tenant also shall pay promptly when due all taxes directly or indirectly imposed or assessed upon Tenant's gross sales, business operations, machinery, equipment, trade fixtures and other personal property or assets, whether such taxes are assessed against Tenant, Landlord or the Building. In the event that such taxes are imposed or assessed against Landlord or the Building, Landlord shall furnish Tenant with all applicable tax bills, public charges and other assessments or impositions and Tenant shall forthwith pay the same either directly to the taxing authority or, at Landlord's option, to Landlord. Tenant shall additionally pay and be liable for Tenant's pro rata share of all taxes, assessments and governmental charges, including any interest and/or penalty thereon (collectively "Taxes") whether or not directly paid by Landlord, asserted due by federal, state, county, municipal or any other taxing districts or taxing authorities (collectively "Taxing Authorities") and irrespective of whether such Taxes are due to Taxing Authorities presently taxing the Project or by other Taxing Authorities subsequently created or otherwise obtaining authority to impose any other Taxes attributable to the Project or its operation (and the costs of contesting any of the same}, including (without limitation) community improvement district taxes and business license taxes and fees and any Taxes payable by Landlord pursuant to V.T.C.A., Texas Tax Code, Chapter 171, Section 171.001, et seq. (the "Texas Margin Tax"), as such statute may be amended or recodified from time to time (but only to the extent such amendment or recodification does not alter the fundamental premise of the Texas Margin Tax as a tax created and imposed in lieu of ad valorem taxes or is otherwise a non-substantive amendment or recodification) allocable to the Project, excluding, however, taxes and assessments imposed on the personal property of the tenants of the Project, federal and state taxes on income, death taxes, franchise taxes imposed or measured on or by the net income, and any taxes (other than business license taxes and fees and the Texas Margin Tax) imposed or measured on or by the net income of Landlord from the operation of the Project.

(d)Notwithstanding anything in this Lease to the contrary, for so long as no event of default has occurred, Tenant shall be entitled to an abatement of the Base Rental, Tenant's Forecast Additional Rental, and Tenant's Additional Rental for the first three (3) full calendar months of the Lease Term (said period is herein referred to as the "Rent Abatement Period"). All Base Rental, Tenant's Forecast Additional Rental, and Tenant's Additional Rental abated during the Rent Abatement Period in accordance with this Article 4(d) is herein collectively referred to as "Abated Rent."Tenant acknowledges that Tenant will be required to pay on the Rental Commencement Date any Rent due for the partial month during which the Rental Commencement Date occurs if the Rental Commencement Date is other than the first day of a full calendar month. Only Base Rental, Tenant's Forecast Additional Rental, and Tenant's Additional Rental shall be abated during the Rent Abatement Period; all other Rent, including, without limitation, overtime HVAC charges and parking charges, shall continue to be due and payable pursuant to the provisions of this Lease. Further, the right to receive an abatement of the Abated Rent pursuant to this Article 4(d) is personal to RigUp, Inc., and may not be assigned, transferred or conveyed to any individual, entity, successor or assign; upon any sublease, assignment or other transfer described in Article 10 below, the right of Tenant to receive an abatement of the Abated Rent shall automatically terminate and be of no further force or effect. Notwithstanding the foregoing to the contrary, if there occurs an event of default beyond applicable notice and cure periods at any time during the Term, all unamortized Abated Rent shall immediately become due and payable by Tenant, and there shall be no further abatement pursuant to this section after such event of default if the event of default occurs during the Rent Abatement Period. The unamortized amount of Abated Rent is calculated by amortizing the aggregate amount of the Abated Rent over the number of months of the Term during which Tenant is required to pay Base Rental at the Default Rate per annum on a monthly basis and multiplying the monthly amortized amount by the number of months remaining in the Term after the applicable event of default. The payment by Tenant of the Abated Rent pursuant to the foregoing after an event of default shall not limit or affect any of Landlord's other rights or remedies pursuant to this Lease, at law or in equity.

5.Tenant's Use of Demised Premises. The Demised Premises may be used for executive, general administrative and office space purposes and no other purposes and in accordance with all applicable laws, ordinances, rules and regulations of governmental authorities and the Rules and Regulations attached hereto as Exhibit "G” and made a part hereof. The occupancy rate of the Demised Premises
5



may not exceed one (1) person per 150 square feet of Rentable Floor Area within the Demised Premises. Notwithstanding anything contained in this Article 5 to the contrary, in no event shall the Demised Premises be used for (i) an employment agency, (ii) a dental, medical or chiropractic office, or medical marijuana dispensary or clinic, (iii) a governmental office, subdivision or agency, or (iv) any other purpose which would, in Landlord's reasonable opinion, impair the reputation or quality of the Building, overburden any of the Building systems, Common Areas or parking facilities (including any use which would create a population density in the Premises which is in excess of the density which is standard for the Building), impair Landlord's efforts to lease space or otherwise interfere with the operation of the Project. Tenant covenants and agrees to abide by the Rules and Regulations in all respects as now set forth and attached hereto or as hereafter promulgated by Landlord. Landlord may at all times during the Lease Term publish and promulgate and thereafter enforce such rules and regulations or changes in the existing Rules and Regulations as it may reasonably deem necessary in its sole discretion to protect the tenantability, safety, operation, and welfare of the Demised Premises and the Project.

6.Security Deposit. As security for the faithful performance by Tenant throughout the Lease Term, and any extensions or renewals thereof, of all the terms and conditions of this Lease on the part of Tenant to be performed, Tenant shall deposit with Landlord the sum set forth in Section 4 of Exhibit "J" above upon the execution of this Lease by Tenant. Such amount will be returned to Tenant, without interest, within thirty (30) days after the day set for the expiration of the Lease Term, or any extension or renewal thereof, provided Tenant has fully and faithfully observed and performed all of the terms, covenants, agreements, warranties and conditions hereof on its part to be observed and performed. Landlord will have the right, at any time, to apply all or any part of said deposit toward the cure of any default of Tenant, the repair of any damage to the Demised Premises or otherwise caused by Tenant, or the amount of any Rent owing under this Lease. No application of the security deposit should be construed to limit Landlord's right under applicable law to recover additional sums from Tenant for damages to the Demised Premises. If all or any part of said security deposit is so applied by Landlord, then Tenant shall immediately pay to Landlord an amount sufficient to return said security deposit to the balance on deposit with Landlord prior to said application. In no event will Tenant be entitled to apply the security deposit to any Rent due hereunder. In the event of an act of bankruptcy by or insolvency of Tenant, or the appointment of a receiver for Tenant or a general assignment for the benefit of Tenant's creditors, then the security deposit will be deemed immediately assigned to Landlord. The right to retain the security deposit will be in addition and not alternative to Landlord's other remedies under this Lease or as may be provided by law and will not be affected by summary proceedings or other proceedings to recover possession of the Demised Premises. In the event of a sale or transfer of Landlord's interest in the Demised Premises or the Building or a lease by Landlord of the Building, Landlord will have the right to transfer the within described security deposit to the purchaser or lessee, as the case may be, and Landlord will be relieved of all liability to Tenant for the return of such security deposit. Tenant shall look solely to the new owner or lessee for the return of said security deposit. The security deposit may not be mortgaged, assigned or encumbered by Tenant. Landlord is not required to keep the security deposit separate from its general accounts.

7.Services by Landlord. Landlord shall provide the Building Standard Services described on Exhibit “F" attached hereto and by reference made a part hereof. Services requested or required to be supplied to Tenant in excess of the Building Standard Services will be at Tenant's sole cost and expense and will be paid for by Tenant promptly upon invoice therefor, which invoice may include Landlord's administrative fee. Except as expressly provided elsewhere in this Lease, nothing in this Lease will be deemed to require Landlord to provide to Tenant services in excess of the Building Standard Services.
6




8.Repairs and Alterations.

(a)Landlord shall maintain in good order and repair, subject to normal wear and tear and subject to casualty and condemnation, (i) the structural elements of the Building; (ii) standard mechanical (including HVAC), electrical, plumbing and fire/life safety systems serving the Building in general; (iii) the Common Areas; (iv) the roof of the Building; (v) the exterior windows of the Building; and (vi) the elevators serving the Building. Notwithstanding the foregoing obligation, the cost of any repairs or maintenance to the foregoing necessitated by the intentional acts or negligence of Tenant or its directors, officers, partners, members, shareholders, representatives, agents, contractors, employees, servants, invitees, patrons, guests, visitors, licensees, subtenants, assignees, and any other party for whom Tenant is or may become liable or responsible (each and together herein referred to as "Tenant's Agents”), will be borne solely by Tenant and will be deemed Rent hereunder and must be reimbursed by Tenant to Landlord upon demand.

(b)Tenant covenants and agrees that it will take good care of the Demised Premises and all alterations, additions and improvements thereto and will keep and maintain the same in good condition and repair, except for normal wear and tear. Tenant shall periodically inspect the Demised Premises to identify any conditions that are dangerous or in need of maintenance or repair and shall promptly provide Landlord with notice of any such conditions. To the fullest extent permitted by law, Tenant hereby waives all rights to make repairs at the expense of Landlord or in lieu thereof to vacate the Demised Premises as may be provided by any law, statute or ordinance now or hereafter in effect. Landlord has no obligation and has made no promise to alter, remodel, improve, repair, decorate or paint the Demised Premises or any part thereof, except as specifically and expressly herein set forth.

(c)Tenant will be responsible for stopped up drains where such stoppage is caused by the introduction from within the Demised Premises of foreign objects not intended for disposal in such drains. If Landlord repairs such drains, Tenant shall reimburse Landlord, as additional Rent, for the costs of such repairs, together with the costs of any repairs or damage to the Demised Premises or the Building and to the property of other tenants or Landlord which results from such stoppage.

(d)After the initial improvements to the Demised Premises as provided in Exhibit "E" attached hereto, Tenant may not make, suffer or permit to be made any alterations, additions or improvements to or of the Demised Premises or any part thereof, or attach any fixtures or equipment thereto (collectively, "Alterations"), without first obtaining Landlord's written consent, which consent may not be unreasonably withheld or delayed. However, Landlord's consent shall not be required for any Alteration that satisfies all of the following criteria (a "Permitted Alterations"): (i) is of a cosmetic nature such as painting, wallpapering, hanging pictures and installing carpeting; (ii) is not visible from outside the Demised Premises or Building; (iii) will not affect the systems or structure of the Building; (d) does not require work to be performed inside the walls or above the ceiling of the Demised Premises; and (e) does not require securing a building permit from the local authority having jurisdiction over such alterations, additions or improvements. For all alterations, additions or improvements other than Permitted Alterations, complete architectural and engineering drawings must be submitted for Landlord's approval. Tenant shall reimburse Landlord within thirty (30) days after receipt of an invoice for reasonable out-of-pocket sums paid by Landlord for third party examination of Tenant's plans for Alterations. In addition, within thirty (30) days after receipt of an invoice from Landlord, Tenant shall pay to Landlord a fee equal to five percent (5%) of the total cost of such Alterations for Landlord's oversight and coordination of any Alterations, however, only in the event the project scope exceeds $20,000. All Alterations will become Landlord1s property at the expiration or earlier termination of the Lease Term and will remain on the Demised Premises without compensation to Tenant unless, Landlord elects by written notice to Tenant, such written notice to be provided at the time Landlord consents to such Alteration, to have Tenant remove such Alteration, in which event, notwithstanding any contrary provisions respecting such alterations, additions and improvements contained in Article 27 hereof, Tenant shall remove such Alteration on or prior to the expiration or earlier termination of
7



the Lease Term and repair any damage to the Demised Premises resulting from the removal of same.

9.Entry by Landlord. Landlord may retain duplicate keys to all doors of the Demised Premises and Landlord and its agents, employees and independent contractors will have the right to enter the Demised Premises at reasonable hours to inspect or show the same, to make repairs, additions, alterations, and improvements to any portion of the Building, including other tenants' premises, all without being liable to Tenant in any manner whatsoever for any damages arising therefrom; provided, however, that Landlord shall, except in case of emergency, afford Tenant such prior notification of an entry into the Demised Premises as may be reasonably practicable under the circumstances. Landlord will be allowed to take into and through the Demised Premises any and all materials that may be required to make such repairs, additions, alterations or improvements. During such time as such work is being carried on in or about the Demised Premises, the Rent provided herein will not abate, and Tenant waives any claim or cause of action against Landlord for damages by reason of interruption of Tenant's business or loss of profits therefrom because of the prosecution of any such work or any part thereof. Landlord does hereby agree to use all reasonable efforts to minimize any interference with Tenant's business caused by any such entry.

10.Assignment and Subletting.

(a)Except as expressly provided herein, Tenant agrees that Tenant will not, without the prior written consent of Landlord, which consent shall not be unreasonably withheld, conditioned or delayed so long as Tenant complies with this Article 10, assign this Lease or any interest herein or in the Demised Premises, or mortgage, pledge, encumber, hypothecate or grant any license or concession or otherwise transfer or sublet the Demised Premises or any part thereof or permit the use of the Demised Premises by any party other than Tenant. Consent by Landlord to one or more such transfers or subleases will not destroy or waive this provision, and all subsequent transfers and subleases may likewise be made only upon obtaining the prior written consent of Landlord which also may not be unreasonably withheld, conditioned or delayed so long as Tenant complies with this Article 10. Without limiting the foregoing prohibition, in no event may Tenant assign this Lease or any interest herein, whether directly, indirectly or by operation of law, or sublet the Demised Premises or any part thereof or permit the use of the Demised Premises or any part thereof by any party, (i) if the proposed assignee or subtenant is a party who would (or whose use would) detract from the character of the Building as a first-class building, such as, without limitation, an employment agency, a dental, medical or chiropractic office, a medical marijuana dispensary or clinic, or a governmental office, (ii) if the proposed use of the Demised Premises would involve an occupancy rate of more than one (I) person per 150 square feet of Rentable Floor Area of the Demised Premises, (iii) if the proposed assignment or subletting would be to a governmental subdivision or agency or any Person who enjoys diplomatic or sovereign immunity, (iv) if such proposed assignee or subtenant is an existing tenant of the Building, (v) if such proposed assignment, subletting or use would contravene any restrictive covenant (including any exclusive use) granted to any other tenant of the Building or (vi) if (I) Tenant advertised or asked for an effective rental rate for such assignment or subletting that is less than the effective rental rate then being offered by Landlord for vacant space in the Building or (2) the effective rental rate accepted by Tenant under such assignment or subletting would be less than ninety percent (90%) of the effective rental rate then being offered by Landlord for vacant space in the Building. Sublessees or transferees of the Demised Premises for the balance of the Lease Term will become directly liable to Landlord for all obligations of Tenant hereunder, without relieving Tenant (or any guarantor of Tenant's obligations hereunder) of any liability therefor, and Tenant will remain obligated for all liability to Landlord arising under this Lease during the entire remaining Lease Term including any extensions thereof, whether or not authorized herein. If Tenant is a partnership, professional association or a limited liability company, a withdrawal or change, whether voluntary, involuntary or by operation of law, of partners or members owning a controlling interest in the Tenant or having the power to manage the business of Tenant will be deemed a voluntary assignment of this Lease and subject to the foregoing provisions. If Tenant is a corporation, any dissolution, merger, consolidation or other reorganization of Tenant, or the sale or transfer of a controlling interest in the capital stock of Tenant, will be deemed a voluntary assignment of this Lease and subject to the foregoing provisions.

8



(b)As a condition to considering any request for consent to an assignment or sublease, Tenant must submit a written request ("Request to Assign") to Landlord at least thirty (30) days in advance of the date Tenant desires to make such an assignment or sublease. Tenant's Request to Assign must specify the terms of said proposed sublease or assignment, including the proposed effective date thereof, and the name and address of each proposed subtenant or assignee. Landlord may require Tenant to obtain and submit current financial statements of any proposed assignee (including, without limitation, current financial statements of any prospective guarantor). Landlord will then have a period of fifteen (15) Business Days following receipt of Tenant's Request to Assign within which to notify Tenant in writing whether Landlord elects to: (i) cancel and terminate this Lease as to the space so affected as of the proposed effective date so specified by Tenant in its notice, in which event Tenant will be relieved of all obligations hereunder as to such space (provided however, if Landlord so elects to cancel and terminate this Lease, Tenant may withdraw its Request to Assign by giving Landlord written notice thereof within ten (10) days after receipt of Landlord's election, in which case Landlord will be deemed to have rejected Tenant's proposed assignment or sublease and this Lease will remain in full force and effect with respect to such space); (ii) permit Tenant to assign this Lease or sublet such space for the duration specified by Tenant in its notice; or (iii) reject the proposed assignment or sublease. If Landlord fails to notify Tenant in writing of its election within the fifteen (15) Business Day period, Landlord will be deemed to elect option (iii). If Landlord consents to an assignment or sublease, Tenant shall pay to Landlord a $2,500 fee to cover Landlord's administrative costs and accounting and legal costs (whether provided by Landlord's employees or by third parties) in connection with reviewing and approving the assignment or sublease. Landlord may require an additional security deposit or other form of credit enhancement acceptable to Landlord (including, by way of example and not in limitation, an irrevocable letter of credit, personal guaranties or other collateral in such form and amounts as may be acceptable to Landlord) as a condition of its consent. No assignment of this Lease consented to by Landlord will be effective unless and until Landlord receives an original assignment and assumption agreement, in form and substance satisfactory to Landlord, signed by Tenant and Tenant's proposed assignee, whereby the assignee assumes due performance of this Lease to be done and performed for the balance of the then remaining Lease Term of this Lease. No subletting of the Demised Premises, or any part thereof, will be effective unless Tenant delivers to Landlord an agreement, in form and substance satisfactory to Landlord, signed by Tenant and the proposed sublessee, whereby the sublessee acknowledges the right of Landlord to continue or terminate any sublease, in Landlord's sole discretion, upon termination of this Lease, and such sublessee agrees to recognize and attorn to Landlord in the event that Landlord elects under such circumstances to continue such sublease.

(c)If Landlord exercises its right as of the effective date of such assignment, sublease or other transaction to cancel and terminate this Lease as set forth in subparagraph (b) above, Landlord will not be obligated to pay any consideration to effect such cancellation as to the portion of the Demised Premises and Lease Term with respect to which Landlord has been requested to permit such assignment, sublease or other transaction; and if Landlord elects to cancel and terminate this Lease as to the aforesaid portion of the Demised Premises and for the term proposed to be assigned or subleased, then the Base Rental and other charges payable hereunder will thereafter be proportionally reduced.

(d)If an assignment or sublease is consented to by Landlord under this Article, Tenant and Landlord agree that fifty percent (50%) of all Net Profit actually received by Tenant from such sublease or assignment will be paid by Tenant to Landlord as an additional Rent hereunder as and when received by Tenant. For purposes hereof, the term "Net Profit" means the gross revenue received from the assignee or sublessee, less (i) the Rent paid to Landlord by Tenant with respect to the subleased space during the period of the sublease term or attributable to the period from and after the effective date of the assignment; (ii) the Rent paid to Landlord by Tenant with respect to the subleased space or the space subject to such assignment during the period between the date Tenant ceased all business operations in such space and the commencement of the sublease term or the effective date of the assignment; (iii) any improvement allowance or other economic concession (planning allowance, moving expenses, etc.) actually paid by Tenant to the sublessee or assignee, (iv) reasonable brokerage commissions or attorney's fees actually paid in connection with such sublease or assignment; (v) lease takeover payments and reasonable costs of advertising the space for sublease or assignment actually paid by Tenant; and (vi) the unamortized cost of initial and subsequent improvements to the Demised Premises made by Tenant at Tenant's expense (and without reimbursement from the Construction Allowance or otherwise). When a
9



portion of the Demised Premises is sublet, in calculating Net Profit from such sublease, the cost under clause (vi) of the preceding sentence will be allocated on a fair and equitable basis.

(e)Notwithstanding anything contained in this Lease to the contrary, if Tenant assigns this Lease or sublets the Demised Premises in contravention of this Article 10, or if Tenant otherwise, by operation of law, ceases to be the sole occupant of the Demised Premises without the consent of Landlord, the same will be deemed a material default of Tenant, and, in addition to any other rights or remedies Landlord may have with respect to such default, Landlord may also charge and collect from Tenant (and/or the occupant of the Demised Premises) as Rent, an amount equal to 150% of the Rent otherwise reserved and payable under this Lease until such time as Tenant has caused compliance with the terms of this Lease. Occupancy or possession of the Demised Premises will cause said unapproved assignee, sublessee or occupant to be liable directly to Landlord for all amounts chargeable under this Lease, without the granting thereto of right of possession of the Demised Premises. Acceptance by Landlord of any Rent payable hereunder made by anyone other than Tenant as named herein will under no circumstances in and of itself be deemed an approval by Landlord of any assignment or subletting that may be effected without compliance with this Article 10.

(f)Tenant may assign its entire interest under this Lease to its Affiliate or to a successor to Tenant by purchase, merger, consolidation or reorganization without the consent of Landlord, provided that all of the following conditions are satisfied in Landlord's reasonable discretion (a "Permitted Transfer"): (1) no uncured event of default exists under this Lease; (2) Tenant's successor shall own all or substantially all of the assets of Tenant; (3) such Affiliate or Tenant's successor shall have a tangible net worth which is at least equal to the greater of Tenant's tangible net worth at the date of this Lease or Tenant's tangible net worth as of the day prior to the proposed purchase, merger, consolidation or reorganization; (4) no portion of the Building or Demised Premises would likely become subject to additional or different laws as a consequence of the proposed Transfer; (5) such Affiliate's or Tenant's successor's use of the Demised Premises shall not conflict with the permitted use or any exclusive usage rights granted to any other tenant in the Building; (6) such Affiliate or Tenant's successor is not and has not been involved in litigation with Landlord or any of Landlord's Affiliates; (7) Tenant will not be released if Tenant exists as a separate legal entity following the transfer; and (8) Tenant shall give Landlord written notice at least 30 days prior to the effective date of the proposed transfer, along with all applicable documentation and other information necessary for Landlord to determine that the requirements of this Article 10(f) have been satisfied, including if applicable, the qualification of such proposed transferee as an Affiliate of Tenant.

11.Tenant's Insurance. Tenant shall procure at its expense and maintain throughout the Lease Term the following insurance: (a) commercial general liability insurance, insuring Tenant, Landlord and any other Person designated by Landlord, against any and all liability for injury to or death of a person or persons and for damage to property occasioned by or arising out of any construction work being done on the Demised Premises, or arising out of the condition, use, or occupancy of the Demised Premises, or in any way occasioned by or arising out of the activities of Tenant or any of Tenant's Agents in the Demised Premises, or other portions of the Building or the Project, the limits of such policy or policies to be in combined single limits for both damage to property and personal injury and in amounts not less than Three Million Dollars ($3,000,000) for each occurrence (an umbrella policy can be used to satisfy this limit requirement); (b) special form/all-risk insurance insuring the full replacement cost of its furniture, fixtures, equipment, supplies, and other property owned, leased, held or possessed by it and contained in the Demised Premises, together with the excess value of the improvements to the Demised Premises over the Construction Allowance (with a replacement cost endorsement sufficient to prevent Tenant from becoming a co-insurer); (c) business income (formerly "business interruption") insurance written on an actual loss sustained form or with sufficient limits to address reasonably anticipated business interruption losses; and (d) worker's compensation insurance as required by applicable law. Tenant shall also carry such other types of insurance in form and amount which Landlord reasonably deems to be prudent for Tenant to carry, should the circumstances or conditions so merit Tenant carrying such type of insurance. All insurance policies procured and maintained by Tenant pursuant to this Article 11 must name Landlord and any additional parties designated by Landlord as additional insureds, be carried with companies licensed to do business in the state in which the Project is located having a rating from Best's Insurance Reports of not less than A-/VIII, and be non-cancelable and not subject to material change
10



except after thirty (30) days' written notice to Landlord (which written notice may be provided by Tenant's insurance carrier or by Tenant). Such policies or duly executed certificates of insurance with respect thereto, accompanied by proof of payment of the premium therefor, must be delivered to Landlord prior to the Rental Commencement Date, and renewals of such policies must be delivered to Landlord at least thirty (30) days prior to the expiration of each respective policy term (which written notice may be provided by Tenant's insurance carrier or by Tenant).

12.Landlord's Insurance. Landlord shall procure and maintain at its expense (but with the expense to be included in Operating Expenses) throughout the Lease Term a policy or policies of special form/all-risk (including rent loss coverage) real and personal property insurance covering the Project (including the leasehold improvements in the Demised Premises up to the amount of the Construction Allowance, but excluding Tenant's personal property and equipment), in an amount equal to the full insurable replacement cost thereof as such may increase from time to time (but such insurance may provide for a commercially reasonable deductible), and in an amount sufficient to comply with any co-insurance requirements in such policy, and a policy of workers' compensation insurance, if any, as required by applicable law. In addition, Landlord shall procure and maintain at its expense (but with the expense to be included in Operating Expenses) and shall thereafter maintain throughout the Lease Term, a commercial general liability insurance policy covering the Project with combined single limits for both damage to property and personal injury of not less than Three Million Dollars ($3,000,000) per occurrence, subject to annual aggregate limits of not less than Five Million Dollars ($5,000,000). Landlord may also carry such other types of insurance in form and amounts which Landlord determines to be appropriate from time to time, and the cost thereof will be included in Operating Expenses. All such policies procured and maintained by Landlord pursuant to this Article 12 must be carried with companies licensed to do business in the state of in which the Project is located. Any insurance required to be carried by Landlord hereunder may be carried under blanket policies covering other properties of Landlord and/or its partners and/or their respective related or affiliated corporations so long as such blanket policies provide insurance at all times for the Project as required by this Lease.

13.Mutual Waiver of Subrogation. Landlord and Tenant shall each have included in all policies of fire, extended coverage, general liability, business income and loss of rents insurance respectively obtained by them covering the Demised Premises, the Building and contents therein, a waiver by the insurer of all right of subrogation against the other in connection with any loss or damage thereby insured against. Any additional premium for such waiver will be paid by the primary insured. To the full extent permitted by law, Landlord and Tenant each waives all right of recovery against the other for, and agrees to release the other from liability for, loss or damage to the extent such loss or damage is covered by valid and collectible insurance in effect at the time of such loss or damage or would be covered by the insurance required to be maintained under this Lease by the party seeking recovery.

11




14.Liability of Tenant. Subject to Article 13 hereof, Tenant hereby indemnifies Landlord from and agrees to hold Landlord harmless against, any and all liability, loss, cost, damage or expense, including, without limitation, court costs and reasonable attorney's fees, imposed on Landlord by any Person whomsoever, (a) caused in whole or in part by, due to, occasioned by, or directly or indirectly related to any act or omission of Tenant, or any of Tenant's Agents, (b) resulting or arising from or connected with injury or damage to person or property that occurs in or about the Demised Premises, (c) otherwise occurring in connection with any use of the Demised Premises by Tenant or any of Tenant's Agents or any breach, default, violation or non-performance of any term, provision, covenant or condition on the part of Tenant or any of Tenant's Agents hereunder, or (d) any violation by Tenant or Tenant's Agents of any law, ordinance or governmental order of any kind or of any of the Rules and Regulations. Except as may be provided in Article 13 above, the provisions of this Article 14 shall not apply to damages arising out of bodily injury to persons or damage to property caused by or resulting from the negligence or willful misconduct of Landlord, its agents, employees or contractors acting within the scope of their agency or employment. The provisions of this Article 14 will survive any termination of this Lease.

15.Casualty.

(a)Landlord's Termination Rights.

(i) If the Project or any portion thereof is substantially damaged by fire, storm, wind, water, any act of nature or God, or any other matter beyond the control of Landlord (a “Casualty") not required to be insured against by Landlord hereunder or if the Project or any portion thereof is substantially damaged by Casualty required to be insured against by Landlord but the insurance company is insolvent and financially unable to pay the proceeds which are due (through no fault of Landlord), Landlord will have the right to terminate this Lease by notice to Tenant given within ninety (90) days after the date of such Casualty (the “Damage Date"), provided, however, Landlord will not terminate this Lease pursuant to this subparagraph (a) unless Landlord terminates the leases of all tenants of the Building whose premises (or access thereto) are similarly affected by such Casualty. As used in this Article, the term "substantially damaged" means such damage that the cost of repair and restoration thereof is reasonably estimated by Landlord's architect to exceed Three Million Dollars ($3,000,000).

(ii)If the entire Building or a substantial portion thereof (which may or may not include all or a part of the Demised Premises), or the Building systems or structural components of the Building (whether or not the Demised Premises are directly affected) are substantially damaged or destroyed and such damage or destruction is to the extent that in the reasonable opinion of Landlord's architect delivered in writing to both parties within sixty (60) days after the Damage Date, the damage cannot be repaired or restored within three hundred sixty-five (365) days after the Damage Date, Landlord may terminate this Lease by giving Tenant notice within eighty (80) days after the Damage Date; provided, however, Landlord agrees that it will not terminate this Lease pursuant to this subparagraph (b) unless Landlord terminates the leases of all tenants of the Building whose premises (or access thereto) are similarly affected by such Casualty.

(iii)Notwithstanding anything contained in this Article to the contrary, if Landlord is obligated to restore the Demised Premises or any part of the Project as a result of a Casualty, and (A) if the cost of performing such restoration exceeds the actual proceeds of insurance paid or payable to Landlord on account of such Casualty by more than Three Million Dollars ($3,000,000) ("Landlord's Required Contribution"), or (B) if Landlord's mortgagee or the lessor under a ground or underlying lease requires that any insurance proceeds from a Casualty be paid to it and the cost of such restoration exceeds the actual proceeds of insurance received by Landlord and not paid to such mortgagee or lessor by more than Landlord's Required Contribution, Landlord may terminate this Lease unless Tenant, within twenty (20) days after demand therefor, deposits with Landlord a sum of money sufficient to pay the difference between (Y) the cost of restoration and (Z) the sum of Landlord's Contribution and the proceeds of the insurance received by and available to Landlord for such restoration. In the event Tenant makes such deposit pursuant to the preceding sentence in order to avoid the termination of this Lease, Tenant will have the right to
12



set off up to One Million Dollars ($1,000,000.00) of the amount so deposited by Tenant against the Rent next thereafter coming due under this Lease. Landlord agrees that Landlord will not terminate this Lease pursuant to this subparagraph (c) unless Landlord terminates the leases of all tenants of the Building whose premises (or access thereto) is similarly affected by such Casualty.

(b)Tenant's Termination Rights. If the Demised Premises are damaged or destroyed by Casualty, or if any portion of the Project other than the Demised Premises (including, without limitation, the Building or the Parking Facility) is damaged by Casualty such that Tenant's use or enjoyment of or access to the Demised Premises or the Project is materially adversely affected and if, in the reasonable opinion of Landlord's architect, given in writing to both parties within sixty (60) days after the Damage Date, the Demised Premises and such other portions of the Project cannot be repaired or restored to the condition in all material respects that existed prior to the Casualty within three hundred sixty-five (365) days after the Damage Date, Tenant may terminate this Lease by giving notice to Landlord within ninety (90) days after the Damage Date. In addition to the termination right granted to Tenant under the preceding sentence, if the Demised Premises are damaged or destroyed by Casualty, or if any portion of the Project other than the Demised Premises is damaged by Casualty such that Tenant's use or enjoyment of or access to the Demised Premises or the Project is materially adversely affected, and if the Demised Premises and/or such portion of the Project are not materially restored by Landlord to the extent required of Landlord hereunder on or before the date which is fourteen (14) months after the Damage Date, Tenant will have the right to terminate this Lease by giving written notice thereof to Landlord on or before the earlier to occur of (i) the date which is sixteen (16) months after the Damage Date, or (ii) the date Landlord has substantially completed the restoration of the Demised Premises and any portion of the Building required for access to the Demised Premises, as the case may be; provided, however, if construction or reconstruction is delayed because of changes, deletions or additions in construction requested by Tenant, or because of delays caused by force majeure, the fourteen (14) month period for restoration, repair or rebuilding will be extended for the amount of time Landlord is so delayed, but unless the delay is caused by Tenant or its employees or by Tenant's agents or contractors (acting within the scope of their agency or contract), the extension under this proviso will not exceed an additional two (2) months.

If Landlord's architect determines that the Demised Premises and/or Project cannot be repaired or restored to the condition in all material respects that existed prior to the Casualty within three hundred sixty-five (365) days after the Damage Date, Landlord's architect shall specify in its opinion the additional time reasonably required for such repairs or restoration. In the event Tenant has the right in such circumstance to terminate this Lease pursuant to the preceding grammatical paragraph, but Tenant does not elect to so terminate this Lease, the fourteen (14) and sixteen (16)-month periods described in the preceding paragraph will each be extended by such additional time so specified in the opinion of Landlord's architect.

(c)Termination Rights During Last Two (2) Years. Notwithstanding anything in this Article to the contrary, if the Building is substantially damaged or destroyed by Casualty at any time during the last two (2) years of the Lease Term, and Landlord elects not to rebuild and restore the leasehold improvements in the Demised Premises for Tenant, then Landlord may terminate this Lease upon notice to Tenant within sixty (60) days after the Damage Date provided that if Landlord exercises such election to terminate and Tenant has any unexercised option to extend the Lease Term, then Tenant may nullify Landlord's asserted termination of this Lease by exercising Tenant's right to extend the Lease Term, for the Extended Term within thirty (30) days after receipt of Landlord's notice of termination. Also, notwithstanding anything in this Article 15 to the contrary, if either the Demised Premises is materially damaged or destroyed by Casualty, or if any portion of the Building or Project other than the Demised Premises (including the Parking Facility) is damaged or destroyed by Casualty so that Tenant's use or enjoyment of or access to the Demised Premises is materially adversely affected, and such Casualty occurs during the last two (2) years of the Lease Term, Tenant may terminate this Lease upon notice to Landlord within thirty (30) days after the Damage Date, provided that Tenant reasonably determines that the continuation of this Lease is impracticable giving due consideration to the Lease Term which would remain after restoration.
13




(d)Landlord's Restoration Obligations. If neither Landlord nor Tenant has the right to terminate this Lease pursuant to the foregoing provisions of this Article, or if the party or parties that have the right to terminate this Lease do not exercise such right as hereinabove provided, Landlord shall have the property damaged by such Casualty repaired or restored to the condition in all material respects that existed prior to the Casualty at the sole expense of Landlord but Landlord's repair obligations as to the leasehold improvements will be limited to the insurance proceeds actually received by Landlord for such repairs. Tenant shall pay all other costs of repairing the leasehold improvements in the Demised Premises. An equitable abatement in Rent will be allowed from the Damage Date for Tenant's loss of use or access until such time that the damage has been repaired or restored in all material respects to its condition prior to the Casualty. Landlord's architect will deliver a notice to both parties within sixty (60) days after the Damage Date stating the time required to repair and restore the damage caused by any Casualty and if Landlord is obligated hereunder to repair and restore such damage, Landlord shall use all reasonable efforts in good faith to repair and restore such damage within the estimated time period, subject to Tenant's rights under Article l5(b) hereof.

(e)Landlord's Architect; Termination Conditions. The opinions of and notices from Landlord's architect contemplated in Articles l5(a), l5(b) and l5(d) hereof will be rendered or given, as the case may be, by a reputable, qualified, licensed architect selected by Landlord. In the event of any termination of this Lease by either party pursuant to this Article, Base Rental, Tenant's Forecast Additional Rental, and Tenant's Additional Rental and any other payments due hereunder will be apportioned and paid to the date of termination and Tenant shall vacate the Demised Premises as soon as reasonably possible following the date of such termination (but in no event later than thirty [30] days after Tenant is permitted access to the Demised Premises following termination); provided, however, that those matters of this Lease which are designated to cover matters of termination and the period thereafter will survive the termination hereof.

(f)Reaffirmation of Lease. Upon the occurrence of any damage to, or destruction of the Demised Premises or any portion of the Project other than the Demised Premises which materially, adversely affects Tenant's use or enjoyment of, or access to, the Demised Premises, and provided that either Tenant does not have the right hereunder to terminate this Lease as a result of such damage or Tenant does have the right hereunder to terminate this Lease but has elected not to (or has failed to) terminate this Lease as provided herein, Tenant shall, within fifteen (15) Business Days after receipt by Tenant of a written request therefor from Landlord and the receipt by Tenant from Landlord or Landlord's architect, as the case may be, of all notices, elections and other information Tenant may reasonably require in order to make any election permitted under this Article, provide Landlord with a written reaffirmation of this Lease, including an acknowledgment that Tenant does not have the right to terminate this Lease as a result of such damage or that Tenant had the right to terminate this Lease but has elected not to (or has failed to) terminate this Lease as herein provided.

16.Eminent Domain. Either party may terminate this Lease if the whole or any material part of the Demised Premises are taken or condemned for any public or quasi-public use under applicable law, by eminent domain or private purchase in lieu thereof, such that Tenant's use or enjoyment of or access to the Demised Premises or the Project is materially adversely affected (a "Taking"). Landlord shall also have the right to terminate this Lease if there is a Taking of any portion of the Building or Project which would leave the remainder of the Building unsuitable for use as an office building in a manner comparable to the Building's use prior to the Taking. In order to exercise its right to terminate this Lease under this Article 16, Landlord or Tenant, as the case may be, must provide written notice of termination to the other within 45 days after the terminating party first receives notice of the Taking. Any such termination shall be effective as of the date the physical taking of the Demised Premises or the portion of the Building or Project occurs. If this Lease is not terminated, the Rentable Floor Area of the Demised Premises and the Building and Tenant's pro rata share shall, if applicable, be appropriately adjusted by Landlord. In addition, Base Rent for any portion of the Demised Premises taken or condemned shall be abated during the unexpired Lease Term effective when the physical taking of the portion of the Demised Premises occurs. All compensation awarded for a Taking, or sale proceeds, shall be the property of Landlord, any right to receive compensation or proceeds being expressly waived by Tenant. However, Tenant may file a
14



separate claim at its sole cost and expense for Tenant's trade fixtures, equipment, furniture and other personal property within the Demised Premises (excluding above building standard leasehold improvements) and Tenant's reasonable relocation expenses, provided the filing of such claim does not diminish the award which would otherwise be receivable by Landlord.

17.Default.

(a)The following acts, events or conditions will be deemed to be events of default by Tenant under this Lease:

(i)Tenant fails to pay any installment of Rent or any other charge or assessment against Tenant after the due date thereof and such failure continues for ten (10) days after notice of such failure of payment; provided, however, such notice and such grace period will be required of Landlord only one (1) time during any calendar year, and an event of default will immediately occur upon the second (2nd) failure by Tenant to make a timely payment as aforesaid within that calendar year;

(ii)the failure by Tenant to cease any conduct prohibited by this Lease within three (3) days after receipt of written notice from Landlord requesting cessation thereof, or the failure of Tenant to cease any conduct or eliminate any condition which poses a danger to person or property within twelve (12) hours of receipt of written notice from Landlord requesting cessation of such conduct or elimination of such conditions;

(iii)Tenant or any Guarantor becomes insolvent, files a petition for protection under the U.S. Bankruptcy Code (or similar law) or a petition is filed against Tenant or any Guarantor under such laws and is not dismissed within sixty (60) days after the date of such filing, makes a transfer in fraud of creditors or makes an assignment for the benefit of creditors, or admits in writing its inability to pay its debts when due;

(iv)a receiver or trustee is appointed for the Demised Premises or for all or substantially all of the assets of Tenant or of any guarantor of this Lease;

(v)Tenant creates or permits anything to be done that creates a lien upon the Demised Premises or the Project and such lien is not removed or discharged within twenty (20) days after the filing thereof;

(vi)Tenant fails to return a properly executed instrument(s) to Landlord in accordance with the provisions of Article 24 hereof within the time period provided for such return following Landlord1s request for same as provided in Article 24;

(vii)Tenant fails to comply with any other term, provision, covenant or warranty made under this Lease by Tenant, other than the payment of the Rent or any other charge or assessment payable by Tenant, and does not cure such failure within thirty (30) days after notice thereof to Tenant; provided, however, that if any such failure is curable but not capable of being cured within such thirty (30) day period, no event of default will have occurred if Tenant commences its efforts to cure such failure within such thirty (30) day period and diligently and continuously pursues such cure to completion within sixty (60) days after such notice; and

(b)Upon the occurrence of any of the aforesaid events of default, Landlord will have the option to pursue any one or more of the following remedies without any notice or demand whatsoever:

(i)terminate this Lease, in which event Tenant is required to immediately surrender the Demised Premises to Landlord and if Tenant fails to do so, Landlord may, without further notice and without prejudice to any other remedy Landlord may have for possession or arrearages in Rent, enter upon and take possession of the Demised Premises and expel or remove Tenant and any other Person who may be occupying said Demised Premises or any part thereof, and its and their effects, without being liable for prosecution or any claim of damages therefor; Tenant hereby agreeing to pay to Landlord on
15



demand the amount of all loss and damage which Landlord may suffer by reason of such termination, whether through inability to relet the Demised Premises on satisfactory terms or otherwise;

(ii)terminate Tenant's right of possession, without terminating this Lease, and enter upon and take possession of the Demised Premises as Tenant's agent and expel or remove Tenant and any other Person who may be occupying said Demised Premises or any part thereof, and its and their effects, by entry, dispossessory suit or otherwise, without thereby releasing Tenant from any liability hereunder, without terminating this Lease, and without being liable for prosecution or any claim of damages therefor and, if Landlord so elects, make such alterations, redecorations and repairs as, in Landlord's reasonable judgment, may be necessary or desired to relet the Demised Premises, and Landlord may, but will be under no obligation to do so (except to the extent required by applicable laws), relet the Demised Premises or any portion thereof in Landlord's or Tenant's name, but for the account of Tenant, for such term or terms (which may be for a term extending beyond the Lease Term) and at such rental or rentals and upon such other terms as Landlord may deem advisable, with or without advertisement, and by private negotiations, and receive the rent therefor, Tenant hereby agreeing to pay to Landlord the deficiency, if any, between all Rent reserved hereunder and the total rental applicable to the Lease Term hereof obtained by Landlord upon reletting, and Tenant will be liable for Landlord's damages and expenses in redecorating and restoring the Demised Premises and all actual costs incident to such reletting, including broker's commissions and lease assumptions. In no event will Tenant be entitled to any rentals received by Landlord in excess of the amounts due by Tenant hereunder. Any such demand, reentry and taking of possession of the Demised Premises by Landlord will not of itself constitute an acceptance by Landlord of a surrender of the Lease or of the Demised Premises by Tenant and will not of itself constitute a termination of this Lease by Landlord. Landlord's failure to relet the Demised Premises or to make such alterations, redecorations and repairs as set forth in this paragraph will not release or affect Tenant's liability for Rent or for damages;

(iii)enter upon the Demised Premises without being liable for prosecution or any claim of damages therefor, and do whatever Tenant is obligated to do under the terms of this Lease; and Tenant agrees to reimburse Landlord on demand for any actual expenses including, without limitation, reasonable attorney's fees which Landlord may incur in thus effecting compliance with Tenant's obligations under this Lease. TENANT AGREES THAT LANDLORD SHALL NOT BE LIABLE FOR ANY DAMAGES RESULTING TO TENANT FROM SUCH ACTION AND ACKNOWLEDGES THAT ITS RELEASE OBLIGATIONS HEREUNDER COVER AND RELATE TO, WITHOUT LIMITATION, ANY NEGLIGENT ACTION OR OMISSION OF LANDLORD OR THE LANDLORD PARTIES); or

(iv)without notice, alter the locks and any other security device or devices which allow Tenant access to the Demised Premises or the Building, and Landlord shall not be required to provide a new key or right of access to Tenant, and restrict or terminate any right to use parking facilities associated with the Building as well as Building services to the Demised Premises. This Article 17(b)(iv) is intended to and shall supersede the provisions of Section 93.002 of the Texas Property Code.

(c)If this Lease is terminated by Landlord as a result of the occurrence of an event of default, Landlord may declare to be due and payable immediately, the present value (calculated with a discount factor of eight percent [8%] per annum) of the difference between (x) the entire amount of Rent and other charges and assessments which in Landlord's reasonable determination would become due and payable during the remainder of the Lease Term determined as though this Lease had not been terminated (including, but not limited to, increases in Rent pursuant to Article l(g) hereof), and (y) the then fair market rental value of the Demised Premises for the remainder of the Lease Term. Upon the acceleration of such amounts, Tenant agrees to pay the same at once, together with all Rent and other charges and assessments theretofore due, at Landlord's address as provided herein, it being agreed that such payment does not constitute a penalty or forfeiture but constitutes liquidated damages for Tenant's failure to comply with the terms and provisions of this Lease (Landlord and Tenant agreeing that Landlord's actual damages in such event are impossible to ascertain and that the amount set forth above is a reasonable estimate thereof).

16



(d)Pursuit of any of the foregoing remedies will not preclude pursuit of any other remedy herein provided or any other remedy provided by law or at equity, nor will pursuit of any remedy herein provided constitute an election of remedies thereby excluding the later election of an alternate remedy, or a forfeiture or waiver of any Rent or other charges and assessments payable by Tenant and due to Landlord hereunder or of any damages accruing to Landlord by reason of violation of any of the terms, covenants, warranties and provisions herein contained. No reentry or taking possession of the Demised Premises by Landlord or any other action taken by or on behalf of Landlord should be construed to be an acceptance of a surrender of this Lease or an election by Landlord to terminate this Lease unless written notice of such intention is given to Tenant. Forbearance by Landlord to enforce one or more of the remedies herein provided upon an event of default should not be deemed or construed to constitute a waiver of such default. In determining the amount of loss or damage which Landlord may suffer by reason of termination of this Lease or the deficiency arising by reason of any reletting of the Demised Premises by Landlord as above provided, allowance will be made for the expense of repossession. Tenant agrees to pay to Landlord all actual costs and expenses incurred by Landlord in the enforcement of this Lease.

(e)Upon the occurrence of any event of default by Tenant, Tenant shall pay to Landlord all actual costs incurred by Landlord (including court costs and reasonable attorney's fees and expenses) in (i) obtaining possession of the Demised Premises, (ii) removing and storing Tenant's or any other occupant's property, (iii) repairing, restoring, renovating or otherwise putting the Demised Premises into condition acceptable to a new tenant, (iv) if Tenant is dispossessed of, or vacates or abandons, the Demised Premises and this Lease is not terminated, reletting all or any part of the Demised Premises (including, but not limited to, brokerage commissions, cost of tenant finish work, advertising and promotional expenses, and other costs incidental to such reletting), (v) performing Tenant's obligations which Tenant failed to perform, and (vi) enforcing its rights, remedies, and recourses arising out of the default. Landlord's rights and remedies under this Article 17(e) are in addition to the rights and remedies of Landlord set forth in this Article 17 or elsewhere in this Lease, and/or which may otherwise be available to Landlord at law or in equity.

(f)If Tenant does not pay any Rent when due hereunder, Tenant shall pay Landlord an administration fee in the amount of $250.00. In addition, past due Rent shall accrue interest at the lesser of 18% per annum or the highest lawful rate allowed under applicable law (the "Default Rate"), and Tenant shall pay Landlord a reasonable fee for any checks returned by Tenant's bank for any reason.

17




18.Landlord's Lien. Landlord waives all contractual, statutory and constitutional liens held by Landlord on Tenant's personal property, goods, equipment, inventory, furnishings, chattels, accounts and assets to secure the obligations of Tenant under this Lease until such time as Landlord may obtain an enforceable judgment against Tenant from a court with jurisdiction of Tenant, at which time Landlord shall have such lien rights at law and in equity to enforce and collect such judgment and Tenant's obligations under this Lease.

19.Landlord's Liability. Landlord will have no personal liability with respect to any of the provisions of this Lease. If Landlord is in default with respect to its obligations under this Lease, Tenant will look solely to the equity of Landlord in and to the Building for satisfaction of Tenant's remedies, if any. It is expressly understood and agreed that Landlord's liability under the terms of this Lease will in no event exceed the amount of its interest in and to said Building. In no event will any partner of Landlord nor any member or joint venturer in Landlord, nor any officer, director or shareholder of Landlord or any such partner, member or joint venturer of Landlord be personally liable with respect to any of the provisions of this Lease. In no event shall Landlord, Cousins Properties LP, CPI Services LLC or Cousins Realty Services, LLC, or their directors, officers, shareholders, partners, members, employees, or agents be liable
in any manner for incidental, consequential or punitive damages, loss of profits, or business interruption.

20.Waiver of Breach. No waiver of any breach of the covenants, warranties, agreements, provisions, or conditions contained in this Lease should be construed as a waiver of said covenant, warranty, provision, agreement or condition or of any subsequent breach thereof, and if any breach occurs and afterwards is compromised, settled or adjusted, this Lease will continue in full force and effect as if no breach had occurred.

21.Landlord's Covenant of Quiet Enjoyment. Provided no event of default exists beyond applicable notice and cure periods and subject to the terms and provisions hereof, Landlord covenants and agrees to take all necessary steps to secure and to maintain for the benefit of Tenant the quiet and peaceful possession of the Demised Premises, for the Lease Term, without hindrance, claim or molestation by Landlord or any other Person lawfully claiming under Landlord.

22.Intentionally deleted.

23.Holding Over. If Tenant remains in possession after expiration or termination of the Lease Term without Landlord's written consent, Tenant will become a tenant-at-sufferance, and there will be no renewal of this Lease by operation of law. During the period of any such holding over, all provisions of this Lease will be and remain in effect except that the monthly rental will be I 50% of the amount of Rent (including any adjustments as provided herein) payable for the last full calendar month of the Lease Term, including renewals or extensions. The inclusion of the preceding sentence in this Lease should not be construed as Landlord's consent for Tenant to hold over. Tenant shall be liable to Landlord for, and shall protect Landlord from and indemnify and defend Landlord against, all claims, including any claims made by any succeeding tenant resulting from such failure to vacate, and any all damages (including, without limitation, consequential damages) that Landlord suffers from the holding over.

24.Subordination, Non-Disturbance and Attornrnent: Estoppel Certificate. Tenant accepts this Lease subject and subordinate to any mortgage(s), deed(s) of trust, ground lease(s) or other lien(s) now or subsequently affecting the Demised Premises, the Building or the Project, and to renewals, modifications, refinancings and extensions thereof (collectively, a "Mortgage"). The party having the benefit of a Mortgage shall be referred to as a "Mortgagee." This clause shall be self-operative, but upon request from a Mortgagee, Tenant shall execute a commercially reasonable subordination and non-disturbance agreement in favor of the Mortgagee. In lieu of having the Mortgage be superior to this Lease, a Mortgagee shall have the right at any time to subordinate its Mortgage to this Lease. If requested by a successor-in-interest to all or a part of Landlord's interest in this Lease, Tenant shall, without charge, attorn to the successor-in-interest. Tenant shall, within ten (10) days after receipt of a written request from Landlord, execute and deliver an estoppel certificate to those parties as are reasonably requested by Landlord (including a Mortgagee or prospective purchaser). The estoppel certificate shall include a
18



statement certifying that this Lease is unmodified (except as identified in the estoppel certificate) and in full force and effect, describing the dates to which Rent and other charges have been paid, representing that, to the best of Tenant's knowledge, there is no default (or stating with specificity the nature of the alleged default) and certifying other matters with respect to this Lease that may reasonably be requested. Tenant's failure to provide any estoppel certificate within the ten (10) day period specified above, and the continuation of such failure for a period of five (5) days after Landlord delivers a second written notice requesting same, shall constitute an event of default under this Lease.

Upon Tenant's written request, Landlord shall use commercially reasonable efforts to secure from the Mortgagee under any Mortgage now or hereafter encumbering the Demised Premises a non-disturbance agreement ("SNDA") on the standard form of the Landlord's Mortgagee with or for the benefit of Tenant whereby the Landlord's Mortgagee agrees not to disturb Tenant's possession of the Demised Premises provided Tenant is not in default beyond applicable notice and cure periods; provided, however, Landlord shall have no liability if Landlord's Mortgagee does not agree to provide an SNDA notwithstanding Landlord's commercially reasonable efforts to secure the same. Tenant shall be responsible for any charges, fees or costs assessed by any Landlord's Mortgagee in providing an SNDA. "Commercially reasonable efforts" of Landlord shall not require Landlord to incur any cost, expense or liability to obtain an SNDA.

25.Attorneys' Fees. If either party institutes a suit against the other for violation of or to enforce any covenant or condition of this Lease, or if either party intervenes in any suit in which the other is a party to enforce or protect its interest in or rights under this Lease, then the Prevailing Party shall be entitled to all of its costs and expenses, including reasonable attorneys' fees. The term "Prevailing Party" means the party, either Landlord or Tenant, that establishes a breach of this Lease by the other party or otherwise establishes liability of the other party for wrongful conduct, regardless of whether actual damages are awarded. In the case where both parties prevail on different claims, the Prevailing Party shall be the party that is awarded the greater amount of damages.

26.Notices. If a demand, request, approval, consent or notice (collectively, a "notice") shall or may be given to either party by the other, the notice shall be in writing and delivered by hand or sent by registered or certified mail with return receipt requested, or sent by overnight or same day courier service, at the party's respective Notice Address(es) set forth in Article 1, except that if Tenant has vacated the Demised Premises (or if the Notice Address for Tenant is other than the Demised Premises, and Tenant has vacated such address) without providing Landlord a new Notice Address, Landlord may serve notice in any manner described in this Article or in any other manner permitted by Law. Each notice shall be deemed to have been received or given on the earlier to occur of actual delivery or the date on which delivery is first refused, or, if Tenant has vacated the Demised Premises or the other Notice Address of Tenant without providing a new Notice Address, three (3) days after notice is deposited in the U.S. mail or with a courier service in the manner described above. Either party may, at any time, change its Notice Address by giving the other party written notice of the new address in the manner described in this Article.

19




27.Surrender of Demised Premises. Upon the expiration or other termination of this Lease, Tenant shall quit and surrender to Landlord the Demised Premises and every part thereof and all alterations, additions and improvements thereto, broom clean and in good condition and state of repair, reasonable wear and tear only excepted. If Tenant is not then in default, Tenant shall remove all personalty and equipment not attached to the Demised Premises which it has placed upon the Demised Premises, and Tenant shall restore the Demised Premises to the condition immediately preceding the time of placement thereof. Tenant will not be responsible for removing wires and cables installed by Tenant in the Demised Premises and other portions of the Building to serve Tenant's telecommunications and computer systems in the Demised Premises ("Cabling") provided the same are properly mapped and tagged by Tenant, including identification of each data junction box and the centrally located patch panel. Tenant will be responsible for removing all other Cabling, and the removal of such Cabling will be effected by Tenant without damage to the Building and without interference with the business or operations of Landlord or any other tenant of the Building. If Tenant fails or refuses to remove all of Tenant's effects, personalty and equipment from the Demised Premises and the Building upon the expiration or termination of this Lease for any cause whatsoever or upon the Tenant being dispossessed by process of law or otherwise, such effects, personalty and equipment will be deemed conclusively to be abandoned and may be appropriated, sold, stored, destroyed or otherwise disposed of by Landlord without written notice to Tenant or any other party and without obligation to account for them. Tenant shall pay Landlord on demand any and all expenses incurred by Landlord in the removal of such property, including, without limitation, the cost of repairing any damage to the Building or Project caused by the removal of such property and storage charges (if Landlord elects to store such property). The covenants and conditions of this Article 27 will survive any expiration or termination of this Lease.

28.Hazardous Substances. Tenant hereby covenants and agrees that Tenant will not cause or permit any "Hazardous Substances" (as hereinafter defined) to be generated, placed, held, stored, used, located or disposed of at the Project or any part thereof, except for Hazardous Substances as are commonly and legally used or stored as a consequence of using the Demised Premises for general office and administrative purposes, but only so long as the quantities thereof do not pose a threat to public health or to the environment or would necessitate a "response action", as that term is defined in CERCLA (as hereinafter defined), and so long as Tenant strictly complies or causes compliance with all applicable governmental rules and regulations concerning the use, storage, production, transportation and disposal of such Hazardous Substances. Promptly upon receipt of Landlord1s request, Tenant shall submit to Landlord true and correct copies of any reports filed by Tenant with any governmental or quasi-governmental authority regarding the generation, placement, storage, use, treatment or disposal of Hazardous Substances on or about the Demised Premises. Tenant also agrees to cooperate with Landlord and to provide access by Landlord and Landlord's representatives to any Tenant's records with respect to the Demised Premises relating to any assessment of the environmental condition of the Demised Premises and the generation, placement, storage, use, treatment or disposal of Hazardous Substances on or about the Demised Premises. For purposes of this Article 28, “Hazardous Substances" means and includes those elements or compounds which are contained in the list of Hazardous Substances adopted by the United States Environmental Protection Agency (EPA) or in any list of toxic pollutants designated by Congress or the EPA or which are defined as hazardous, toxic, pollutant, infectious or radioactive by any other federal, state or local statute, law, ordinance, code, rule, regulation, order or decree regulating, relating to or imposing liability (including, without limitation, strict liability) or standards of conduct concerning, any hazardous, toxic or dangerous waste, substance or material, as now or at any time hereinafter in effect (collectively "Environmental Laws"). Tenant hereby agrees to indemnify Landlord and hold Landlord harmless from and against any and all losses, liabilities, including strict liability, damages, injuries, expenses, including reasonable attorney's fees, costs of settlement or judgment and claims of any and every kind whatsoever paid, incurred or suffered by, or asserted against, Landlord by any Person for, with respect to, or as a direct or indirect result of, the presence in, or the escape, leakage, spillage, discharge, emission or release from, the Demised Premises of any Hazardous Substances (including, without limitation, any losses, liabilities, including strict liability, damages, injuries, expenses, including reasonable attorney's fees, costs of any settlement or judgment or claims asserted or arising under the Comprehensive Environmental Response, Compensation and Liability Act ["CERCLA"], any so called federal, state or local "Superfund" or “Superlien” laws or any other Environmental Law); provided, however, that the foregoing indemnity is limited to matters arising solely from Tenant's
20



violation of the covenant contained in this Article. The obligations of Tenant under this Article will survive any expiration or termination of this Lease.

29.Miscellaneous.

(a)Governing Law; Jurisdiction and Venue: Severability: Paragraph Headings. This Lease and the rights and obligations of the parties shall be interpreted, construed and enforced in accordance with the laws of the State in which the Project is located. All obligations under this Lease are performable in the county or other jurisdiction where the Project is located, which shall be venue for all legal actions. If any term or provision of this Lease shall be invalid or unenforceable, then such term or provision shall be automatically reformed to the extent necessary to render such term or provision enforceable, without the necessity of execution of any amendment or new document. The remainder of this Lease shall not be affected, and each remaining and reformed provision of this Lease shall be valid and enforced to the fullest extent permitted by law. The headings and titles to the Articles and Sections of this Lease are for convenience only and shall have no effect on the interpretation of any part of this Lease. The words "include", "including'' and similar words will not be construed restrictively to limit or exclude other items not listed.

(b)Cumulative Rights. All rights, powers and privileges conferred hereunder upon the parties hereto are cumulative to, but not restrictive of, or in lieu of those conferred by law.

(c)Recording. Tenant shall not record this Lease or any memorandum without Landlord's prior written consent.

(d)Force Majeure. Whenever a period of time is prescribed for the taking of an action by Landlord or Tenant, the period of time for the performance of such action shall be extended by the number of days that the performance is actually delayed due to strikes, acts of God, shortages of labor or materials, war, terrorist attacks (including bio-chemical attacks), civil disturbances and other causes beyond the reasonable control of the performing party (''force majeure"). However, events of force majeure shall not extend any period of time for the payment of Rent or other sums payable by either party or any period of time for the written exercise of an option or right by either party.

(e)Transferability: Release of Landlord. Landlord shall have the right to transfer and assign, in whole or in part, all of its rights and obligations under this Lease and in the Building and/or Project, and upon such transfer Landlord shall be released from any further obligations hereunder, and Tenant agrees to look solely to the successor in interest of Landlord for the performance of such obligations.

(f)Brokers. Tenant represents that it has dealt directly with and only with Colliers International (whose commission shall be paid by Landlord pursuant to a separate written agreement) in connection with this Lease. TENANT AND LANDLORD SHALL EACH INDEMNIFY THE OTHER AGAINST ALL COSTS, EXPENSES, ATTORNEYS' FEES, LIENS AND OTHER LIABILITY' FOR COMMISSIONS OR OTHER COMPENSATION CLAIMED BY ANY BROKER OR AGENT CLAIMING THE SAME BY, THROUGH OR UNDER THE INDEMNIFYING PARTY OTHER THAN THE BROKER(S) SPECIFICALLY IDENTIFIED ABOVE.

(g)Authority; Joint and Several Liability. Landlord covenants, warrants and represents that each individual executing, attesting and/or delivering this Lease on behalf of Landlord is authorized to do so on behalf of Landlord, this Lease is binding upon and enforceable against Landlord, and Landlord is duly organized and legally existing in the state of its organization and is qualified to do business in the state in which the Premises are located. Similarly, Tenant covenants, warrants and represents that each individual executing, attesting and/or delivering this Lease on behalf of Tenant is authorized to do so on behalf of Tenant, this Lease is binding upon and enforceable against Tenant; and Tenant is duly organized
21



and legally existing in the state of its organization and is qualified to do business in the state in which the Premises are located. If there is more than one Tenant, or if Tenant is comprised of more than one party or entity, the obligations imposed upon Tenant shall be joint and several obligations of all the parties and entities. Notices, payments and agreements given or made by, with or to any one person or entity shall be deemed to have been given or made by, with and to all of them.

(h)Time is of the Essence: Relationship: No Estate: Successors and Assigns. Time is of the essence with respect to Tenant's performance of its obligations and the exercise of any refusal, offer, expansion, renewal or extension rights or other options granted to Tenant. This Lease shall create only the relationship of landlord and tenant between the parties, and not a partnership, joint venture or any other relationship. This Lease creates the relationship of landlord and tenant only between Landlord and Tenant and no estate will pass out of Landlord. Tenant has only a usufruct, not subject to levy and sale and not assignable in whole or in part by Tenant except as herein provided. This Lease and the covenants and conditions in this Lease shall inure only to the benefit of and be binding only upon Landlord and Tenant and their permitted successors and assigns.

(i)Survival of Obligations. The expiration of the Term, whether by lapse of time or otherwise, shall not relieve either party of any obligations which accrued prior to or which may continue to accrue after the expiration or early termination of this Lease.

(j)Binding Effect. Landlord has delivered a copy of this Lease to Tenant for Tenant's review only, and the delivery of it does not constitute an offer to Tenant or an option. This Lease shall not be effective against any party hereto until an original copy of this Lease has been signed by such party and delivered to the other party and, if required, upon approval by Landlord's Mortgagee.

(k)Full Agreement: Amendments. This Lease contains the parties' entire agreement regarding the subject matter hereof. All understandings, discussions, and agreements previously made between the parties, written or oral, are superseded by this Lease, and neither party is relying upon any warranty, statement or representation not contained in this Lease. This Lease may be modified only by a written agreement signed by Landlord and Tenant. The exhibits, schedules and riders attached hereto are incorporated herein and made a part of this Lease for all purposes.

(l)Financial Statements. Upon Landlord's written request therefor, but not more often than once per year (unless Tenant is in default of this Lease beyond any applicable notice and cure period), Tenant shalt promptly furnish to Landlord a financial statement with respect to Tenant for its most recent fiscal year prepared in accordance with generally accepted accounting principles and certified to be true and correct by Tenant, which statement Landlord agrees to keep confidential and not disclose to unaffiliated third parties (other than Landlord's partners, attorneys, accountants and Building manager) except in connection with proposed sale or loan transactions.

(m)Patriot Act. Each party hereto represents and warrants to the other that such party is not, and is not acting, directly or indirectly, for or on behalf of, any Person named as a “specially designated national and blocked person” (as defined in Presidential Executive Order 13224) on the most current list published by the U.S. Treasury Department Office of Foreign Assets Control, and that such party is not engaged in this transaction, directly or indirectly, on behalf of, and is not facilitating this transaction, directly or indirectly, on behalf of, any such Person. Each party also represents and warrants to the other that neither such party nor its constituents or Affiliates are in violation of any laws relating to terrorism or money laundering, including the aforesaid Executive Order and the Uniting and Strengthening America by Providing Appropriate Tools Required to Intercept and Obstruct Terrorism Act of 2001 (Public Law 107-56), as amended. Each party hereby agrees to defend, indemnify and hold harmless the other party from and against any and all claims, damages, losses, risks, liabilities and expenses (including reasonable
22



attorney's fees and costs} arising from or related to any breach of the foregoing representations and warranties by the indemnifying party.

(n)Texas Tax Code Provisions. Tenant hereby waives any right it may have under Section 41.413 of the Texas Tax Code to protest (and Tenant hereby agrees that it shall not protest) the appraised value of all or any portion of the Demised Premises, the Building or the Project, and Tenant further waives any right it may have under Section 42.015 of the Texas Tax Code to appeal an order of the appraisal review board with respect to all or any portion of the Demised Premises, the Building and/or the Project. Tenant agrees that Landlord shall have the sole right to protest any appraisals of the Demised Premises, the Building and the Project. Tenant also hereby waives any right it may have to receive a copy of any notice received by Landlord of reappraisal of all or any portion of the Demised Premises, the Building and/or the Project, including without limitation any notice required under Section 4l.413(d) of the Texas Tax Code. Tenant agrees that Landlord shall not be liable to Tenant for any damages for Landlord's failure to send to Tenant a copy of any notice of reappraisal concerning the Demised Premises, the Building and/or the Project, irrespective of any obligation under applicable laws of Landlord to provide such notice. Notwithstanding the foregoing, if Tenant protests, challenges or appeals any valuation for property tax purposes of all or any portion of the Demised Premises, the Building and/or the Project, and such valuation increases from the value protested, appealed or challenged, Tenant agrees to indemnify Landlord on an after-tax basis for any property taxes due as a result of such increase and for all other costs and expenses incurred by Landlord as a result thereby.

(o)Texas DTPA Provisions. TENANT HEREBY WAIVES ALL ITS RIGHTS UNDER THE TEXAS DECEPTIVE TRADE PRACTICES - CONSUMER PROTECTION ACT, SECTION 17.41 ET. SEQ. OF THE TEXAS BUSINESS AND COMMERCE CODE, A LAW THAT GIVES CONSUMERS SPECIAL RIGHTS AND PROTECTIONS. AFTER CONSULTATION WITH AN ATTORNEY OF TENANT'S OWN SELECTION, TENANT VOLUNTARILY CONSENTS TO THIS WAIVER.

(p)Confidentiality. Tenant acknowledges that the terms and conditions of this Lease are to remain confidential for Landlord's benefit, and may not be disclosed by Tenant to anyone, by any manner or means, directly or indirectly, without Landlord's prior written consent; provided, however, that any of such information may be disclosed to Tenant's representatives who need to know such information for the purposes of fulfilling the obligations under this Lease and utilizing the Demised Premises (it being understood that such representatives shall be informed of (i) the confidential nature of such information and (ii) the obligation of confidentiality undertaken under this Lease, and shall be directed to treat such information confidentially). The consent by Landlord to any disclosures shall not be deemed to be a waiver on the part of Landlord of any prohibition against any future disclosure. Tenant agrees to be responsible for any breach of this section by any third party to whom Tenant has provided confidential information, or any portion thereof. If Tenant or any third party to whom Tenant has provided information regarding the terms and conditions of this Lease becomes legally compelled (by oral question, deposition, interrogatory, request for documents, subpoena, civil investigative demand or similar process or by rule, regulation or other applicable law) to disclose any information, Tenant shall promptly notify Landlord of such requirement before any disclosure is made so that Landlord (at its own expense) may seek a protective order or other appropriate remedy or may waive compliance with the terms of this section. If such protective order or other remedy is not obtained, or if Landlord waives compliance with the provisions of this section, Tenant agrees that only that portion of the information regarding the terms and conditions of this Lease which it is legally required to disclose (as advised by a written opinion of counsel) will be disclosed, and Tenant agrees to exercise its best efforts to obtain assurance that the information will be treated confidentially upon disclosure. Landlord and Tenant agree that disclosure of any of the terms and conditions of this Lease could irreparably injure Landlord and Landlord's relationships with other tenants in the Building, and Landlord shall be entitled to equitable relief
23



in the event of any breach or threatened breach of this section. Such remedies shall not be exclusive. The provisions of this section shall survive any expiration or termination of this Lease.


[Signature Page Attached]



24



IN WITNESS WHEREOF, the parties have hereunto set their hands and seals as of the day, month and year first above written

“LANDLORD”
COUSINS - ONE CONGRESS PLAZA LLC,
a Delaware limited liability company
By:	/s/ Tim Hendricks
Tim Hendricks
Senior Vice President &amp; Managing Director
“TENANT”
RIGUP, INC.,
a Delaware corporation
By:	/s/ John Mark Warren
John Mark Warren
VP Finance
 
25



Schedules/Exhibits Omitted from Sublease Agreement

Certain schedules and exhibits have been omitted pursuant to Item 601(a)(5) of Regulation S-K. CS Disco, Inc. agrees to furnish a copy of any omitted schedules to the Securities and Exchange Commission upon request.

List of Omitted Schedules/Exhibits:

Exhibit B. Copy of Floor Plan(s) of Subleased Premises
Exhibit C. Office Furniture List
Exhibit D. Form of Bill of Sale
Exhibit E. Planned Door System Repair

</file>
<file name="skills/summarization/data/sample-lease7-summary.txt">
Description: This description summarizes a sublease agreement between Crown Plaza Executive Suites Corporation (Sublessor) and Future Canada China Environment Inc. (Sublessee) for a small office space in Bellingham, Washington. The sublease is for a one-year term, from March 2008 to February 2009, for Suite 437 on the 4th floor of the Crown Plaza Building.

&lt;parties_involved&gt;
- Sublessor: Crown Plaza Executive Suites Corporation
- Sublessee: Future Canada China Environment Inc., Jessica Chiang (also listed as personal guarantor)
- Original Lessor: Crown Plaza Corporation (mentioned as landlord in master lease)
&lt;/parties_involved&gt;

&lt;property_details&gt;
- Address: 114 W. Magnolia Street, Suite 437, Bellingham, Washington 98225
- Description: Suite 437 on the 4th floor of the Crown Plaza Building
- Permitted use: General office use only
&lt;/property_details&gt;

&lt;term_and_rent&gt;
- Start date: March 1, 2008
- End date: February 28, 2009 
- Monthly rent: $595.00
- Security deposit: $595.00 (with $110 retained for carpet care and painting at termination)
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Sublessor provides utilities for common areas; Sublessee responsible for telephone service
- Maintenance and repairs: Sublessee responsible for keeping premises neat and clean; Sublessor responsible for structural repairs and maintenance
- Operating expenses: Not explicitly stated, but Sublessor pays property taxes
&lt;/responsibilities&gt;

&lt;consent_and_notices&gt;
- Landlord's consent: Required for any assignment, subletting, or alterations
- Notice requirements: Written notices to specified addresses for each party
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
- Furniture: Not specified
- Parking: No parking facilities provided by Sublessor
- Subletting restrictions: No assignment or subletting without prior written approval from Sublessor
- Signage: Requires Sublessor's written consent
- Insurance: Sublessee required to maintain $1,000,000 liability insurance
- Additional person charge: $95/month for each full-time equivalent person beyond the first occupant
- Telecommunications: Sublessee must purchase telephone and internet services from Sublessor
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease7.txt">
Source: https://www.sec.gov/Archives/edgar/data/1430286/000100201408000262/exh101.htm

EX-10.1 6 exh101.htm OFFICE LEASE
Exhibit 10.1

 

 

EXECUTIVE SUITE
 
OFFICE SUBLEASE AGREEMENT
 
Between
 
CROWN PLAZA EXECUTIVE SUITES CORPORATION, Sublessor
 
and

FUTURE CANADA CHINA ENVIORNMENT, JESSICA CHIANG;
Sublessee and Personal
Guarantor

For Sublease Space:

4th Floor, Crown Plaza Building
  
114 W. Magnolia Street
 
Suite No. 437
  
Bellingham, Washington 98225

 

 

 

 

 

EXECUTIVE SUITEOFFICE SUBLEASE AGREEMENT

     THIS OFFICE SUBLEASE AGREEMENT ("Sublease") is made and entered into this 12th day of March, 2008 by and between CROWN PLAZA EXECUTIVE SUITES CORPORATION (hereinafter "Sublessor) and FUTURE CANADA CHINA ENVIRONMENT INC., JESSICA CHIANG hereinafter "Sublessee").

RECITALS

     A.   Sublessor, as tenant, and Crown Plaza Corporation, a Washington corporation, as landlord, have entered into an Office Lease Agreement dated January 1, 2005, together with all exhibits, amendments and addenda thereto (hereinafter, collectively, the "Master Lease"), which pertains to certain real property located in the City of Bellingham, Washington.

     B.   Sublessor desires to sublease to Subtenant a portion of the Premises in the Building (hereinafter referred to as the "Sublease Space"), as more fully described in Exhibit "B" attached hereto and made a part hereof, on the terms and conditions set forth below.

WITNESSETH:

     FOR AND IN CONSIDERATION of the rents herein reserved and in further consideration of the mutual promises, terms and conditions hereof, the parties hereby agree as follows:

1.      IDENTIFICATION OF PARTIES, BASIC TERMS AND ENUMERATION OF EXHIBITS. (a) Definitions.

It is understood by both parties that wherever in this document the term "Sublessee" appears, its definition is understood to mean "Sublessee and Personal Guarantor".

                   (b) 	Identification of Parties. 	 
 
SUBLESSOR: 	CROWN PLAZA EXECUTIVE SUITES CORPORATION 
ADDRESS OF SUBLESSOR: 	114 W. Magnolia, Suite #400 
 	 	Bellingham, WA 98225 
 	 	Telephone No. (360) 733-0185     
 
SUBLESSEE and GUARANTOR: 	                   FUTURE CANADA CHINA ENVIORNMENT INC.,  
 	 	                   JESSICA CHIANG   
ADDRESS OF SUBLESSEE: 	Business Address: 	114 W. Magnolia St., Suite #437 
 	 	 	Bellingham, WA 98225 
 	 	Telephone No. 	(360) 392-2828 
 	 	Contact Person: 	JESSICA LIANG 
 
 
 	 	 	                                                                                         Sublessee's Initials: JC 
 	 	 	                                                                                         Sublessor's Initials: MLS 

-2-

SUBLESSEE'S FORM Of BUSINESS ORGANIZATION: 	 	 
                   Corporation 	       X 	 	 	 
                   Partnership 	 	 	 	 	 
                   Sole Proprietor 	 	 	 	 	 
                   Spouses Name 	 	 	 	 	 
         (c) 	Basic Terms 	 	 	 	 	 
SUBLEASE SPACE: 	Suite. No. 437 on the FOURTH (4TH) floor of the Building. 	[&amp;2(b)] 
SUBLEASE TERM 	ONE YEAR 	 	 	[&amp;4(a)] 
SUBLEASE COMMENCEMENT DATE: 	MARCH 1, 2008 	 	[&amp;4(a)] 
SUBLEASE TERMINATION DATE: 	FEBRUARY 28, 2009 	[&amp;4(a)] 
BASE RENT: $595.00 	 	 	 	 	[&amp;5(a)] 
RENT COMMENCEMENT DATE: MARCH 1, 2008 (PRORATED) 	[&amp;5(a)] 
TYPE OF BUSINESS USE: 	GENERAL OFFICE 	 	[&amp;6(a)] 
SECURITY DEPORT: 	$595.00 (PAID) 	[&amp;17(a)] See Exhibit D, Start Up Costs 
BROKER'S COMMISSION TO: 	NO BROKER INVOLVED 	[&amp;32(g)] 

         (d)      Enumeration of Exhibits. The exhibits enumerated in this Section and attached to this Sublease are incorporated herein by reference and are to be construed as a part of this Sublease. Each party agrees to perform any obligations on its part stated in any and all such Exhibits:

               Exhibit A: Legal Description
               Exhibit B: Floor Plan of Sublease Space
               Exhibit C: Rules and Regulations
               Exhibit D: Start-Up-Costs
               Exhibit T: Telecommunication Services Agreement

2.      DEMISE; PREMISES AND SUBLEASE SPACE.

          (a)     Description. Sublessor leases from Landlord the fourth (4th) floor (hereinafter the "premises") of that certain real property and improvements located thereon situated in the City of Bellingham,. Washington, as more fully described in the legal description thereof attached hereto and made a part hereof as Exhibit "A" (which real property and improvements are hereinafter collectively referred to as the "Building").

           (b)     Demise and Sublease Space. Sublessor hereby subleases and demises unto Sublessee, and Sublessee hereby subleases from Sublessor and agrees to pay for Executive Suite No. 437 which will hereinafter be referred to as the "Sublease Space," located on the fourth floor of the Building. The floor area of the Sublease Space is generally depicted in cross-hatching on the floor plan attached to the Sublease and made a part hereof as Exhibit "B" (which floor plan is hereinafter referred to as the "Floor Plan").

Sublessee's Initials: JC
Sublessor's Initials: MLS

-3-

        (c)    Use of Premises: All such subtenants shall use the Premises for office purposes only.

      (d)    Master Lease. Sublessee acknowledges that this Sublease is subject to all of the terms and conditions of the Master Lease, and upon expiration or other termination of the Master Lease, all sublease agreements shall automatically terminate and be of no further force and effect. Each sublease agreement shall automatically terminate within 14 days after receipt by Sublessee of written notice from Sublessor that the use of a portion of the Premises is disruptive or interferes with the quiet enjoyment of the Property by other tenants of the Property. If such disruptive or interfering issues continue and have not stopped, in the Sublessor's sole judgment, the sublease shall immediately terminate upon receipt by Sublessee of a second written notice from Lessor that the subtenant's use of a portion of the premises is disruptive or interferes with the quiet enjoyment of the Property by other tenants of the Property. Sublessee shall at all times fully comply with all statutes, ordinances, rules and regulations applicable to such business and the Sublessee=s use or occupancy of the Premises.

3.      COMMON AREAS.

      (a)    Definition. The term "Common Areas" shall mean those areas of the Building and other property leased by Sublessor that are provided and designated by Sublessor from time to time for the general non-exclusive use of Sublessor, Sublessee, other tenants of the Sublessor and the respective employees, suppliers, shippers, customers, clients, invitees and licensees of such parties. Sublessor shall maintain the Common Areas in good order, condition and repair.

      (b)    Sublessee=s Rights. Sublessor hereby grants to Sublessee, for the benefit of Sublessee and its employees, during the Term of this Sublease, the non-exclusive right to use, in common with others entitled to such use, the Common Areas as they exist from time to time, subject to rights reserved by Sublessor to make changes to the Common Areas, to close same temporarily for maintenance purposes and make such other changes in, to or with respect to the Common Areas as Sublessor may, in the exercise of reasonable business judgment, deem to be appropriate, provided, however, that Sublessor shall use its best efforts to minimize interference with Sublessee's use of the Sublease Space in the event Sublessor undertakes such activities and changes.

      (c)    Parking Restrictions. Sublessee understands that Sublessor maintains no parking facilities for Sublessee and that vehicle parking adjacent to the Building is restricted for the exclusive use of customers, clients, business invitees of tenants in the Building, and other persons authorized by Sublessor. Sublessor reserves the right to terminate this parking at any time.

4.     TERM.

      (a)    Term. The Term of this Sublease shall be for a period of TWELVE (12) months, commencing on MARCH 1, 2008 the "Commencement. Date") and ending at midnight on FEBRUARY 28, 2009 ("the Termination Date"), unless sooner terminated pursuant to any provision hereof, or extended pursuant to any Option for such purpose provided in a Rider to this Sublease. See Section 2l of this Sublease.

      (b)    Delay in Possession. Notwithstanding the Commencement Date specified above, if for any reason Sublessor cannot deliver possession of the Sublease Space to Sublessee on said date, this Sublease shall not be void or voidable, the Termination Date shall not be extended, and Sublessor shall not be subject to liability for such delay, but in such case Sublessee shall not be obligated to pay rent for such period until possession of the Sublease Space is tendered to Sublessee. In the event that Sublessor shall not have delivered possession of the Sublease Space within thirty (30) days from the specified Commencement Dame, Sublessee may, at its option, cancelled this Sublease by giving notice to Sublessor in

Sublessee's Initials: JC
Sublessor's Initials: MLS

-4-

writing within ten (10) days thereafter, in which event both parties shall be discharged from all obligations hereunder; otherwise, the Sublease shall remain in full force and effect.

       (c)      Early Possession. If Sublessee occupies the Sublease Space prior to said Commencement Date with the consent of Sublessor, such occupancy shall be subject to all provisions of this Sublease. Such occupancy shall not advance either the Commencement Date or the Termination Date. Unless otherwise provided in writing in this Sublease, Sublessee shall pay rent during any period of Early Possession at the rates established in Section 1(c) and 5 hereof.

5.      RENT.

       (a)    Base Rent. Sublessee covenants and agrees to pay the Sublessor, as rental for said Sublease Space, for the entire term of the Sublease defined in Paragraph 4, without any offset or deduction, on or before the first day of each month, Base Rent in the sum of $595.00 per month. All payments of rent and other sums due hereunder shall be paid to the Sublessor in lawful money of the United States at such place as Sublessor may from time to time designate in writing to Sublessee.

      (b)      Late Payments. In the event Sublessee should fail to pay any installment of rent or any other sum due hereunder within FIVE (5) days of the date upon which such amount is due, Sublessee shall pay to Sublessor as additional rent a late charge equal to 5% of any such sum then due and unpaid and, in addition, Sublessee shall pay to Sublessor interest on said sum at the rate of twelve percent (12%) per annum from the due date of any sum until paid.

6.      BUSINESS PURPOSE/USE.

     The Sublease Space are to be used for the purposes set forth in Section 1(b) of this Sublease and for no other use or purpose without the prior written consent of the Sublessor, which consent shall not be unreasonably withheld, conditioned or delayed. The Sublessee shall at all times fully comply with all statutes, ordinances, rules and regulations applicable to its business conducted on, and the Sublessee's use or occupancy of, the Sublease Space. Sublessee, its agents, invitees, licensees, permittees and employees shall not do, permit or suffer anything to be done in, on or about the Sublease Space which will in any way create a nuisance or obstruct or unreasonably interfere with the right of other tenants or occupants of the Building or the Sublessor. Sublessee shall comply at all times with the Rules and Regulations attached hereto as Exhibit "C".

7.      DEPOSIT.

       (a) Deposit. As partial consideration for the execution of this Sublease, the Sublessee has previously paid the Sublessor the sum of $595.00, the receipt of which is hereby acknowledged.

       (b) Application of Deposit. If the Sublessee shall have fully complied with all of the covenants, agreements, terms and conditions of this Sublease, $485.00 of the above deposit, or so much thereof as remains after payment of sums due Sublessor by Sublessee hereunder, shall be paid to Sublessee within thirty (30) business days after Sublessee vacates the Sublease Space upon the expiration of this Sublease or the earlier termination of this Sublease with the Sublessor's consent. ($110.00, per suite, of the deposit shall be retained by the Sublessor, at the termination of the Sublease, for carpet care and painting.) The deposit may be commingled with other funds of Sublessor and shall not bear interest.

8.      SERVICES AND UTILITIES.

        (a)      Special Services. Sublessor may provide secretarial and administrative services for the benefit of Sublessee, pursuant to the terms of a separate agreement negotiated by the parties for such purpose, at such rates as may be negotiated from time to time. Sublessor agrees to answer Sublessee's business telephone line and to provide Reception Services in the form of greeting and announcing Sublessee's clients during regular business hours.

       (b)      Conference Room. Two conference rooms are available by appointment at no additional charge. Sublessor reserves the right to change which Conference Room is scheduled from time to time.

Sublessee's Initials: JC
Sublessor's Initials: MLS

Sublessor reserves the right to cancel reservations for conference rooms which have not been utilized within 15 minutes of the appointed time.

       (c)    Common Area Utilities. So long as the Sublessee is not in default under any of the provisions of this Sublease, the Sublessor shall furnish telephone service, electricity, heat, air conditioning, lighting, janitor service for the Common Areas, as well as lighting and power for Sublessee's own equipment or for ordinary office machines and equipment for the Sublease Space during ordinary business hours. Sublessor shall not be liable for any injury, damages or costs which may arise or accrue should the furnishing of any of the above services or utilities be prevented or interrupted, for any reason, except to the extent resulting from the intentional or negligent acts or omissions of Sublessor, its agents, employees or contractors, including act by local utility company, fire, accident, strike, riot, act of God, the making of necessary repairs or improvements, governmental action or any other cause beyond the control of Sublessor. Notwithstanding the foregoing, in the event that any utility is interrupted as a result of any act or omission of Sublessor, its agents, employees or contractors, and such interruption continues for more than forty-eight (48) hours and materially and adversely affects the conduct of Sublessee's business operations on the Sublease Space, rent shall abate and, in the event that such interruption shall continue for ten (10) days, Sublessee shall be entitled to terminate this Sublease.

9.      INSURANCE; WAIVER OF SUBROGATION; INDEMNIFICATION.

       (a)    Liability Insurance - Sublessee. Sublessee shall, at Sublessee=s expense, obtain and keep in force during the term of this Sublease a policy of Combined Single Limit Bodily Injury and Property Damage insurance insuring Sublessee and Sublessor against any liability arising out of Sublessee's use, occupancy or maintenance of the Sublease Space and the Building. Such insurance shall be in an amount not less than $1,000,000.00 per occurrence. The limits of said insurance shall not, however, limit the liability of Sublessee hereunder.

       (b)    Insurance Policy. Insurance required hereunder shall be in companies holding a "General Policyholders Rating" of at least B plus, or such other rating as may be required by a lender having a lien on the Sublease Space, as set forth in the most current issue of "Best's Insurance Guide." Sublessee shall not do or permit to be done anything which shall invalidate the insurance policies carried by Sublessor, to the extent written notice of such act or omission is provided to Sublessee. Sublessee shall deliver to Sublessor certificates of insurance evidencing the existence and amounts of such insurance, naming Sublessor, its successors and assigns, as additional insureds with respect to the Sublease Space, within ten (10) days after the Commencement Date of this Sublease or prior to or upon taking occupancy, whichever is sooner. No such policy shall be cancelable or subject to reduction of coverage or other modification except after thirty (30) days prior written notice to Sublessor. Sublessee shall, at least thirty (30) days prior to the expiration of such policies, furnish Sublessor with renewal certificates therefore.

       (c)    Waiver of Subrogation. Neither Sublessor nor Sublessee shall be liable to the other (by way of subrogation or otherwise) or to any insurance company insuring the other party for any loss or damage to any building, structure or other tangible property, or any resulting loss of income, or losses under workers compensation laws and benefits, even though such loss or damage might have been occasioned by the negligence of such party, its agents or employees if any such loss or damage is covered by insurance benefiting the party suffering such loss or damage or was required to be covered by insurance pursuant to this Sublease. Sublessee and Sublessor shall, upon obtaining the policies or insurance required give notice to the insurance carrier or carriers that the foregoing mutual waiver of subrogation is contained in this Sublease.

10.      ASSIGNMENT AND SUBLETTING.

       (a)    No Assignment or Subletting. Sublessee shall not assign this Sublease, or any interest in this Sublease, nor permit the use of the Sublease Space by any person other than the Sublessee, nor sublet said Sublease Space or any part thereof, without the prior written approval of the Sublessor.

Sublessee's Initials: JC
Sublessor's Initials: MLS

-6-

Sublessor may at it's sole discretion, withhold such approval from any proposed assignment or sublease when proposed subtenant is not financially capable, in the sole determination of the Sublessor, of meeting it's commitment under the said sublease, or when the proposed subtenant or assignee is currently a tenant of the Landlord (Sublessor) or has been a tenant of the Landlord (Sublessor) within the previous 6 months.

         (b)    Sublessee's Primary Liability. Notwithstanding the foregoing, no assignment or subletting shall release or relieve the Sublessee from the primary obligation and responsibility of making all payments and performing all obligations at the times and in the manner called for in this Sublease.

11.      ACCEPTANCE, CARE AND SURRENDER OF SUBLEASE SPACE.

         (a)    Acceptance of Sublease Space; Care of Sublease Space. Sublessee has examined the Sublease Space and accepts them in their present condition and will at all times keep the Sublease Space in a neat, clean and sanitary condition, including reasonable care, cleaning and maintenance with respect to the floor covering and window covering within the Sublease Space. Sublessee will, upon receipt of an invoice therefore, promptly reimburse Sublessor for the reasonable replacement cost of any glass of windows and doors in the Sublease Space as may become cracked or broken due to the negligence of the Sublessee. If such glass is cracked or broken due to any other cause, Sublessor shall promptly replace such glass. Sublessee agrees to repair any damage to the Sublease Space arising because of the removal or relocation of its equipment, fixtures or personal property or otherwise caused by Sublessee, its agents, licensees, invitees, employees and/or contractors.

        (b)    Surrender of Sublease Space. Sublessee shall, at the expiration or earlier termination of this Sublease, surrender possession of the Sublease Space to the Sublessor in the condition as accepted hereunder; or, in the event any alterations or improvements approved by Sublessor are made hereafter, then in the condition prior to making the alterations or improvements or at the sole discretion or the Sublessor in the condition in which they shall be after the making of such alterations or improvements, except for ordinary wear and tear, or damage by Sublessor or other occupants of the Building.

12.      ALTERATIONS OR IMPROVEMENTS.

     Sublessee shall not make any alterations, additions, renovations or improvements in or to the Sublease Space, without first obtaining the written consent of the Sublessor, which consent shall not be unreasonably withheld, conditioned or delayed.

13.      ACCESS.

     Sublessee shall have access to the Sublease Space twenty-four (24) hours per day, seven (7) days per week. Upon reasonable prior written notice to Sublessee, the Sublessor and its agents shall have the right to inspect the Sublease Space at all reasonable times during normal business hours and shall have the right to enter the same for purposes of cleaning, repairing, altering, or improving the Sublease Space, or the Building or those portions of the Building located within the Sublease Space which serve other tenants in the Building. Notwithstanding the foregoing, Sublessor may enter the Sublease Space without notice for the purpose of any emergency, provided Sublessor shall notify Sublessee as soon as it is reasonably possible after any such emergency entry. No such entry by Sublessor shall be deemed to be an actual or constructive eviction of the Sublessee. The Sublessee shall not install any new lock or bolt on any door without the Sublessor's prior written consent.

14.      SIGNS OR ADVERTISING.

          (a)    Sublessor's Consent. The Sublessee will not inscribe any inscription or post, place, or in any manner display any sign, notice, picture or poster, or any advertising matter whatsoever anywhere in or about the Premises, Common Areas or the Building, without first obtaining the Sublessor's written consent thereto, such consent not to be unreasonably withheld, conditioned or delayed. Any consent so obtained from Sublessor shall be with the understanding and agreement that Sublessee will remove same at the termination of the tenancy herein created and repair any damage or injury to the Premises or Building caused thereby.

Sublessee's Initials: JC
Sublessor's Initials: MLS

-7-

        (b)    Building Directory. The Sublessor shall at all times maintain in the Building a directory for tenants in the Building, which Sublessor shall cause to be updated at reasonable intervals.

15.     WASTE AND UNLAWFUL USE.

     The Sublessee will not commit or suffer any waste upon the Sublease Space or Building, or disturb the quiet enjoyment of other tenants of said Building by making or suffering any unreasonably objectionable nuisance, undue or unseemly noise or vibration, and will not do or permit to be done in or about the Sublease Space anything which is illegal or unlawful, or which will be dangerous to life or limb, or which will increase any insurance rate upon said Sublease Space or said Building.

16.     SUCCESSORS.

     Subject to the provisions of Sections 10 and 26 hereof, all the covenants, agreements, terms and conditions contained in this Sublease shall apply to and be binding upon the Sublessor and the Sublessee and their respective heirs, executors, administrators, successors, marital communities, if any, and assigns.

17.     TAXES.

     Sublessee shall pay before delinquency any and all taxes, assessments, license fees and public charges levied, assessed or imposed and which shall become payable during the term of this Sublease upon Sublessee's trade fixtures, furniture, equipment and personal property installed or located in the Sublease Space.

18.     LIENS AND ENCUMBRANCES.

        (a)    Liens. The Sublessee shall keep the Sublease Space and the Building free from any liens arising out of any work performed, materials furnished or obligations incurred by the Sublessee.

        (b)    Encumbrances. It is understood and agreed that Sublessee shall have no right to grant any mortgage, assignment, deed of trust, security agreement, financing statement or other document or instrument (hereinafter collectively and individually referred to as a Amortgage@) to secure the payment of any sum or the performance of any obligation, where such mortgage includes the legal description or street address of the Sublease Space, Building or any part thereof.

19.     COST AND ATTORNEY'S FEES.

     If by reason of any default or breach hereunder by either of the parties, it becomes necessary to institute a lawsuit or to commence arbitration, or in the event that either party shall commence such an action to interpret or enforce the terms hereof, then the prevailing party in such lawsuit or arbitration shall be entitled to recover, as part of any such judgment or decision, all such amounts as shall be reasonably incurred by such prevailing party for attorneys' fees and any and all such other costs as shall be reasonably and necessarily incurred in pursuit of such lawsuit or arbitration. This provision shall also apply for the benefit of the prevailing party in any appeal taken therefrom.

20.      NON-WAIVER OF BREACH.

     The failure of either Sublessor or Sublessee to insist upon strict performance of any of the covenants and agreements of this Sublease or to exercise any option therein conferred in any one or more instances, shall not be construed to be a waiver or relinquishment of any such covenant or agreement or option or of any other covenant or agreement or option, but the same shall be and remain in full force and effect.

Sublessee's Initials: JC
Sublessor's Initials: MLS

-8-

21.     HOLDOVER.

        (a)    Holdover Prohibited. Sublessee shall not hold over past the Termination Date without the written consent of the Sublessor. If Sublessee shall, without the written consent of the Sublessor, hold over after the expiration of the Term of this Sublease, if Sublessor elects not to avail itself of its legal remedies for breach, such tenancy shall be for an indefinite period of time on a month-to-month tenancy, which tenancy may be terminated as then provided by the laws of the State.

        (b)    Rent and Terms. During such tenancy, if Sublessor waives breach, the Sublessee shall pay to Sublessor a monthly Rent (together with any and all Additional Rent, and any other payments called for above) equal to one hundred twenty-five percent (125%) of the monthly installment of Base Rent applicable for the month in which the Term hereof expired or was terminated, and be bound by all the other terms, covenants, and conditions of this Sublease, except as modified in this Section 21.

22.     CONDEMNATION; CASUALTY.

        (a)    Right to Terminate. A condemnation of the entire Building or a condemnation of any portion of the Sublease Space occupied by Sublessee shall result in a termination of this Sublease.

        (b)    Award. If part or all of the Sublease Space or Building shall be taken or condemned, all compensation awarded upon such condemnation or taking shall go to the Sublessor and Sublessee shall have no claim thereto, and the Sublessee hereby irrevocably assigns and transfers to the Sublessor any right to compensation or damage to which the Sublessor may be entitled during the term hereof by reason of the condemnation of all, or a part of the Sublease Space; provided, that Sublessor shall promptly notify Sublessee in writing of the pendency of any condemnation proceedings affecting the Building, and the Sublessee shall have the right to receive any award for moving or relocation costs or other awards granted specifically to it.

23.     NOTICES.

     All notices, statements, demands, requests, consents, approvals, authorizations, offers, agreements, appointments, or designations desired or required to be given under this Sublease by either party to the other shall be in writing and shall be sufficiently given if personally hand-delivered to the party to receive the same or if sent by certified mail, return receipt requested, postage prepaid, and addressed to the party to receive the same at the addresses listed in Section 1 of this Sublease, or to such other address as each respective party may designate from time to time by written notice to the other.

24.     SUBORDINATION.

        (a)    Subordination. This Sublease, at Sublessor's option shall be subordinate to any ground lease, mortgage, deed of trust, or any other hypothecation for security now or hereafter placed under the real property or Building of which the Sublease Space are a part and to any and all advances made on the security thereof and to all renewals, modifications, amendments, consolidations, replacements and extensions thereof. As long as Sublessee performs its obligations under this Sublease, no foreclosure nor deed in lieu of foreclosure, nor sale pursuant to the encumbrance, nor any steps taken to enforce the encumbrance, shall disturb Sublessee's right to possession of the Sublease Space or quiet enjoyment thereof.

        (b)    Delivery of Documents. Subject to Section 25 of this Sublease, Sublessee agrees to execute any documents reasonably required to effectuate such subordination or to make this Sublease subordinate to the lien of any ground lease, mortgage, deed of trust, or other security document, as the case may be, and failing to do so within ten (10) days after Sublessee's receipt of a written demand from Sublessor shall give the Sublessor the right to terminate this Sublease for default; provided, however, that such documents do not increase any of Sublessee's obligations nor decrease any of Sublessee's rights hereunder.

Sublessee's Initials: JC
Sublessor's Initials: MLS

-9-

25.     ATTORNMENT.

     In the event of foreclosure or the exercise of the power of sale under any mortgage or deed of trust made by the Sublessor covering the Sublease Space, or in the event of any sale in lieu thereof, the Sublessee shall attorn to the purchaser upon any such foreclosure or sale and recognize such purchaser as the Sublessor under this Sublease, provided said purchaser expressly agrees in writing that, so long as Sublessee is not in default under the Sublease, the Sublessee's possession and occupancy of the Sublease Space shall not be disturbed and said purchaser will thereafter perform all of the obligations of the Sublessor under this Sublease.

26.     SUBLESSEE'S ESTOPPEL CERTIFICATES.

        (a)    General. Sublessee shall, within thirty days after Sublessee's receipt of a written request from Sublessor execute, acknowledge and deliver to Sublessor or its designee a written statement certifying as follows: (i) the date this Sublease was executed, its commencement date if different from the date of execution and the date on which this Sublease expires; (ii) the date the Sublessee entered into occupancy of the Sublease Space; (iii) the amount of Base Rent payable under this Sublease; (iv) the date to which the Base Rent has been paid; (v) that this Sublease is in full force and effect and has not been assigned, modified, supplemented or amended in any way (or specifying the date and terms of agreement so affecting this Sublease); (vi) that this Sublease represents the entire agreement between the parties as to this leasing; (vii) that all conditions under this Sublease to be performed by the Sublessor have been satisfied; (viii) that there are no existing defenses or offsets which the Sublessee has against the enforcement of this Sublease by the Sublessor, (ix) that no rent has been paid more than one month in advance; (x) and that no security has been deposited with Sublessor (or, if so, the amount thereof).

        (b)    Reliance. It is intended that any such statement delivered pursuant to this Section may be relied upon by a prospective purchaser of Sublessor=s interest or a mortgagee of Sublessor's interest or assignee of any mortgage upon Sublessor's interest in the Building.

        (c)    Failure to Respond. If Sublessee shall fail to respond within thirty days of receipt by Sublessee of a written request by Sublessor as herein provided, Sublessee shall be deemed to have given such certificate as above provided without modification and shall be deemed to have admitted the accuracy of any information supplied by Sublessor to a prospective purchaser or mortgagee and that this Sublease is in full force and effect, that there are no uncured defaults in Sublessor's performance, that the security deposit is as stated in this Sublease, and that not more than one month's rent has been paid in advance.

27.     BREACH BY SUBLESSEE.

        (a)    Default. The occurrence of any one or more of the following events shall constitute a default and breach of this Sublease by Sublessee.

(1)    Vacating the Premises. The vacating or abandonment of the Premises by lessee.

(2)    Failure to Pay Rent. The failure by Sublessee to make any payment of Rent, Additional Rent or any other payment required to be made by Sublessee hereunder, as and when due, where such failure shall continue for a period of three (3) days after receipt of written notice thereof by Sublessee.

(3)    Failure to Perform. The failure by Sublessee to observe or perform any of the covenants, conditions or provisions of this Sublease to be observed or performed by the Sublessee, other than described in Section 27(a)(2) above, where such failure shall continue for a period of thirty (30) days after written notice thereof by Sublessor to Sublessee; provided, however, that if the nature of Sublessee's default is such that more than thirty (30) days are reasonably required for its cure, then Sublessee shall not be deemed to be in default if Sublessee commences such cure within said thirty (30) day period and thereafter diligently prosecutes such cure to completion.

Sublessee's Initials: JC
Sublessor's Initials: MLS

-10-

(4) Insolvency. Either (i) the appointment of a receiver to take possession of all or any part of the assets of Sublessee; or (ii) the general assignment by Sublessee for the benefit of creditors, or (iii) any action taken or suffered by Sublessee under any state or federal insolvency or bankruptcy act if such appointment, assignment or action shall not be set aside, vacated, or discharged within thirty (30) days.

(5) Misrepresentation. The discovery by Sublessor that any financial statement given to Sublessor by Sublessee, any assignee of Sublessee, any subtenant of Sublessee, any successor in interest of Sublessee or any guarantor of Sublessee's obligation hereunder, was materially false.

        (b)    Remedies. In the event of a default, Sublessor, besides other rights or remedies that it may have, shall have the right to either terminate this Lease and, at Sublessor=s option, accelerate the unpaid balance of Base Rent owing under this Lease at such time, or from time to time, without terminating this Lease, relet the Premises or any part thereof for the account and in the name of Lessee or otherwise, for any such term or terms and conditions as Lessor in its solo discretion may deem advisable with the right to make alterations and repairs to the Premises. Whether this Lease is terminated or not, Lessee shall pay to Lessor, as soon as ascertained, the costs and expenses incurred by Lessor in obtaining possession of the Premises, reletting, making such alterations and repairs, and/or exercising its rights hereunder which costs and expenses shall include, but not be limited to attorneys' fees (whether or not suit is commenced), real estate commissions, advertising costs and remodeling and/or construction costs, if the Premises are relet, rentals received by Lessor from such reletting shall be applied; (i) to the payment of any indebtedness, other than rent, due hereunder from Lessee to Lessor; (ii) to the payment of the cost of any alterations and repairs to the Premises necessary to return the Premises to good condition, normal wear and tear excepted, for uses permitted by this Lease and the cost of storing any of Lessee's property left on the Premises at the time of reletting; (iii) to the payment of rent due and unpaid hereunder; and the balance, if any, shall be held by Lessor and applied in payment of future rent or damages in the event of termination as the same may become due and payable hereunder and the excess, if any, at the end of the term of this Lease shall be paid to Lessee. Should such rentals received from time to time from such reletting during any month be less than that agreed to be paid during that month by Lessee hereunder, the Lessee shall immediately pay such deficiency to Lessor. Such deficiency shall be calculated and paid monthly.

        (c)    Other Remedies. The Sublessor shall have the right, in addition to the remedies set forth above, to pursue any other remedy now or hereafter available to Sublessor under the laws or judicial decisions of the State of Washington.

28.     REMOVAL OF PROPERTY.

     In the event of any entry in, or taking possession of, the Sublease Space as provided in Section 27 of this Sublease, Sublessor shall have the right, but not the obligation, to remove from the Sublease Space all personal property located therein, and may store the same in any warehouse selected by Sublessor, at the expense and risk of the owners of such personal property, with the right to sell such stored property, upon written notice to Sublessee, in compliance with the laws of the State of Washington, and the proceeds of such sale to be applied first to the cost of such sale, second to the payment of the charges for storage, if any, and third to the payment of any other sums of money which may then be due from Sublessee to Sublessor tinder any of the terms hereof, with the balance, if any, to be promptly paid to Sublessee.

29.     DEFAULT BY SUBLESSOR.

     Sublessor shall not be in default unless Sublessor fails to perform obligations required of Sublessor within a reasonable time, but in no event later than thirty (30) days after written notice by Sublessee to Sublessor and to the holder of any first mortgage or deed of trust covering the Sublease Space and/or Building whose name and address shall have theretofore been furnished to Sublessee in writing. Said notice shall specify wherein Sublessor has failed to perform such obligation; provided, however, that if the nature of Sublessor's obligation is such that more than thirty (30) days are required

Sublessee's Initials: JC
Sublessor's Initials: MLS

-11-

for performance, then Sublessor shall not be in default if Sublessor commences performance within such thirty (30) day period and thereafter diligently prosecutes the same to completion. Sublessee further agrees not to invoke any of its remedies under this Sublease until said thirty (30) days have elapsed. In no event shall Sublessee have the right to terminate this Sublease, or abate the rent or credit or offset damages against the rent provided for in this Sublease, as a result of Sublessor's default and Sublessee's remedies shall be limited to damages and/or an injunction. Except as otherwise provided herein, in no event shall Sublessor have the right to terminate this Sublease if Sublessee. fails to occupy the Sublease Space during all or any portion of the term of the Sublease: provided, however, that Sublessee is not in default beyond any applicable grace period or cure period.

30.     SUBLESSOR'S ADDITIONAL COVENANTS.

        (a)    Quiet Enjoyment. Sublessee shall have quiet possession and enjoyment of the Sublease Space during the term hereof and any extension or renewal thereof. This provision is subject to the lease stipulations between the building owners and the Lessor.

        (b)    Maintenance, Structural Repairs. During the term hereof, Sublessor shall carry out all necessary maintenance and structural repairs to the Building in which the Sublease Space are situated.

        (c)    Taxes. Sublessor shall pay or cause to be paid any municipal or other real property taxes in respect of the Building and land in and on which the Premises are situated apart from such taxes required to be paid by the Sublessee under Section 17 of this Sublease.

31. MISCELLANEOUS.

        (a)    Headings. The paragraph and section headings hereof are for convenience purposes only and shall not be used to expand or interpret the meaning of any part of this Sublease.

        (b)    Time.    Time is of the essence hereof.

        (c)    Severability. If any portion of this Sublease shall be deemed void, illegal or unenforceable, the balance of this Sublease shall not be affected thereby.

        (d)    Law. This Sublease shall be interpreted under the laws of the State of Washington.

        (e)    Jurisdiction. The parties agree that the Superior Court of the State of Washington for Whatcom County, shall have sole jurisdiction over any question, claim, loss or injury arising hereunder which is not specifically made subject to arbitration under the terms of this Sublease.

        (f)    Acceptance of Keys. The acceptance of keys to the Sublease Space by the Sublessor, its agents, employees, contractors or any other person on Sublessor's behalf shall not be deemed or constitute a termination of this Sublease unless such termination is evidenced in writing signed by the Sublessor.

        (g)    Broker's Commission. Each party hereby represents and warrants to the other that no real estate broker's, salesman's or finder=s fees, commissions or other compensation are due, or will arise, by reason of this transaction except for a commission due (No Broker Involved) which will be paid by Sublessee and each party hereby indemnifies and holds the other harmless from and against any other such fees, commissions and/or compensation which are due, or claimed to be due, by reason of this transaction and arise, or are claimed to arise, by reason of some agreement, arrangement, contract or relationship between the indemnifying party and some other broker, salesman, finder or other person or entity.

32.     ADDITIONAL PERSON

     One person (the tenant/lessee) shall occupy each suite (office). Should the Sublessee wish to allow an office to be used by more than the one full-time equivalent that occupancy shall only be with the written permission of the Landlord (Sublessor) and, if written permission is granted, an ADDITIONAL PERSON CHARGE shall apply and shall be prorated based on a percentage of a full time equivalent. That charge is $95.00 per person per month per full time equivalent.

 


33.     TELEPHONE

     Sublessee acknowledges that it will purchase telephone services from Sublessor. Sublessor agrees to sell Sublessee Telecommunication Services for its use at rates published in the Telephone Service Agreement (Exhibit T). Sublessee agrees that Crown Plaza Executive Suites Corporation will be the sole provider of Telecommunication Services including Internet Access for all lessees in the Crown Plaza Executive Office Suites.

34.     HIRING OF CROWN PLAZA EXECUTIVE OFFICE SUITES EMPLOYEES/STAFF.

     Sublessee understands that Sublessor has incurred substantial time and expenses to obtain personnel for its support services staff. Sublessee agrees not to offer to hire or employ any of the Sublessor's employees/staff. In the event that Sublessee should hire or attempt to hire any of the Sublessor's employees/staff, Sublessee agrees that such offer of employment or hiring of any such employee will constitute a material breach of this Sublease and that such breach shall constitute grounds for the immediate termination of this Sublease. Sublessor=s employees/staff includes all employees of the Sublessor during the period of their employment with Sublessor and for a period of one hundred eighty (180) days thereafter.

35.     GUARANTEE.

     Any Guarantor of this Sublease hereby unconditionally, absolutely and irrevocably guarantees payment to the Sublessee of all liabilities, including loans, owing by Sublessee, which will or may arise pursuant to the terms of this Sublease Agreement, together with interest thereon. The Sublessee shall not be bound to exhaust its recourse nor to take any action against the Sublessee or other parties or on any collateral it may hold before being entitled to payment by the Guarantor of all amounts hereby guaranteed, but may make such demands and take such action as it deems advisable. Notice of default on the part of the Borrower is hereby waived; and the Guarantor agrees to remain bound notwithstanding any permitted assignment of the Sublease, or any extensions or renewals thereof or of any separate indebtedness owing by Sublessee or any part thereof. The Guarantor represents that its economic interests are benefited by the Sublease and/or by any other financial accommodations provided by Sublessor to said Sublessee, whether by subsidiary or affiliate relationships or by trade relationship with Sublessee and that Guarantor is well informed as to the Sublessee's financial condition and will keep so informed without dependence on the Sublessor for any present or future information on the Sublessee's financial condition. If this guaranty be referred to an attorney for enforcement or for collection, the Guarantor agrees to pay the costs and expenses of such action including reasonable attorney's fees and whether or not suit is commenced.

36.     RIDERS.

     The riders, schedules, addenda and exhibits, if any, attached hereto, are made a part of this Sublease by reference.

 

 

 

 

 

 

Sublessee's Initials: JC
Sublessor's Initials: MLS

 

-13-

     IN WITNESS WHEREOF, the Sublessor and Sublessee have signed their names and affixed their seals the day and year first above written.

SUBLESSOR
CROWN PLAZA EXECUTIVE SUITES CORPORATION

By 	MICHAEL L. SANDILAND 
Printed Name 	MICHAEL l. SANDILAND 
Its 	President 	  	  
  
Date 	3/12/08 	  	  
  
STATE OF WASHINGTON 	) 	 
  	  	) 	ss 
COUNTY OF WHATCOM 	) 	 

     I certify that I know or have satisfactory evidence that MICHAEL L. SANDILAND signed this instrument as the PRESIDENT of CROWN PLAZA EXECUTIVE SUITES CORPORATION, Sublessor, and acknowledged it to be the free and voluntary act of such party for the uses and purposes mentioned in the instrument.

     Dated: March 12, 2008

STATE OF WASHINGTON
NOTARY SEAL OF
Victoria L. Moorman
Expiration: 09-07-11
Applied

VICTORIA L. MOORMAN
NOTARY PUBLIC in and for the
State of Washington.
My Commission Expires 09/07/2011


 

 

 

 

 

 

 

 

 

 

Sublessee's Initials: JC
Sublessor's Initials: MLS

-14-

SUBLESSEE AND GUARANTOR:
FUTURE CANADA CHINA ENVIORNMENT, JESSICA LIANG

BY 	JESSICA CHIANG 	 	 
Printed Name      	JESSICA LIANG 	 	 
 
Date 	March 12, 2008 	 	 
 
 
STATE OF WASHINGTON 	) 	 
 	 	) 	ss 
COUNTY OF WHATCOM 	) 	 

     I certify that I know or have satisfactory that Jessica Chiang signed this instrument as the President, Sublessee, and acknowledged it to be his free and voluntary act for the uses and purposes mentioned in the instrument.

Dated: March 12, 2008

STATE OF WASHINGTON
NOTARY SEAL OF
Victoria L. Moorman
Expiration: 09-07-11
Applied

VICTORIA L. MOORMAN
NOTARY PUBLIC in and for the
State of Washington.
My Commission Expires 09/07/2011


 

 

 

 

 

 

 

 

 

 

Sublessee's Initials: JC
Sublessor's Initials: MLS

-15-


</file>
<file name="skills/summarization/data/sample-lease8-summary.txt">
Description: Commercial sublease agreement for office and light manufacturing space in Dublin, CA
&lt;parties_involved&gt;
Sublessor: The Titan Corporation, a Delaware corporation
Sublessee: SureBeam Corporation, a Delaware corporation
Original Lessor: B/G Management
&lt;/parties_involved&gt;

&lt;property_details&gt;
Address: 6780 Sierra Court, Suite R, Q, L, and O, Dublin, CA
Description: Approximately 35,825 rentable square feet
Permitted Use: General office and light electronic manufacturing
&lt;/property_details&gt;

&lt;term_and_rent&gt;
Start Date: August 2, 2002
End Date: January 31, 2005
Monthly Base Rent:
$25,534.57 initially
$26,378.69 from 8/1/03
$27,350.65 from 8/1/04
Security Deposit: As set forth in Section 3.03 of the Master Lease
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Subtenant responsible for any increases or added costs arising from their tenancy
- Maintenance: Subtenant responsible for maintenance and repair of the Subleased Premises
- Repairs: Sublandlord not responsible for repairs to building structure, major systems, or exterior
&lt;/responsibilities&gt;
&lt;consent_and_notices&gt;

Landlord's Consent: Required for sublease (consent form included)
Notice Requirements:

To Sublandlord: The Titan Corporation, 3033 Science Park Road, San Diego, CA 92122
To Subtenant: SureBeam Corporation, 9276 Scranton Road, Suite 600, San Diego, CA 92121
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
Furniture: Not specified
Parking: Not specified
Subletting Restrictions: Subtenant prohibited from assigning or subletting without prior written consent of Master Landlord and Sublandlord
Insurance: Subtenant required to obtain insurance as specified in Section 4.04 of the Master Lease
Alterations: Subtenant prohibited from making alterations without prior written consent of Master Landlord and Sublandlord
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease8.txt">
Source: https://www.sec.gov/Archives/edgar/data/32258/000003225802000065/sl_dublin2.pdf

SUBLEASE AGREEMENT
THIS SUBLEASE AGREEMENT (“Sublease”) is entered into as of this 2nd day of August,
2002, by and between The Titan Corporation, a Delaware corporation (“Sublandlord”), and SureBeam
Corporation, a Delaware corporation (“Subtenant”).
RECITALS
A. Sublandlord is the tenant under that certain Lease by and between B/G Management, as
landlord (“Master Landlord”), and Sublandlord, as tenant, dated July 26, 1999 and as modified by
Addendum dated July 26, 1999 (such lease, as it may be amended from time to time, the “Master
Lease”), for certain space located at 6780 Sierra Court, Suite R, Q, L, and O, Dublin, CA (the
“Premises”).
B. Subtenant wishes to sublease the Premises from Sublandlord.
Now, therefore, for good and valuable consideration, the receipt and sufficiency of which are
hereby acknowledged, the parties hereby agree as follows:
1. Basic Sublease Information.
The information set forth in this Section (the “Basic Sublease Information”) is intended
to supplement and/or summarize the provisions set forth in the balance of this Sublease. Each
reference in this Sublease to any of the terms set forth below shall mean the respective information set
forth next to such term as amplified, construed or supplemented by the particular Section(s) of the
Sublease pertaining to such information. In the event of a conflict between the provisions of this
Section and the balance of the Sublease, the balance of the Sublease shall control.
Sublandlord: The Titan Corporation, a Delaware corporation
Sublandlord’s Address
for Notices:
The Titan Corporation
3033 Science Park Road
San Diego, CA 92122
Attn: Real Estate
(858) 552 - 9500
Subtenant: SureBeam Corporation, a Delaware corporation
Subtenant’s Address
for Notices:
SureBeam Corporation
9276 Scranton Road
Suite 600
San Diego, CA 92121
Attn: Jerry Nelson
(858) 795-6234
\\\MC - 83591/38 - #205675 v1 
Subleased Premises: Approximately 35,825 rentable square feet, known as Suites R, Q,
L, and O of the Premises as described on Exhibit A.
Building: 6780 Sierra Court, Dublin, CA
Permitted Use: As specified in Section 1.06 of the Master Lease as general office
and light electronic manufacturing.
Base Rent: Twenty-five Thousand Five Hundred Thirty-four Dollars and Fiftyseven Cents ($25,534.57) per month (except for any partial month
during the term of this Sublease, in which case Base Rent for such
month shall be pro-rated based on the number of days in that
month), escalating as follows:
8/1/03 - $26,378.69 per month / $316,544.28 per year
8/1/04 - $27,350.65 per month / $328,207.80 per year
Commencement Date: The term of the Sublease shall commence on August 2, 2002 (the
“Commencement Date”).
Expiration Date: The Expiration Date shall be January 31, 2005, or such earlier date,
if any, on which the Master Lease is terminated or expires or this
Sublease is terminated pursuant to the terms herein.
Subtenant’s Insurance: Specified and as required in Section 4.04 of the Master Lease.
Security Deposit: As set forth in Section 3.03 of the Master Lease and Section 14
herein.
2. Sublease.
Sublandlord hereby subleases to Subtenant, and Subtenant hereby subleases from
Sublandlord, the Subleased Premises upon all of the terms, covenants and conditions in this Sublease.
3. Delivery Condition.
Subtenant acknowledges that it takes possession of the Subleased Premises in its “as is”
condition, and further acknowledges that Sublandlord has made no representations or warranties of any
kind or nature, whether express or implied, with respect to the Subleased Premises, the remainder of
the Premises, the common areas, or the Building, nor has Sublandlord agreed to undertake or perform
any modifications, alterations, or improvements to the Subleased Premises, the remainder of the
Premises, the common areas or the Building which would inure to Subtenant’s benefit.
4. Term.
4.1 Term. The term (the “Term”) of this Sublease shall commence on the
Commencement Date, and shall end on the Expiration Date.
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-2-
4.2 Surrender. Subtenant shall, on or before the Expiration Date, remove all
personal property, furniture, trade fixtures and other equipment, provided that the removal of the same
does not adversely affect the Building structure or any Building operating system or is not prohibited
by the Master Lease, and that Subtenant promptly repairs any damage to the Building structure or its
operating systems caused by such removal pursuant to the requirements of the Master Lease. In the
event that Subtenant fails to remove any such items as required by this Section 4.2 by the Expiration
Date, all such items remaining on the Subleased Premises after the Expiration Date shall be deemed
abandoned and Sublandlord may dispose of such items as it sees fit, without liability to Subtenant.
Subtenant shall also be responsible for the removal, on or before the Expiration Date, of all alterations
as required under the Master Lease installed by Subtenant pursuant to this Sublease and shall be
responsible for any associated repair or restoration of the Subleased Premises required under the
Master Lease. In all other respects, Subtenant shall deliver the Subleased Premises broom clean, in its
condition as of the Commencement Date, reasonable wear and tear and casualty excepted. In no event
shall Subtenant remove any of the plumbing, electrical, data lines, and HVAC system(s), except as
otherwise required pursuant to this Section 4.2.
Subtenant shall vacate and deliver possession of the Subleased Premises free of all
liens, charges or encumbrances resulting from any act or omission on Subtenant’s part, and free and
clear of any and all violations of any law, rule or regulation of any federal, state, municipal or other
agency or authority by reason of Subtenant’s actions or failures to fulfill any of its obligations under
this Sublease (“Violations”). Subtenant shall indemnify Sublandlord against any and all loss, expense,
damage, costs or attorneys’ fees arising out of Violations occurring any time on or after the
Commencement Date. The voluntary or other surrender of this Sublease by Subtenant, or a mutual
cancellation thereof, shall not automatically terminate any sub-subleases or sub-subtenancies or other
agreements by which Subtenant has granted rights to third parties to all or any part of the Subleased
Premises, but shall, at the option of Sublandlord, either (1) terminate all or any existing sub-subleases
or sub-subtenancies or such other agreements, or (2) operate as an assignment to Sublandlord of any or
all such sub-subleases or sub-subtenancies or such other agreements.
4.3 Holding Over. If Subtenant remains in possession of the Subleased Premises
after the Expiration Date, such occupancy shall constitute a tenancy at sufferance, and Subtenant shall
be obligated to pay 125% of the rental installments as specified in Section 5 of this Sublease and
Subtenant shall be liable to Sublandlord for any and all claims, damages, liabilities, costs and expenses
(including attorneys’ fees and expenses) incurred by Sublandlord and arising out of Subtenant’s failure
to timely surrender the Subleased Premises in accordance with the requirements of this Sublease,
including, without limitation those incurred by Sublandlord arising under the Master Lease.
5. Rent.
As used in this Sublease, the term “Rent” shall include (1) Base Rent and (2) all other
amounts which Subtenant is obligated to pay under the terms of this Sublease.
5.1 Rent. Base Rent is as specified in Section 1 (Basic Sublease Information). Base
Rent shall be paid by Subtenant to the Master Landlord for the Sublandlord as set forth in Sections 3
and 4 of the Master Lease and as subsequently amended or modified.
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-3-
 Subtenant shall also be solely responsible for any and all increases in Rent or any added
cost or charge which has arisen solely because of Subtenant’s tenancy in the Subleased Premises, 
including, without limitation, any and all heat, water and sewer charges, electric and other utility
charges, as well as any other service charges required by the Master Lease and relating to the
Subleased Premises and/or Subtenant’s occupation thereof that are not already then covered by the
Base Rent (as defined in the Master Lease), Operating Expenses (as defined in the Master Lease) or
Tax Expenses (as defined in the Master Lease) passed through to Sublandlord under the Master Lease.
 5.2 [INTENTIONALLY OMITTED]
5.3 Manner of Payment. All Rent or other payment due from Subtenant to
Sublandlord hereunder shall be paid in lawful money of the United States, without any prior demand
therefor and without any deduction or setoff whatsoever, at the Masterlandlord’s address pursuant to
Section 3.01 of the Master Lease or such other place as Sublandlord and/or Master Landlord shall from
time to time designate (including, without limitation, by wire transfer of immediately available funds
to an account specified by Sublandlord) by written notice provided to Subtenant at least five (5) days
prior to the date on which such Rent or other amount first becomes payable.
6. Use and Compliance With Laws.
Subtenant shall use the Subleased Premises for the Permitted Use (as specified in the
Basic Sublease Information) during the Term of this Sublease, and for no other use or uses. Subtenant
shall not engage in any activities prohibited by the Master Lease. Subtenant shall not use or store
flammable or hazardous materials on the Subleased Premises, except to the extent normally used in the
ordinary course of business with respect to the Permitted Use unless such materials are specifically
prohibited in the Lease. Subtenant shall not perform any act or carry on any practice which may injure
the Subleased Premises or cause any offensive odors or noises that constitute a nuisance or menace to
any other tenant or tenants of the Building or the Premises or other persons, and in no event shall any
noises or odors be emitted from the Subleased Premises. Nothing shall be done upon or about the
Subleased Premises which shall be unlawful, improper, or contrary to any law, ordinance, regulation or
requirement of any public authority or insurance inspection or rating bureau or similar organization
having jurisdiction and Subtenant shall be in compliance at all times with all such laws, ordinances,
regulations and requirements. Subtenant shall observe and comply with, and shall cause its employees,
agents and invitees to observe and comply with the restrictions set forth in this Sublease. Subtenant
agrees to comply with all rules and regulations that Master Landlord has made or may hereafter from
time to time make for the Building and/or the Premises. Sublandlord shall not be liable to Subtenant or
any party claiming through Subtenant in any way for damage caused by the failure of any of the other
tenants of the Building to comply with such similar or other covenants in their leases or of such rules
and regulations.
7. Insurance.
 Subtenant shall obtain at its sole expense the insurance required under Section 4.04 of
the Master Lease effective as of the Commencement Date. Additionally, Subtenant shall name
Sublandlord and Master Landlord as additional insureds, in their capacity as Master Landlord and
Sublandlord, and shall furnish Sublandlord on or before the Commencement Date with certificates of
insurance from its insurer, with respect to such insurance, which certificates shall state that such
insurance shall not be cancelled unless thirty (30) days prior written notice shall have been given to
Master Landlord and Sublandlord.
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-4-
8. Assignment and Subletting.
Subtenant shall not directly or indirectly, voluntarily or by operation of law, sell, assign,
encumber, pledge or otherwise transfer or hypothecate any of its interest in or rights with respect to the
Subleased Premises or Subtenant’s leasehold estate hereunder (collectively, “Assignment”), or permit
all or any portion of the Subleased Premises to be occupied by anyone (whether pursuant to a license,
concession or otherwise) other than Subtenant or sublet all or any portion of the Subleased Premises,
without the prior written consent of Master Landlord and Sublandlord.
9. Alterations.
Subtenant shall not make or suffer to be made any alterations, additions or
improvements to the Subleased Premises, including, without limitation, those related to electrical
cabling and/or systems, plumbing, data cabling, HVAC systems, or modifications to existing finishes,
without the prior written consent of Master Landlord, as required under the Master Lease, and of
Sublandlord. Additionally, Subtenant shall be subject to the standards for repairs and alterations set
forth in the Master Lease
10. Repairs and Maintenance.
10.1 Subtenant’s Responsibility. Subtenant shall be responsible for the maintenance
and repair of the Subleased Premises in accordance with the provisions of the Master Lease.
10.2 Sublandlord’s Responsibility. As between the parties to this Sublease,
Sublandlord shall have no responsibility or liability to the Subtenant or anyone claiming through
Subtenant, for the Subleased Premises including, without limitation, the roof, roof covering,
foundation, subfloors, building structural components, major building systems (plumbing, electrical
and heating, air conditioning and ventilation systems), and exterior walls of the Subleased Premises.
11. Default.
Subtenant shall be subject to the same default provisions as specified in Article 10 of
the Master Lease as if it were the tenant thereunder, and Sublandlord shall have all the remedies
specified therein, as if it were Master Landlord, including, without limitation, the right to terminate the
Sublease and right to perform Subtenant’s obligations under this Sublease at Subtenant’s cost.
Notwithstanding the foregoing, Subtenant shall only be entitled to one-half (1/2) of the cure period for
a default, if any, provided for under the Master Lease.
12. Indemnity.
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-5-
In addition to such indemnities as may be provided for in the Master Lease, Subtenant
agrees to indemnify and hold Sublandlord and its affiliates, officers, agents, servants, employees and
independent contractors (individually a “Sublandlord Party” and collectively, “Sublandlord Parties”)
harmless against all loss, damage, liability, or expense suffered or claimed against any Sublandlord
Party, by any person or entity (i) caused by or otherwise arising from, in whole or in part, any breach
or default by Subtenant of any covenant or obligation it has hereunder (including but not limited to all
covenants or obligations of the tenant under the Master Lease assumed by Subtenant pursuant to the
terms of this Sublease), or (ii) caused by or in connection with anything owned or controlled by 
Subtenant, or (iii) resulting from any act, failure to act, or negligence of Subtenant or its employees,
agents or invitees, or (iv) resulting from any nuisance suffered on the Subleased Premises, except for
damage or injury to third parties or property resulting from the proven gross negligence of
Sublandlord, Landlord or their respective employees, agents, representatives, successors or assigns.
Subtenant further agrees to indemnify Sublandlord and hold Sublandlord harmless from all losses,
damages, liabilities and expenses which Sublandlord may incur, or for which Sublandlord may be
liable to Master Landlord, arising from the acts or omissions of Subtenant which are or are alleged to
be defaults of Sublandlord under the Master Lease or are the subject matter of any indemnity or hold
harmless of Sublandlord, as tenant, to Master Landlord under the Master Lease. The obligations of
Subtenant to indemnify Sublandlord and/or the Sublandlord Parties and/or hold the Sublandlord and/or
the Sublandlord Parties harmless in this Section 12 and elsewhere herein shall survive the expiration or
other termination of this Sublease.
13. Master Lease.
13.1 Master Lease. Notwithstanding anything in this Sublease to the contrary, the
rights of Subtenant shall be subject to and limited by the terms and conditions contained in the Master
Lease between Sublandlord and Master Landlord as applicable to tenant thereunder, as they may be
amended from time to time. Sublandlord shall have the right to amend the Master Lease from time to
time without the consent of Subtenant provided that any such amendment shall not adversely affect
Subtenant’s ability to continue its then current operations in the Subleased Premises, increase any of
the rental or other payments required to be made by Subtenant hereunder or otherwise materially and
adversely change Subtenant’s rights and obligations hereunder. Sublandlord shall endeavor to give
Subtenant notice of any amendment to the Master Lease, but the failure to give such notice shall not
affect the validity of such amendment or its applicability to Subtenant, except that Subtenant shall have
no obligation to comply with the terms of any such amendment until it has received a copy. Any rights
granted to Subtenant herein which are limited by the Master Lease shall be deemed to be so limited by
this Sublease.
13.2 No Violation. Notwithstanding anything in this Sublease to the contrary,
Subtenant shall not commit or permit to be committed any act or omission which shall violate any term
or condition of the Master Lease. Subtenant shall indemnify and hold harmless Sublandlord from and
against any loss, liability, claim, cost or expense (including reasonable attorneys’ fees) incurred by
Sublandlord as a result of any termination or attempted termination by Sublandlord or Master Landlord
of the Master Lease resulting from any such act or omission by Subtenant.
13.3 [INTENTIONALLY OMITTED]
13.4 Termination of Master Lease. If the Master Lease terminates for any reason
prior to the expiration or other termination of this Sublease, this Sublease shall terminate concurrently
therewith without any liability of Sublandlord to Subtenant and, except for any Subtenant obligations
hereunder arising on or prior to the termination of this Sublease, following Subtenant’s surrender in
compliance with Section 4.2 hereof, Subtenant’s obligations hereunder shall terminate, except with
respect to any indemnification or hold harmless obligations of Subtenant, which shall survive such
termination.
13.5 Incorporation of Master Lease. Notwithstanding any other provision of this
Sublease to the contrary, this Sublease and Subtenant's rights under this Sublease shall at all times be
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-6-
subject to all of the terms, covenants, and conditions of the Master Lease (a copy of which agreement,
as currently in effect, Subtenant hereby represents that it has received), with the same force and effect
as if fully set forth herein, and except as otherwise expressly provided for herein, Subtenant shall keep,
observe and perform or cause to be kept, observed and performed, faithfully all those terms, covenants
and conditions of Sublandlord as tenant under the Master Lease with respect to the Subleased
Premises. Except as otherwise provided hereby, the terms, conditions, rights and responsibilities of the
Master Lease are incorporated herein by reference, and Sublandlord shall have the rights and
responsibilities with respect to the Subtenant that the Master Landlord has with respect to Sublandlord
pursuant to the Master Lease, and Subtenant shall have the rights and responsibilities with respect to
Sublandlord that Sublandlord has with respect to the Master Landlord pursuant to the Master Lease.
However, to the extent that the Master Lease requires or obligates Master Landlord to maintain, repair,
restore, or otherwise expend any money or take any action to preserve and maintain all or any portion
of the Subleased Premises or to furnish any services to the Subleased Premises, such obligation shall
not pass to Sublandlord by reason of this Sublease and shall remain with the Master Landlord. Subject
to the first sentence of this Section 13.5, with respect to the relationship between the Sublandlord and
the Subtenant, the terms, covenants and conditions of this Sublease shall control with respect to any
conflict or inconsistency between the terms, covenants and conditions contained herein and the terms,
covenants and conditions of the Master Lease.
14. Security Deposit.
Sublandlord and Subtenant hereby acknowledge that Subtenant has tendered payment
and shall continue to tender payment of the Security Deposit as set forth in Section 3.03. of the Master
Lease. Upon expiration of the Master Lease, Sublandlord shall forward payment to Subtenant within
thirty (30) days of receipt from Masterlandlord any refunded Security Deposit amounts it has received
pursuant to Section 3.03. of the Master Lease.
15. Brokers.
Subtenant represents that it has dealt with no broker or agent in connection with this
Sublease and Subtenant shall hold Sublandlord harmless from any and all liability, loss, damage,
expense, claim action, demand, suit or obligation arising out of or relating to a breach by Subtenant of
such representation.
16. Counterparts.
This Sublease may be executed in one or more counterparts, each of which shall
constitute one and the same instrument.
17. Governing Law.
This Sublease shall be governed by and construed and enforced in accordance with the
laws of the State of California, except with respect to the choice-of-law provisions thereof.
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-7-
18. Waivers; Amendments.
No failure or delay by any party hereto in exercising any right, power or privilege
hereunder shall operate as a waiver thereof, nor shall any single or partial exercise thereof preclude any
other or further exercise thereof or the exercise of any other right, power or privilege. The rights and
remedies provided herein shall be cumulative and not exclusive of any rights or remedies provided by
law. Any provision of this Sublease may be waived if, but only if, such waiver is in writing and is
signed by the party against whom the enforcement of such waiver is sought. No waiver of any
provision of this Sublease, in any one or more instances, shall be deemed to be, or construed as, a
further or continuing waiver of any such provision. This Sublease may not be amended, modified or
supplemented other than by a written instrument signed by each party hereto.
19. Entire Agreement.
This Sublease constitutes the entire agreement and understanding among the parties
hereto and supercedes any and all prior agreements and understandings, written or oral, relating to the
subject matter hereof.
20. Severability.
Any term or provision of this Sublease which is invalid or unenforceable in any
jurisdiction shall, as to such jurisdiction, be ineffective to the extent of such invalidity or
unenforceability without rendering invalid or unenforceable the remaining terms and provisions of this
Sublease or affecting the validity or enforceability of any of the terms or provisions of this Sublease in
any other jurisdictions, it being intended that all rights and obligations of the parties hereunder shall be
enforceable to the fullest extent permitted by law.
[Signature page follows]
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-8-
IN WITNESS WHEREOF, this Sublease shall be deemed to have been executed and delivered
as of the date first set forth above.
SUBLANDLORD:
THE TITAN CORPORATION,
a Delaware corporation
By:
Name:
Title:
SUBTENANT:
SureBeam Corporation,
a Delaware corporation
By:
Name:
Title:
\\\MC - 83591/38 - #205675 v1 
LANDLORD’S CONSENT TO SUBLEASE
The undersigned ("Landlord"), Landlord under the Master Lease, hereby consents to the foregoing
Sub-sublease without waiver of any restriction in the Master Lease concerning further assignment
or subletting. Landlord certifies that, as of the date of Landlord's execution hereof, Sublessor is not
in default or breach of any of the provisions of the Master Lease, and that the Master Lease has not
been amended or modified except as expressly set forth in the Sublease and foregoing Subsublease.
Lessor: ________ .
By:
Title:
Date:_______________________________________
U:\EDGAR\8k Cr with SureBeam\Sublease6780 sierra court suite rq l.docW:\realestate\locations\dublin, ca\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse\dublin,ca - 6780 sierra court, suite r,q, l, o- sblse
8-2-02.doc
-10-
EXHIBIT A
DESCRIPTION OF PREMISES
[See attached.]
\\\MC - 83591/38 - #205675 v1 
</file>
<file name="skills/summarization/data/sample-lease9-summary.txt">
Description: Commercial sublease agreement for data center space in Santa Clara, CA

&lt;parties_involved&gt;
- Sublessor: Sprint Communications Company, L.P., a Delaware limited partnership
- Sublessee: Equinix Operating Co., Inc., a Delaware corporation
- Original Lessor: Duane Raymond, LLC, a California limited liability company
&lt;/parties_involved&gt;

&lt;property_details&gt;
- Address: 1350 Duane Avenue, Santa Clara, California
- Description: 160,000 square feet of space in and around the building
- Permitted Use: As specified in the Master Lease (not explicitly stated in sublease)
&lt;/property_details&gt;

&lt;term_and_rent&gt;
- Start Date: December 1, 2003 (referred to as "Closing Date" and "Commencement Date")
- End Date: September 29, 2014
- Monthly Base Rent: 
  - First 2 years: [CONFIDENTIAL AMOUNT] payable by Sublandlord under Master Lease
  - Remainder of term: [CONFIDENTIAL AMOUNT] payable by Sublandlord under Master Lease
- Security Deposit: Not specified
&lt;/term_and_rent&gt;

&lt;responsibilities&gt;
- Utilities: Subtenant responsible for any increases or added costs arising from their tenancy
- Maintenance: Subtenant responsible for maintenance and repair of the Subleased Premises as required by Master Lease
- Repairs: Sublandlord not responsible for repairs to building structure, major systems, or exterior
&lt;/responsibilities&gt;

&lt;consent_and_notices&gt;
- Landlord's Consent: Required for sublease (consent form included as Exhibit C)
- Notice Requirements:
  - To Sublandlord: Sprint Communications Company, L.P., 6200 Sprint Parkway, KSOPHF 0302-3B679, Overland Park, KS 66251
  - To Subtenant: Equinix Operating Co., Inc., 301 Velocity Way, 5th Floor, Foster City, CA 94404
&lt;/consent_and_notices&gt;

&lt;special_provisions&gt;
- Furniture: Not specified
- Parking: Subtenant has right to use Tenant's Allocated Parking Stalls within the Project
- Subletting Restrictions: Subtenant prohibited from assigning or subletting without prior written consent of Master Landlord and Sublandlord
- Insurance: Subtenant required to maintain insurance as specified in Section 9.1 of the Master Lease
- Alterations: Subtenant prohibited from making alterations without prior written consent of Master Landlord and Sublandlord
- Other: 
  - Accompanying agreements include Employee Covenants Agreement, Master Service Agreement, and Conduits Agreement
  - Provisions for transitioning existing customer contracts
  - Sublandlord retains certain rights for point of presence and conduits
&lt;/special_provisions&gt;
</file>
<file name="skills/summarization/data/sample-lease9.txt">
Source: https://investor.equinix.com/sec-filings/all-sec-filings/content/0001193125-04-035568/dex1095.htm

Exhibit 10.95

 

SUBLEASE AGREEMENT

 

THIS SUBLEASE AGREEMENT (“Sublease”) is made and entered into as of the 24th day of October 2003, by and between SPRINT COMMUNICATIONS COMPANY, L.P., a Delaware limited partnership (“Sublandlord”), and EQUINIX OPERATING CO., INC., a Delaware corporation (“Subtenant”).

 

RECITALS

 

A. Duane Raymond, LLC, a California limited liability company (“Master Landlord”), has leased to Sublandlord the space in and around the building (the “Building”) situated on the real property commonly known and numbered as 1350 Duane Avenue, Santa Clara, California, such space being more particularly described in Exhibit A attached hereto and incorporated herein by this reference (the “Premises”), pursuant to that certain Lease made and entered into as of November 30, 2000 by Master Landlord and Sublandlord as amended by First Amendment dated as of March 15, 2001 (collectively, the “Master Lease”).

 

B. A true, correct and complete copy of the Master Lease is attached hereto as Exhibit B and incorporated herein by this reference.

 

C. Subtenant desires to sublet from Sublandlord, and Sublandlord has agreed to sublet to Subtenant, all of the Premises consisting of 160,000 square feet of space (the “Subleased Premises”).

 

D. All undefined, capitalized terms used in this Sublease have the meanings ascribed to such terms in the Master Lease.

 

NOW THEREFORE, for valuable consideration and on the terms and conditions set forth herein, Sublandlord and Subtenant hereby agree as follows:

 

1. Subleased Premises. Sublandlord hereby leases to Subtenant, and Subtenant hereby leases from Sublandlord, the Subleased Premises, together with the right to use the Common Area (including, but not limited to, Tenant’s Allocated Parking Stalls within the Project), the Parking Area and the Exterior Area) provided by Master Landlord to Sublandlord pursuant to the terms of the Master Lease. The Subleased Premises shall include all tenant improvements, alterations, conduits and equipment installed therein by Sublandlord. In addition, Sublandlord hereby assigns to Subtenant for the duration of the Term (as hereinafter defined) of this Sublease, all rights that Sublandlord has pursuant to the Master Lease in connection with the occupancy, use or enjoyment of the Subleased Premises and agrees that (subject to Sublandlord’s rights pursuant to the MSA and the Conduits Agreement (each term as defined below)) such rights shall be exercisable exclusively by Subtenant while the Sublease is in effect. Such rights shall include, but not be limited to, the following: all rights Sublandlord has pursuant to Section 2.1 [Demise of Premises] of the Master Lease; all signage rights Sublandlord has pursuant to Section 4.3 [Signs] of the Master Lease, all parking rights that Sublandlord has pursuant to Section 4.4 [Parking] of the Master Lease, all rights Sublandlord has pursuant to Section 14.1(D) of the Master Lease (i.e., to permit Customers to enter upon and occupy the Premises for purposes of installing, repairing, replacing, operating and maintaining their customer

equipment); all rights Sublandlord has pursuant to the following provisions of the Lease Rider to the Master Lease: Paragraph 3 [Roof Rights]; Paragraph 4 [Exterior Area]; Paragraph 5 [Fiber and Electrical Conduit Rights of Way]; Paragraph 6 [Emergency Generators and Fuel Storage Tanks]; Paragraph 7 [HVAC]; Paragraph 8 [Life Safety Systems]; Paragraph 10 [Leasehold Mortgage]; Paragraph 11 [Telephone Service]; and Paragraph 17 [Sprinkler]. Sublandlord warrants that (a) subject to obtaining the consent of Master Landlord as provided in Section 5, Sublandlord has the full power, authority and legal right to sublease the Subleased Premises to Subtenant, (b) Subtenant will have the right quietly to enjoy the Subleased Premises subject to (i) the Master Lease, (ii) the terms of this Sublease, and (iii) any other interest to which the Master Lease is subject according to its terms, and (c) the Subleased Premises will be in the same condition on the Commencement Date (as defined herein) as on the date hereof, normal wear and tear excepted.

 

2. Accompanying Agreements.

 

2.1 Employee Covenants Agreement. Sublandlord and Subtenant are simultaneously entering into a certain Employee Covenants Agreement, which is incorporated herein by reference, pursuant to which the parties agree to take certain actions and provide certain information beginning on the date hereof with respect to employees of Sublandlord at the Internet Data Center at the Subleased Premises to facilitate Subtenant making offers of employment to such employees, to be effective as of December 1, 2003 (the “Closing Date”).

 

2.2 Master Service Agreement. The parties’ relationship with respect to Sublandlord’s point of presence into the Subleased Premises (the “Point of Presence”) to provide IP transport shall be governed by that certain Master Service Agreement (“MSA”) dated October 26, 2001.

 

2.3 Conduits Agreement. Sublandlord and Subtenant are simultaneously entering into a certain Agreement to License Conduits (“Conduits Agreement”).

 

3. Certain Actions with Respect to Customer Contracts; Transition Services.

 

3.1 Certain Actions with Respect to Customer Contracts. During the first two years of this Sublease, Sublandlord and Subtenant will cooperate in any mutually agreeable, reasonable and lawful arrangements and use commercially reasonable efforts to cause each customer (each, a “Customer”) of Sublandlord at the Subleased Premises having a contract (a “Customer Contracts”) with Sublandlord to procure Collocation Services (as defined below) at the Premises, to agree to terminate its Customer Contract with Sublandlord as of the Closing Date and enter into new agreements for Collocation Services with Subtenant, and in each case, following the execution of a new agreement, Sublandlord will retain the right to receive all IP transport revenue under the Customer Contracts with Sublandlord in connection with the provision of Collocation Services by Subtenant to the Customer following the Closing Date. Subtenant agrees not to offer IP transport services to such Customer, either on its own behalf or on behalf of any other “Person” (defined below) other than Sublandlord, as part of or during the negotiations for new contracts contemplated by this provision, provided however, that following the Closing Date, Subtenant shall be entitled to respond to requests from Customers who wish to contact alternative providers for IP transport services. Notwithstanding the foregoing, if any

 

2

Customer refuses to enter into a new agreement with Subtenant or if the terms of any Customer Contracts require Sublandlord to deliver a termination notice to the applicable Customer between the date of this Sublease and the Closing Date, Sublandlord will terminate the applicable Customer Contracts, subject to Section 3(ii) below (each a “Termination Services Customer Contract”).

 

3.2 Transition Services. Except as provided in this Section 3(ii), neither Subtenant nor Sublandlord will provide any transition services at the Subleased Premises following the Closing Date. Following the Closing Date, Sublandlord will continue to provide Collocation Services at the Subleased Premises to each Customer under a Termination Services Customer Contract until the sooner of (a) the expiration of the applicable termination period under the Termination Services Customer Contract (the “Termination Services Period”); or (b) March 31, 2004; provided, however, that during the Termination Services Period, Sublandlord will pay to Subtenant the amount billed to the customer by Sublandlord for power and space at the Subleased Premises under the terms of the applicable Termination Services Customer Contract during the Termination Services Period from the Closing Date until the expiration of the applicable Termination Services Customer Contract.

 

For purposes of this Sublease, “Collocation Services” means services provided to a Customer that enable a Customer to install and operate telecommunications equipment in a data center, including provision of the space, power and network connections necessary to operate the equipment. “Person” means any individual, partnership, joint venture, corporation, trust, limited liability company, unincorporated organization, a government or any department or agency thereof, or other entity.

 

4. Master Lease.

 

4.1 Relationship of Sublease to Master Lease. Subtenant acknowledges that this Sublease is subject and subordinate to the Master Lease and to all the terms, covenants and conditions contained therein. To the extent that the Master Lease is also subject and subordinate to such instruments, this Sublease is also subject and subordinate to all ground and underlying leases and all mortgages which might now or hereafter affect such leases, the leasehold estate or estates thereby created or the real property of which the Subleased Premises form a part, and to any and all renewals, modifications, consolidations, replacements and extensions thereof. Subtenant covenants and agrees that (a) during the Term (as hereinafter defined) of this Sublease, Subtenant will perform and observe all of the terms, covenants, conditions and agreements of the Master Lease to be performed by Sublandlord (including, without limitation, the providing of estoppel certificates and subordination agreements in accordance with the Master Lease, if applicable) to the extent that the same are not modified or amended by this Sublease, (b) Subtenant shall not do, suffer or permit anything to be done which would constitute a default under the Master Lease or might cause the Master Lease to be canceled, terminated or forfeited, and (c) Subtenant will, in accordance with Section 9 below, and subject to the limitations therein, indemnify and hold harmless Sublandlord and Master Landlord from and against all claims, liabilities, losses and damages of any kind that Sublandlord or Master Landlord may incur to the extent they are by reason of, resulting from or arising out of a failure by Subtenant to comply with the provisions of this Sublease and/or the Master Lease, including, without limitation, subsections (a) and (b) of this paragraph. Notwithstanding the foregoing, Subtenant shall have no obligation to cure any default of Sublandlord under the Master Lease (except to the extent such default is caused by Subtenant’s default hereunder).

4.2 Utilization of Master Lease Provisions as Part of Sublease.

 

(a) Except as the terms and conditions set forth in this Sublease modify or contradict the terms and conditions of the Master Lease or any exhibits or attachments thereto, all of the terms and conditions contained in the Master Lease are hereby made a part of this Sublease and are deemed to constitute a portion of the agreement between Sublandlord and Subtenant concerning the leasing of the Subleased Premises; provided, however, that to the extent any of the terms and provisions of the Master Lease are inappropriate or inapplicable to this Sublease, such terms and provisions shall not be made a part hereof and in the event of any inconsistency between the Master Lease and this Sublease, as between Sublandlord and Subtenant, the provisions of this Sublease shall take precedence over any conflicting provisions of the Master Lease. Without limiting the generality of the foregoing, the parties agree that the following provisions of the Master Lease shall not be applicable to this Sublease: Sections 1.2 (except with respect to Master Landlord’s address), 2.2, 2.3, 2.4, 2.5, 2.6, 7.2.E., 7.2.H., Article 3, Sections 9.2, 10.2, 10.3, 10.4, 11.2, 12.1, 15.7 (except with respect to providing notice to Master Landlord), 15.11, Paragraphs 1, 2, 12 and 15 of the Lease Rider and Exhibits B and E. Where references are made in the Master Lease to the “Premises”, the same shall be deemed to refer to the Subleased Premises hereunder; where references are made in the Master Lease to the “Commencement Date,” the same shall be deemed to refer to the Commencement Date hereunder; where references are made to the Master Lease to “Base Monthly Rent”, the same shall be deemed to refer to Monthly Base Rent hereunder; where references are made under the Master Lease to “Additional Rent”, the same shall be deemed to refer to Additional Rent hereunder; and where references are made in the Master Lease to “this Lease” the same shall be deemed to refer to this Sublease.

 

(b) It is understood by Subtenant that the services, repairs and alterations referred to herein to be furnished in accordance with the provisions of the Master Lease will in fact be furnished by Master Landlord and not by Sublandlord. Sublandlord shall not be liable to Subtenant nor shall Subtenant’s obligations hereunder be impaired or the performance thereof excused because of any failure or delay on Master Landlord’s part in furnishing any such service or in making any of such repairs or alterations unless and to the extent that Sublandlord reasonably agrees that Sublandlord’s performance of such obligations is excused pursuant to the terms of the Master Lease. Notwithstanding the foregoing, to the extent any default by Master Landlord results in a waiver or deferral of the performance of any of Sublandlord’s obligations under the Master Lease, the same obligations of Subtenant hereunder shall be similarly waived or deferred, as applicable, but all other obligations of Subtenant shall remain in full force and effect. Sublandlord agrees that if Master Landlord fails to provide any thing or service which Master Landlord is required to provide pursuant to the terms of the Master Lease, or otherwise defaults thereunder, Sublandlord will, upon the written request of Subtenant and at Subtenant’s cost and expense (except to the extent that such costs and expenses are reimbursed by Master Landlord to Sublandlord), provide such assistance as Subtenant may reasonably request, including without limitation, making a claim and/or demand on Master Landlord in the name of Sublandlord, to effect a cure of such default by Master Landlord or otherwise. Likewise, if Sublandlord defaults under the Master Lease, Subtenant shall have the

right (subject to any applicable notice and cure provisions in the Master Lease and in this Sublease and subject to the consent of Master Landlord being first had and obtained), but not the obligation, to cure any such default, on behalf of Sublandlord and at Sublandlord’s cost and expense, including, without limitation, offsetting any costs and expenses incurred by Subtenant against Monthly Base Rent and Additional Rent payable hereunder (provided that Subtenant may not exercise the foregoing right of offset if Sublandlord has notified Subtenant that Sublandlord is disputing such alleged default in good faith and Master Landlord has not availed itself of any of its remedies under the Master Lease which would impair the continued existence of this Sublease). It is further understood by Subtenant that its rights with respect to the repair and restoration of the Subleased Premises or the Building, its rights as to the use and application of insurance proceeds and condemnation proceeds, its rights to rent abatement and its right to terminate this Sublease in the event of damage to or condemnation of all or any part of the Subleased Premises or the Building are all subject to the prior rights, if any, of Master Landlord. All expenses incurred by Master Landlord in connection with the Landlord Consent (as defined herein) shall be paid one-half by each party hereto.

 

(c) It is further understood by Subtenant that Sublandlord will not be obligated to comply with Master Landlord’s responsibilities pursuant to Section 4.2 of the Master Lease relating to “Compliance with Law”, and Section 11.1 relating to “Landlord’s Duty to Restore” and Paragraph 16 of the Lease Rider relating to “Adjacent Property Rights.” In addition, notwithstanding anything herein to the contrary, only Master Landlord exclusively, not Sublandlord, shall have the rights of “Landlord” pursuant to the following provisions of the Master Lease as incorporated herein: Sections 4.3, 4.4, 4.5, 5.2 (provided, however, such alterations and improvements shall not materially impair Sublandlord’s Point of Presence and conduits pursuant to Sections 2.2 and 2.3 hereof, and Subtenant shall provide notice to Sublandlord in each case in which notice is provided to Master Landlord pursuant to Section 5.2 of the Master Lease), 6.3, 7.2(D), 7.2(G), Article 8, 11.2, 11.3, 12.1 and 12.5. Notwithstanding anything to the contrary contained in this Sublease, the parties agree and acknowledge that any right to terminate the leasehold interest by Subtenant shall only be with respect to the Sublease and not the Master Lease, and Sublandlord shall retain the retain the right to terminate the Master Lease pursuant to the terms thereof. Any attempt by Subtenant to terminate the Master Lease shall be null and void.

 

4.3 Master Lease in Full Force and Effect. Sublandlord represents, covenants and agrees that: (i) a true, correct and complete copy of the Master Lease is attached hereto as Exhibit B and there exist no other agreements between Master Landlord and Sublandlord governing the use or occupancy of the Subleased Premises; (ii) the Master Lease is in full force and effect and has not been amended, supplemented or otherwise changed; (iii) to the best of Sublandlord’s knowledge, Sublandlord is not in default under the Master Lease (and no set of circumstances exists which, with the passage of time or giving of notice, would constitute a default thereunder); (iv) Sublandlord has paid and performed all obligations required to be paid or performed by Sublandlord under the Master Lease through the date the Sublease term commences; (v) Sublandlord has no knowledge of any default by Master Landlord under the Master Lease; (vi) the term of the Master Lease expires on September 30, 2014; and (vii) and the provisions of the Master Lease will not be waived, modified, amended or surrendered by Sublandlord in any manner so as to prevent or adversely affect the use by Subtenant of the Subleased Premises in accordance with the terms of this Sublease, nor as to impose any greater

obligations on Subtenant than are imposed on Subtenant under this Sublease, or provide to Subtenant any lesser rights than are provided to Subtenant under this Sublease, without the prior written consent of Subtenant in each instance.

 

5. Effectiveness of Sublease. This Sublease shall be effective on the Closing Date except for the following provisions of this Sublease, which shall become effective as of the date of this Sublease: Sections 3, 15, 19, 20, 21, 22, 23, 24 and 25. The parties hereto acknowledge that one of the conditions to the closing is that Master Landlord must provide its written consent to this Sublease pursuant to the Landlord Consent. Sublandlord agrees to use commercially reasonable efforts to obtain the consent of Master Landlord. If the Closing Date is not on or before December 1, 2003 (or such later date as the parties may mutually agree), this Sublease will be deemed to be null and void and neither party will have any liability or obligation to the other party hereunder.

 

6. Term, Possession and Condition of Subleased Premises.

 

6.1 Term. The term (the “Term”) of this Sublease is for the period which commences on the Closing Date (the “Commencement Date”), and expires on September 29, 2014, unless sooner terminated pursuant to the terms of this Sublease.

 

6.2 Possession. Possession of the Subleased Premises will be delivered to Subtenant on the Commencement Date.

 

6.3 Condition of Subleased Premises. Subtenant acknowledges and agrees that (i) it has inspected the Subleased Premises to the extent that it deems necessary prior to the execution of this Sublease, (ii) it accepts the Subleased Premises in “AS-IS WHERE IS” condition and (iii) neither Sublandlord nor Master Landlord shall have any obligation with respect to alterations, repairs or refurbishment of the Subleased Premises, except as may otherwise be specifically set forth in this Sublease. In the event that any improvements or alterations are permitted by Master Landlord, the removal thereof upon the termination of this Sublease will be the responsibility of Subtenant, all in accordance with the Master Lease. Subtenant also hereby assumes and agrees to perform any and all obligations of Sublandlord under the Master Lease with respect to (i) the removal of personal property, equipment, trade fixtures and leasehold improvements from the Subleased Premises, and (ii) the surrender of the Subleased Premises at the expiration of the Term of this Sublease in the condition required by the Master Lease irrespective of whether or not such items were placed upon or installed in the Subleased Premises by or at the direction of Subtenant or Sublandlord. Notwithstanding anything to the contrary contained herein, Subtenant’s obligations with respect to the removal of Tenant Improvements and Tenant Alterations from and the restoration of the Subleased Premises or the Building as required under the Master Lease shall be governed by the provisions of the Consent of Master Landlord attached hereto as Exhibit C and incorporated herein by this reference (the “Landlord Consent”), if Subtenant and Master Landlord enter into the New Lease (as defined in the Landlord Consent). The provisions of this Section 6.3 shall survive the termination or expiration of this Sublease.

7. Rent.

 

7.1 Rent. Subtenant shall pay to Sublandlord as “Monthly Base Rent” the following amounts: (i) during the first two (2) years of the Term, an amount equal to [*] payable by Sublandlord under the Master Lease; and (ii) thereafter, for the remainder of the Term, Subtenant shall pay to Sublandlord, [*] payable by Sublandlord under the Master Lease. Notwithstanding the immediately previous sentence or anything to the contrary contained herein, (x) if a Subtenant Default occurs during the first 2-years of the Term, the Monthly Base Rent payable by Subtenant shall increase to [*]; and (y) if a Subtenant Default occurs after the initial two years of the Term, Subtenant shall, within thirty (30) days of Sublandlord’s written demand, pay to Sublandlord an amount equal to [*] multiplied by the number of days elapsed from the Commencement Date until the date on which Subtenant’s Default occurred, but not to exceed a total of [*], as well as all unpaid and accrued rental amounts. The foregoing sentence shall not limit and the Sublandlord shall have available to it all other non-monetary remedies available to it pursuant to Section 13.2 of the Master Lease. As used herein, “Subtenant Default” shall mean a default by Subtenant hereunder that continues beyond any applicable grace, notice and cure periods. Subtenant agrees to commence paying an amount equal to [*] in advance for the first month of the Term on the Commencement Date and to make rent payments thereafter on the first day of each month during the remaining Term of this Sublease. All rental amounts hereunder for any partial month will be prorated on the basis of the actual number of days elapsed. Except as expressly permitted in this Sublease, all rental amounts hereunder shall be payable to Sublandlord without notice, demand, deduction, offset or abatement in lawful money of the United States of America at P.O. Box 219061, Kansas City, MO 64121-9061 or to such other person or at such other address as Sublandlord may designate in writing. If any Monthly Base Rent or Additional Rent is not received by Sublandlord from Subtenant within five (5) days of the later of (i) when due or (ii) after written notice to Subtenant that the same has not been received by Sublandlord (provided such notice for late payment has not previously been given in the preceding twelve months), then Subtenant shall immediately pay to Sublandlord a late charge equal to the lesser of any penalties, default interest charges or other similar costs computed based on the delinquent amount actually incurred by Sublandlord under the Master Lease by reason of Subtenant’s late payment or [*] percent ([*]%) of such delinquent rent, as liquidated damages for Subtenant’s failure to make timely payment. If any rent remains delinquent for a period in excess of thirty (30) days then, in addition to such late charge, Subtenant shall pay to Sublandlord interest on any rent that is not paid when due at the Agreed Interest Rate following the date such amount became due until paid. This paragraph shall not be deemed to grant Subtenant an extension of time within which to pay rent or prevent Sublandlord from exercising any other right or remedy.

 

7.2 Other Charges. Subtenant shall pay all sales and uses taxes levied or assessed against all rent payments due under this Sublease (if any) simultaneously with each payment required hereunder. Subtenant shall pay directly to Sublandlord all of those costs, expenses, additional rent and all other amounts (defined as “Additional Rent” in the Master Lease) payable to Master Landlord under the Master Lease, including, but not limited to, those

 

*	 	CONFIDENTIAL TREATMENT REQUESTED. CONFIDENTIAL PORTION HAS BEEN FILED SEPARATELY WITH THE SECURITIES AND EXCHANGE COMMISSION.
amounts payable under Sections 3.2 and 8.1 of the Master Lease. Notwithstanding anything to the contrary contained in this Sublease, Subtenant shall not be responsible for any charges, costs, expenses or similar items (“Charges”) deemed to be Additional Rent if and to the extent said Charges are incurred as a result of Sublandlord in its role as Tenant under Master Lease breaching its representations, warranties and covenants thereunder (including, without limitation, damages claimed by Master Landlord, indemnification obligations owed to Master Landlord, enforcement fees owed to Master Landlord and costs of discharging mechanic’s liens arising through Sublandlord) which have not been assumed by Subtenant hereunder. In addition, Additional Rent shall not include premiums for insurance policies required to be maintained by Sublandlord (in its capacity as tenant under the Master Lease) pursuant to the Master Lease, and Excess rent required to be paid by Sublandlord pursuant to Article 14 of the Master Lease. Subtenant agrees to pay any and all such Additional Rent in estimated equal monthly installments or as may otherwise be required under the terms of the Master Lease. During the Term, Master Landlord may be permitted to adjust the amounts of such installments payable under the Master Lease. In such event, Sublandlord may adjust the amount of the installments due hereunder and, at the end of each calendar year during the Term, an adjustment will be made to compensate for any overage or shortfall with respect to the monthly estimated installments paid versus the actual real estate taxes, insurance, common area maintenance costs, management fees and the like owed, as and when provided in the Master Lease. To the extent Master Landlord has not agreed to do so pursuant to the Landlord’s Consent, Sublandlord shall promptly forward to Subtenant any statements received from Master Landlord relating to the payment of Common Operating Expenses and annual reconciliations thereof.

 

If Subtenant so requests, Sublandlord shall, at no cost or expense to Sublandlord, exercise the right to contest Real Property Taxes pursuant to Section 8.3 of the Master Lease. If Subtenant so requests, Sublandlord shall cause an audit of Master Landlord’s books and records as permitted and in the manner provided for under Section 8.1 of the Master Lease. Any and all costs incurred by Sublandlord shall be borne by Subtenant and shall be considered Additional Rent. To the extent Master Landlord is not ultimately required to bear the costs of such audit in accordance with the Master Lease, the costs of such audit shall be borne by Subtenant, but in no event shall be Sublandlord be liable for such costs. Regardless of whether Subtenant elects to cause an audit of Master Landlord’s books and records, if Sublandlord’s payments toward Common Operating Expenses exceed the total payments made by Subtenant, Subtenant shall pay Sublandlord the deficiency within thirty (30) days of the date of Sublandlord’s statement. If the total payments by Subtenant, as determined pursuant to the audit, exceed the total actual amount of Additional Rent owed by Subtenant, Subtenant’s excess payment shall be refunded to Subtenant within thirty (30) days of the date of Sublandlord’s statement, and if not refunded within thirty (30) days, may be offset by Subtenant against the next installment of Monthly Base Rent and Additional Rent payable hereunder. For any partial calendar year at the commencement or termination of this Sublease, Subtenant’s Additional Rent for such year shall be prorated for the number of days this Sublease is in effect during such year. Notwithstanding the termination of this Sublease, within thirty (30) business days after Subtenant’s receipt of Sublandlord’s statement regarding Additional Rent in the calendar year in which this Sublease terminates, Subtenant shall pay to Sublandlord or shall receive from Sublandlord, as the case may be, an amount equal to the difference between the actual amount of Additional Rent (as prorated) and the amount previously paid by Subtenant toward Additional Rent.

7.3 Survival. Subtenant’s obligation to pay all rental amounts hereunder and to remove alterations and improvements (except as provided in Section 4.2(ii) hereof), as well as any other obligation of Subtenant hereunder which is not fully satisfied at the termination of this Sublease, will survive the termination of this Sublease. Sublandlord’s obligation to refund to Subtenant any overpayments of Additional Rent shall also survive the termination of this Sublease.

 

8. Use. The Subleased Premises may be used and occupied during the Term of this Sublease only for those purposes for which the Premises may be used and occupied by Sublandlord pursuant to the terms of the Master Lease. Subtenant must, at Subtenant’s expense, comply promptly with all applicable statutes, ordinances, rules, regulations, orders, restrictions of record and requirements in effect during the Term or any part of the Term hereof regulating the use by Subtenant of the Subleased Premises.

 

9. Indemnity. Subtenant hereby indemnifies and agrees to hold Sublandlord and Master Landlord harmless from and against any and all claims, liabilities or losses incurred by Sublandlord or Master Landlord arising out of any breach by Subtenant of any of the terms of, or its representations contained in, this Sublease, for bodily injury to or death of any person or damage to any property arising out of Subtenant’s use of the Subleased Premises or from the conduct of Subtenant’s business, or from any activity, work or thing done, permitted or suffered by Subtenant in or about the Subleased Premises or the Building, except:

 

(a) claims and liabilities occasioned in whole or in part by the grossly negligent acts or omissions of the indemnified party, its agents or employees; and

 

(b) claims or liabilities for property damage addressed in Section 10 of this Sublease entitled “Mutual Waiver of Claims”.

 

Sublandlord hereby indemnifies and agrees to hold Subtenant and Master Landlord harmless from and against any and all claims, liabilities or losses incurred by Subtenant or Master Landlord arising out of any breach by Sublandlord of any of the terms of, or its representations contained in, this Sublease or any terms of the Master Lease for which Sublandlord has retained responsibility pursuant to the terms and provisions of this Sublease, and for bodily injury to or death of any person or damage to any property arising out of Sublandlord’s Point of Presence at the Subleased Premises or from the conduct of Sublandlord’s business related thereto, or from any activity, work or thing done, permitted or suffered by Sublandlord in or about the Subleased Premises or the Building pursuant to the MSA, except:

 

(c) claims and liabilities occasioned in whole or in part by the grossly negligent acts or omissions of the indemnified party, its agents or employees; and

 

(d) claims or liabilities for property damage addressed in Paragraph 10 of this Sublease entitled “Mutual Waiver of Claims”.

 

In addition, Sublandlord hereby indemnifies and agrees to hold Subtenant harmless from and against all claims, liabilities or losses suffered by Subtenant as a result of the “Release” (as defined below) with respect to the Project. For purposes of this Sublease, a Releases is that certain incident reported to the California Office of Emergency Services on May 31, 2002, and assigned spill number 05/31/2002 02-2920 (also known by the Santa Clara Water Board as case number SCVWDID #06S1W27K01f, LOP).

The foregoing indemnities include all reasonable costs, attorneys’ fees and expenses incurred in the defense of any such claim or any action or proceeding brought thereon.

 

10. Mutual Waiver of Claims. Sublandlord and Subtenant do each hereby release and relieve the other and Master Landlord, and waive their entire claim of recovery against the other party and/or Master Landlord for loss or damage to property arising out of or incident to fire, lightning or any other perils normally included in an “all-risks” property insurance policy when such property constitutes the Subleased Premises or the Building or is in, on or about the Subleased Premises, the Building or the land on which the Building is situated, whether or not such loss or damage is due to the negligence of Sublandlord, Subtenant or Master Landlord, their agents, employees, guests, licensees, invitees or contractors, to the extent such loss or damage is covered by such insurance.

 

11. Default. The notice and grace period provisions contained in the Master Lease shall apply to any default by Subtenant hereunder. If Subtenant defaults in the payment of any rental amounts hereunder or any other sum required to be paid hereunder by Subtenant, or in the performance of any of its other obligations under this Sublease or the Master Lease beyond any applicable notice or grace period Sublandlord shall have the same rights and remedies against Subtenant as Master Landlord has against Sublandlord in the event of Sublandlord’s default under the Master Lease; provided, however, that any damages recoverable by Sublandlord shall be computed based on the Monthly Base Rent and Additional Rent payable under this Sublease Such rights and remedies shall be cumulative with all other rights and remedies which Sublandlord may otherwise have under applicable law.

 

12. Transfer of Subleased Premises.

 

12.1 Neither this Sublease nor the Term and estate hereby granted, or any part hereof or thereof, may be assigned, mortgaged, pledged, encumbered or sublet without first obtaining the express written consent of: (i) Sublandlord, such consent not to be unreasonably withheld; and (ii) Master Landlord, which consent shall be granted or denied in accordance with the provisions of the Master Lease.

 

12.2 Any request for Sublandlord’s or Master Landlord’s consent to a proposed assignment or subletting of the Subleased Premises or any portion thereof shall be in writing (hereinafter referred to as “Subtenant’s Notice”) and shall set forth the proposed subtenant’s or assignee’s name, address, nature or character of business, and then current financial statements of the proposed subtenant or assignee, and the terms and conditions of the proposed subletting. Any consent to subletting or assignment which may be given by Sublandlord shall not constitute a waiver by Sublandlord of the provisions of this Section 12, or a release of Subtenant from the full performance by it of the covenants on the part of Subtenant herein contained. Any violation of any provision of this Sublease by any subtenant shall be deemed a violation of such provision by Subtenant.

12.3 Any subletting or assignment permitted hereunder shall, with respect to the use of the Subleased Premises, be subject to and shall not violate the restrictive provisions of this Sublease and the provisions of the Master Lease.

 

12.4 If, for any proposed assignment or sublease, Subtenant receives rent or other consideration, either initially or over the term of the assignment or sublease, in excess of the rent called for hereunder or, in case of the sublease of a portion of the Subleased Premises, in excess of such rent fairly attributable to such portion, after appropriate adjustments to ensure that all other payments called for hereunder are taken into account, Subtenant shall pay to Sublandlord, as additional rent hereunder, all of the profit realized by Subtenant promptly after its receipt. Such profit shall be calculated after deducting from gross rentals all costs incurred by Subtenant in connection with such transaction, including real estate commissions, legal fees, concessions, tenant improvement allowances, advertising costs, and the like. To the extent that Master Landlord successfully asserts a claim to collect any portion of such profits, they shall be paid equally by Subtenant and Sublandlord from their respective shares of such profit.

 

12.5 Notwithstanding anything herein to the contrary, Sublandlord’s consent shall not be required hereunder for any agreements with Customers for which Master Landlord’s consent is not required pursuant to Section 14.1D of the Master Lease. In addition, Sublandlord shall not be entitled to share in any of Subtenant’s profits, rents or income derived in connection with any Customer’s use of the Subleased Premises.

 

13. Insurance. Subtenant agrees to maintain during the Term hereof at least the minimum insurance described in Section 9.1 of the Master Lease. Sublandlord and Master Landlord must be named as an additional insured on the commercial general liability insurance coverage. A certificate evidencing such insurance coverages shall be delivered to Sublandlord and Master Landlord on or before the first to occur of the Commencement Date or the date when Subtenant shall enter into possession of the Subleased Premises. Each of Sublandlord and Subtenant shall cause its insurance carriers to waive all rights of subrogation against the other party hereto to the extent of Sublandlord’s and Subtenant’s undertakings set forth in Section 10 of this Sublease. Notwithstanding anything to the contrary contained herein or in the Master Lease, Subtenant shall be exclusively entitled to all insurance proceeds arising under any fire and property damage insurance policies maintained by Subtenant on Subtenant’s personal property, equipment and trade fixtures.

 

14. Sublandlord’s Options Pursuant to the Master Lease. Sublandlord and Subtenant agree that all options that Sublandlord has pursuant to the Master Lease, i.e., Sublandlord’s Option to Extend pursuant to Paragraph 2 of the Lease Rider to the Master Lease and Sublandlord’s Right of First Offer to Purchase pursuant to Paragraph 15 of the Sublease shall be subordinate to Subtenant’s obligation and option to enter into the New Lease with Master Landlord as provided in the Landlord Consent. Sublandlord also agrees that while this Sublease remains in effect, Sublandlord shall neither have the right to nor exercise any such option without the prior written consent of Subtenant, which consent may be granted or withheld in Subtenant’s sole and absolute discretion.

 

15. Notices. Except as otherwise provided in the Master Lease with respect to notices to Master Landlord or as hereinafter provided as to notices of default by Sublandlord and

Subtenant, any notice required or permitted to be given hereunder shall be in writing and shall be effective only (a) three (3) days after deposit in a sealed envelope in the United States mail, postage prepaid, by registered or certified mail, return receipt requested, addressed to the recipient at the address set forth below, (b) the next business day following deposit with an overnight courier service, with next day delivery charges prepaid, or (c) upon receipt if delivered by facsimile transmission. Notices to Subtenant shall be addressed to Equinix Operating Co., Inc., 301 Velocity Way, 5th Floor, Foster City, CA 94404, Attention: Director of Real Estate, Facsimile No. (650) 513-7909, with a copy to Equinix Operating Co., Inc., 301 Velocity Way, 5th Floor, Foster City, CA 94404, Attention: General Counsel, Facsimile No. (650) 513-7909, and notices to Sublandlord shall be addressed to Sprint Communications Company, L.P., 6200 Sprint Parkway, KSOPHF 0302-3B679, Overland Park, KS 66251, Attention: Legal-Corporate Transactions, Facsimile No. (913) 794-0144, with copy to Sprint Communications Company, L.P., 6450 Sprint Parkway, KSOPHN 0314-3A671, Overland Park, KS 66251, Attention: Real Estate Attorney, Facsimile No. (913) 315-0708. Anything hereinbefore to the contrary notwithstanding, notices of default may only be sent by certified or registered mail pursuant to (a), above.

 

16. Broker’s Commissions. Sublandlord and Subtenant each hereby represents and warrants to the other and to Master Landlord that neither party entered into any agreement with any broker, agent, finder or other party for the payment of a broker’s or agent’s commission, finder’s fee or like compensation payable in connection with Sublandlord and Subtenant entering into this Sublease. Sublandlord and Subtenant each hereby agrees to indemnify and hold the other and Master Landlord harmless from and against any and all claims, demands, damages, losses or causes of action related to or arising out of any such agreement entered into by the indemnifying party for the payment of any such commission, fee or like compensation.

 

17. Security Interest. Sublandlord hereby waives any security interest pursuant to the Uniform Commercial Code of the State of California or other California law that Sublandlord may have in all of the personal property, equipment and trade fixtures used or to be used by Subtenant in connection with its use and operation of the Subleased Premises.

 

18. Personal Property. Sublandlord and Subtenant are simultaneously entering into a certain Bill of Sale and Conveyance Agreement (the “Bill of Sale”), which will become effective on the Closing Date, pursuant to which Sublandlord will transfer to Subtenant certain items of tangible personal property, as provided in the Bill of Sale. Any sales taxes associated with the transfer of such personal property will be paid for as provided in the Bill of Sale.

 

19. Casualty and Eminent Domain. In the event of a fire or other casualty affecting the Subleased Premises, or of a taking of all or a part of the Subleased Premises under the power of eminent domain, Sublandlord shall not exercise any rights which it may have permitting it to terminate or continue with the Master Lease as a result of a casualty or condemnation without first obtaining the prior written consent of Subtenant. If Subtenant fails to respond to such written request by Sublandlord to Subtenant within ten (10) days, then consent will be deemed to have been given. If the Master Lease imposes on Master Landlord, the obligation to repair or restore leasehold improvements or alterations, Subtenant shall permit Master Landlord to enter the Subleased Premises to perform the same. Subtenant shall have the right to terminate the Sublease as a result of a casualty or condemnation to the extent Sublandlord has the right to

terminate the Master Lease as a result of such event. To the extent Sublandlord is entitled to an abatement of its obligation to pay rent pursuant to the Master Lease as a result of the occurrence of a casualty or condemnation, Subtenant shall also be entitled to an abatement of Monthly Base Rent and Additional Rent with respect to the Subleased Premises. Notwithstanding anything herein to the contrary, if the Master Lease is validly terminated by Master Landlord following a casualty or condemnation, this Sublease shall also terminate.

 

20. Entire Agreement. This Sublease, including the terms of the Master Lease which are incorporated herein by reference, contains the entire agreement between the parties concerning the subject matter hereof and supersedes all prior and contemporaneous agreements, understandings, terms, warranties and representations, whether oral or written, made by the parties concerning the matters covered by this Sublease.

 

21. Confidentiality. Subtenant and Sublandlord shall each maintain as confidential any and all non-public material obtained about the other and the transactions contemplated hereby, and shall not, except as required by law or governmental regulation applicable to Sublandlord or Subtenant, disclose such information to any third party. Notwithstanding the foregoing, Subtenant and Sublandlord shall have the right to disclose such information to their respective lenders or their employees and agents and such other persons whose assistance is required in carrying out the terms of this letter provided that all such persons are told that such information is confidential and agree (in writing for any third party consultants) to keep such information confidential. Subtenant and Sublandlord shall each have the right to publicize the consummation of this Sublease (other than the monetary terms) in whatever manner each deems appropriate; provided, however, that any press release or other public disclosure regarding the transactions contemplated herein, and the wording of same, must be approved in advance by both parties. Notwithstanding anything herein or in any other written or oral understanding or agreement to which the parties hereto are parties or by which they are bound, either party (or its representative, agents or employees) may (i) consult any tax advisor regarding the tax treatment and tax structure of the transaction contemplated by this Sublease and (ii) may at any time disclose to any person, without limitation of any kind, the tax treatment and tax structure of such transaction and all materials of any kind (including opinions or other tax analyses) that are provided relating to such tax treatment or tax structure. The provisions of this paragraph shall survive the termination of this Sublease.

 

22. Severability. The illegality, invalidity or unenforceability of any term, condition or provision of this Sublease shall in no way impair or invalidate any other term, condition or provision of this Sublease, and all such other terms, conditions and provisions shall remain in full force and effect.

 

23. Attorneys’ Fees. If any party hereunder brings an action to enforce the terms or to declare rights hereunder, the prevailing party in any such action, on trial or appeal, shall be entitled to recover its actual attorneys’ fees and costs of suit from the non-prevailing party.

 

24. Successors and Assigns. This Sublease shall be binding upon the parties hereto and upon their respective successors and assigns.

25. Governing Law. This Sublease will be governed by the law of the State of California, without regard to its choice of law rules.

 

26. Authority to Sign. Each party hereby represents and warrants to the other that the person or entity signing this Sublease on behalf of such party is duly authorized to execute and deliver this Sublease and to legally bind the party on whose behalf this Sublease is signed to all of the terms, covenants and conditions contained in this Sublease.

 

[Remainder of page intentionally left blank]

IN WITNESS WHEREOF, the parties have executed this Sublease as of the day and year first above written.

 

SUBLANDLORD:
SPRINT COMMUNICATIONS COMPANY, L.P.

By:

 	
    /s/ Robert J. Dellinger

Name: Robert J. Dellinger

Title: EVP &amp; CFO

SUBTENANT:
EQUINIX OPERATING CO., INC.

By:

 	
    /s/ Renee F. Lanam

Name: Renee F. Lanam

Title: CFO
</file>
<file name="skills/summarization/evaluation/README.md">

# Evaluations with Promptfoo

### A Note on This Evaluation Suite

1) Be sure to follow the instructions below - specifically the pre-requisites about required packages.

2) Running the full eval suite may require higher than normal rate limits. Consider only running a subset of tests in promptfoo.

3) Not every test will pass out of the box - we've designed the evaluation to be moderately challenging.

### Pre-requisities 
To use Promptfoo you will need to have node.js &amp; npm installed on your system. For more information follow [this guide](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  

You can install promptfoo using npm or run it directly using npx. In this guide we will use npx.  

*Note: For this example you will not need to run `npx promptfoo@latest init` there is already an initialized `promptfooconfig.yaml` file in this directory*  

See the official docs [here](https://www.promptfoo.dev/docs/getting-started)  

#### NOTE - Additional Deps
For this example you will need to install the following dependencies in order for our custom_evals to run properly.

`pip install nltk rouge-score`

### Getting Started

To get started, set your ANTHROPIC_API_KEY environment variable, or other required keys for the providers you selected. You can do `export ANTHROPIC_API_KEY=YOUR_API_KEY`.

Then, `cd` into the `evaluation` directory and write `npx promptfoo@latest eval -c promptfooconfig.yaml --output ../data/results.csv`

Afterwards, you can view the results by running `npx promptfoo@latest view`.

### How it Works

The promptfooconfig.yaml file is the heart of our evaluation setup. It defines several crucial sections:

Prompts:
- Prompts are imported from the prompts.py file.
- These prompts are designed to test various aspects of LM performance.


Providers:
- We configure different Claude versions and their settings here.
- This allows us to test across multiple models or with varying parameters (e.g., different temperature settings).


Tests:
- Test cases are defined either in this file, or in this case imported from tests.yaml.
- These tests specify the inputs and expected outputs for our evaluations.
- Promptfoo offers various built-in test types (see docs), or you can define your own. We have 3 custom evaluations and 1 out of the box (contains method):
    - `bleu_eval.py`: Implements the BLEU (Bilingual Evaluation Understudy) score, which measures the similarity between machine-generated text and reference texts.
    - `rouge_eval.py`: Implements the ROUGE (Recall-Oriented Understudy for Gisting Evaluation) score, which assesses the quality of summarization by comparing it to reference summaries.
    - `llm_eval.py`: Contains custom evaluation metrics that leverage Language Models to assess various aspects of generated text, such as coherence, relevance, or factual accuracy.

Output:
- Specifies the format and location of evaluation results.
- Promptfoo supports various output formats too!

### Overriding the Python binary

By default, promptfoo will run python in your shell. Make sure python points to the appropriate executable.

If a python binary is not present, you will see a "python: command not found" error.

To override the Python binary, set the PROMPTFOO_PYTHON environment variable. You may set it to a path (such as /path/to/python3.11) or just an executable in your PATH (such as python3.11).
</file>
<file name="skills/summarization/evaluation/custom_evals/bleu_eval.py">
import numpy as np
from typing import Dict, TypedDict, Union, Any
import nltk
from nltk.translate.bleu_score import sentence_bleu
from nltk.tokenize import word_tokenize

# Download required NLTK data
nltk.download('punkt', quiet=True)

def nltk_bleu_eval(output, ground_truth) -&gt; float:
    """
    Calculate BLEU score using NLTK and evaluate against a threshold.
    
    Args:
    output (str): The output to evaluate.
    ground_truth (str): The ground_truth output.
    threshold (float): The threshold for the BLEU score (default: 0.5).
    
    Returns:
    tuple: (float, bool) - The BLEU score and whether it passes the threshold.
    """
    # Tokenize the summaries
    output_tokens = word_tokenize(output.lower())
    ground_truth_tokens = word_tokenize(ground_truth.lower())
    
    try:
        # Calculate BLEU score
        # Note: sentence_bleu expects a list of references, so we wrap reference_tokens in a list
        bleu_score = sentence_bleu([ground_truth_tokens], output_tokens, weights=(0.25, 0.25, 0.25, 0.25))
        
        # Ensure bleu_score is a float
        if isinstance(bleu_score, (int, float)):
            bleu_score_float = float(bleu_score)
        elif isinstance(bleu_score, (list, np.ndarray)):
            # If it's a list or array, take the mean
            bleu_score_float = float(np.mean(bleu_score))
        else:
            # If it's neither a number nor a list, default to 0
            print(f"Warning: Unexpected BLEU score type: {type(bleu_score)}. Defaulting to 0.")
            bleu_score_float = 0.0
    except Exception as e:
        print(f"Error calculating BLEU score: {e}. Defaulting to 0.")
        bleu_score_float = 0.0
    
    # Return both the BLEU score and whether it passes the threshold
    return bleu_score_float


def get_assert(output: str, context, threshold=0.3) -&gt; Union[bool, float, Dict[str, Any]]:
    ground_truth = context['vars']['ground_truth']
    score = nltk_bleu_eval(output, ground_truth)
    
    if score &gt;= threshold:
        return {
            "pass": True,
            "score": score,
            "reason": "Average score is above threshold"
        }
    else:
        return {
        "pass": False,
        "score": score,
        "reason": "Average score is below threshold"
        }
</file>
<file name="skills/summarization/evaluation/custom_evals/llm_eval.py">
import anthropic
import os
import json
from typing import Dict, TypedDict, Union, Any

def llm_eval(summary, input):
    """
    Evaluate summary using an LLM (Claude).
    
    Args:
    summary (str): The summary to evaluate.
    input (str): The original text that was summarized.
    
    Returns:
    bool: True if the average score is above the threshold, False otherwise.
    """
    client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
    
    # You could include an example here too and likely improve performance further!
    prompt = f"""Evaluate the following summary based on these criteria:
    1. Conciseness (1-5)
    2. Accuracy (1-5)
    3. Completeness (1-5)
    4. Clarity (1-5)
    5. Explanation - a general description of the way the summary is evaluatied

    Here are some things to think about as you go about grading.

    1. Does the summary accurately capture the key provisions of the legal document?
    2. Does the summary omit any important details from the legal document?
    3. Does the summary contain any inaccuracies or misrepresentations of the legal document?
    4. Does the summary fairly represent the legal document as a whole, or does it unduly emphasize certain provisions over others?
    5. Does the summary accurately reflect the language and tone of the legal document?
    6. Does the summary capture the key concepts and principles embodied in the legal document?
    7. Does the summary omit any important ideas that should be captured to make decisions using the document?
    
    Provide a score for each criterion in JSON format. Here is the format you should follow always:

    &lt;json&gt;
    {{
    "conciseness": &lt;number&gt;,
    "accuracy": &lt;number&gt;,
    "completeness": &lt;number&gt;,
    "clarity": &lt;number&gt;,
    "explanation": &lt;string&gt;,
    }}
    &lt;/json&gt;

    Original Text: {input}
    
    Summary to Evaluate: {summary}
    
    Evaluation (JSON format):"""
    
    response = client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=1000,
        temperature=0,
        messages=[
            {
                "role": "user",
                "content": prompt
            },
            {
                "role": "assistant",
                "content": "&lt;json&gt;" 
            }
        ],
        stop_sequences=["&lt;/json&gt;"]
    )
    
    evaluation = json.loads(response.content[0].text)
    # Filter out non-numeric values and calculate the average
    numeric_values = [value for key, value in evaluation.items() if isinstance(value, (int, float))]
    avg_score = sum(numeric_values) / len(numeric_values)
    return avg_score, evaluation['explanation']

def get_assert(output: str, context, threshold=0.5) -&gt; Union[bool, float, Dict[str, Any]]:
    input = context['vars']['input']
    score, evaluation = llm_eval(output, input)

    # 4 different dimensions we measure performance on
    normalized_score = score / 4 
    
    if normalized_score &gt;= threshold:
        return {
            "pass": True,
            "score": score,
            "reason": evaluation
        }
    else:
        return {
        "pass": False,
        "score": score,
        "reason": evaluation
        }
</file>
<file name="skills/summarization/evaluation/custom_evals/rouge_eval.py">
import numpy as np
from typing import Dict, TypedDict, Union, Any
from rouge_score import rouge_scorer

def rouge_eval(summary, ground_truth, threshold=0.3) -&gt; float:
    """
    Evaluate summary using ROUGE scores.
    
    Args:
    summary (str): The summary to evaluate.
    ground_truth (str): The ground_truth summary.
    threshold (float): The threshold for the ROUGE score (default: 0.3).
    
    Returns:
    bool: True if the average ROUGE score is above the threshold, False otherwise.
    """
    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)
    scores = scorer.score(summary, ground_truth)
    
    # Calculate average ROUGE score
    avg_rouge = np.mean([scores['rouge1'].fmeasure, scores['rouge2'].fmeasure, scores['rougeL'].fmeasure])
    
    return float(avg_rouge)

def get_assert(output: str, context, threshold=0.3) -&gt; Union[bool, float, Dict[str, Any]]:
    ground_truth = context['vars']['ground_truth']
    score = rouge_eval(output, ground_truth)
    
    if score &gt;= threshold:
        return {
            "pass": True,
            "score": score,
            "reason": "Average score is above threshold"
        }
    else:
        return {
            "pass": False,
            "score": score,
            "reason": "Average score is below threshold"
        }
</file>
<file name="skills/summarization/evaluation/promptfooconfig.yaml">
description: 'Summarization Evaluation'

prompts:
  - prompts.py:basic_summarize
  - prompts.py:guided_legal_summary
  - prompts.py:summarize_long_document

providers:
  - id: anthropic:messages:claude-3-haiku-20240307
    label: "3.0 Haiku"
    config:
      max_tokens: 4096
      temperature: 0
  - id: anthropic:messages:claude-3-5-sonnet-20240620
    label: "3.5 Sonnet"
    config:
      max_tokens: 4096
      temperature: 0

defaultTest:
  assert:
    - type: not-contains-any
      value: 
        - "I am an AI"
        - "As an AI language model"
        - "I'm an AI assistant"
        - "I am a chatbot"

tests: tests.yaml

outputPath: ../data/results.csv

evaluateOptions.showProgressBar: true
</file>
<file name="skills/summarization/evaluation/prompts.py">
def basic_summarize(text):

    prompt = f"""
    You are a legal analyst known for highly accurate and detailed summaries of legal documents.
    Summarize the following text in bullet points. Focus on the main ideas and key details:
    
    {text}
    
    Here is the summary of the legal document: &lt;summary&gt;
    """

    return prompt

def guided_legal_summary(text):

    prompt = f"""
    You are a legal analyst known for highly accurate and detailed summaries of legal documents.
    
    Summarize the following legal document. Focus on these key aspects:

    1. Parties involved
    2. Main subject matter
    3. Key terms and conditions
    4. Important dates or deadlines
    5. Any unusual or notable clauses

    Provide the summary in bullet points under each category.

    Document text:
    {text}

    Here is the summary of the sublease agreement: &lt;summary&gt;
    
    """
  
    return prompt
  

def summarize_long_document(text):

    prompt = f"""
    You are a legal analyst specializing in real estate law, known for highly accurate and detailed summaries of sublease agreements.

    Summarize the following sublease agreement. Focus on these key aspects:

    1. Parties involved (sublessor, sublessee, original lessor)
    2. Property details (address, description, permitted use)
    3. Term and rent (start date, end date, monthly rent, security deposit)
    4. Responsibilities (utilities, maintenance, repairs)
    5. Consent and notices (landlord's consent, notice requirements)
    6. Special provisions (furniture, parking, subletting restrictions)

    Provide the summary in bullet points nested within the XML header for each section. For example:

    &lt;parties involved&gt;
    - Sublessor: [Name]
    // Add more details as needed
    &lt;/parties involved&gt;
    
    If any information is not explicitly stated in the document, note it as "Not specified".

    Sublease agreement text:
    {text}
    
    Here is the summary of the sublease agreement: &lt;summary&gt;
    """
      
    return prompt
</file>
<file name="skills/summarization/evaluation/tests.yaml">
- vars:
    input: file://../data/sample-lease1.txt
    ground_truth: file://../data/sample-lease1-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease2.txt
    ground_truth: file://../data/sample-lease2-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease3.txt
    ground_truth: file://../data/sample-lease3-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease4.txt
    ground_truth: file://../data/sample-lease4-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease5.txt
    ground_truth: file://../data/sample-lease5-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease6.txt
    ground_truth: file://../data/sample-lease6-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease7.txt
    ground_truth: file://../data/sample-lease7-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease8.txt
    ground_truth: file://../data/sample-lease8-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py

- vars:
    input: file://../data/sample-lease9.txt
    ground_truth: file://../data/sample-lease9-summary.txt
  assert:
    - type: icontains-all
      value:
        - 'parties involved'
        - 'property details'
        - 'term and rent'
        - 'responsibilities'
        - 'consent and notices'
        - 'special provisions'
    - type: python
      value: file://custom_evals/llm_eval.py
    - type: python
      value: file://custom_evals/rouge_eval.py
    - type: python
      value: file://custom_evals/bleu_eval.py
</file>
<file name="skills/summarization/guide.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Summarization with Claude
# 
# ## Introduction
# 
# Summarization is a crucial task in natural language processing that involves condensing large amounts of text into shorter, more digestible formats while retaining key information. In today's information-rich world, the ability to quickly extract and synthesize essential points from lengthy documents is invaluable across various industries and applications.
# 
# This guide focuses on leveraging Claude's capabilities for summarization, with a particular emphasis on legal documents. Legal documents can often be long and tedious to read – particularly where there is a lot of fine print and legal terminology. We'll explore techniques for effective summarization of such documents, methods for evaluating summary quality, and strategies for systematically improving summarization performance.
# 
# Key aspects we'll cover include:
# - Crafting effective prompts for summarization
# - Extracting specific metadata from documents
# - Handling longer documents beyond typical token limits
# - Evaluating summary quality using automated methods (e.g., ROUGE scores and [Promptfoo](https://www.promptfoo.dev/) custom methods)
# - Iteratively improving summarization performance
# - General conclusive tips on how to optimize your summarization workflows
# 
# By the end of this guide, you'll have a solid understanding of how to implement and refine summarization tasks using Claude, along with a framework for applying these techniques to your own specific use cases.
# 
# Before we get going, it's worth talking about evaluations in this guide. Evaluating the quality of summarization is a notoriously challenging task. Unlike many other natural language processing tasks, summarization evaluation often lacks clear-cut, objective metrics. The process can be highly subjective, with different readers valuing different aspects of a summary. Traditional empirical methods like ROUGE scores, while useful, have limitations in capturing nuanced aspects such as coherence, factual accuracy, and relevance. Moreover, the "best" summary can vary depending on the specific use case, target audience, and desired level of detail. Despite these challenges, we explore several different approaches in this guide that can be leveraged, combining automated metrics, regular expressions, and task-specific criteria. In this guide we recognize that the most effective approach often involves a tailored combination of techniques suited to the particular summarization task at hand.
# 
# ## Table of Contents
# 
# 1. [Setup](#setup)
# 2. [Data Preparation](#data-preparation)
# 3. [Basic Summarization](#basic-summarization)
# 4. [Multi-Shot Basic Summarization](#multi-shot-basic-summarization)
# 5. [Advanced Techniques](#advanced-techniques)
#     - [Guided Summarization](#guided-summarization)
#     - [Domain-Specific Guided Summarization](#domain-specific-guided-summarization)
#     - [Meta-Summarization](#including-the-context-of-the-entire-document-meta-summarization)
# 6. [Summary Indexed Documents: An Advanced RAG Approach](#summary-indexed-documents-an-advanced-rag-approach)
#     - [Best Practices for Summarization Rag](#best-practices-for-summarization-rag)
# 7. [Evaluations](#evaluations)
# 8. [Iterative Improvement](#iterative-improvement)
# 9. [Conclusion and Best Practices](#conclusion-and-best-practices)
# 
# ## Setup
# 
# To complete this guide, you'll need to install the following packages:
# - anthropic 
# - pypdf
# - pandas
# - matplotlib
# - sklearn
# - numpy
# - rouge-score
# - nltk
# - seaborn
# - [promptfoo](https://www.promptfoo.dev/) (for evaluation)
# 
# You'll also need an Anthropic API key.
# 
# Let's start by installing the required packages and setting up our environment:

# In[1]:


# install packages
get_ipython().system('pip install anthropic pypdf pandas matplotlib numpy rouge-score nltk seaborn --quiet')


# In[11]:


import os
import re
import anthropic
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from typing import List, Dict, Tuple
import json
import seaborn as sns

# Set up Anthropic client
# You can set up a .env file with your API key to keep it private, and import it like so:
# from dotenv import load_dotenv
# load_dotenv()

# or add your key directly
api_key = 'ANTHROPIC_API_KEY' # Replace ANTHROPIC_API_KEY with your actual API key
client = anthropic.Anthropic(api_key=api_key)

print("Setup complete!")


# ## Data Preparation
# Before we can begin summarizing documents, we need to prepare our data. This involves extracting text from PDFs, cleaning the text, and ensuring it's ready for input into our language model. For the purposes of this demo, we have sourced a [publicly available Sublease Agreement from the sec.gov website](https://www.sec.gov/Archives/edgar/data/1045425/000119312507044370/dex1032.htm). 
# 
# If you have any PDF you want to test this on, feel free to import it into this directory, and then change the file path below. **If you want to just use a text blob via copy and paste, skip this step and define `text = &lt;text blob&gt;`**.
# 
# Here's a set of functions to handle this process:

# In[12]:


import pypdf
import re

pdf_path = "data/Sample Sublease Agreement.pdf"

def extract_text_from_pdf(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = pypdf.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text() + "\n"
    return text

def clean_text(text):
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text)
    # Remove page numbers
    text = re.sub(r'\n\s*\d+\s*\n', '\n', text)
    return text.strip()

def prepare_for_llm(text, max_tokens=180000):
    # Truncate text to fit within token limit (approximate)
    return text[:max_tokens * 4]  # Assuming average of 4 characters per token

def get_llm_text(path):
    extracted_text = extract_text_from_pdf(path)
    cleaned_text = clean_text(extracted_text)
    llm_ready_text = prepare_for_llm(cleaned_text)
    return llm_ready_text

# You can now use get_llm_text in your LLM prompt
text = get_llm_text(pdf_path)
print(text[:500])


# This setup allows us to easily process PDF documents and prepare them for summarization. In the next section, we'll start with a basic summarization approach and then build upon it with more advanced techniques.

# ## Basic Summarization
# 
# Let's start with a simple summarization function using Claude. This is a simple attempt at using Claude to summarize the text from the document above. As we progress through this guide, we will improve on this method.
# 
# One thing to note is while this might seem basic, we are actually using some important functionality of Claude already. One piece worth noting is the use of the assistant role and stop sequences. The assistant preamble tees Claude up to include the summary directly after the final phrase `&lt;summary&gt;`. The stop sequence `&lt;/summary&gt;` then tells Claude to stop generating. This is a pattern we will continue to use throughout this guide.

# In[13]:


def basic_summarize(text, max_tokens=1000):

    # Prompt the model to summarize the text
    prompt = f"""Summarize the following text in bullet points. Focus on the main ideas and key details:
    {text}
    """

    response = client.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=max_tokens,
            system="You are a legal analyst known for highly accurate and detailed summaries of legal documents.",
            messages=[
                {
                    "role": "user", 
                    "content": prompt
                },
                {
                    "role": "assistant",
                    "content": "Here is the summary of the legal document: &lt;summary&gt;" 
                }
            ],
            stop_sequences=["&lt;/summary&gt;"]
        )

    return response.content[0].text


# In[14]:


basic_response = basic_summarize(text, max_tokens=1000)

print(basic_response)


# This basic approach provides a simple summary, but it may not capture all the nuances we need for legal or financial documents. As you'll notice too, when you rerun the cell above, there is no standard, formalized output. Instead, we retrieve a basic summarization of the document, without much structured output to parse through. This makes it harder to read, more difficult to trust (how do we know it didn't miss something?) and thus trickier to use in any real world context.
# 
# Let's see if we can tweak our prompt to get a more structure version of our summary.

# ## Multi-Shot Basic Summarization
# 
# It's pretty cool that we can summarize massive documents so fast, but we can do even better. Let's try adding a few examples to our prompt to see if we can improve the output and create a bit of structure in our output before we move on to even more advanced techniques. 
# 
# Note, here we haven't really change the actual format of the request, although we have appended 2 additional pieces: 
# 
# 1. We've told the model "do not preamble". This can often be a good idea when it comes to constraining the model output to just the answer we want, without that initial form conversational angle you might be familiar with if you've used Claude before. It's particularly important when we aren't using other "instructions" within the prompt (as we might do later in this guide).
# 2. We append 3 examples of summarized documents. This is called few-shot or multi-shot learning, and it can help the model understand what we're looking for.
# 
# Let's see how the output changes:

# In[15]:


# We import from our data directory to save space in our notebook
from data.multiple_subleases import document1, document2, document3, sample1, sample2, sample3

def basic_summarize_multishot(text, max_tokens=1000):

    # Prompt the model to summarize the text
    prompt = f"""Summarize the following text in bullet points. Focus on the main ideas and key details:
        {text}

    Do not preamble.

    Use these examples for guidance in summarizing:

    &lt;example1&gt;
        &lt;original1&gt;
            {document1}
        &lt;/original1&gt;

        &lt;summary1&gt;
            {sample1}
        &lt;/summary1&gt;
    &lt;/example1&gt;

    &lt;example2&gt;
        &lt;original2&gt;
            {document2}
        &lt;/original2&gt;

        &lt;summary2&gt;
            {sample2}
        &lt;/summary2&gt;
    &lt;/example2&gt;

    &lt;example3&gt;
        &lt;original3&gt;
            {document3}
        &lt;/original3&gt;

        &lt;summary3&gt;
            {sample3}
        &lt;/summary3&gt;
    &lt;/example3&gt;
    """

    response = client.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=max_tokens,
            system="You are a legal analyst known for highly accurate and detailed summaries of legal documents.",
            messages=[
                {
                    "role": "user", 
                    "content": prompt
                },
                {
                    "role": "assistant",
                    "content": "Here is the summary of the legal document: &lt;summary&gt;" 
                }
            ],
            stop_sequences=["&lt;/summary&gt;"]
        )

    return response.content[0].text


# In[16]:


basic_multishot_response = basic_summarize_multishot(text, max_tokens=1000)

print(basic_multishot_response)


# If you look at the examples we provided, you see see that the format of the output above is the same *(go to data/&lt;any of the .txt files&gt; to see)*. This is interesting – we didn't explicitly tell Claude to follow the format of the examples, but it seems to have picked up on it anyway. This illustrates the power of few-shot learning, and how Claude can generalize from a few examples to new inputs.

# ## Advanced Summarization Techniques
# 
# ### Guided Summarization
# 
# Guided summarization is where we explicitly define a framework for the model to abide by in it's summarization task. We can do this all via prompting, changing the details of the prompt to guide Claude to be more or less verbose, include more or less technical terminology, or provide a higher or lower level summary of the context at hand. For legal documents, we can guide the summarization to focus on specific aspects.
# 
# Note, we could likely accomplish the same formatted output we reveal below via examples (which we explored above)!

# In[17]:


def guided_legal_summary(text, max_tokens=1000):

    # Prompt the model to summarize the text
    prompt = f"""Summarize the following legal document. Focus on these key aspects:

    1. Parties involved
    2. Main subject matter
    3. Key terms and conditions
    4. Important dates or deadlines
    5. Any unusual or notable clauses

    Provide the summary in bullet points under each category.

    Document text:
    {text}
    
    """

    response = client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=max_tokens,
        system="You are a legal analyst known for highly accurate and detailed summaries of legal documents.",
        messages=[
            {
                "role": "user", 
                "content": prompt
            },
            {
                "role": "assistant",
                "content": "Here is the summary of the legal document: &lt;summary&gt;" 
            }
        ],
        stop_sequences=["&lt;/summary&gt;"]
    )

    return response.content[0].text


# In[18]:


# Example usage
legal_summary = guided_legal_summary(text)
print(legal_summary)


# This certainly makes it easier to parse out the most relevant sections of the document and understand the implications of specific line items and important clauses.

# ### Domain-Specific Guided Summarization
# 
# You could give the above guided summarization prompt to any type of document, but we can make it even more powerful by tailoring it to specific document types. For example, if we know we're dealing with a sublease agreement, we can guide the model to focus on the most relevant legal terms and concepts for that particular type of document. This would be most relevant when we are working on a specific use case using Claude and explicitly know the most relevant values we want to extract.
# 
# Here's an example of how we might modify our guided summarization function for sublease agreements. Note that we'll also add the 'model' as an additional parameter to our function so that we can more easily choose different models for summarization based upon the task:
# 
# 

# In[19]:


def guided_sublease_summary(text, model="claude-3-5-sonnet-20240620", max_tokens=1000):

    # Prompt the model to summarize the sublease agreement
    prompt = f"""Summarize the following sublease agreement. Focus on these key aspects:

    1. Parties involved (sublessor, sublessee, original lessor)
    2. Property details (address, description, permitted use)
    3. Term and rent (start date, end date, monthly rent, security deposit)
    4. Responsibilities (utilities, maintenance, repairs)
    5. Consent and notices (landlord's consent, notice requirements)
    6. Special provisions (furniture, parking, subletting restrictions)

    Provide the summary in bullet points nested within the XML header for each section. For example:

    &lt;parties involved&gt;
    - Sublessor: [Name]
    // Add more details as needed
    &lt;/parties involved&gt;
    
    If any information is not explicitly stated in the document, note it as "Not specified". Do not preamble.

    Sublease agreement text:
    {text}
    
    """

    response = client.messages.create(
        model=model,
        max_tokens=max_tokens,
        system="You are a legal analyst specializing in real estate law, known for highly accurate and detailed summaries of sublease agreements.",
        messages=[
            {
                "role": "user", 
                "content": prompt
            },
            {
                "role": "assistant",
                "content": "Here is the summary of the sublease agreement: &lt;summary&gt;" 
            }
        ],
        stop_sequences=["&lt;/summary&gt;"]
    )

    return response.content[0].text


# In[20]:


# Example usage
sublease_summary = guided_sublease_summary(text)
print(sublease_summary)


# Because we decided to output each section of the summary in XML tags, we can now parse them individually out like so (this could also be done via JSON or any other format):

# In[21]:


import re

def parse_sections_regex(text):
    pattern = r'&lt;(.*?)&gt;(.*?)&lt;/\1&gt;'
    matches = re.findall(pattern, text, re.DOTALL)
    
    parsed_sections = {}
    for tag, content in matches:
        items = [item.strip('- ').strip() for item in content.strip().split('\n') if item.strip()]
        parsed_sections[tag] = items
    
    return parsed_sections


# Parse the sections
parsed_sections = parse_sections_regex(sublease_summary)

# Check if parsing was successful
if isinstance(parsed_sections, dict) and 'parties involved' in parsed_sections:
    print("Parties involved:")
    for item in parsed_sections['parties involved']:
        print(f"- {item}")
else:
    print("Error: Parsing failed or 'parties involved' section not found.")
    print("Parsed result:", parsed_sections)


# ### Including the Context of Multiple Documents (Meta-Summarization)
# 
# What if we have a lot of documents related to the same client? We can use a chunking method in order to handle this. This is a technique that involves breaking down documents into smaller, manageable chunks and then processing each chunk separately. We can then combine the summaries of each chunk to create a meta-summary of the entire document. This can be particularly helpful when we want to summarize a large number of documents or when we want to summarize a single document that is very long.
# 
# Here's an example of how we might do this:

# In[21]:


from data.multiple_subleases import document1, document2, document3

def chunk_text(text, chunk_size=2000):
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

def summarize_long_document(text, max_tokens=2000):

    chunks = chunk_text(text)

    # Iterate over chunks and summarize each one
    # We use guided_legal_summary here, but you can use basic_summarize or any other summarization function
    # Note that we'll also use haiku for the interim summaries, and the 3.5 sonnet for the final summary
    chunk_summaries = [guided_sublease_summary(chunk, model="claude-3-haiku-20240307", max_tokens=max_tokens) for chunk in chunks]
    
    final_summary_prompt = f"""
    
    You are looking at the chunked summaries of multiple documents that are all related. Combine the following summaries of the document from different truthful sources into a coherent overall summary:

    {"".join(chunk_summaries)}

    1. Parties involved (sublessor, sublessee, original lessor)
    2. Property details (address, description, permitted use)
    3. Term and rent (start date, end date, monthly rent, security deposit)
    4. Responsibilities (utilities, maintenance, repairs)
    5. Consent and notices (landlord's consent, notice requirements)
    6. Special provisions (furniture, parking, subletting restrictions)

    Provide the summary in bullet points nested within the XML header for each section. For example:

    &lt;parties involved&gt;
    - Sublessor: [Name]
    // Add more details as needed
    &lt;/parties involved&gt;
    
    If any information is not explicitly stated in the document, note it as "Not specified".

    Summary:
    """

    response = client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=max_tokens,
        system="You are a legal expert that summarizes notes on one document.",
        messages=[
            {
                "role": "user", 
                "content": final_summary_prompt
            },
            {
                "role": "assistant",
                "content": "Here is the summary of the legal document: &lt;summary&gt;" 
            }
        ],
        stop_sequences=["&lt;/summary&gt;"]
    )
    
    return response.content[0].text

# Example usage
# combine 3 documents (all related) together
text = document1 + document2 + document3
long_summary = summarize_long_document(text)
print(long_summary)


# ## Summary Indexed Documents: An Advanced RAG Approach
# 
# Summary Indexed Documents is an advanced approach to Retrieval-Augmented Generation (RAG) that operates at the document level. 
# 
# This method offers several advantages over traditional RAG techniques, particularly in scenarios involving large documents or when precise information retrieval is crucial.
# 
# #### How It Works
# 
# 1. Document Summarization: Generate concise summaries for each document in your corpus (subset of text is queried and quickly summarized).
# 2. Context Window Optimization: Ensure all summaries fit within the context window of your language model.
# 3. Relevancy Scoring: Ask a model to rank the relevance of each summary to the query being asked.
# 4. Reranking (Optional): Apply reranking techniques to further refine and compress the top-K results.
# 5. Answer the query at-hand.
# 
# There are some distinct advantages to this approach: 
# - More efficient way of ranking documents for retrieval, using less context than traditional RAG methods.
# - Superior Performance on Specific Tasks: Outperforms other RAG methods, consistently ranking the correct document first.
# - Optimized Information Retrieval: Reranking helps compress results, ensuring the most concise and relevant information is presented to the model.

# In[22]:


class LegalSummaryIndexedDocuments:

    def __init__(self, client):
        self.client = client # Claude client
        self.documents: List[Dict[str, str]] = [] # List of docs to store
        self.summaries: List[str] = []

    def add_document(self, doc_id: str, content: str):
        # Adds a document to the index
        self.documents.append({"id": doc_id, "content": content})

    def generate_summaries(self):
        # Generates summaries for all documents in the index
        for doc in self.documents:
            summary = self._generate_legal_summary(doc["content"])
            self.summaries.append(summary)

    def _generate_legal_summary(self, content: str) -&gt; str:

        # Note how we constrain the content to a maximum of 2000 words. We do this because we don't need that much information for the intial ranking.
        prompt = f"""
        Summarize the following sublease agreement. Focus on these key aspects:

        1. Parties involved (sublessor, sublessee, original lessor)
        2. Property details (address, description, permitted use)
        3. Term and rent (start date, end date, monthly rent, security deposit)
        4. Responsibilities (utilities, maintenance, repairs)
        5. Consent and notices (landlord's consent, notice requirements)
        6. Special provisions (furniture, parking, subletting restrictions)

        Provide the summary in bullet points nested within the XML header for each section. For example:

        &lt;parties involved&gt;
        - Sublessor: [Name]
        // Add more details as needed
        &lt;/parties involved&gt;
        
        If any information is not explicitly stated in the document, note it as "Not specified".

        Sublease agreement text:
        {content[:2000]}...

        Summary:
        """

        response = client.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=500,
            temperature=0.2,
            messages=[
                {"role": "user", "content": prompt},
                {"role": "assistant", "content": "Here is the summary of the legal document: &lt;summary&gt;"}
            ],
            stop_sequences=["&lt;/summary&gt;"]        
        )
        return response.content[0].text

    def rank_documents(self, query: str, top_k: int = 3) -&gt; List[Tuple[str, float]]:
        """
        Rank documents based on their relevance to the given query.
        We use Haiku here as a cheaper, faster model for ranking. 
        """
        ranked_scores = []
        for summary in self.summaries:

            prompt=f"Legal document summary: {summary}\n\nLegal query: {query}\n\nRate the relevance of this legal document to the query on a scale of 0 to 10. Only output the numeric value:"

            response = client.messages.create(
                model="claude-3-haiku-20240307",
                max_tokens=2,
                temperature=0,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            ranked_score = float(response.content[0].text)
            ranked_scores.append(ranked_score)

        ranked_indices = np.argsort(ranked_scores)[::-1][:top_k]
        return [(self.documents[i]["id"], ranked_scores[i]) for i in ranked_indices]

    def extract_relevant_clauses(self, doc_id: str, query: str) -&gt; List[str]:
        """
        Extracts relevant clauses from a document based on a query.
        """
        doc_content = next(doc["content"] for doc in self.documents if doc["id"] == doc_id)
        
        prompt = f"""
        Given the following legal query and document content, extract the most relevant clauses or sections and write the answer to the query. 
        Provide each relevant clause or section separately, preserving the original legal language:

        Legal query: {query}

        Document content: {doc_content}...

        Relevant clauses or sections (separated by '---'):"""

        response = client.messages.create(
                model="claude-3-5-sonnet-20240620",
                max_tokens=1000,
                temperature=0,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
        
        clauses = re.split(r'\n\s*---\s*\n', response.content[0].text.strip())
        return [clause.strip() for clause in clauses if clause.strip()]


# In[23]:


from data.multiple_subleases import document1, document2, document3

lsid = LegalSummaryIndexedDocuments(client=client)

# Add documents
lsid.add_document("doc1", document1)
lsid.add_document("doc2", document2)
lsid.add_document("doc3", document3)

# Generate summaries - this would happen at ingestion
lsid.generate_summaries()

# Rank documents for a legal query
legal_query = "What contract is for the sublessor Apex Innovations, LLC?"
ranked_results = lsid.rank_documents(legal_query)

print("Initial ranking:", ranked_results)

# Extract relevant clauses from the top-ranked document
top_doc_id = ranked_results[0][0]
relevant_clauses = lsid.extract_relevant_clauses(top_doc_id, legal_query)

print("\nRelevant clauses from the top-ranked document:")
for i, clause in enumerate(relevant_clauses[1:], 1):
    print(f"Clause {i}: {clause}")


# ### Best Practices for Summarization RAG
# 
# - Optimal Summary Length: Experiment with different summary lengths to find the right balance between conciseness and informativeness.
# - Iterative Reranking: Consider multiple rounds of reranking for more precise results, especially with larger document sets.
# - Caching: Implement caching mechanisms for summaries and initial rankings to improve performance on repeated queries.
# 
# Summary Indexed Documents offer a powerful approach to RAG, particularly excelling in scenarios involving large documents or when precise information retrieval is crucial. By leveraging document summarization, log probability scoring, and optional reranking, this method provides an efficient and effective way to retrieve and present relevant information to language models.

# ## Evaluations
# 
# As mentioned in the introduction to this cookbook, evaluating the quality of a summary is hard work. This is because there are many ways to summarize a document, and different summaries may be equally valid. Depending on the use case, different aspects of a summary may be more or less important.
# 
# You can read more about our empirical methodology to prompt engineering [here](https://docs.anthropic.com/en/docs/prompt-engineering). Using a Jupyter Notebook is a great way to start prompt engineering but as your datasets grow larger and your prompts more numerous it is important to leverage tooling that will scale with you. 
# 
# In this section of the guide we will explore using [Promptfoo](https://www.promptfoo.dev/) an open source LLM evaluation toolkit. To get started head over to the `./evaluation` directory and checkout the `./evaluation/README.md`.
# 
# When you have successfully run an evaluation come back here to view the results. You can also view the results in a dynamic way using the command `npx promptfoo@latest view`, after creating some results.

# In[24]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

get_ipython().run_line_magic('matplotlib', 'inline')
plt.style.use('seaborn')

# Load the data
df = pd.read_csv('data/results.csv')

# Function to extract PASS/FAIL and score
def extract_result(text):
    match = re.search(r'\[(PASS|FAIL)\]\s*\((\d+\.\d+)\)', str(text))
    if match:
        return match.group(1), float(match.group(2))
    return 'UNKNOWN', 0.0

# Apply the extraction to relevant columns
for col in df.columns[2:]:
    df[f'{col}_result'], df[f'{col}_score'] = zip(*df[col].apply(extract_result))

# Prepare data for grouped accuracy score
models = ['3.5 Sonnet', '3.0 Haiku']
prompts = ['basic_summarize', 'guided_legal_summary', 'summarize_long_document']

results = []
for model in models:
    for prompt in prompts:
        col = f'[{model}] prompts.py:{prompt}_result'
        if col in df.columns:
            pass_rate = (df[col] == 'PASS').mean()
            results.append({'Model': model, 'Prompt': prompt, 'Pass Rate': pass_rate})

result_df = pd.DataFrame(results)

# 1. Grouped bar chart for accuracy scores
plt.figure(figsize=(12, 6))
result_pivot = result_df.pivot(index='Prompt', columns='Model', values='Pass Rate')
result_pivot.plot(kind='bar')
plt.title('Pass Rate by Model and Prompt')
plt.ylabel('Pass Rate')
plt.legend(title='Model')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# 2. Box plot of scores
plt.figure(figsize=(8, 8))
score_cols = [col for col in df.columns if col.endswith('_score')]
score_data = df[score_cols].melt()
sns.boxplot(x='variable', y='value', data=score_data)
plt.title('Distribution of Scores')
plt.xticks(rotation=90)
plt.xlabel('Model and Prompt')
plt.ylabel('Score')
plt.tight_layout()
plt.show()

# Display summary statistics
summary_stats = df[[col for col in df.columns if col.endswith('_score')]].describe()
display(summary_stats)


# Looking at the results, it seems like our best performer is 3.5 Sonnet, with a 66% pass rate across all evals and only 3 failed tests out of 45 (when one test fails for a prompt, it's deemed a fail). And this is just the beginning – we are using entirely notional data here that was either (a) generated by Claude, or (b) taken from the SEC gov website. We can do much better when we have real data, because we know more about the distinct problem set we are working with.

# ## Iterative Improvement
# 
# As we look into the eval results more, there's continued room for improvement. This is where the iterative part of prompt engineering comes in. Here are some steps we can take to improve our results:
# 
# 1. Analyze the Promptfoo results to identify strengths and weaknesses – for example, it seems our contains eval was failing a lot. This is probably because some of the documents don't contain the information which is required in the XML tags. We should refine this eval if we are to accurately assess performance (but this is just an example!).
# 2. Refine prompts to address specific issues (e.g., improve conciseness or completeness) – we saw that multi-shot was an initial really good first attempt. This is somethign we should incorporate alongside some of the advanced techniques to improve performance further.
# 3. Experiment with different chunking strategies for long documents.
# 4. Fine-tune temperature and max_tokens parameters.
# 5. Implement post-processing steps to enhance summary quality.
# 
# ## Conclusion and Best Practices
# 
# In this guide, we've covered a range of techniques for summarizing documents with Claude, with a focus on legal documents. Building a perfect summarization system and eval framework for summarization is an art: it requires a combination of these methods in order to succeed. As we mentioned at the beginning, summarization is a very subjective topic, and yet we've had a good stab at finding feasible ways to evaluate it and feel comfortable with our results. Always remember too – you aren't benchmarking your results against 100% accuracy. You're benchmarking against how well you could perform this complex task yourself; and with the speed and efficiency of Claude as demonstrated in this guide, you start to realise the true benefits to such a methodological approach, so you can spend time on the real decision making. 
# 
# Wrapping up the advice here, we've included some best practices to keep in mind:
# 
# 1. Craft clear and specific prompts. Use things like "don't preamble" to constrain the output.
# 2. Use at least 2 examples.
# 3. Use guided summarization for domain-specific documents.
# 4. Implement effective, advanced strategies for long documents.
# 5. Regularly evaluate and refine your approach.
# 6. Consider the ethical implications and limitations of AI-generated summaries.

</file>
<file name="third_party/Brave/web_search_using_brave.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Web search using Brave Search Engine
# 
# This notebook provides an introduction to connecting Claude to web search data by performing retrieval-augmented generation (RAG) with the help of the Brave search engine. Specifically, this notebook will walk you through:
# 1. Getting search results from the Brave API
# 2. Using Claude to answer questions with information from the real-time search data

# ## Steps
# 1. Setup
# 2. Searching with the Brave search API
# 3. Inject search results into prompt
# 4. Answer the user's question with Claude
# 

# ## Setup
# First, let's install the necessary libraries and set the API keys we will need to use in this notebook. We will need to get our [Claude API key](https://docs.anthropic.com/claude/reference/getting-started-with-the-api) and our free [Brave API key](https://brave.com/search/api/). Make sure to select the "Data for AI" plan from Brave when choosing a subscription. 

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic requests beautifulsoup4')


# In[74]:


# Insert your API keys here
ANTHROPIC_API_KEY="&lt;your_anthropic_api_key&gt;"
BRAVE_API_KEY="&lt;your_brave_api_key&gt;"


# ## Searching with Brave search API
# Now that our environment is setup, let's test the Brave search API. Here's a user's question we want to find an answer to:

# In[75]:


USER_QUESTION="What show won the Outstanding Drama award at the 2024 Emmys?"


# Now, we could directly feed this question to the Brave search API or we could use Claude to generate a list of diverse search queries to try based on the question to make our search more exhaustive. For the purposes of this notebook, we will do the latter.

# In[76]:


GENERATE_QUERIES=f"""\n\nHuman: You are an expert at generating search queries for the Brave search engine.
Generate three search queries that are relevant to this question. Output only valid JSON.

User question: {USER_QUESTION}

Format: {{"queries": ["query_1", "query_2", "query_3"]}}\n\nAssistant: {{"""


# In[77]:


import anthropic

client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

def get_completion(prompt: str):
    message = client.completions.create(
        model='claude-2.1',
        max_tokens_to_sample=1024,
        temperature=.5,
        prompt=prompt
    )
    return message.completion
queries_json = "{" + get_completion(GENERATE_QUERIES)
print(queries_json)


# Now let's get the top three search results for each one of the search queries Claude generated. Notice that we make a set of the urls to dedupe our results since some of the results are the same across different queries.

# In[ ]:


import requests
from time import sleep
import json

def get_search_results(search_query : str):
    headers = {"Accept": "application/json", "X-Subscription-Token": BRAVE_API_KEY}
    response = requests.get(
        "https://api.search.brave.com/res/v1/web/search",
        params={"q": search_query,
                "count": 3 # Max number of results to return
                },
        headers=headers,
        timeout=60
    )
    if not response.ok:
        raise Exception(f"HTTP error {response.status_code}")
    sleep(1) # avoid Brave rate limit
    return response.json().get("web", {}).get("results")
queries = json.loads(queries_json)["queries"]

urls_seen = set()
web_search_results = []
for query in queries:
    search_results = get_search_results(query)
    for result in search_results:
        url = result.get("url")
        if not url or url in urls_seen:
            continue
        
        urls_seen.add(url)
        web_search_results.append(result)
        
print(len(web_search_results))


# Let's take a closer look at the results we recieved.

# In[79]:


for i, item in enumerate(web_search_results):
    print(f"Search result {i+1}:")
    print(item.get("title"))
    print(item.get("url"))


# Great! It looks like we are getting back the web page title, url, and more metadata. To see a full description of the response object, check out the Brave search API [docs page](https://api.search.brave.com/app/documentation/web-search/get-started).
# 
# Unfortunately, we don't get back the actual web page content through the Brave search API so we need to do a little digging. Let's create a function that fetches the page content given a url.

# In[80]:


from bs4 import BeautifulSoup

def get_page_content(url : str) -&gt; str:
    html = requests.get(url).text
    soup = BeautifulSoup(html, 'html.parser')
    return soup.get_text(strip=True, separator='\n')


# Now, let's use this on the results we fetched and format them in a style we will want to use in our prompt later on.

# In[81]:


formatted_search_results = "\n".join(
        [
            f'&lt;item index="{i+1}"&gt;\n&lt;source&gt;{result.get("url")}&lt;/source&gt;\n&lt;page_content&gt;\n{get_page_content(result.get("url"))}\n&lt;/page_content&gt;\n&lt;/item&gt;'
            for i, result in enumerate(web_search_results)
        ]
    )
print(formatted_search_results)


# ## Inject search results into prompt
# Now that we have our search results nicely formatted, let's insert them into the prompt we will send to Claude.

# In[97]:


ANSWER_QUESTION = f"""\n\nHuman: I have provided you with the following search results:
{formatted_search_results}

Please answer the user's question using only information from the search results. Reference the relevant search result urls within your answer as links. Keep your answer concise.

User's question: {USER_QUESTION} \n\nAssistant:
"""
print(ANSWER_QUESTION)


# ## Answer question using search results
# Finally, now that we have our prompt constructed, we can ask Claude to answer the user's original question.

# In[98]:


print(get_completion(ANSWER_QUESTION))


</file>
<file name="third_party/Deepgram/README.md">
# Deepgram &lt;&gt; Anthropic Cookbooks

[Deepgram](https://deepgram.com/) is a foundational AI company providing the speech-to-text, text-to-speech, text-to-text and language intelligence capabilities you need to make your data readable and actionable by human or machines.

* The [Pre-Recorded Audio Notebook](./prerecorded_audio.ipynb) allows you to transcribe pre-recorded audio using Deepgram.

# More about Deepgram

Here are some of our favorite resources for getting started:
- [API Playground](https://playground.deepgram.com/)
- [Starter Apps](https://github.com/deepgram-starters)
- [Python SDK](https://github.com/deepgram/deepgram-python-sdk)
- [Node SDK](https://github.com/deepgram/deepgram-node-sdk)
- [.NET SDK](https://github.com/deepgram/deepgram-dotnet-sdk)
- [Go SDK](https://github.com/deepgram/deepgram-go-sdk)
- [Documentation](https://developers.deepgram.com/documentation/)
- [Blog posts](https://deepgram.com/learn)

 # Our Community

Do you have a question, comment, or want to connect? Head over to our [Github Discussions](https://github.com/orgs/deepgram/discussions) or join us on [Discord](https://discord.com/invite/xWRaCDBtW4).


# Get Started

If you're ready to get started using Deepgram, head over to the [Deepgram Console](https://console.deepgram.com/signup) to get your free API key and free credits and start building with our powerful speech, text and intelligence [APIs](https://developers.deepgram.com/reference/).


</file>
<file name="third_party/Deepgram/prerecorded_audio.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Transcribe an audio file with Deepgram &amp; use Anthropic to prepare interview questions!
# 
# **Make a copy of this notebook into your own drive, and follow the instructions below!** 🥳🥳🥳
# 
# ----------------------------
# 
# # Get started:
# Running the following three cells will allow you to transcribe any audio you wish. The comments below point out the variables you can manipulate to modify your output as you wish.
# 
# Before running this notebook, you'll need to have a couple audio URLs to transcribe. You can use any audio files you wish.
# 
# And by the way, if you haven't yet signed up for Deepgram, check out this link here: https://dpgr.am/prerecorded-notebook-signup

# # Step 1: Dependencies
# 
# Run this cell to download all necessary dependencies.
# 
# Note: You can run a cell by clicking the play button on the left or by clicking on the cell and pressing `shift`+`ENTER` at the same time. (Or `shift` + `return` on Mac).

# In[ ]:


get_ipython().system(' pip install requests ffmpeg-python')
get_ipython().system(' pip install deepgram-sdk --upgrade')
get_ipython().system(' pip install requests')
get_ipython().system(' pip install anthropic')


# # Step 2: Audio URL files
# 
# Find some audio files hosted on a server so you can use this notebook. OR An example file is provided by Deepgram is code below. 

# In[ ]:


# Have you completed Step 2 above? 👀
# Do you see your audio file in the folder on the left? 📂


# # Step 3: Transcription
# 
# Fill in the following variables:
# 
# 
# * `DG_KEY` = Your personal Deepgram API key
# * `AUDIO_FILE_URL` = a URL for an audio file you wish to transcribe.
# 
# 
# Now run the cell! (`Shift` + `Enter`)
# 
# -----------
# 
# 
# 
# And by the way, if you're already a Deepgram user, and you're getting an error in this cell the most common fixes are:
# 
# 1. You may need to update your installation of the deepgram-sdk.
# 2. You may need to check how many credits you have left in your Deepgram account.

# In[ ]:


from deepgram import DeepgramClient, PrerecordedOptions, FileSource
import requests

# Deepgram API key
DG_KEY = "🔑🔑🔑 Your API Key here! 🔑🔑🔑"

# URL of the audio file
AUDIO_FILE_URL = "https://static.deepgram.com/examples/nasa-spacewalk-interview.wav"

# Path to save the transcript JSON file
TRANSCRIPT_FILE = "transcript.json"

def main():
    try:
        # STEP 1: Create a Deepgram client using the API key
        deepgram = DeepgramClient(DG_KEY)

        # Download the audio file from the URL
        response = requests.get(AUDIO_FILE_URL)
        if response.status_code == 200:
            buffer_data = response.content
        else:
            print("Failed to download audio file")
            return

        payload: FileSource = {
            "buffer": buffer_data,
        }

        # STEP 2: Configure Deepgram options for audio analysis
        options = PrerecordedOptions(
            model="nova-2",
            smart_format=True,
        )

        # STEP 3: Call the transcribe_file method with the text payload and options
        response = deepgram.listen.prerecorded.v("1").transcribe_file(payload, options)

        # STEP 4: Write the response JSON to a file
        with open(TRANSCRIPT_FILE, "w") as transcript_file:
            transcript_file.write(response.to_json(indent=4))

        print("Transcript JSON file generated successfully.")

    except Exception as e:
        print(f"Exception: {e}")

if __name__ == "__main__":
    main()


# If the cell above succeeds, you should see JSON output file(s) in the content directory. Note: There may be a small delay between when the cell finishes running and when the JSON file actually appears. This is normal. Just wait a few moments for the file(s) to appear.

# # Step 4: Check out your transcription
# 
# The function below parses the output JSON and prints out the transcription of one of the files you just transcribed! (Make sure
# the file you're trying to examine is indeed already loaded into the content directory.)
# 
# **Set the `OUTPUT` variable to the name of the file you wish to see the transcription of.**
# 
# Then run this cell (`Shift`+`Enter`) to see a sentence-by-sentence transcription of your audio!

# In[ ]:


import json
# Set this variable to the path of the output file you wish to read
OUTPUT = 'transcript.json'


# The JSON is loaded with information, but if you just want to read the
# transcript, run the code below!
def print_transcript(transcription_file):
  with open(transcription_file, "r") as file:
        data = json.load(file)
        result = data['results']['channels'][0]['alternatives'][0]['transcript']
        result = result.split('.')
        for sentence in result:
          print(sentence + '.')

print_transcript(OUTPUT)


# 
# If the cell above succeeds you should see a plain text version of your audio transcription. 

# # Step 5: Prepare Interview Questions using Anthropic
# 
# Now we can send off our transcript to Anthropic for analysis to help us prepare some interview questions. Run the cell below (`Shift`+`Enter`) to get a suggested set of interview questions provided by Anthropic based on your audio transcript above.

# In[ ]:


import anthropic
import json

transcription_file = "transcript.json"

# Function to get the transcript from the JSON file
def get_transcript(transcription_file):
    with open(transcription_file, "r") as file:
        data = json.load(file)
        result = data['results']['channels'][0]['alternatives'][0]['transcript']
        return result

# Load the transcript from the JSON file
message_text = get_transcript(transcription_file)

# Initialize the Anthropic API client
client = anthropic.Anthropic(
    # Defaults to os.environ.get("ANTHROPIC_API_KEY")
    # Anthropic API key
    api_key="🔑🔑🔑 Your API Key here! 🔑🔑🔑"
)

# Prepare the text for the API request
formatted_messages = [
    {
        "role": "user",
        "content": message_text
    }
]

# Generate thoughtful, open-ended interview questions
response = client.messages.create(
    model="claude-3-opus-20240229",
    max_tokens=1000,
    temperature=0.5,
    system="Your task is to generate a series of thoughtful, open-ended questions for an interview based on the given context. The questions should be designed to elicit insightful and detailed responses from the interviewee, allowing them to showcase their knowledge, experience, and critical thinking skills. Avoid yes/no questions or those with obvious answers. Instead, focus on questions that encourage reflection, self-assessment, and the sharing of specific examples or anecdotes.",
    messages=formatted_messages
)

# Print the generated questions

# Join the text of each TextBlock into a single string
content = ''.join(block.text for block in response.content)

# Split the content by '\n\n'
parts = content.split('\n\n')

# Print each part with an additional line break
for part in parts:
    print(part)
    print('\n')


# If this cell succeeded you should see a list of interview questions based on your original audio file. Now you can transcribe audio with Deepgram and use Anthropic to get a set of interview questions. 

</file>
<file name="third_party/LlamaIndex/Basic_RAG_With_LlamaIndex.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # RAG Pipeline with LlamaIndex
# 
# In this notebook we will look into building Basic RAG Pipeline with LlamaIndex. The pipeline has following steps.
# 
# 1. Setup LLM and Embedding Model.
# 2. Download Data.
# 3. Load Data.
# 4. Index Data.
# 5. Create Query Engine.
# 6. Querying.

# ### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')


# ### Setup API Keys

# In[1]:


import os
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'


# ### Setup LLM and Embedding model
# 
# We will use anthropic latest released `Claude 3 Opus` models

# In[2]:


from llama_index.llms.anthropic import Anthropic
from llama_index.embeddings.huggingface import HuggingFaceEmbedding


# In[3]:


llm = Anthropic(temperature=0.0, model='claude-3-opus-20240229')
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-base-en-v1.5")


# In[4]:


from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model = embed_model
Settings.chunk_size = 512


# ### Download Data

# In[5]:


get_ipython().system("mkdir -p 'data/paul_graham/'")
get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/paul_graham/paul_graham_essay.txt' -O 'data/paul_graham/paul_graham_essay.txt'")


# In[6]:


from llama_index.core import (
    VectorStoreIndex,
    SimpleDirectoryReader,
)


# ### Load Data

# In[7]:


documents = SimpleDirectoryReader("./data/paul_graham").load_data()


# ### Index Data

# In[8]:


index = VectorStoreIndex.from_documents(
    documents,
)


# ### Create Query Engine

# In[9]:


query_engine = index.as_query_engine(similarity_top_k=3)


# ### Test Query

# In[10]:


response = query_engine.query("What did author do growing up?")


# In[11]:


print(response)


# In[ ]:





</file>
<file name="third_party/LlamaIndex/Multi_Document_Agents.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Multi-Document Agents
# 
# In this notebook we will look into Building RAG when you have a large number of documents using `DocumentAgents` concept with `ReAct Agent`.

# ### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')


# ### Set Logging

# In[1]:


# NOTE: This is ONLY necessary in jupyter notebook.
# Details: Jupyter runs an event-loop behind the scenes.
#          This results in nested event-loops when we start an event-loop to make async queries.
#          This is normally not allowed, we use nest_asyncio to allow it for convenience.
import nest_asyncio

nest_asyncio.apply()

import logging
import sys

# Set up the root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # Set logger level to INFO

# Clear out any existing handlers
logger.handlers = []

# Set up the StreamHandler to output to sys.stdout (Colab's output)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.INFO)  # Set handler level to INFO

# Add the handler to the logger
logger.addHandler(handler)

from IPython.display import display, HTML


# ### Set Anthropic API Key

# In[2]:


import os
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'


# ### Set LLM and Embedding model
# 
# We will use anthropic latest released `Claude-3 Opus` LLM.

# In[3]:


from llama_index.llms.anthropic import Anthropic
from llama_index.embeddings.huggingface import HuggingFaceEmbedding


# In[4]:


llm = Anthropic(temperature=0.0, model='claude-3-opus-20240229')
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-base-en-v1.5")


# In[5]:


from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model = embed_model
Settings.chunk_size = 512


# ### Download Documents
# 
# We will use Wikipedia pages of `Toronto`, `Seattle`, `Chicago`, `Boston`, `Houston` cities and build RAG pipeline.

# In[6]:


wiki_titles = ["Toronto", "Seattle", "Chicago", "Boston", "Houston"]

from pathlib import Path

import requests

for title in wiki_titles:
    response = requests.get(
        "https://en.wikipedia.org/w/api.php",
        params={
            "action": "query",
            "format": "json",
            "titles": title,
            "prop": "extracts",
            # 'exintro': True,
            "explaintext": True,
        },
    ).json()
    page = next(iter(response["query"]["pages"].values()))
    wiki_text = page["extract"]

    data_path = Path("data")
    if not data_path.exists():
        Path.mkdir(data_path)

    with open(data_path / f"{title}.txt", "w") as fp:
        fp.write(wiki_text)


# ### Load Document

# In[7]:


# Load all wiki documents

from llama_index.core import SimpleDirectoryReader

city_docs = {}
for wiki_title in wiki_titles:
    city_docs[wiki_title] = SimpleDirectoryReader(
        input_files=[f"data/{wiki_title}.txt"]
    ).load_data()


# #### Build ReAct Agent for each city 

# In[8]:


from llama_index.core.agent import ReActAgent
from llama_index.core import VectorStoreIndex, SummaryIndex
from llama_index.core.tools import QueryEngineTool, ToolMetadata

# Build agents dictionary
agents = {}

for wiki_title in wiki_titles:
    # build vector index
    vector_index = VectorStoreIndex.from_documents(
        city_docs[wiki_title],
    )
    # build summary index
    summary_index = SummaryIndex.from_documents(
        city_docs[wiki_title],
    )
    # define query engines
    vector_query_engine = vector_index.as_query_engine()
    summary_query_engine = summary_index.as_query_engine()

    # define tools
    query_engine_tools = [
        QueryEngineTool(
            query_engine=vector_query_engine,
            metadata=ToolMetadata(
                name="vector_tool",
                description=(
                    f"Useful for retrieving specific context from {wiki_title}"
                ),
            ),
        ),
        QueryEngineTool(
            query_engine=summary_query_engine,
            metadata=ToolMetadata(
                name="summary_tool",
                description=(
                    "Useful for summarization questions related to"
                    f" {wiki_title}"
                ),
            ),
        ),
    ]

    # build agent
    agent = ReActAgent.from_tools(
        query_engine_tools,
        llm=llm,
        verbose=True,
    )

    agents[wiki_title] = agent


# #### Define IndexNode for each of these Agents

# In[9]:


from llama_index.core.schema import IndexNode

# define top-level nodes
objects = []
for wiki_title in wiki_titles:
    # define index node that links to these agents
    wiki_summary = (
        f"This content contains Wikipedia articles about {wiki_title}. Use"
        " this index if you need to lookup specific facts about"
        f" {wiki_title}.\nDo not use this index if you want to analyze"
        " multiple cities."
    )
    node = IndexNode(
        text=wiki_summary, index_id=wiki_title, obj=agents[wiki_title]
    )
    objects.append(node)


# #### Define Top-Level Retriever to choose an Agent

# In[10]:


vector_index = VectorStoreIndex(
    objects=objects,
)
query_engine = vector_index.as_query_engine(similarity_top_k=1, verbose=True)


# #### Test Queries
# 
# Should choose a vector tool/ summary tool for a specific agent based on the query.

# In[11]:


# should use Toronto agent -&gt; vector tool
response = query_engine.query("What is the population of Toronto?")


# In[12]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[13]:


# should use Houston agent -&gt; vector tool
response = query_engine.query("Who and when was Houston founded?")


# In[14]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[15]:


# should use Boston agent -&gt; summary tool
response = query_engine.query("Summarize about the sports teams in Boston")


# In[16]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[17]:


# should use Seattle agent -&gt; summary tool
response = query_engine.query(
    "Give me a summary on all the positive aspects of Chicago"
)


# In[18]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[ ]:





</file>
<file name="third_party/LlamaIndex/Multi_Modal.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Multi-Modal
# 
# In this notebook, we show how to use Anthropic MultiModal LLM class/abstraction for image understanding/reasoning.

# #### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-multi-modal-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')
get_ipython().system('pip install llama-index-vector-stores-qdrant')
get_ipython().system('pip install matplotlib')


# #### Setup API key

# In[1]:


import os
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'


# #### Download Sample Images

# In[2]:


get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/images/prometheus_paper_card.png' -O 'prometheus_paper_card.png'")
get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/images/ark_email_sample.PNG' -O 'ark_email_sample.png'")


# ####  Use Anthropic to understand Images from Local directory

# In[3]:


from PIL import Image
import matplotlib.pyplot as plt
from IPython.display import display, HTML

img = Image.open("./prometheus_paper_card.png")
plt.imshow(img)


# In[4]:


from llama_index.core import SimpleDirectoryReader
from llama_index.multi_modal_llms.anthropic import AnthropicMultiModal

image_documents = SimpleDirectoryReader(
    input_files=["prometheus_paper_card.png"]
).load_data()

# Initiated Anthropic MultiModal class
anthropic_mm_llm = AnthropicMultiModal(max_tokens=300)


# In[5]:


response = anthropic_mm_llm.complete(
    prompt="Describe the images as an alternative text",
    image_documents=image_documents,
)


# In[6]:


print(response)


# #### Use `AnthropicMultiModal` to reason images from URLs

# In[7]:


from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt

image_urls = [
    "https://venturebeat.com/wp-content/uploads/2024/03/Screenshot-2024-03-04-at-12.49.41%E2%80%AFAM.png",
]

img_response = requests.get(image_urls[0])
img = Image.open(BytesIO(img_response.content))
plt.imshow(img)


# #### Load images with url

# In[8]:


from llama_index.core.multi_modal_llms.generic_utils import load_image_urls

image_url_documents = load_image_urls(image_urls)


# In[9]:


response = anthropic_mm_llm.complete(
    prompt="Describe the images as an alternative text",
    image_documents=image_url_documents,
)


# In[10]:


print(response)


# #### Structured Output Parsing from an Image
# 
# Here, we use our multi-modal Pydantic program to generate structured output from an image.

# In[11]:


from llama_index.core import SimpleDirectoryReader

image_documents = SimpleDirectoryReader(
    input_files=["ark_email_sample.png"]
).load_data()


# In[12]:


from PIL import Image
import matplotlib.pyplot as plt

img = Image.open("ark_email_sample.png")
plt.imshow(img)


# In[13]:


from pydantic import BaseModel
from typing import List


class TickerInfo(BaseModel):
    """List of ticker info."""

    direction: str
    ticker: str
    company: str
    shares_traded: int
    percent_of_total_etf: float


class TickerList(BaseModel):
    """List of stock tickers."""

    fund: str
    tickers: List[TickerInfo]


# In[14]:


from llama_index.multi_modal_llms.anthropic import AnthropicMultiModal
from llama_index.core.program import MultiModalLLMCompletionProgram
from llama_index.core.output_parsers import PydanticOutputParser

prompt_template_str = """\
Can you get the stock information in the image \
and return the answer? Pick just one fund. 

Make sure the answer is a JSON format corresponding to a Pydantic schema. The Pydantic schema is given below.

"""

# Initiated Anthropic MultiModal class
anthropic_mm_llm = AnthropicMultiModal(max_tokens=300)


llm_program = MultiModalLLMCompletionProgram.from_defaults(
    output_cls=TickerList,
    image_documents=image_documents,
    prompt_template_str=prompt_template_str,
    multi_modal_llm=anthropic_mm_llm,
    verbose=True,
)


# In[15]:


response = llm_program()


# In[16]:


print(response)


</file>
<file name="third_party/LlamaIndex/README.md">
# LlamaIndex &lt;&gt; Anthropic Cookbooks

[LlamaIndex](https://github.com/run-llama/llama_index) is a data framework for LLM-based applications that benefit from context augmentation.

Here we provide cookbooks for building LLM applications using Anthropic and LlamaIndex.

1. `Basic_RAG_With_LlamaIndex.ipynb` - Notebook to help you build RAG pipelines with LlamaIndex.
2. `Router_Query_Engine.ipynb` - Notebook to help you use `RouterQueryEngine` to route user queries to different indices.
3. `SubQuestion_Query_Engine` - Notebook to help you to use `SubQuestionQueryEngine` to answer complex user queries spanning multiple documents.
4. `ReAct_Agent.ipynb` - Notebook to help you to use `ReActAgent` for using Tools and QueryEngine Tools.
5.  `Multi_Document_Agents.ipynb` - Notebook to help you build an efficient RAG pipeline for a large number of documents.
6.  `Multi_Modal.ipynb` - Notebook to help you build Multi-Modal applications using LlamaIndex.

[Documentation](https://docs.llamaindex.ai/en/stable/)
[Discord](https://discord.gg/dGcwcsnxhU)
[Twitter](https://twitter.com/llama_index)
[Linkedin](https://www.linkedin.com/company/llamaindex/)
</file>
<file name="third_party/LlamaIndex/ReAct_Agent.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # ReAct Agent
# 
# In this notebook we will look into creating ReAct Agent over tools.
# 
# 1. ReAct Agent over simple calculator tools.
# 2. ReAct Agent over QueryEngine (RAG) tools.

# ### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')


# ### Setup API Keys

# In[1]:


# llama-parse is async-first, running the async code in a notebook requires the use of nest_asyncio
import nest_asyncio
nest_asyncio.apply()

import os

# Using Anthropic LLM API for LLM
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'

from IPython.display import display, HTML


# ### Set LLM and Embedding model
# 
# We will use anthropic latest released `Claude-3 Opus` LLM.

# In[2]:


from llama_index.llms.anthropic import Anthropic
from llama_index.embeddings.huggingface import HuggingFaceEmbedding


# In[3]:


llm = Anthropic(temperature=0.0, model='claude-3-opus-20240229')
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-base-en-v1.5")


# In[4]:


from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model = embed_model
Settings.chunk_size = 512


# ## ReAct Agent over Tools

# ### Define Tools

# In[5]:


from llama_index.core.agent import ReActAgent
from llama_index.core.llms import ChatMessage
from llama_index.core.tools import BaseTool, FunctionTool


# In[6]:


def multiply(a: int, b: int) -&gt; int:
    """Multiply two integers and returns the result integer"""
    return a * b

def add(a: int, b: int) -&gt; int:
    """Add two integers and returns the result integer"""
    return a + b


add_tool = FunctionTool.from_defaults(fn=add)
multiply_tool = FunctionTool.from_defaults(fn=multiply)


# ### Create ReAct Agent 
# 
# Create agent over tools and test out queries

# In[7]:


agent = ReActAgent.from_tools([multiply_tool, add_tool], llm=llm, verbose=True)


# In[8]:


response = agent.chat("What is 20+(2*4)? Calculate step by step ")


# In[9]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# ### Visit Prompts
# 
# You can check prompts that the agent used to select the tools.

# In[10]:


prompt_dict = agent.get_prompts()
for k, v in prompt_dict.items():
    print(f"Prompt: {k}\n\nValue: {v.template}")


# ## ReAct Agent over `QueryEngine` Tools

# In[11]:


from llama_index.core.tools import QueryEngineTool, ToolMetadata


# ### Download data
# 
# We will define ReAct agent over tools created on QueryEngines with Uber and Lyft 10K SEC Filings.

# In[12]:


get_ipython().system("mkdir -p 'data/10k/'")
get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/10k/uber_2021.pdf' -O 'data/10k/uber_2021.pdf'")
get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/10k/lyft_2021.pdf' -O 'data/10k/lyft_2021.pdf'")


# ### Load Data

# In[13]:


from llama_index.core import SimpleDirectoryReader, VectorStoreIndex

lyft_docs = SimpleDirectoryReader(input_files=["./data/10k/lyft_2021.pdf"]).load_data()
uber_docs = SimpleDirectoryReader(input_files=["./data/10k/uber_2021.pdf"]).load_data()


# ### Build Index

# In[14]:


lyft_index = VectorStoreIndex.from_documents(lyft_docs)
uber_index = VectorStoreIndex.from_documents(uber_docs)


# ### Create QueryEngines

# In[15]:


lyft_engine = lyft_index.as_query_engine(similarity_top_k=3)
uber_engine = uber_index.as_query_engine(similarity_top_k=3)


# #### Create QueryEngine Tools

# In[16]:


query_engine_tools = [
    QueryEngineTool(
        query_engine=lyft_engine,
        metadata=ToolMetadata(
            name="lyft_10k",
            description=(
                "Provides information about Lyft financials for year 2021. "
                "Use a detailed plain text question as input to the tool."
            ),
        ),
    ),
    QueryEngineTool(
        query_engine=uber_engine,
        metadata=ToolMetadata(
            name="uber_10k",
            description=(
                "Provides information about Uber financials for year 2021. "
                "Use a detailed plain text question as input to the tool."
            ),
        ),
    ),
]


# ### ReAct Agent

# In[17]:


agent = ReActAgent.from_tools(
    query_engine_tools,
    llm=llm,
    verbose=True,
)


# ### Querying with ReAct Agent

# In[18]:


response = agent.chat("What was Lyft's revenue growth in 2021?")


# In[19]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[20]:


response = agent.chat(
    "Compare and contrast the revenue growth of Uber and Lyft in 2021, then"
    " give an analysis"
)


# In[21]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[ ]:





</file>
<file name="third_party/LlamaIndex/Router_Query_Engine.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # RouterQuery Engine
# 
# In this notebook we will look into `RouterQueryEngine` to route the user queries to one of the available query engine tools. These tools can be different indices/ query engine on same documents/ different documents.

# ### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')


# ### Set Logging

# In[1]:


# NOTE: This is ONLY necessary in jupyter notebook.
# Details: Jupyter runs an event-loop behind the scenes.
#          This results in nested event-loops when we start an event-loop to make async queries.
#          This is normally not allowed, we use nest_asyncio to allow it for convenience.
import nest_asyncio

nest_asyncio.apply()

import logging
import sys

# Set up the root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # Set logger level to INFO

# Clear out any existing handlers
logger.handlers = []

# Set up the StreamHandler to output to sys.stdout (Colab's output)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.INFO)  # Set handler level to INFO

# Add the handler to the logger
logger.addHandler(handler)

from IPython.display import display, HTML


# ### Set Anthropic API Key

# In[2]:


import os
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'


# ### Set LLM and Embedding model
# 
# We will use anthropic latest released `Claude-3 Opus` LLM.

# In[3]:


from llama_index.llms.anthropic import Anthropic
from llama_index.embeddings.huggingface import HuggingFaceEmbedding


# In[4]:


llm = Anthropic(temperature=0.0, model='claude-3-opus-20240229')
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-base-en-v1.5")


# In[5]:


from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model = embed_model
Settings.chunk_size = 512


# ### Download Document

# In[6]:


get_ipython().system("mkdir -p 'data/paul_graham/'")
get_ipython().system("wget 'https://raw.githubusercontent.com/jerryjliu/llama_index/main/docs/examples/data/paul_graham/paul_graham_essay.txt' -O 'data/paul_graham/paul_graham_essay.txt'")


# ### Load Document

# In[7]:


# load documents
from llama_index.core import SimpleDirectoryReader
documents = SimpleDirectoryReader("data/paul_graham").load_data()


# ### Create Indices and Query Engines.

# In[8]:


from llama_index.core import SummaryIndex, VectorStoreIndex
# Summary Index for summarization questions
summary_index = SummaryIndex.from_documents(documents)

# Vector Index for answering specific context questions
vector_index = VectorStoreIndex.from_documents(documents)


# In[9]:


# Summary Index Query Engine
summary_query_engine = summary_index.as_query_engine(
    response_mode="tree_summarize",
    use_async=True,
)

# Vector Index Query Engine
vector_query_engine = vector_index.as_query_engine()


# ### Create tools for summary and vector query engines.

# In[10]:


from llama_index.core.tools.query_engine import QueryEngineTool

# Summary Index tool
summary_tool = QueryEngineTool.from_defaults(
    query_engine=summary_query_engine,
    description="Useful for summarization questions related to Paul Graham eassy on What I Worked On.",
)

# Vector Index tool
vector_tool = QueryEngineTool.from_defaults(
    query_engine=vector_query_engine,
    description="Useful for retrieving specific context from Paul Graham essay on What I Worked On.",
)


# ### Create Router Query Engine

# In[11]:


from llama_index.core.query_engine.router_query_engine import RouterQueryEngine
from llama_index.core.selectors.llm_selectors import LLMSingleSelector, LLMMultiSelector


# In[12]:


# Create Router Query Engine
query_engine = RouterQueryEngine(
    selector=LLMSingleSelector.from_defaults(),
    query_engine_tools=[
        summary_tool,
        vector_tool,
    ],
)


# ### Test Queries

# In[13]:


response = query_engine.query("What is the summary of the document?")


# In[14]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[17]:


response = query_engine.query("What did Paul Graham do growing up?")


# In[18]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[ ]:





</file>
<file name="third_party/LlamaIndex/SubQuestion_Query_Engine.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # SubQuestionQueryEngine
# 
# Often, we encounter scenarios where our queries span across multiple documents. 
# 
# In this notebook, we delve into addressing complex queries that extend over various documents by breaking them down into simpler sub-queries and generate answers using the `SubQuestionQueryEngine`.

# ### Installation

# In[ ]:


get_ipython().system('pip install llama-index')
get_ipython().system('pip install llama-index-llms-anthropic')
get_ipython().system('pip install llama-index-embeddings-huggingface')


# ### Setup API Key

# In[1]:


import os
os.environ['ANTHROPIC_API_KEY'] = 'YOUR ANTHROPIC API KEY'


# ### Setup LLM and Embedding model
# 
# We will use anthropic latest released `Claude-3 Opus` LLM.

# In[2]:


from llama_index.llms.anthropic import Anthropic
from llama_index.embeddings.huggingface import HuggingFaceEmbedding


# In[3]:


llm = Anthropic(temperature=0.0, model='claude-3-opus-20240229')
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-base-en-v1.5")


# In[4]:


from llama_index.core import Settings
Settings.llm = llm
Settings.embed_model = embed_model
Settings.chunk_size = 512


# ### Setup logging

# In[5]:


# NOTE: This is ONLY necessary in jupyter notebook.
# Details: Jupyter runs an event-loop behind the scenes.
#          This results in nested event-loops when we start an event-loop to make async queries.
#          This is normally not allowed, we use nest_asyncio to allow it for convenience.
import nest_asyncio

nest_asyncio.apply()

import logging
import sys

# Set up the root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # Set logger level to INFO

# Clear out any existing handlers
logger.handlers = []

# Set up the StreamHandler to output to sys.stdout (Colab's output)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.INFO)  # Set handler level to INFO

# Add the handler to the logger
logger.addHandler(handler)

from IPython.display import display, HTML


# ### Download Data
# 
# We will use Uber and Lyft 2021 10K SEC Filings

# In[6]:


get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/10k/uber_2021.pdf' -O './uber_2021.pdf'")
get_ipython().system("wget 'https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/10k/lyft_2021.pdf' -O './lyft_2021.pdf'")


# ### Load Data

# In[7]:


from llama_index.core import SimpleDirectoryReader
lyft_docs = SimpleDirectoryReader(input_files=["lyft_2021.pdf"]).load_data()
uber_docs = SimpleDirectoryReader(input_files=["uber_2021.pdf"]).load_data()


# In[8]:


print(f'Loaded lyft 10-K with {len(lyft_docs)} pages')
print(f'Loaded Uber 10-K with {len(uber_docs)} pages')


# ### Index Data

# In[9]:


from llama_index.core import VectorStoreIndex
lyft_index = VectorStoreIndex.from_documents(lyft_docs[:100])
uber_index = VectorStoreIndex.from_documents(uber_docs[:100])


# ### Create Query Engines

# In[10]:


lyft_engine = lyft_index.as_query_engine(similarity_top_k=5)


# In[11]:


uber_engine = uber_index.as_query_engine(similarity_top_k=5)


# ### Querying

# In[12]:


response = await lyft_engine.aquery('What is the revenue of Lyft in 2021? Answer in millions with page reference')
display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[13]:


response = await uber_engine.aquery('What is the revenue of Uber in 2021? Answer in millions, with page reference')
display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# ### Create Tools

# In[14]:


from llama_index.core.tools import QueryEngineTool, ToolMetadata
from llama_index.core.query_engine import SubQuestionQueryEngine

query_engine_tools = [
    QueryEngineTool(
        query_engine=lyft_engine,
        metadata=ToolMetadata(name='lyft_10k', description='Provides information about Lyft financials for year 2021')
    ),
    QueryEngineTool(
        query_engine=uber_engine,
        metadata=ToolMetadata(name='uber_10k', description='Provides information about Uber financials for year 2021')
    ),
]


# ### Create `SubQuestionQueryEngine`

# In[15]:


sub_question_query_engine = SubQuestionQueryEngine.from_defaults(query_engine_tools=query_engine_tools)


# ### Querying

# In[17]:


response = await sub_question_query_engine.aquery('Compare revenue growth of Uber and Lyft from 2020 to 2021')


# In[18]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[19]:


response = await sub_question_query_engine.aquery('Compare the investments made by Uber and Lyft')


# In[20]:


display(HTML(f'&lt;p style="font-size:20px"&gt;{response.response}&lt;/p&gt;'))


# In[ ]:





</file>
<file name="third_party/MongoDB/rag_using_mongodb.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # How to Build A RAG System Using Claude 3 And MongoDB
# 
# 
# This tutorial implements a chatbot prompted to take on the role of a Venture capital tech Analyst. The chatbot is a naive RAG system with a collection of tech news articles acting as its knowledge source.
# This notebook covers the following:
# 
# 1. Follow a comprehensive tutorial on setting up your development environment, from installing necessary libraries to configuring a MongoDB database.
# 2. Learn efficient data handling methods, including creating vector search indexes and preparing data for ingestion and query processing.
# 3. Understand how to employ Claude 3 models within the RAG system for generating precise responses based on contextual information retrieved from the database.
# 
# 
# You will need the following:
# - Anthropic API Key
# - VoyageAI API Key
# - Hugging Face Access Token

# ## Step 1: Library installation, data loading and preparation
# 
# 
# Below are brief explanations of the tools and libraries utilised within the implementation code:
# - anthropic:  The official Python library for Anthropic that enables access to state-of-the-art language models. This library provides access to the Claude 3 family models, which can understand text and images.
# - datasets: This library is part of the Hugging Face ecosystem. By installing 'datasets', we gain access to a number of pre-processed and ready-to-use datasets, which are essential for training and fine-tuning machine learning models or benchmarking their performance.
# - pandas: This data science library provides robust data structures and methods for data manipulation, processing, and analysis.
# - voyageai: This is the official Python client library for accessing VoyageAI's suite of embedding models.
# - pymongo: PyMongo is a Python toolkit for MongoDB. It enables interactions with a MongoDB database.
# 
# 

# In[ ]:


get_ipython().system('pip install pymongo datasets pandas anthropic voyageai')


# The code snippet below executes the following steps:
# 1. Import Necessary Libraries:
# - `os` for interacting with the operating system,
# - `requests` for making HTTP requests,
# - `BytesIO` from the io module to handle bytes objects like files in memory,
# - `pandas` (as pd) for data manipulation and analysis, and
# - `userdata` from google.colab enables access to environment variables stored in Google Colab secrets.
# 2. Function Definition: The `download_and_combine_parquet_files` function is defined with two parameters:
# - `parquet_file_urls`: a list of URLs as strings, each pointing to a Parquet file that contains a sub-collection of the tech-news-embedding dataset.
# - `hf_token` is a string representing a Hugging Face authorization token. Access tokens can be created or copied from the [Hugging Face platform](https://huggingface.co/docs/hub/en/security-tokens#:~:text=To%20create%20an%20access%20token,you%27re%20ready%20to%20go!)
# 3. Download and Read Parquet Files: The function iterates over each URL in parquet_file_urls. For each URL, it:
# - Makes a GET request using the requests.get method, passing the URL and the headers for authorization.
# - Checks if the response status code is 200 (OK), indicating the request was successful.
# - If successful, it reads the content of the response into a BytesIO object (to handle it as a file in memory), then uses pandas.read_parquet to read the Parquet file from this object into a Pandas DataFrame.
# - Appends the DataFrame to the list all_dataframes.
# 4. Combine DataFrames: After downloading and reading all Parquet files into DataFrames, there’s a check to ensure that `all_dataframes` is not empty. If there are DataFrames to work with, then all DataFrames are concatenated into a single DataFrame using pd.concat, with ignore_index=True to reindex the new combined DataFrame. This combined DataFrame is the overall process output in the `download_and_combine_parquet_files` function.

# In[2]:


import os
import requests
from io import BytesIO
import pandas as pd
from google.colab import userdata

def download_and_combine_parquet_files(parquet_file_urls, hf_token):
    """
    Downloads Parquet files from the provided URLs using the given Hugging Face token,
    and returns a combined DataFrame.

    Parameters:
    - parquet_file_urls: List of strings, URLs to the Parquet files.
    - hf_token: String, Hugging Face authorization token.

    Returns:
    - combined_df: A pandas DataFrame containing the combined data from all Parquet files.
    """
    headers = {"Authorization": f"Bearer {hf_token}"}
    all_dataframes = []

    for parquet_file_url in parquet_file_urls:
        response = requests.get(parquet_file_url, headers=headers)
        if response.status_code == 200:
            parquet_bytes = BytesIO(response.content)
            df = pd.read_parquet(parquet_bytes)
            all_dataframes.append(df)
        else:
            print(f"Failed to download Parquet file from {parquet_file_url}: {response.status_code}")

    if all_dataframes:
        combined_df = pd.concat(all_dataframes, ignore_index=True)
        return combined_df
    else:
        print("No dataframes to concatenate.")
        return None


# Below is a list of the Parquet files required for this tutorial. The complete list of all files is located [here](https://huggingface.co/datasets/MongoDB/tech-news-embeddings/tree/refs%2Fconvert%2Fparquet/default/train). Each Parquet file represents approximately 45,000 data points.
# 
# In the code snippet below, a subset of the tech-news-embeddings dataset is grouped into a single DataFrame, which is then assigned to the variable `combined_df`.
# 

# In[3]:


# Uncomment the links below to load more data
# For the full list of data visit: https://huggingface.co/datasets/MongoDB/tech-news-embeddings/tree/refs%2Fconvert%2Fparquet/default/train
parquet_files = [
    "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0000.parquet",
    # "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0001.parquet",
    # "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0002.parquet",
    # "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0003.parquet",
    # "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0004.parquet",
    # "https://huggingface.co/api/datasets/AIatMongoDB/tech-news-embeddings/parquet/default/train/0005.parquet",
]

hf_token = userdata.get("HF_TOKEN")
combined_df = download_and_combine_parquet_files(parquet_files, hf_token)


# As a final phase in data preparation, the code snippet below shows the step to remove the `_id` column from the grouped dataset, as it is unnecessary for subsequent steps in this tutorial. Additionally, the data within the embedding column for each data point is converted from a numpy array to a Python list to prevent errors related to incompatible data types during the data ingestion. 
# 

# In[4]:


# Remove the _id coloum from the intital dataset
combined_df = combined_df.drop(columns=['_id'])

# Remove the initial embedding coloumn as we are going to create new embeddings with VoyageAI embedding model
combined_df = combined_df.drop(columns=['embedding'])


# In[ ]:


combined_df.head()


# In[ ]:


# Limiting the amount of document used to 500 for this demo due to the rate limit on VoyageAI API
# Read more on VoyageAI rate limits: https://docs.voyageai.com/docs/rate-limits
max_documents = 500

if len(combined_df) &gt; max_documents:
    combined_df = combined_df[:max_documents]


# In[ ]:


import voyageai
import time

vo = voyageai.Client(api_key=userdata.get("VOYAGE_API_KEY"))

def get_embedding(text: str) -&gt; list[float]:
    if not text.strip():
      print("Attempted to get embedding for empty text.")
      return []

    embedding = vo.embed(text, model="voyage-large-2", input_type="document")

    return embedding.embeddings[0]

combined_df["embedding"] = combined_df["description"].apply(get_embedding)

combined_df.head()


# ## Step 2: Database and collection creation
# 
# **To create a new MongoDB database, set up a database cluster:**
# 1. Register for a [free MongoDB Atlas account](https://www.mongodb.com/cloud/atlas/register?utm_campaign=devrel&amp;utm_source=community&amp;utm_medium=cta&amp;utm_content=Partner%20Cookbook&amp;utm_term=richmond.alake), or existing users, [sign into MongoDB Atlas](https://account.mongodb.com/account/login?utm_campaign=devrel&amp;utm_source=community&amp;utm_medium=cta&amp;utm_content=Partner%20Cookbook&amp;utm_term=richmond.alake)
# 2. Select the “Database” option on the left-hand pane, which will navigate to the Database Deployment page with a deployment specification of any existing cluster. Create a new database cluster by clicking on the "+Create" button.
# 3. For assistance with database cluster setup and obtaining the URI, refer to our guide for setting up a MongoDB cluster and getting your connection string.
# Note: Don’t forget to whitelist the IP for the Python host or 0.0.0.0/0 for any IP when creating proof of concepts.
# 4. After successfully creating and deploying the cluster, the cluster becomes accessible on the ‘Database Deployment’ page.
# 5. Click on the “Connect” button of the cluster to view the option to set up a connection to the cluster via various language drivers.
# 6. This tutorial only requires the cluster’s URI(unique resource identifier). Grab the URI and copy it into the Google Colabs Secrets environment in a variable named MONGO_URI or place it in a .env file or equivalent.
# 
# 
# Once you have created a cluster, navigate to the cluster page and create a database and collection within the MongoDB Atlas cluster by clicking + Create Database. 
# The database will be named `tech_news`, and the collection will be named `hacker_noon_tech_news`.
# 
# 

# ## Step 3: Vector search index creation
# 
# By this point, you have created a cluster, database and collection.
# 
# The steps in this section are crucial to ensure that a vector search can be conducted using the queries entered into the chatbot and searched against the records within the hacker_noon_tech_news collection. The objective of this step is to create a vector search index. To achieve this, refer to the official [vector search index creation guide](https://www.mongodb.com/docs/atlas/atlas-vector-search/create-index/).
# 
# In the creation of a vector search index using the JSON editor on MongoDB Atlas, ensure your vector search index is named vector_index and the vector search index definition is as follows:
# 
# ```
# {
#  "fields": [{
#      "numDimensions": 1536,
#      "path": "embedding",
#      "similarity": "cosine",
#      "type": "vector"
#    }]
# }
# 
# ```

# ## Step 4: Data ingestion
# 
# To ingest data into the MongoDB database created in previous steps. The following operations have to be carried out:
# - Connect to the database and collection
# - Clear out the collection of any existing records
# - Convert the Pandas DataFrame of the dataset into dictionaries before ingestion
# - Ingest dictionaries into MongoDB using a batch operation
# 
# This tutorial requires the cluster's URI (unique resource identifier). Grab the URI and copy it into the Google Colab Secrets environment in a variable named MONGO_URI, or place it in a .env file or equivalent.
# 

# In[6]:


import pymongo
from google.colab import userdata

def get_mongo_client(mongo_uri):
  """Establish connection to the MongoDB."""
  try:
    client = pymongo.MongoClient(mongo_uri)
    print("Connection to MongoDB successful")
    return client
  except pymongo.errors.ConnectionFailure as e:
    print(f"Connection failed: {e}")
    return None

mongo_uri = userdata.get('MONGO_URI')
if not mongo_uri:
  print("MONGO_URI not set in environment variables")

mongo_client = get_mongo_client(mongo_uri)

DB_NAME="tech_news"
COLLECTION_NAME="hacker_noon_tech_news"

db = mongo_client[DB_NAME]
collection = db[COLLECTION_NAME]


# In[7]:


# To ensure we are working with a fresh collection
# delete any existing records in the collection
collection.delete_many({})


# In[ ]:


# Data Ingestion
combined_df_json = combined_df.to_dict(orient='records')
collection.insert_many(combined_df_json)


# ## Step 5: Vector Search
# 
# This section showcases the creation of a vector search custom function that accepts a user query, which corresponds to entries to the chatbot. The function also takes a second parameter, `collection`, which points to the database collection containing records against which the vector search operation should be conducted.
# 
# The `vector_search` function produces a vector search result derived from a series of operations outlined in a MongoDB aggregation pipeline. This pipeline includes the `$vectorSearch` and `$project` stages and performs queries based on the vector embeddings of user queries. It then formats the results, omitting any record attributes unnecessary for subsequent processes.
# 
# The code snippet below conducts the following operations to allow semantic search for movies:
# 1. Define the `vector_search` function that takes a user's query string and a MongoDB collection as inputs and returns a list of documents that match the query based on vector similarity search.
# 2. Generate an embedding for the user's query by calling the previously defined function, `get_embedding`, which converts the query string into a vector representation.
# 3. Construct a pipeline for MongoDB's aggregate function, incorporating two main stages: `$vectorSearch` and `$project`.
# 4. The `$vectorSearch` stage performs the actual vector search. The index field specifies the vector index to utilise for the vector search, and this should correspond to the name entered in the vector search index definition in previous steps. The queryVector field takes the embedding representation of the use query. The path field corresponds to the document field containing the embeddings.  The `numCandidates` specifies the number of candidate documents to consider and the limit on the number of results to return.
# 5. The $project stage formats the results to excludes the _id  the `embedding` field.
# 6. The aggregate executes the defined pipeline to obtain the vector search results. The final operation converts the returned cursor from the database into a list.

# In[9]:


def vector_search(user_query, collection):
    """
    Perform a vector search in the MongoDB collection based on the user query.

    Args:
    user_query (str): The user's query string.
    collection (MongoCollection): The MongoDB collection to search.

    Returns:
    list: A list of matching documents.
    """

    # Generate embedding for the user query
    query_embedding = get_embedding(user_query)

    if query_embedding is None:
        return "Invalid query or embedding generation failed."

    # Define the vector search pipeline
    pipeline = [
        {
            "$vectorSearch": {
                "index": "vector_index",
                "queryVector": query_embedding,
                "path": "embedding",
                "numCandidates": 150,  # Number of candidate matches to consider
                "limit": 5  # Return top 5 matches
            }
        },
        {
            "$project": {
                "_id": 0,  # Exclude the _id field
                "embedding": 0,  # Exclude the embedding field
                "score": {
                    "$meta": "vectorSearchScore"  # Include the search score
                }
            }
        }
    ]

    # Execute the search
    results = collection.aggregate(pipeline)
    return list(results)


# ## Step 6: Handling user queries with Claude 3 models
# 
# The final section of the tutorial outlines the sequence of operations performed as follows:
# 
# - Accept a user query in the form of a string.
# - Utilize the VoyageAI embedding model to generate embeddings for the user query.
# - Load the Anthropic Claude 3, specifically the ‘claude-3-opus-20240229’ model, to serve as the base model for the RAG system.
# - Execute a vector search using the embeddings of the user query to fetch relevant information from the knowledge base, which provides additional context for the base model.
# - Submit both the user query and the gathered additional information to the base model to generate a response.
# 
# 
# An important note is that the dimensions of the user query embedding match the dimensions set in the vector search index definition on MongoDB Atlas.

# The next step in this section is to import the anthropic library and load the client to access the anthropic’s methods for handling messages and accessing Claude models. Ensure you obtain an Anthropic API key located within the settings page on the [official Anthropic website](https://console.anthropic.com/settings/keys).
# 

# In[11]:


import anthropic
client = anthropic.Client(api_key=userdata.get("ANTHROPIC_API_KEY"))


# Below is a more detailed description of the operations in the code snippet below:
# 
# 1. Vector Search Execution: The function begins by calling `vector_search` with the user's query and a specified collection as arguments. This performs a search within the collection, leveraging vector embeddings to find relevant information related to the query.
# 2. Compile Search Results: `search_result` is initialized as an empty string to aggregate information from the search. The search results are compiled by iterating over the results returned by the `vector_search` function, formates each item's details (title, company name, URL, publication date, article URL, and description) into a human-readable string, appending this information to search_result with a newline character \n at the end of each entry.
# 3. Generate Response Using Anthropic Client: The function then constructs a request to the Anthropic API (through a client object, presumably an instance of the anthropic. Client class created earlier). It specifies:
# - The model to use ("claude-3-opus-20240229") indicates a specific version of the Claude 3 model.
# - The maximum token limit for the generated response (max_tokens=1024).
# - A system description guides the model to behave as a "Venture Capital Tech Analyst" with access to tech company articles and information, using this context to advise.
# - The actual message for the model to process combines the user query with the aggregated search results as context.
# 4. Return the Generated Response and Search Results: It extracts and returns the response text from the first item in the response's content, alongside the compiled search results.
# 

# In[12]:


def handle_user_query(query, collection):

  get_knowledge = vector_search(query, collection)

  search_result = ''
  for result in get_knowledge:
    search_result += (
        f"Title: {result.get('title', 'N/A')}, "
        f"Company Name: {result.get('companyName', 'N/A')}, "
        f"Company URL: {result.get('companyUrl', 'N/A')}, "
        f"Date Published: {result.get('published_at', 'N/A')}, "
        f"Article URL: {result.get('url', 'N/A')}, "
        f"Description: {result.get('description', 'N/A')}, \n"
    )

  response = client.messages.create(
    model="claude-3-opus-20240229",
    max_tokens=1024,
    system="You are Venture Captital Tech Analyst with access to some tech company articles and information. You use the information you are given to provide advice.",
    messages=[
        {"role": "user", "content": "Answer this user query: " + query + " with the following context: " + search_result}
    ]
  )

  return (response.content[0].text), search_result


# The final step in this tutorial is to initialize the query, pass it into the `handle_user_query` function and print the response returned.

# In[13]:


# Conduct query with retrieval of sources
query = "Give me the best tech stock to invest in and tell me why"
response, source_information = handle_user_query(query, collection)

print(f"Response: {response}")
print(f"\\nSource Information: \\n{source_information}")


</file>
<file name="third_party/Pinecone/claude_3_rag_agent.ipynb">
#!/usr/bin/env python
# coding: utf-8

# In[ ]:


get_ipython().system('python --version')


# # Claude 3 RAG Agents with LangChain v1

# LangChain v1 brought a lot of changes and when comparing the LangChain of versions `0.0.3xx` to `0.1.x` there's plenty of changes to the preferred way of doing things. That is very much the case for agents.
# 
# The way that we initialize and use agents is generally clearer than it was in the past — there are still many abstractions, but we can (and are encouraged to) get closer to the agent logic itself. This can make for some confusion at first, but once understood the new logic can be much clearer than with previous versions.
# 
# In this example, we'll be building a RAG agent with LangChain v1. We will use Claude 3 for our LLM, Voyage AI for knowledge embeddings, and Pinecone to power our knowledge retrieval.
# 
# To begin, let's install the prerequisites:

# In[2]:


get_ipython().system('pip install -qU      langchain==0.1.11      langchain-core==0.1.30      langchain-community==0.0.27      langchain-anthropic==0.1.4      langchainhub==0.1.15      anthropic==0.19.1      voyageai==0.2.1      pinecone-client==3.1.0      datasets==2.16.1')


# And grab the required API keys. We will need API keys for [Claude](https://docs.anthropic.com/claude/reference/getting-started-with-the-api), [Voyage AI](https://docs.voyageai.com/install/), and [Pinecone](https://docs.pinecone.io/docs/quickstart).

# In[ ]:


# Insert your API keys here
ANTHROPIC_API_KEY="&lt;YOUR_ANTHROPIC_API_KEY&gt;"
PINECONE_API_KEY="&lt;YOUR_PINECONE_API_KEY&gt;"
VOYAGE_API_KEY="&lt;YOUR_VOYAGE_API_KEY&gt;"


# ## Finding Knowledge

# The first thing we need for an agent using RAG is somewhere we want to pull knowledge from. We will use v2 of the AI ArXiv dataset, available on Hugging Face Datasets at [`jamescalam/ai-arxiv2-chunks`](https://huggingface.co/datasets/jamescalam/ai-arxiv2-chunks).
# 
# _Note: we're using the prechunked dataset. For the raw version see [`jamescalam/ai-arxiv2`](https://huggingface.co/datasets/jamescalam/ai-arxiv2)._

# In[4]:


from datasets import load_dataset

dataset = load_dataset("jamescalam/ai-arxiv2-chunks", split="train[:20000]")
dataset


# In[5]:


dataset[1]


# ## Building the Knowledge Base

# To build our knowledge base we need _two things_:
# 
# 1. Embeddings, for this we will use `VoyageEmbeddings` using Voyage AI's embedding models, which do need an [API key](https://dash.voyageai.com/api-keys).
# 2. A vector database, where we store our embeddings and query them. We use Pinecone which again requires a [free API key](https://app.pinecone.io).
# 
# First we initialize our connection to Voyage AI and define an `embed` object for embeddings:

# In[7]:


from langchain_community.embeddings import VoyageEmbeddings

embed = VoyageEmbeddings(
    voyage_api_key=VOYAGE_API_KEY, model="voyage-2"
)


# Then we initialize our connection to Pinecone:

# In[8]:


from pinecone import Pinecone

# configure client
pc = Pinecone(api_key=PINECONE_API_KEY)


# Now we setup our index specification, this allows us to define the cloud provider and region where we want to deploy our index. You can find a list of all [available providers and regions here](https://docs.pinecone.io/docs/projects).

# In[9]:


from pinecone import ServerlessSpec

spec = ServerlessSpec(
    cloud="aws", region="us-west-2"
)


# Before creating an index, we need the dimensionality of our Voyage AI embedding model, which we can find easily by creating an embedding and checking the length:

# In[10]:


vec = embed.embed_documents(["ello"])
len(vec[0])


# Now we create the index using our embedding dimensionality, and a metric also compatible with the model (this can be either cosine or dotproduct). We also pass our spec to index initialization.

# In[11]:


import time

index_name = "claude-3-rag"

# check if index already exists (it shouldn't if this is first time)
if index_name not in pc.list_indexes().names():
    # if does not exist, create index
    pc.create_index(
        index_name,
        dimension=len(vec[0]),  # dimensionality of voyage model
        metric='dotproduct',
        spec=spec
    )
    # wait for index to be initialized
    while not pc.describe_index(index_name).status['ready']:
        time.sleep(1)

# connect to index
index = pc.Index(index_name)
time.sleep(1)
# view index stats
index.describe_index_stats()


# ### Populating our Index

# Now our knowledge base is ready to be populated with our data. We will use the `embed` helper function to embed our documents and then add them to our index.
# 
# We will also include metadata from each record.

# In[12]:


from tqdm.auto import tqdm

# easier to work with dataset as pandas dataframe
data = dataset.to_pandas()

batch_size = 100

for i in tqdm(range(0, len(data), batch_size)):
    i_end = min(len(data), i+batch_size)
    # get batch of data
    batch = data.iloc[i:i_end]
    # generate unique ids for each chunk
    ids = [f"{x['doi']}-{x['chunk-id']}" for i, x in batch.iterrows()]
    # get text to embed
    texts = [x['chunk'] for _, x in batch.iterrows()]
    # embed text
    embeds = embed.embed_documents(texts)
    # get metadata to store in Pinecone
    metadata = [
        {'text': x['chunk'],
         'source': x['source'],
         'title': x['title']} for i, x in batch.iterrows()
    ]
    # add to Pinecone
    index.upsert(vectors=zip(ids, embeds, metadata))


# Create a tool for our agent to use when searching for ArXiv papers:

# In[13]:


from langchain.agents import tool

@tool
def arxiv_search(query: str) -&gt; str:
    """Use this tool when answering questions about AI, machine learning, data
    science, or other technical questions that may be answered using arXiv
    papers.
    """
    # create query vector
    xq = embed.embed_query(query)
    # perform search
    out = index.query(vector=xq, top_k=5, include_metadata=True)
    # reformat results into string
    results_str = "\n\n".join(
        [x["metadata"]["text"] for x in out["matches"]]
    )
    return results_str

tools = [arxiv_search]


# When this tool is used by our agent it will execute it like so:

# In[14]:


print(
    arxiv_search.run(tool_input={"query": "can you tell me about llama 2?"})
)


# ## Defining XML Agent

# The XML agent is built primarily to support Anthropic models. Anthropic models have been trained to use XML tags like `&lt;input&gt;{some input}&lt;/input` or when using a tool they use:
# 
# ```
# &lt;tool&gt;{tool name}&lt;/tool&gt;
# &lt;tool_input&gt;{tool input}&lt;/tool_input&gt;
# ```
# 
# This is much different to the format produced by typical ReAct agents, which is not as well supported by Anthropic models.
# 
# To create an XML agent we need a `prompt`, `llm`, and list of `tools`. We can download a prebuilt prompt for conversational XML agents from LangChain hub.

# In[15]:


from langchain import hub

prompt = hub.pull("hwchase17/xml-agent-convo")
prompt


# We can see the XML format being used throughout the prompt when explaining to the LLM how it should use tools.
# 
# Next we initialize our connection to Anthropic, for this we need an [Anthropic API key](https://console.anthropic.com/).

# In[16]:


from langchain_anthropic import ChatAnthropic

# chat completion llm
llm = ChatAnthropic(
    anthropic_api_key=ANTHROPIC_API_KEY,
    model_name="claude-3-opus-20240229",  # change "opus" -&gt; "sonnet" for speed
    temperature=0.0
)


# When the agent is run we will provide it with a single `input` — this is the input text from a user. However, within the agent logic an *agent_scratchpad* object will be passed too, which will include tool information. To feed this information into our LLM we will need to transform it into the XML format described above, we define the `convert_intermediate_steps` function to handle that.

# In[17]:


def convert_intermediate_steps(intermediate_steps):
    log = ""
    for action, observation in intermediate_steps:
        log += (
            f"&lt;tool&gt;{action.tool}&lt;/tool&gt;&lt;tool_input&gt;{action.tool_input}"
            f"&lt;/tool_input&gt;&lt;observation&gt;{observation}&lt;/observation&gt;"
        )
    return log


# We must also parse the tools into a string containing `tool_name: tool_description` — we handle that with the `convert_tools` function.

# In[18]:


def convert_tools(tools):
    return "\n".join([f"{tool.name}: {tool.description}" for tool in tools])


# With everything ready we can go ahead and initialize our agent object using [**L**ang**C**hain **E**xpression **L**anguage (LCEL)](https://www.pinecone.io/learn/series/langchain/langchain-expression-language/). We add instructions for when the LLM should _stop_ generating with `llm.bind(stop=[...])` and finally we parse the output from the agent using an `XMLAgentOutputParser` object.

# In[19]:


from langchain.agents.output_parsers import XMLAgentOutputParser

agent = (
    {
        "input": lambda x: x["input"],
        # without "chat_history", tool usage has no context of prev interactions
        "chat_history": lambda x: x["chat_history"],
        "agent_scratchpad": lambda x: convert_intermediate_steps(
            x["intermediate_steps"]
        ),
    }
    | prompt.partial(tools=convert_tools(tools))
    | llm.bind(stop=["&lt;/tool_input&gt;", "&lt;/final_answer&gt;"])
    | XMLAgentOutputParser()
)


# With our `agent` object initialized we pass it to an `AgentExecutor` object alongside our original `tools` list:

# In[20]:


from langchain.agents import AgentExecutor

agent_executor = AgentExecutor(
    agent=agent, tools=tools, verbose=True
)


# Now we can use the agent via the `invoke` method:

# In[25]:


user_msg = "can you tell me about llama 2?"

out = agent_executor.invoke({
    "input": user_msg,
    "chat_history": ""
})

print(out["output"])


# That looks pretty good, but right now our agent is _stateless_ — making it hard to have a conversation with. We can give it memory in many different ways, but one the easiest ways to do so is to use `ConversationBufferWindowMemory`.

# In[26]:


from langchain.chains.conversation.memory import ConversationBufferWindowMemory

# conversational memory
conversational_memory = ConversationBufferWindowMemory(
    memory_key='chat_history',
    k=5,
    return_messages=True
)


# We haven't attached our conversational memory to our agent — so the `conversational_memory` object will remain empty:

# In[27]:


conversational_memory.chat_memory.messages


# We must manually add the interactions between ourselves and the agent to our memory.

# In[28]:


conversational_memory.chat_memory.add_user_message(user_msg)
conversational_memory.chat_memory.add_ai_message(out["output"])

conversational_memory.chat_memory.messages


# Now we can see that _two_ messages have been added, our `HumanMessage` the agent's `AIMessage` response. Unfortunately, we cannot send these messages to our XML agent directly. Instead, we need to pass a string in the format:
# 
# ```
# Human: {human message}
# AI: {AI message}
# ```
# 
# Let's write a quick `memory2str` helper function to handle this for us:

# In[29]:


from langchain_core.messages.human import HumanMessage

def memory2str(memory: ConversationBufferWindowMemory):
    messages = memory.chat_memory.messages
    memory_list = [
        f"Human: {mem.content}" if isinstance(mem, HumanMessage) \
        else f"AI: {mem.content}" for mem in messages
    ]
    memory_str = "\n".join(memory_list)
    return memory_str


# In[30]:


print(memory2str(conversational_memory))


# Now let's put together another helper function called `chat` to help us handle the _state_ part of our agent.

# In[31]:


def chat(text: str):
    out = agent_executor.invoke({
        "input": text,
        "chat_history": memory2str(conversational_memory)
    })
    conversational_memory.chat_memory.add_user_message(text)
    conversational_memory.chat_memory.add_ai_message(out["output"])
    return out["output"]


# Now we simply chat with our agent and it will remember the context of previous interactions.

# In[33]:


print(chat("was any red teaming done with the model?"))


# We can ask follow up questions that miss key information but thanks to the conversational history the LLM understands the context and uses that to adjust the search query. For example we asked about `red teaming` but did not mention `llama 2` — Claude 3 added this context to the search query of `"llama 2 red teaming"` based on the chat history.

# ---

</file>
<file name="third_party/Pinecone/rag_using_pinecone.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Retrieval-Augmented Generation using Pinecone
# 
# This notebook demonstrates how to connect Claude with the data in your Pinecone vector database through a technique called retrieval-augmented generation (RAG). We will cover the following steps:
# 
# 1. Embedding a dataset using Voyage AI's embedding model
# 2. Uploading the embeddings to a Pinecone index
# 3. Retrieving information from the vector database
# 4. Using Claude to answer questions with information from the database

# ## Setup
# First, let's install the necessary libraries and set the API keys we will need to use in this notebook. We will need to get a [Claude API key](https://docs.anthropic.com/claude/reference/getting-started-with-the-api), a free [Pinecone API key](https://docs.pinecone.io/docs/quickstart), and a free [Voyage AI API key](https://docs.voyageai.com/install/). 

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic datasets pinecone-client voyageai')


# In[ ]:


# Insert your API keys here
ANTHROPIC_API_KEY="&lt;YOUR_ANTHROPIC_API_KEY&gt;"
PINECONE_API_KEY="&lt;YOUR_PINECONE_API_KEY&gt;"
VOYAGE_API_KEY="&lt;YOUR_VOYAGE_API_KEY&gt;"


# ## Download the dataset
# Now let's download the Amazon products dataset which has over 10k Amazon product descriptions and load it into a DataFrame.

# In[ ]:


import pandas as pd

# Download the JSONL file
get_ipython().system('wget  https://www-cdn.anthropic.com/48affa556a5af1de657d426bcc1506cdf7e2f68e/amazon-products.jsonl')

data = []
with open('amazon-products.jsonl', 'r') as file:
    for line in file:
        try:
            data.append(eval(line))
        except:
            pass

df = pd.DataFrame(data)
display(df.head())
len(df)


# ## Vector Database
# 
# To create our vector database, we first need a free API key from Pinecone. Once we have the key, we can initialize the database as follows:

# In[ ]:


from pinecone import Pinecone

pc = Pinecone(api_key=PINECONE_API_KEY)


# Next, we set up our index specification, which allows us to define the cloud provider and region where we want to deploy our index. You can find a list of all available providers and regions [here](https://www.pinecone.io/docs/data-types/metadata/).
# 

# In[ ]:


from pinecone import ServerlessSpec

spec = ServerlessSpec(
    cloud="aws", region="us-west-2"
)


# Then, we initialize the index. We will be using Voyage's "voyage-2" model for creating the embeddings, so we set the dimension to 1024.

# In[ ]:


index_name = 'amazon-products'
existing_indexes = [
    index_info["name"] for index_info in pc.list_indexes()
]

# check if index already exists (it shouldn't if this is first time)
if index_name not in existing_indexes:
    # if does not exist, create index
    pc.create_index(
        index_name,
        dimension=1024,  # dimensionality of voyage-2 embeddings
        metric='dotproduct',
        spec=spec
    )
    # wait for index to be initialized
    while not pc.describe_index(index_name).status['ready']:
        time.sleep(1)

# connect to index
index = pc.Index(index_name)
time.sleep(1)
# view index stats
index.describe_index_stats()


# We should see that the new Pinecone index has a total_vector_count of 0, as we haven't added any vectors yet.

# ## Embeddings
# To get started with Voyage's embeddings, go [here](https://www.voyageai.com) to get an API key.
# 
# Now let's set up our Voyage client and demonstrate how to create an embedding using the `embed` method. To learn more about using Voyage embeddings with Claude, see [this notebook](https://github.com/anthropics/anthropic-cookbook/blob/main/third_party/VoyageAI/how_to_create_embeddings.md).

# In[ ]:


import voyageai

vo = voyageai.Client(api_key=VOYAGE_API_KEY)

texts = ["Sample text 1", "Sample text 2"]

result = vo.embed(texts, model="voyage-2", input_type="document")
print(result.embeddings[0])
print(result.embeddings[1])


# ## Uploading data to the Pinecone index
# 
# With our embedding model set up, we can now take our product descriptions, embed them, and upload the embeddings to the Pinecone index.

# In[ ]:


from tqdm.auto import tqdm
from time import sleep

descriptions = df["text"].tolist()
batch_size = 100  # how many embeddings we create and insert at once

for i in tqdm(range(0, len(descriptions), batch_size)):
    # find end of batch
    i_end = min(len(descriptions), i+batch_size)
    descriptions_batch = descriptions[i:i_end]
    # create embeddings (try-except added to avoid RateLimitError. Voyage currently allows 300/requests per minute.)
    done = False
    while not done:
        try:
            res = vo.embed(descriptions_batch, model="voyage-2", input_type="document")
            done = True
        except:
            sleep(5)
            
    embeds = [record for record in res.embeddings]
    # create unique IDs for each text
    ids_batch = [f"description_{idx}" for idx in range(i, i_end)]
    
    # Create metadata dictionaries for each text
    metadata_batch = [{'description': description} for description in descriptions_batch]

    to_upsert = list(zip(ids_batch, embeds, metadata_batch))

    # upsert to Pinecone
    index.upsert(vectors=to_upsert)


# ## Making queries
# 
# With our index populated, we can start making queries to get results. We can take a natural language question, embed it, and query it against the index to return semantically similar product descriptions.

# In[49]:


USER_QUESTION = "I want to get my daughter more interested in science. What kind of gifts should I get her?"

question_embed = vo.embed([USER_QUESTION], model="voyage-2", input_type="query")
results = index.query(
            vector=question_embed.embeddings, top_k=5, include_metadata=True
        )
results


# ## Optimizing search
# 
# These results are good, but we can optimize them even further. Using Claude, we can take the user's question and generate search keywords from it. This allows us to perform a wide, diverse search over the index to get more relevant product descriptions.

# In[ ]:


import anthropic

client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)
def get_completion(prompt):
    completion = client.completions.create(
        model="claude-2.1",
        prompt=prompt,
        max_tokens_to_sample=1024,
    )
    return completion.completion


# In[ ]:


def create_keyword_prompt(question):
    return f"""\n\nHuman: Given a question, generate a list of 5 very diverse search keywords that can be used to search for products on Amazon.

The question is: {question}

Output your keywords as a JSON that has one property "keywords" that is a list of strings. Only output valid JSON.\n\nAssistant:{{"""


# With our Anthropic client setup and our prompt created, we can now begin to generate keywords from the question. We will output the keywords in a JSON object so we can easily parse them from Claude's output.

# In[ ]:


keyword_json = "{" + get_completion(create_keyword_prompt(USER_QUESTION))
print(keyword_json)


# In[ ]:


import json

# Extract the keywords from the JSON
data = json.loads(keyword_json)
keywords_list = data['keywords']
print(keywords_list)


# Now with our keywords in a list, let's embed each one, query it against the index, and return the top 3 most relevant product descriptions.

# In[ ]:


results_list = []
for keyword in keywords_list:
    # get the embeddings for the keywords
    query_embed = vo.embed([keyword], model="voyage-2", input_type="query")
    # search for the embeddings in the Pinecone index
    search_results = index.query(vector=query_embed.embeddings, top_k=3, include_metadata=True)
    # append the search results to the list
    for search_result in search_results.matches:
            results_list.append(search_result['metadata']['description'])
print(len(results_list))


# ## Answering with Claude
# 
# Now that we have a list of product descriptions, let's format them into a search template Claude has been trained with and pass the formatted descriptions into another prompt.

# In[47]:


# Formatting search results
def format_results(extracted: list[str]) -&gt; str:
        result = "\n".join(
            [
                f'&lt;item index="{i+1}"&gt;\n&lt;page_content&gt;\n{r}\n&lt;/page_content&gt;\n&lt;/item&gt;'
                for i, r in enumerate(extracted)
            ]
        )
    
        return f"\n&lt;search_results&gt;\n{result}\n&lt;/search_results&gt;"

def create_answer_prompt(results_list, question):
    return f"""\n\nHuman: {format_results(results_list)} Using the search results provided within the &lt;search_results&gt;&lt;/search_results&gt; tags, please answer the following question &lt;question&gt;{question}&lt;/question&gt;. Do not reference the search results in your answer.\n\nAssistant:"""


# Finally, let's ask the original user's question and get our answer from Claude.

# In[50]:


answer = get_completion(create_answer_prompt(results_list, USER_QUESTION))
print(answer)


</file>
<file name="third_party/VoyageAI/how_to_create_embeddings.md">
# Embeddings
Text embeddings are numerical representations of text strings, represented as a vector of floating point numbers. We can use the distance between two text embeddings (popularly cosine similarity) to measure how related two pieces of text are to one another, with smaller distances predicting higher relatedness.

Comparing the similarity of strings, or clustering strings by their distance from one another, allows for a wide variety of applications including **search** (popular in RAG architectures), **recommendations**, and **anomaly detection**.

## How to get embeddings with Anthropic
While Anthropic does not offer its own embedding model, we have partnered with [Voyage AI](https://www.voyageai.com/?ref=anthropic) as our preferred provider for text embeddings. Voyage makes [state of the art](https://blog.voyageai.com/2023/10/29/voyage-embeddings/?ref=anthropic) embedding models, and even offers models customized for specific industry domains such as finance and healthcare, and models that can be fine-tuned for your company.

To access Voyage embeddings, please first sign up on [Voyage AI’s website](https://dash.voyageai.com/?ref=anthropic),  obtain an API key, and set the API key as an environment variable for convenience:

```bash
export VOYAGE_API_KEY="&lt;your secret key&gt;"
```

You can obtain the embeddings either using the official [`voyageai` Python package](https://github.com/voyage-ai/voyageai-python) or HTTP requests, as described below.

### Voyage Python Package

The `voyageai` package can be installed using the following command:

```bash
pip install -U voyageai
```

Then, you can create a client object and start using it to embed your texts:

```python
import voyageai

vo = voyageai.Client()
# This will automatically use the environment variable VOYAGE_API_KEY.
# Alternatively, you can use vo = voyageai.Client(api_key="&lt;your secret key&gt;")

texts = ["Sample text 1", "Sample text 2"]

result = vo.embed(texts, model="voyage-2", input_type="document")
print(result.embeddings[0])
print(result.embeddings[1])
```

`result.embeddings` will be a list of two embedding vectors, each containing 1024 floating-point numbers. After running the above code, the two embeddings will be printed on the screen:

```
[0.02012746, 0.01957859, ...]  # embedding for "Sample text 1"
[0.01429677, 0.03077182, ...]  # embedding for "Sample text 2"
```

When creating the embeddings, you may specify a few other arguments to the `embed()` function. Here is the specification:

&gt; `voyageai.Client.embed(texts : List[str], model : str = "voyage-2", input_type : Optional[str] = None, truncation : Optional[bool] = None)`

- **texts** (List[str]) - A list of texts as a list of strings, such as `["I like cats", "I also like dogs"]`. Currently, the maximum length of the list is 128, and total number of tokens in the list is at most 320K for `voyage-2` and 120K for `voyage-code-2`.
- **model** (str) - Name of the model. Recommended options: `voyage-2` (default), `voyage-code-2`.
- **input_type** (str, optional, defaults to `None`) - Type of the input text. Defalut to `None`. Other options:  `query`, `document`.
    - When the input_type is set to `None`, and the input text will be directly encoded by our embedding model. Alternatively, when the inputs are documents or queries, the users can specify input_type to be `query` or `document`, respectively. In such cases, Voyage will prepend a special prompt to input text and send the extended inputs to the embedding model.
    - For retrieval/search use cases, we recommend specifying this argument when encoding queries or documents to enhance retrieval quality. Embeddings generated with and without the input_type argument are compatible.

- **truncation** (bool, optional, defaults to `None`) - Whether to truncate the input texts to fit within the context length.
    - If `True`, over-length input texts will be truncated to fit within the context length, before vectorized by the embedding model.
    - If `False`, an error will be raised if any given text exceeds the context length.
    - If not specified (defaults to `None`), Voyage will truncate the input text before sending it to the embedding model if it slightly exceeds the context window length. If it significantly exceeds the context window length, an error will be raised.

### Voyage HTTP API

You can also get embeddings by requesting Voyage HTTP API. For example, you can send an HTTP request through the `curl` command in a terminal:

```bash
curl https://api.voyageai.com/v1/embeddings \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $VOYAGE_API_KEY" \
  -d '{
    "input": ["Sample text 1", "Sample text 2"],
    "model": "voyage-2"
  }'
```

The response you would get is a JSON object containing the embeddings and the token usage:

```bash
{
  "object": "list",
  "data": [
    {
      "embedding": [0.02012746, 0.01957859, ...],
      "index": 0
    },
    {
      "embedding": [0.01429677, 0.03077182, ...],
      "index": 1
    }
  ],
  "model": "voyage-2",
  "usage": {
    "total_tokens": 10
  }
}
```

Voyage AI's embedding endpoint is `https://api.voyageai.com/v1/embeddings` (POST). The request header must contain the API key. The request body is a JSON object containing the following arguments:

- **input** (str, List[str]) - A single text string, or a list of texts as a list of strings. Currently, the maximum length of the list is 128, and total number of tokens in the list is at most 320K for `voyage-2` and 120K for `voyage-code-2`.
- **model** (str) - Name of the model. Recommended options: `voyage-2` (default), `voyage-code-2`.
- **input_type** (str, optional, defaults to `None`) - Type of the input text. Defalut to `None`. Other options:  `query`, `document`.
- **truncation** (bool, optional, defaults to `None`) - Whether to truncate the input texts to fit within the context length.
    - If `True`, over-length input texts will be truncated to fit within the context length, before vectorized by the embedding model.
    - If `False`, an error will be raised if any given text exceeds the context length.
    - If not specified (defaults to `None`), Voyage will truncate the input text before sending it to the embedding model if it slightly exceeds the context window length. If it significantly exceeds the context window length, an error will be raised.
- **encoding_format** (str, optional, default to `None`) - Format in which the embeddings are encoded. Voyage currently supports two options:
    - If not specified (defaults to `None`): the embeddings are represented as lists of floating-point numbers;
    - `"base64"`: the embeddings are compressed to [Base64](https://docs.python.org/3/library/base64.html) encodings.


### AWS Marketplace

Voyage embeddings are available on [AWS Marketplace](https://aws.amazon.com/marketplace/seller-profile?id=seller-snt4gb6fd7ljg). Here is the instruction for accessing Voyage on AWS:

1. Subscribe to the model package

    1. Navigate to the [model package listing page](https://aws.amazon.com/marketplace/seller-profile?id=seller-snt4gb6fd7ljg) and select the model to deploy.
    1. Click on the *Continue to subscribe* button.
    1. On the *Subscribe to this software* page, please carefully review the details. If you and your organization agree with the standard End-User License Agreement (EULA), pricing, and support terms, click on "Accept Offer".
    1. After selecting *Continue to configuration* and choosing a region, you will be presented with a Product Arn. This is the model package ARN required for creating a deployable model using Boto3. Copy the ARN that corresponds to your selected region and use it in the subsequent cell.

2. Deploy the model package

    From now on, we recommend you to continue with our provided [notebook](https://github.com/voyage-ai/voyageai-aws/blob/main/notebooks/deploy_voyage_code_2_sagemaker.ipynb) in [Sagemaker Studio](https://aws.amazon.com/sagemaker/studio/). Please create a JupyterLab space, upload our notebook, and continue from there.


## Available Models

Voyage recommends using the following embedding models:

|  Model | Context Length | Embedding Dimension | Description |
| --- | --- | --- | --- |
| `voyage-2` | 4000 | 1024 | Latest base (generalist) embedding model with the best retrieval quality. See [blog post](https://blog.voyageai.com/2023/10/29/voyage-embeddings/?ref=anthropic) for details. |
| `voyage-code-2` | 16000 | 1536 | Optimized for code retrieval (17% better than alternatives), and also SoTA on general-purpose corpora. See [blog post](https://blog.voyageai.com/2024/01/23/voyage-code-2-elevate-your-code-retrieval/?ref=anthropic) for details. |

`voyage-2` is a generalist embedding model, which achieves state-of-the-art performance across domains and retains high efficiency. `voyage-code-2` is optimized for code applications, offering 4x the context length for more flexible usage, albeit at a slightly higher latency.

Voyage is actively developing more advanced and specialized models, and can fine-tune embeddings for your company. Please email [contact@voyageai.com](mailto:contact@voyageai.com) for trial access or finetuning on your own data!

- `voyage-finance-2`: coming soon
- `voyage-law-2`: coming soon
- `voyage-multilingual-2`: coming soon
- `voyage-healthcare-2`: coming soon

## Motivating Example
Now that we know how to get embeddings, let's see a brief motivating example.

Suppose we have a small corpus of six documents to retrieve from

```python
documents = [
    "The Mediterranean diet emphasizes fish, olive oil, and vegetables, believed to reduce chronic diseases.",
    "Photosynthesis in plants converts light energy into glucose and produces essential oxygen.",
    "20th-century innovations, from radios to smartphones, centered on electronic advancements.",
    "Rivers provide water, irrigation, and habitat for aquatic species, vital for ecosystems.",
    "Apple’s conference call to discuss fourth fiscal quarter results and business updates is scheduled for Thursday, November 2, 2023 at 2:00 p.m. PT / 5:00 p.m. ET.",
    "Shakespeare's works, like 'Hamlet' and 'A Midsummer Night's Dream,' endure in literature."
]
```

We will first use Voyage to convert each of them into an embedding vector

```python
import voyageai

vo = voyageai.Client()

# Embed the documents
doc_embds = vo.embed(
    documents, model="voyage-2", input_type="document"
).embeddings
```

The embeddings will allow us to do semantic search / retrieval in the vector space. Given an example query,

```python
query = "When is Apple's conference call scheduled?"
```

we convert it into an embedding, and conduct a nearest neighbor search to find the most relevant document based on the distance in the embedding space.

```python
import numpy as np

# Embed the query
query_embd = vo.embed(
    [query], model="voyage-2", input_type="query"
).embeddings[0]

# Compute the similarity
# Voyage embeddings are normalized to length 1, therefore dot-product
# and cosine similarity are the same.
similarities = np.dot(doc_embds, query_embd)

retrieved_id = np.argmax(similarities)
print(documents[retrieved_id])
```

Note that we use `input_type="document"` and `input_type="query"` for embedding the document and query, respectively. More specification can be found [here](#voyage-python-package).

The output would be the 5th document, which is indeed the most relevant to the query:

```
Apple’s conference call to discuss fourth fiscal quarter results and business updates is scheduled for Thursday, November 2, 2023 at 2:00 p.m. PT / 5:00 p.m. ET.
```

If you are looking for a detailed set of cookbooks on how to do RAG with embeddings, including vector databases, check out our [RAG cookbook](https://github.com/anthropics/anthropic-cookbook/blob/main/third_party/Pinecone/rag_using_pinecone.ipynb).

## Frequently Asked Questions
### How do I calculate the distance between two embedding vectors?
Cosine similarity is a popular choice, but most distance functions will do fine. Voyage embeddings are normalized to length 1, therefore cosine similarity is essentially the same as the dot-product between two vectors. Here is a code snippet you can use for calculating cosine similarity between two embedding vectors.

```python
import numpy

similarity = np.dot(embd1, embd2)
# Voyage embeddings are normalized to length 1, therefore cosine similarity
# is the same as dot-product.
```

If you want to find the K nearest embedding vectors over a large corpus, we recommend using the capabilities built into most vector databases.

### Can I count the number of tokens in a string before embedding it?
Yes! You can do so with the following code.

```python
import voyageai

vo = voyageai.Client()
total_tokens = vo.count_tokens(["Sample text"])
```

## Pricing
Pricing information is available on the Voyage website's [pricing page](https://docs.voyageai.com/pricing/?ref=anthropic), and should be checked there.

</file>
<file name="third_party/Wikipedia/wikipedia-search-cookbook.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Iteratively Searching Wikipedia with Claude

# [DISCLAIMER: This notebook was created using Claude 2 models and is considered legacy.]
# 
# Some questions can't be answered by Claude off the top of Claude's head. Maybe they're about current events. Maybe you have an intensely detailed question that Claude hasn't memorized the answer to. No worries! With some prompting and scaffolding, Claude can search the web to find answers. In this notebook, we will create a virtual research assistant who has the ability to search Wikipedia to find answers to your question. The same approach can be used to allow Claude to search the broader web, or a set of documents you provide.
# 
# What is the approach? Broadly it falls under the category of "tool use". We create a search tool, tell Claude about it, and let it go to work. In pseudocode:
# 
# 1. Prompt Claude with a description of the search tool, how it's best used, and how to "call" it (by issuing a special string).
# 2. Tell Claude your question.
# 3. Claude produces tokens like normal. If it produces the special string, terminate the token production stream, and issue a query to a search API.
# 4. Construct a new prompt which consists of the prompt from step 1, plus everything Claude generated up to the search call string, plus the results of the API call.
# 5. Repeat until Claude decides it's done.
# 
# Let's zoom in on the prompts for tool use and retrieval.

# ### Prompts

# In[101]:


# Tool Description Prompt
wikipedia_prompt = """You will be asked a question by a human user. You have access to the following tool to help answer the question. &lt;tool_description&gt; Search Engine Tool * The search engine will exclusively search over Wikipedia for pages similar to your query. It returns for each page its title and full page content. Use this tool if you want to get up-to-date and comprehensive information on a topic to help answer queries. Queries should be as atomic as possible -- they only need to address one part of the user's question. For example, if the user's query is "what is the color of a basketball?", your search query should be "basketball". Here's another example: if the user's question is "Who created the first neural network?", your first query should be "neural network". As you can see, these queries are quite short. Think keywords, not phrases. * At any time, you can make a call to the search engine using the following syntax: &lt;search_query&gt;query_word&lt;/search_query&gt;. * You'll then get results back in &lt;search_result&gt; tags.&lt;/tool_description&gt;"""
print(wikipedia_prompt)


# Notice that there is a lot of advice in this prompt about how to search Wikipedia properly. We're all used to just typing random nonsense into Google and getting decent results because the query parsing logic is so good. Wikipedia search is not like that. As an example: consider the query "What's the best way to purchase potatoes in the United Arab Emirates". The [top hits for this on Wikipedia](https://en.wikipedia.org/w/index.php?search=What%27s+the+best+way+to+purchase+potatoes+in+the+United+Arab+Emirates&amp;title=Special:Search&amp;profile=advanced&amp;fulltext=1&amp;ns0=1) are for Slavery in the United States, 1973 Oil Crisis, Wendy's, and Tim Horton's (??). Meanwhile Google correctly takes you straight to Carrefour UAE.

# Another difference is that Wikipedia search returns entire pages. With vector search, you might be getting narrower chunks, so you might want to ask for more results, use a more specific query, or both. The big-picture takeaway is that your results can vary a lot on your choices here so pay attention!

# In[103]:


retrieval_prompt = """Before beginning to research the user's question, first think for a moment inside &lt;scratchpad&gt; tags about what information is necessary for a well-informed answer. If the user's question is complex, you may need to decompose the query into multiple subqueries and execute them individually. Sometimes the search engine will return empty search results, or the search results may not contain the information you need. In such cases, feel free to try again with a different query. 

After each call to the Search Engine Tool, reflect briefly inside &lt;search_quality&gt;&lt;/search_quality&gt; tags about whether you now have enough information to answer, or whether more information is needed. If you have all the relevant information, write it in &lt;information&gt;&lt;/information&gt; tags, WITHOUT actually answering the question. Otherwise, issue a new search.

Here is the user's question: &lt;question&gt;{query}&lt;/question&gt; Remind yourself to make short queries in your scratchpad as you plan out your strategy."""
print(retrieval_prompt)


# 
# We use a scratchpad here for the normal chain-of-thought reasons -- it makes Claude come up with a coherent plan to answer the question. The search quality reflection is used to induce Claude to be persistent and not jump the gun by answering the question before gathering all the relevant information. But why are we telling Claude to synthesize the information and not answer right away?

# In[104]:


answer_prompt = "Here is a user query: &lt;query&gt;{query}&lt;/query&gt;. Here is some relevant information: &lt;information&gt;{information}&lt;/information&gt;. Please answer the question using the relevant information."
print(answer_prompt)


# By extracting the information and presenting it to Claude in a new query, we allow Claude to focus all its attention on synthesizing the information into the right answer. Without this step, we found that Claude would sometimes precommit to an answer and then "justify" it with the search results, rather than allowing the results to guide it.

# Now follows a bunch of code that implements the pseudocode for searching + retrieving + reprompting.
# 
# ### Search Implementation

# In[88]:


from dataclasses import dataclass
from abc import ABC, abstractmethod
import wikipedia, re
from anthropic import Anthropic, HUMAN_PROMPT, AI_PROMPT
from typing import Tuple, Optional

@dataclass
class SearchResult:
    """
    A single search result.
    """
    content: str

class SearchTool:
    """
    A search tool that can run a query and return a formatted string of search results.
    """

    def __init__():
        pass

    @abstractmethod
    def raw_search(self, query: str, n_search_results_to_use: int) -&gt; list[SearchResult]:
        """
        Runs a query using the searcher, then returns the raw search results without formatting.

        :param query: The query to run.
        :param n_search_results_to_use: The number of results to return.
        """
        raise NotImplementedError()
    
    @abstractmethod
    def process_raw_search_results(
        self, results: list[SearchResult],
    ) -&gt; list[str]:
        """
        Extracts the raw search content from the search results and returns a list of strings that can be passed to Claude.

        :param results: The search results to extract.
        """
        raise NotImplementedError()
    
    def search_results_to_string(self, extracted: list[str]) -&gt; str:
        """
        Joins and formats the extracted search results as a string.

        :param extracted: The extracted search results to format.
        """
        result = "\n".join(
            [
                f'&lt;item index="{i+1}"&gt;\n&lt;page_content&gt;\n{r}\n&lt;/page_content&gt;\n&lt;/item&gt;'
                for i, r in enumerate(extracted)
            ]
        )
        return result

    def wrap_search_results(self, extracted: list[str]) -&gt; str:
        """
        Formats the extracted search results as a string, including the &lt;search_results&gt; tags.

        :param extracted: The extracted search results to format.
        """
        return f"\n&lt;search_results&gt;\n{self.search_results_to_string(extracted)}\n&lt;/search_results&gt;"
    
    def search(self, query: str, n_search_results_to_use: int) -&gt; str:
        raw_search_results = self.raw_search(query, n_search_results_to_use)
        processed_search_results = self.process_raw_search_results(raw_search_results)
        displayable_search_results = self.wrap_search_results(processed_search_results)
        return displayable_search_results 


# In[89]:


@dataclass
class WikipediaSearchResult(SearchResult):
    title: str
    
class WikipediaSearchTool(SearchTool):

    def __init__(self,
                 truncate_to_n_tokens: Optional[int] = 5000):
        self.truncate_to_n_tokens = truncate_to_n_tokens
        if truncate_to_n_tokens is not None:
            self.tokenizer = Anthropic().get_tokenizer()

    def raw_search(self, query: str, n_search_results_to_use: int) -&gt; list[WikipediaSearchResult]:
        search_results = self._search(query, n_search_results_to_use)
        return search_results
    
    def process_raw_search_results(self, results: list[WikipediaSearchResult]) -&gt; list[str]:
        processed_search_results = [f'Page Title: {result.title.strip()}\nPage Content:\n{self.truncate_page_content(result.content)}' for result in results]
        return processed_search_results

    def truncate_page_content(self, page_content: str) -&gt; str:
        if self.truncate_to_n_tokens is None:
            return page_content.strip()
        else:
            return self.tokenizer.decode(self.tokenizer.encode(page_content).ids[:self.truncate_to_n_tokens]).strip()
        
    def _search(self, query: str, n_search_results_to_use: int) -&gt; list[WikipediaSearchResult]:
        results: list[str] = wikipedia.search(query)
        search_results: list[WikipediaSearchResult] = []
        for result in results:
            if len(search_results) &gt;= n_search_results_to_use:
                break
            try:
                page = wikipedia.page(result)
                print(page.url)
            except:
                # The Wikipedia API is a little flaky, so we just skip over pages that fail to load
                continue
            content = page.content
            title = page.title
            search_results.append(WikipediaSearchResult(content=content, title=title))
        return search_results


# In[100]:


def extract_between_tags(tag: str, string: str, strip: bool = True) -&gt; list[str]:
    ext_list = re.findall(f"&lt;{tag}\s?&gt;(.+?)&lt;/{tag}\s?&gt;", string, re.DOTALL)
    if strip:
        ext_list = [e.strip() for e in ext_list]
    return ext_list

class ClientWithRetrieval(Anthropic):

    def __init__(self, search_tool: SearchTool, verbose: bool = True, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.search_tool = search_tool
        self.verbose = verbose

    # Helper methods
    def _search_query_stop(self, partial_completion: str, n_search_results_to_use: int) -&gt; Tuple[list[SearchResult], str]:
        search_query = extract_between_tags('search_query', partial_completion + '&lt;/search_query&gt;') 
        if search_query is None:
            raise Exception(f'Completion with retrieval failed as partial completion returned mismatched &lt;search_query&gt; tags.')
        print(f'Running search query against SearchTool: {search_query}')
        search_results = self.search_tool.raw_search(search_query, n_search_results_to_use)
        extracted_search_results = self.search_tool.process_raw_search_results(search_results)
        formatted_search_results = self.search_tool.wrap_search_results(extracted_search_results)
        return search_results, formatted_search_results
    
    def retrieve(self,
                       query: str,
                       model: str,
                       n_search_results_to_use: int = 3,
                       stop_sequences: list[str] = [HUMAN_PROMPT],
                       max_tokens_to_sample: int = 1000,
                       max_searches_to_try: int = 5,
                       temperature: float = 1.0) -&gt; tuple[list[SearchResult], str]:
        
        prompt = f"{HUMAN_PROMPT} {wikipedia_prompt} {retrieval_prompt.format(query=query)}{AI_PROMPT}"
        starting_prompt = prompt
        print("Starting prompt:", starting_prompt)
        token_budget = max_tokens_to_sample
        all_raw_search_results: list[SearchResult] = []
        for tries in range(max_searches_to_try):
            partial_completion = self.completions.create(prompt = prompt,
                                                     stop_sequences=stop_sequences + ['&lt;/search_query&gt;'],
                                                     model=model,
                                                     max_tokens_to_sample = token_budget,
                                                     temperature = temperature)
            partial_completion, stop_reason, stop_seq = partial_completion.completion, partial_completion.stop_reason, partial_completion.stop
            print(partial_completion)
            token_budget -= self.count_tokens(partial_completion)
            prompt += partial_completion
            if stop_reason == 'stop_sequence' and stop_seq == '&lt;/search_query&gt;':
                print(f'Attempting search number {tries}.')
                raw_search_results, formatted_search_results = self._search_query_stop(partial_completion, n_search_results_to_use)
                prompt += '&lt;/search_query&gt;' + formatted_search_results
                all_raw_search_results += raw_search_results
            else:
                break
        final_model_response = prompt[len(starting_prompt):]
        return all_raw_search_results, final_model_response
    
    # Main methods
    def completion_with_retrieval(self,
                                        query: str,
                                        model: str,
                                        n_search_results_to_use: int = 3,
                                        stop_sequences: list[str] = [HUMAN_PROMPT],
                                        max_tokens_to_sample: int = 1000,
                                        max_searches_to_try: int = 5,
                                        temperature: float = 1.0) -&gt; str:
        
        _, retrieval_response = self.retrieve(query, model=model,
                                                 n_search_results_to_use=n_search_results_to_use, stop_sequences=stop_sequences,
                                                 max_tokens_to_sample=max_tokens_to_sample,
                                                 max_searches_to_try=max_searches_to_try,
                                                 temperature=temperature)
        information = extract_between_tags('information', retrieval_response)[-1]
        prompt = f"{HUMAN_PROMPT} {answer_prompt.format(query=query, information=information)}{AI_PROMPT}"
        print("Summarizing:\n", prompt)
        answer = self.completions.create(
            prompt = prompt, model=model, temperature=temperature, max_tokens_to_sample=1000
        ).completion
        return answer


# ### Running a Query

# We're ready to execute a query! Let's pick something:
# - recent, so it's less likely to be in Claude's training data, and
# - compound/complex so it requires multiple searches.

# In[98]:


import os
# Create a searcher
wikipedia_search_tool = WikipediaSearchTool()
ANTHROPIC_SEARCH_MODEL = "claude-2"

client = ClientWithRetrieval(api_key=os.environ['ANTHROPIC_API_KEY'], verbose=True, search_tool = wikipedia_search_tool)

query = "Which movie came out first: Oppenheimer, or Are You There God It's Me Margaret?"

augmented_response = client.completion_with_retrieval(
    query=query,
    model=ANTHROPIC_SEARCH_MODEL,
    n_search_results_to_use=1,
    max_searches_to_try=5,
    max_tokens_to_sample=1000,
    temperature=0)
print(augmented_response)


# Cool, Claude was able to make a plan, execute the queries, and synthesize the information into an accurate answer. Note: without the extra information extraction step, Claude would sometimes determine the release dates of the movies correctly but then get the ordering wrong in its final answer. Let's do another.

# In[99]:


augmented_response = client.completion_with_retrieval(
    query="Who won the 2023 NBA championship? Who was that team's best player in the year 2009?",
    model=ANTHROPIC_SEARCH_MODEL,
    n_search_results_to_use=1,
    max_searches_to_try=5,
    max_tokens_to_sample=1000,
    temperature=0)
print(augmented_response)


# And there you have it! You may notice that the search tool code is nice and abstract and can be adapted to use a search API of your choice with minor modifications. Just remember to explain to Claude any tips it needs to use the tool well. You can even give Claude some few-shot examples of ideal query plans and query structure to improve performance further.

# 

</file>
<file name="third_party/WolframAlpha/using_llm_api.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Using the Wolfram Alpha LLM API as a Tool with Claude
# In this recipe, we'll show you how to integrate the Wolfram Alpha LLM API as a tool for Claude to use. Claude will be able to send queries to the Wolfram Alpha API and receive computed responses, which it can then use to provide answers to user questions.

# ## Step 1: Set up the environment
# First, let's install the required libraries and set up the Anthropic API client. We also will need to set our APP ID for using WolframAlpha. You can sign up and create a new App ID for this project for free [here](https://developer.wolframalpha.com/access).

# In[10]:


from anthropic import Anthropic
import requests
import urllib.parse
import json

client = Anthropic()

# Replace 'YOUR_APP_ID' with your actual Wolfram Alpha AppID
WOLFRAM_APP_ID = 'YOUR_APP_ID'


# ## Step 2: Define the Wolfram Alpha LLM API tool
# We'll define a tool that allows Claude to send queries to the Wolfram Alpha LLM API and receive the computed response.

# In[20]:


def wolfram_alpha_query(query):    
    # URL-encode the query
    encoded_query = urllib.parse.quote(query)
    
    # Make a request to the Wolfram Alpha LLM API
    url = f'https://www.wolframalpha.com/api/v1/llm-api?input={encoded_query}&amp;appid={WOLFRAM_APP_ID}'
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.text
    else:
        return f"Error: {response.status_code} - {response.text}"

tools = [
    {
        "name": "wolfram_alpha",
        "description": "A tool that allows querying the Wolfram Alpha knowledge base. Useful for mathematical calculations, scientific data, and general knowledge questions.",
        "input_schema": {
            "type": "object",
            "properties": {
                "search_query": {
                    "type": "string",
                    "description": "The query to send to the Wolfram Alpha API."
                }
            },
            "required": ["query"]
        }
    }
]


# In this code, we define a wolfram_alpha_query function that takes a query as input, URL-encodes it, and sends a request to the Wolfram Alpha LLM API using the provided AppID. The function returns the computed response from the API if the request is successful, or an error message if there's an issue.
# 
# We then define the wolfram_alpha tool with an input schema that expects a single query property of type string.
# 

# ## Step 3: Interact with Claude
# Now, let's see how Claude can interact with the Wolfram Alpha tool to answer user questions.

# In[27]:


def process_tool_call(tool_name, tool_input):
    if tool_name == "wolfram_alpha":
        return wolfram_alpha_query(tool_input["search_query"])

def chat_with_claude(user_message):
    print(f"\n{'='*50}\nUser Message: {user_message}\n{'='*50}")
    prompt = f"""Here is a question: {user_message}. Please use the Wolfram Alpha tool to answer it. Do not reflect on the quality of the returned search results in your response."""

    message = client.beta.tools.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        messages=[{"role": "user", "content": prompt}]
    )
    
    print(f"\nInitial Response:")
    print(f"Stop Reason: {message.stop_reason}")
    print(f"Content: {message.content}")
    
    if message.stop_reason == "tool_use":
        tool_use = next(block for block in message.content if block.type == "tool_use")
        tool_name = tool_use.name
        tool_input = tool_use.input
        
        print(f"\nTool Used: {tool_name}")
        print(f"Tool Input:")
        print(json.dumps(tool_input, indent=2))
        
        tool_result = process_tool_call(tool_name, tool_input)
        
        print(f"\nTool Result:")
        print(str(json.dumps(tool_result, indent=2)))
    
        
        response = client.beta.tools.messages.create(
            model=MODEL_NAME,
            max_tokens=2000,
            tools=tools,
            messages=[
                {"role": "user", "content": prompt},
                {"role": "assistant", "content": message.content},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "tool_result",
                            "tool_use_id": tool_use.id,
                            "content": str(tool_result)
                        }
                    ]
                }
            ]
        )
        
        print(f"\nResponse:")
        print(f"Stop Reason: {response.stop_reason}")
        print(f"Content: {response.content}")
    else:
        response = message
    
    final_response = None
    for block in response.content:
        if hasattr(block, 'text'):
            final_response = block.text
            break
    
    print(f"\nFinal Response: {final_response}")
    
    return final_response


# ## Step 4: Try it out!
# Let's try giving Claude a few example questions now that it has access to Wolfram Alpha.

# In[28]:


# Example usage
print(chat_with_claude("What are the 5 largest countries in the world by population?"))
print(chat_with_claude("Calculate the square root of 1764."))
print(chat_with_claude("What is the distance between Earth and Mars?"))


</file>
<file name="tool_use/calculator_tool.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Using a Calculator Tool with Claude
# In this recipe, we'll demonstrate how to provide Claude with a simple calculator tool that it can use to perform arithmetic operations based on user input. We'll define the calculator tool and show how Claude can interact with it to solve mathematical problems.

# ## Step 1: Set up the environment
# 
# First, let's install the required libraries and set up the Anthropic API client.

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic')


# In[11]:


from anthropic import Anthropic

client = Anthropic()
MODEL_NAME = "claude-3-opus-20240229"


# ## Step 2: Define the calculator tool
# We'll define a simple calculator tool that can perform basic arithmetic operations. The tool will take a mathematical expression as input and return the result. 
# 
# Note that we are calling ```eval``` on the outputted expression. This is bad practice and should not be used generally but we are doing it for the purpose of demonstration.

# In[2]:


import re

def calculate(expression):
    # Remove any non-digit or non-operator characters from the expression
    expression = re.sub(r'[^0-9+\-*/().]', '', expression)
    
    try:
        # Evaluate the expression using the built-in eval() function
        result = eval(expression)
        return str(result)
    except (SyntaxError, ZeroDivisionError, NameError, TypeError, OverflowError):
        return "Error: Invalid expression"

tools = [
    {
        "name": "calculator",
        "description": "A simple calculator that performs basic arithmetic operations.",
        "input_schema": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "The mathematical expression to evaluate (e.g., '2 + 3 * 4')."
                }
            },
            "required": ["expression"]
        }
    }
]


# In this example, we define a calculate function that takes a mathematical expression as input, removes any non-digit or non-operator characters using a regular expression, and then evaluates the expression using the built-in eval() function. If the evaluation is successful, the result is returned as a string. If an error occurs during evaluation, an error message is returned.
# 
# We then define the calculator tool with an input schema that expects a single expression property of type string.

# ## Step 3: Interact with Claude
# Now, let's see how Claude can interact with the calculator tool to solve mathematical problems.

# In[36]:


def process_tool_call(tool_name, tool_input):
    if tool_name == "calculator":
        return calculate(tool_input["expression"])

def chat_with_claude(user_message):
    print(f"\n{'='*50}\nUser Message: {user_message}\n{'='*50}")

    message = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        messages=[{"role": "user", "content": user_message}],
        tools=tools,
    )

    print(f"\nInitial Response:")
    print(f"Stop Reason: {message.stop_reason}")
    print(f"Content: {message.content}")

    if message.stop_reason == "tool_use":
        tool_use = next(block for block in message.content if block.type == "tool_use")
        tool_name = tool_use.name
        tool_input = tool_use.input

        print(f"\nTool Used: {tool_name}")
        print(f"Tool Input: {tool_input}")

        tool_result = process_tool_call(tool_name, tool_input)

        print(f"Tool Result: {tool_result}")

        response = client.messages.create(
            model=MODEL_NAME,
            max_tokens=4096,
            messages=[
                {"role": "user", "content": user_message},
                {"role": "assistant", "content": message.content},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "tool_result",
                            "tool_use_id": tool_use.id,
                            "content": tool_result,
                        }
                    ],
                },
            ],
            tools=tools,
        )
    else:
        response = message

    final_response = next(
        (block.text for block in response.content if hasattr(block, "text")),
        None,
    )
    print(response.content)
    print(f"\nFinal Response: {final_response}")

    return final_response


# ## Step 4: Try it out!
# 
# Let's try giving Claude a few example math questions now that it has access to a calculator.

# In[37]:


chat_with_claude("What is the result of 1,984,135 * 9,343,116?")
chat_with_claude("Calculate (12851 - 593) * 301 + 76")
chat_with_claude("What is 15910385 divided by 193053?")


</file>
<file name="tool_use/customer_service_agent.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Creating a Customer Service Agent with Client-Side Tools
# 
# In this recipe, we'll demonstrate how to create a customer service chatbot using Claude 3 plus client-side tools. The chatbot will be able to look up customer information, retrieve order details, and cancel orders on behalf of the customer. We'll define the necessary tools and simulate synthetic responses to showcase the chatbot's capabilities.

# ## Step 1: Set up the environment
# 
# First, let's install the required libraries and set up the Anthropic API client.

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic')


# In[18]:


import anthropic

client = anthropic.Client()
MODEL_NAME = "claude-3-opus-20240229"


# ## Step 2: Define the client-side tools
# 
# Next, we'll define the client-side tools that our chatbot will use to assist customers. We'll create three tools: get_customer_info, get_order_details, and cancel_order.

# In[2]:


tools = [
    {
        "name": "get_customer_info",
        "description": "Retrieves customer information based on their customer ID. Returns the customer's name, email, and phone number.",
        "input_schema": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string",
                    "description": "The unique identifier for the customer."
                }
            },
            "required": ["customer_id"]
        }
    },
    {
        "name": "get_order_details",
        "description": "Retrieves the details of a specific order based on the order ID. Returns the order ID, product name, quantity, price, and order status.",
        "input_schema": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string",
                    "description": "The unique identifier for the order."
                }
            },
            "required": ["order_id"]
        }
    },
    {
        "name": "cancel_order",
        "description": "Cancels an order based on the provided order ID. Returns a confirmation message if the cancellation is successful.",
        "input_schema": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string",
                    "description": "The unique identifier for the order to be cancelled."
                }
            },
            "required": ["order_id"]
        }
    }
]


# ## Step 3: Simulate synthetic tool responses
# 
# Since we don't have real customer data or order information, we'll simulate synthetic responses for our tools. In a real-world scenario, these functions would interact with your actual customer database and order management system.

# In[15]:


def get_customer_info(customer_id):
    # Simulated customer data
    customers = {
        "C1": {"name": "John Doe", "email": "john@example.com", "phone": "123-456-7890"},
        "C2": {"name": "Jane Smith", "email": "jane@example.com", "phone": "987-654-3210"}
    }
    return customers.get(customer_id, "Customer not found")

def get_order_details(order_id):
    # Simulated order data
    orders = {
        "O1": {"id": "O1", "product": "Widget A", "quantity": 2, "price": 19.99, "status": "Shipped"},
        "O2": {"id": "O2", "product": "Gadget B", "quantity": 1, "price": 49.99, "status": "Processing"}
    }
    return orders.get(order_id, "Order not found")

def cancel_order(order_id):
    # Simulated order cancellation
    if order_id in ["O1", "O2"]:
        return True
    else:
        return False


# ## Step 4: Process tool calls and return results
# 
# We'll create a function to process the tool calls made by Claude and return the appropriate results.

# In[4]:


def process_tool_call(tool_name, tool_input):
    if tool_name == "get_customer_info":
        return get_customer_info(tool_input["customer_id"])
    elif tool_name == "get_order_details":
        return get_order_details(tool_input["order_id"])
    elif tool_name == "cancel_order":
        return cancel_order(tool_input["order_id"])


# ## Step 5: Interact with the chatbot
# 
# Now, let's create a function to interact with the chatbot. We'll send a user message, process any tool calls made by Claude, and return the final response to the user.

# In[13]:


import json

def chatbot_interaction(user_message):
    print(f"\n{'='*50}\nUser Message: {user_message}\n{'='*50}")

    messages = [
        {"role": "user", "content": user_message}
    ]

    response = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        messages=messages
    )

    print(f"\nInitial Response:")
    print(f"Stop Reason: {response.stop_reason}")
    print(f"Content: {response.content}")

    while response.stop_reason == "tool_use":
        tool_use = next(block for block in response.content if block.type == "tool_use")
        tool_name = tool_use.name
        tool_input = tool_use.input

        print(f"\nTool Used: {tool_name}")
        print(f"Tool Input:")
        print(json.dumps(tool_input, indent=2))

        tool_result = process_tool_call(tool_name, tool_input)

        print(f"\nTool Result:")
        print(json.dumps(tool_result, indent=2))

        messages = [
            {"role": "user", "content": user_message},
            {"role": "assistant", "content": response.content},
            {
                "role": "user",
                "content": [
                    {
                        "type": "tool_result",
                        "tool_use_id": tool_use.id,
                        "content": str(tool_result),
                    }
                ],
            },
        ]

        response = client.messages.create(
            model=MODEL_NAME,
            max_tokens=4096,
            tools=tools,
            messages=messages
        )

        print(f"\nResponse:")
        print(f"Stop Reason: {response.stop_reason}")
        print(f"Content: {response.content}")

    final_response = next(
        (block.text for block in response.content if hasattr(block, "text")),
        None,
    )

    print(f"\nFinal Response: {final_response}")

    return final_response


# ## Step 6: Test the chatbot
# Let's test our customer service chatbot with a few sample queries.

# In[17]:


chatbot_interaction("Can you tell me the email address for customer C1?")
chatbot_interaction("What is the status of order O2?")
chatbot_interaction("Please cancel order O1 for me.")


# And that's it! We've created a customer service chatbot using Claude 3 models and client-side tools. The chatbot can look up customer information, retrieve order details, and cancel orders based on the user's requests. By defining clear tool descriptions and schemas, we enable Claude to effectively understand and utilize the available tools to assist customers.
# 
# Feel free to expand on this example by integrating with your actual customer database and order management system, and by adding more tools to handle a wider range of customer service tasks.

</file>
<file name="tool_use/extracting_structured_json.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Extracting Structured JSON using Claude and Tool Use
# 
# In this cookbook, we'll explore various examples of using Claude and the tool use feature to extract structured JSON data from different types of input. We'll define custom tools that prompt Claude to generate well-structured JSON output for tasks such as summarization, entity extraction, sentiment analysis, and more.
# 
# If you want to get structured JSON data without using tools, take a look at our "[How to enable JSON mode](https://github.com/anthropics/anthropic-cookbook/blob/main/misc/how_to_enable_json_mode.ipynb)" cookbook.

# ## Set up the environment
# 
# First, let's install the required libraries and set up the Anthropic API client.

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic requests beautifulsoup4')


# In[54]:


from anthropic import Anthropic
import requests
from bs4 import BeautifulSoup
import json

client = Anthropic()
MODEL_NAME = "claude-3-haiku-20240307"


# ## Example 1: Article Summarization
# 
# In this example, we'll use Claude to generate a JSON summary of an article, including fields for the author, topics, summary, coherence score, persuasion score, and a counterpoint.

# In[61]:


tools = [
    {
        "name": "print_summary",
        "description": "Prints a summary of the article.",
        "input_schema": {
            "type": "object",
            "properties": {
                "author": {"type": "string", "description": "Name of the article author"},
                "topics": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": 'Array of topics, e.g. ["tech", "politics"]. Should be as specific as possible, and can overlap.'
                },
                "summary": {"type": "string", "description": "Summary of the article. One or two paragraphs max."},
                "coherence": {"type": "integer", "description": "Coherence of the article's key points, 0-100 (inclusive)"},
                "persuasion": {"type": "number", "description": "Article's persuasion score, 0.0-1.0 (inclusive)"}
            },
            "required": ['author', 'topics', 'summary', 'coherence', 'persuasion', 'counterpoint']
        }
    }
]

url = "https://www.anthropic.com/news/third-party-testing"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")
article = " ".join([p.text for p in soup.find_all("p")])

query = f"""
&lt;article&gt;
{article}
&lt;/article&gt;

Use the `print_summary` tool.
"""

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    tools=tools,
    messages=[{"role": "user", "content": query}]
)
json_summary = None
for content in response.content:
    if content.type == "tool_use" and content.name == "print_summary":
        json_summary = content.input
        break

if json_summary:
    print("JSON Summary:")
    print(json.dumps(json_summary, indent=2))
else:
    print("No JSON summary found in the response.")


# ## Example 2: Named Entity Recognition
# In this example, we'll use Claude to perform named entity recognition on a given text and return the entities in a structured JSON format.

# In[63]:


tools = [
    {
        "name": "print_entities",
        "description": "Prints extract named entities.",
        "input_schema": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string", "description": "The extracted entity name."},
                            "type": {"type": "string", "description": "The entity type (e.g., PERSON, ORGANIZATION, LOCATION)."},
                            "context": {"type": "string", "description": "The context in which the entity appears in the text."}
                        },
                        "required": ["name", "type", "context"]
                    }
                }
            },
            "required": ["entities"]
        }
    }
]

text = "John works at Google in New York. He met with Sarah, the CEO of Acme Inc., last week in San Francisco."

query = f"""
&lt;document&gt;
{text}
&lt;/document&gt;

Use the print_entities tool.
"""

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    tools=tools,
    messages=[{"role": "user", "content": query}]
)

json_entities = None
for content in response.content:
    if content.type == "tool_use" and content.name == "print_entities":
        json_entities = content.input
        break

if json_entities:
    print("Extracted Entities (JSON):")
    print(json_entities)
else:
    print("No entities found in the response.")


# ## Example 3: Sentiment Analysis
# In this example, we'll use Claude to perform sentiment analysis on a given text and return the sentiment scores in a structured JSON format.

# In[64]:


tools = [
    {
        "name": "print_sentiment_scores",
        "description": "Prints the sentiment scores of a given text.",
        "input_schema": {
            "type": "object",
            "properties": {
                "positive_score": {"type": "number", "description": "The positive sentiment score, ranging from 0.0 to 1.0."},
                "negative_score": {"type": "number", "description": "The negative sentiment score, ranging from 0.0 to 1.0."},
                "neutral_score": {"type": "number", "description": "The neutral sentiment score, ranging from 0.0 to 1.0."}
            },
            "required": ["positive_score", "negative_score", "neutral_score"]
        }
    }
]

text = "The product was okay, but the customer service was terrible. I probably won't buy from them again."

query = f"""
&lt;text&gt;
{text}
&lt;/text&gt;

Use the print_sentiment_scores tool.
"""

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    tools=tools,
    messages=[{"role": "user", "content": query}]
)

json_sentiment = None
for content in response.content:
    if content.type == "tool_use" and content.name == "print_sentiment_scores":
        json_sentiment = content.input
        break

if json_sentiment:
    print("Sentiment Analysis (JSON):")
    print(json.dumps(json_sentiment, indent=2))
else:
    print("No sentiment analysis found in the response.")


# ## Example 4: Text Classification
# In this example, we'll use Claude to classify a given text into predefined categories and return the classification results in a structured JSON format.

# In[66]:


tools = [
    {
        "name": "print_classification",
        "description": "Prints the classification results.",
        "input_schema": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string", "description": "The category name."},
                            "score": {"type": "number", "description": "The classification score for the category, ranging from 0.0 to 1.0."}
                        },
                        "required": ["name", "score"]
                    }
                }
            },
            "required": ["categories"]
        }
    }
]

text = "The new quantum computing breakthrough could revolutionize the tech industry."

query = f"""
&lt;document&gt;
{text}
&lt;/document&gt;

Use the print_classification tool. The categories can be Politics, Sports, Technology, Entertainment, Business.
"""

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    tools=tools,
    messages=[{"role": "user", "content": query}]
)

json_classification = None
for content in response.content:
    if content.type == "tool_use" and content.name == "print_classification":
        json_classification = content.input
        break

if json_classification:
    print("Text Classification (JSON):")
    print(json.dumps(json_classification, indent=2))
else:
    print("No text classification found in the response.")


# ## Example 5: Working with unknown keys
# 
# In some cases you may not know the exact JSON object shape up front. In this example we provide an open ended `input_schema` and instruct Claude via prompting how to interact with the tool.

# In[5]:


tools = [
    {
        "name": "print_all_characteristics",
        "description": "Prints all characteristics which are provided.",
        "input_schema": {
            "type": "object",
            "additionalProperties": True
        }
    }
]

query = f"""Given a description of a character, your task is to extract all the characteristics of the character and print them using the print_all_characteristics tool.

The print_all_characteristics tool takes an arbitrary number of inputs where the key is the characteristic name and the value is the characteristic value (age: 28 or eye_color: green).

&lt;description&gt;
The man is tall, with a beard and a scar on his left cheek. He has a deep voice and wears a black leather jacket.
&lt;/description&gt;

Now use the print_all_characteristics tool."""

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    tools=tools,
    tool_choice={"type": "tool", "name": "print_all_characteristics"},
    messages=[{"role": "user", "content": query}]
)

tool_output = None
for content in response.content:
    if content.type == "tool_use" and content.name == "print_all_characteristics":
        tool_output = content.input
        break

if tool_output:
    print("Characteristics (JSON):")
    print(json.dumps(json_classification, indent=2))
else:
    print("Something went wrong.")


# These examples demonstrate how you can use Claude and the tool use feature to extract structured JSON data for various natural language processing tasks. By defining custom tools with specific input schemas, you can guide Claude to generate well-structured JSON output that can be easily parsed and utilized in your applications.

</file>
<file name="tool_use/tool_choice.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Tool choice

# Tool use supports a parameter called `tool_choice` that allows you to specify how you want Claude to call tools. In this notebook, we'll take a look at how it works and when to use it. Before going any further, make sure you are comfortable with the basics of tool use with Claude.
# 
# When working with the `tool_choice` parameter, we have three possible options: 
# 
# * `auto` allows Claude to decide whether to call any provided tools or not
# * `tool` allows us to force Claude to always use a particular tool
# * `any` tells Claude that it must use one of the provided tools, but doesn't force a particular tool
# 
# Let's take a look at each option in detail. We'll start by importing the Anthropic SDK:

# In[31]:


from anthropic import Anthropic
client = Anthropic()
MODEL_NAME = "claude-3-sonnet-20240229"


# ## Auto
# 
# Setting `tool_choice` to `auto` allows the model to automatically decide whether to use tools or not.  This is the default behavior when working with tools. 
# 
# To demonstrate this, we're going to provide Claude with a fake web search tool. We will ask Claude questions, some of which would require calling the web search tool and other which Claude should be able to answer on its own.
# 
# Let's start by defining a tool called `web_search`.  Please note, to keep this demo simple, we're not actually searching the web here:

# In[137]:


def web_search(topic):
    print(f"pretending to search the web for {topic}")

web_search_tool = {
    "name": "web_search",
    "description": "A tool to retrieve up to date information on a given topic by searching the web",
    "input_schema": {
        "type": "object",
        "properties": {
            "topic": {
                "type": "string",
                "description": "The topic to search the web for"
            },
        },
        "required": ["topic"]
    }
}


# Next, we write a function that accepts a user_query and passes it along to Claude, along with the `web_search_tool`. 
# 
# We also set `tool_choice` to `auto`:
# 
# ```py
# tool_choice={"type": "auto"}
# ```
# 
# Here's the complete function:

# In[145]:


from datetime import date

def chat_with_web_search(user_query):
    messages = [{"role": "user", "content": user_query}]

    system_prompt=f"""
    Answer as many questions as you can using your existing knowledge.  
    Only search the web for queries that you can not confidently answer.
    Today's date is {date.today().strftime("%B %d %Y")}
    If you think a user's question involves something in the future that hasn't happened yet, use the search tool.
    """

    response = client.messages.create(
        system=system_prompt,
        model=MODEL_NAME,
        messages=messages,
        max_tokens=1000,
        tool_choice={"type": "auto"},
        tools=[web_search_tool]
    )
    last_content_block = response.content[-1]
    if last_content_block.type == "text":
        print("Claude did NOT call a tool")
        print(f"Assistant: {last_content_block.text}")
    elif last_content_block.type == "tool_use":
        print("Claude wants to use a tool")
        print(last_content_block)


# Let's start with a question Claude should be able to answer without using the tool:

# In[139]:


chat_with_web_search("What color is the sky?")


# When we ask "What color is the sky?", Claude does not use the tool.  Let's try asking something that Claude should use the web search tool to answer:

# In[140]:


chat_with_web_search("Who won the 2024 Miami Grand Prix?")


# When we ask "Who won the 2024 Miami Grand Prix?", Claude uses the web search tool! 
# 
# Let's try a few more examples:

# In[141]:


# Claude should NOT need to use the tool for this:
chat_with_web_search("Who won the superbowl in 2022?")


# In[144]:


# Claude SHOULD use the tool for this:
chat_with_web_search("Who won the superbowl in 2024?")


# ### Your Prompt Matters!
# 
# When working with `tool_choice` of `auto`, it's important that you spend time to write a detailed prompt.  Often, Claude can be over-eager to call tools.  Writing a detailed prompt helps Claude determine when to call a tool and when not to.  In the above example, we included specific instructions in the system prompt: 
# 
# 
# ```py
#  system_prompt=f"""
#     Answer as many questions as you can using your existing knowledge.  
#     Only search the web for queries that you can not confidently answer.
#     Today's date is {date.today().strftime("%B %d %Y")}
#     If you think a user's question involves something in the future that hasn't happened yet, use the search tool.
# """
# ```
# 
# 

# ## Forcing a specific tool
# 
# We can force Claude to use a particular tool using `tool_choice`.  In the example below, we've defined two simple tools: 
# * `print_sentiment_scores` - a tool that "tricks" Claude into generating well-structured JSON output containing sentiment analysis data.  For more info on this approach, see [Extracting Structured JSON using Claude and Tool Use](https://github.com/anthropics/anthropic-cookbook/blob/main/tool_use/extracting_structured_json.ipynb)
# * `calculator` - a very simple calculator tool that takes two numbers and adds them together 
# 

# In[111]:


tools = [
    {
        "name": "print_sentiment_scores",
        "description": "Prints the sentiment scores of a given tweet or piece of text.",
        "input_schema": {
            "type": "object",
            "properties": {
                "positive_score": {"type": "number", "description": "The positive sentiment score, ranging from 0.0 to 1.0."},
                "negative_score": {"type": "number", "description": "The negative sentiment score, ranging from 0.0 to 1.0."},
                "neutral_score": {"type": "number", "description": "The neutral sentiment score, ranging from 0.0 to 1.0."}
            },
            "required": ["positive_score", "negative_score", "neutral_score"]
        }
    },
    {
        "name": "calculator",
        "description": "Adds two number",
        "input_schema": {
            "type": "object",
            "properties": {
                "num1": {"type": "number", "description": "first number to add"},
                "num2": {"type": "number", "description": "second number to add"},
            },
            "required": ["num1", "num2"]
        }
    }
]


# Our goal is to write a function called `analyze_tweet_sentiment` that takes a tweet and prints a basic sentiment analysis of that tweet.  Eventually we will "force" Claude to use our sentiment analysis tool, but we'll start by showing what happens when we **do not** force the tool use. 
# 
# In this first "bad" version of the `analyze_tweet_sentiment` function, we provide Claude with both tools. For the sake of comparison, we'll start by setting tool_choice to "auto":
# 
# ```py
# tool_choice={"type": "auto"}
# ```
# 
# Please note that we are deliberately not providing Claude with a well-written prompt, to make it easier to see the impact of forcing the use of a particular tool.

# In[124]:


def analyze_tweet_sentiment(query):
    response = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        tool_choice={"type": "auto"},
        messages=[{"role": "user", "content": query}]
    )
    print(response)


# Let's see what happens when we call the function with the tweet "Holy cow, I just made the most incredible meal!"

# In[125]:


analyze_tweet_sentiment("Holy cow, I just made the most incredible meal!")


# Claude does not call our sentiment analysis tool:
# &gt; "That's great to hear! I don't actually have the capability to assess sentiment from text, but it sounds like you're really excited and proud of the incredible meal you made
# 
# Next, let's imagine someone tweets this: "I love my cats! I had four and just adopted 2 more! Guess how many I have now?"

# In[128]:


analyze_tweet_sentiment("I love my cats! I had four and just adopted 2 more! Guess how many I have now?")


# Claude wants to call the calculator tool:
# 
# &gt; ToolUseBlock(id='toolu_staging_01RFker5oMQoY6jErz5prmZg', input={'num1': 4, 'num2': 2}, name='calculator', type='tool_use')

# Clearly, this current implementation is not doing what we want (mostly because we set it up to fail). 
# 
# Next, let's force Claude to **always** use the `print_sentiment_scores` tool by updating `tool_choice`:
# 
# ```py
# tool_choice={"type": "tool", "name": "print_sentiment_scores"}
# ```
# 
# In addition to setting `type` to `tool`, we must provide a particular tool name.

# In[132]:


def analyze_tweet_sentiment(query):
    response = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        tool_choice={"type": "tool", "name": "print_sentiment_scores"},
        messages=[{"role": "user", "content": query}]
    )
    print(response)


# Now if we try prompting Claude with the same prompts from earlier, it's always going to call the `print_sentiment_scores` tool:

# In[133]:


analyze_tweet_sentiment("Holy cow, I just made the most incredible meal!")


# Claude calls our `print_sentiment_scores` tool:
# 
# &gt; ToolUseBlock(id='toolu_staging_01FMRQ9pZniZqFUGQwTcFU4N', input={'positive_score': 0.9, 'negative_score': 0.0, 'neutral_score': 0.1}, name='print_sentiment_scores', type='tool_use')
# 
# Even if we try to trip up Claude with a "Math-y" tweet, it still always calls the `print_sentiment_scores` tool:

# In[134]:


analyze_tweet_sentiment("I love my cats! I had four and just adopted 2 more! Guess how many I have now?")


# Even though we're forcing Claude to call our `print_sentiment_scores` tool, we should still employ some basic prompt engineering:

# In[135]:


def analyze_tweet_sentiment(query):

    prompt = f"""
    Analyze the sentiment in the following tweet: 
    &lt;tweet&gt;{query}&lt;/tweet&gt;
    """
    
    response = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        tool_choice={"type": "auto"},
        messages=[{"role": "user", "content": prompt}]
    )
    print(response)


# ## Any
# 
# The final option for `tool_choice` is `any` which allows us to tell Claude "you must call a tool, but you can pick which one".  Imagine we want to create a SMS chatbot using Claude.  The only way for this chatbot to actually "communicate" with a user is via SMS text message. 
# 
# In the example below, we make a very simple text-messaging assistant that has access to two tools:
# * `send_text_to_user` sends a text message to a user
# * `get_customer_info` looks up customer data based on a username
# 
# The idea is to create a chatbot that always calls one of these tools and never responds with a non-tool response.  In all situations, Claude should either respond back by trying to send a text message or calling `get_customer_info` to get more customer information.
# 
# Most importantly, we set `tool_choice` to "any":
# 
# ```py
# tool_choice={"type": "any"}
# ```

# In[162]:


def send_text_to_user(text):
    # Sends a text to the user
    # We'll just print out the text to keep things simple:
    print(f"TEXT MESSAGE SENT: {text}")

def get_customer_info(username):
    return {
        "username": username,
        "email": f"{username}@email.com",
        "purchases": [
            {"id": 1, "product": "computer mouse"},
            {"id": 2, "product": "screen protector"},
            {"id": 3, "product": "usb charging cable"},
        ]
    }

tools = [
    {
        "name": "send_text_to_user",
        "description": "Sends a text message to a user",
        "input_schema": {
            "type": "object",
            "properties": {
                "text": {"type": "string", "description": "The piece of text to be sent to the user via text message"},
            },
            "required": ["text"]
        }
    },
    {
        "name": "get_customer_info",
        "description": "gets information on a customer based on the customer's username.  Response includes email, username, and previous purchases. Only call this tool once a user has provided you with their username",
        "input_schema": {
            "type": "object",
            "properties": {
                "username": {"type": "string", "description": "The username of the user in question. "},
            },
            "required": ["username"]
        }
    },
]

system_prompt = """
All your communication with a user is done via text message.
Only call tools when you have enough information to accurately call them.  
Do not call the get_customer_info tool until a user has provided you with their username. This is important.
If you do not know a user's username, simply ask a user for their username.
"""

def sms_chatbot(user_message):
    messages = [{"role": "user", "content":user_message}]

    response = client.messages.create(
        system=system_prompt,
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        tool_choice={"type": "any"},
        messages=messages
    )
    if response.stop_reason == "tool_use":
        last_content_block = response.content[-1]
        if last_content_block.type == 'tool_use':
            tool_name = last_content_block.name
            tool_inputs = last_content_block.input
            print(f"=======Claude Wants To Call The {tool_name} Tool=======")
            if tool_name == "send_text_to_user":
                send_text_to_user(tool_inputs["text"])
            elif tool_name == "get_customer_info":
                print(get_customer_info(tool_inputs["username"]))
            else:
                print("Oh dear, that tool doesn't exist!")
            
    else:
        print("No tool was called. This shouldn't happen!")
    


# Let's start simple:

# In[163]:


sms_chatbot("Hey there! How are you?")


# Claude responds back by calling the `send_text_to_user` tool.
# 
# Next, we'll ask Claude something a bit trickier:

# In[164]:


sms_chatbot("I need help looking up an order")


# Claude wants to send a text message, asking a user to provide their username.
# 
# Now, let's see what happens when we provide Claude with our username:

# In[165]:


sms_chatbot("I need help looking up an order.  My username is jenny76")


# Claude calls the `get_customer_info` tool, just as we hoped! 
# 
# Even if we send Claude a gibberish message, it will still call one of our tools:

# In[166]:


sms_chatbot("askdj aksjdh asjkdbhas kjdhas 1+1 ajsdh")


</file>
<file name="tool_use/tool_use_with_pydantic.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Note-Saving Tool with Pydantic and Anthropic Tool Use
# 
# In this example, we'll create a tool that saves a note with the author and metadata, and use Pydantic to validate the model's response when calling the tool. We'll define the necessary Pydantic models, process the tool call, and ensure that the model's response conforms to the expected schema.

# ## Step 1: Set up the environment
# First, let's install the required libraries and set up the Anthropic API client.

# In[ ]:


get_ipython().run_line_magic('pip', "install anthropic pydantic 'pydantic[email]'")


# In[2]:


from anthropic import Anthropic
from pydantic import BaseModel, EmailStr, Field
from typing import Optional

client = Anthropic()
MODEL_NAME = "claude-3-opus-20240229"


# ## Step 2: Define the Pydantic models
# 
# We'll define Pydantic models to represent the expected schema for the note, author, and the model's response. This will allow us to validate and type-check the model's response when saving a note.

# In[18]:


class Author(BaseModel):
    name: str
    email: EmailStr

class Note(BaseModel):
    note: str
    author: Author
    tags: Optional[list[str]] = None
    priority: int = Field(ge=1, le=5, default=3)
    is_public: bool = False

class SaveNoteResponse(BaseModel):
    success: bool
    message: str


# ## Step 3: Define the client-side tool
# 
# Next, we'll define the client-side tool that our chatbot will use to save notes.

# In[17]:


tools = [
    {
        "name": "save_note",
        "description": "A tool that saves a note with the author and metadata.",
        "input_schema": {
            "type": "object",
            "properties": {
                "note": {
                    "type": "string",
                    "description": "The content of the note to be saved."
                },
                "author": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the author."
                        },
                        "email": {
                            "type": "string",
                            "format": "email",
                            "description": "The email address of the author."
                        }
                    },
                    "required": ["name", "email"]
                },
                "priority": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 3,
                    "description": "The priority level of the note (1-5)."
                },
                "is_public": {
                    "type": "boolean",
                    "default": False,
                    "description": "Indicates whether the note is publicly accessible."
                }
            },
            "required": ["note", "author"]
        }
    }
]


# ## Step 4: Implement the note-saving tool
# We'll create a dummy note saving function that just prints out that the note was saved successfully. If you actually want this note to be saved somewhere, you can implement this function.

# In[23]:


def save_note(note: str, author: dict, priority: int = 3, is_public: bool = False) -&gt; None:
    print("Note saved successfully!")


# ## Step 5: Process the tool call and generate the response
# We'll create functions to process the tool call made by Claude and generate the response indicating the success of saving the note.

# In[24]:


def process_tool_call(tool_name, tool_input):
    if tool_name == "save_note":
        note = Note(
            note=tool_input["note"],
            author=Author(
                name=tool_input["author"]["name"],
                email=tool_input["author"]["email"]
            ),
            priority=tool_input.get("priority", 3),
            is_public=tool_input.get("is_public", False)
        )
        save_note(note.note, note.author.model_dump(), note.priority, note.is_public)
        return SaveNoteResponse(success=True, message="Note saved successfully!")

def generate_response(save_note_response):
    return f"Response: {save_note_response.message}"


# ## Step 6: Interact with the chatbot
# 
# Now, let's create a function to interact with the chatbot. We'll send a user message, process the tool call made by Claude, generate the response, validate the model's response using Pydantic, and return the final response to the user.

# In[21]:


def chatbot_interaction(user_message):
    print(f"\n{'='*50}\nUser Message: {user_message}\n{'='*50}")

    messages = [
        {"role": "user", "content": user_message}
    ]

    message = client.messages.create(
        model=MODEL_NAME,
        max_tokens=4096,
        tools=tools,
        messages=messages
    )

    print(f"\nInitial Response:")
    print(f"Stop Reason: {message.stop_reason}")
    print(f"Content: {message.content}")

    if message.stop_reason == "tool_use":
        tool_use = next(block for block in message.content if block.type == "tool_use")
        tool_name = tool_use.name
        tool_input = tool_use.input

        print(f"\nTool Used: {tool_name}")
        print(f"Tool Input: {tool_input}")

        save_note_response = process_tool_call(tool_name, tool_input)


        print(f"Tool Result: {save_note_response}")

        response = client.messages.create(
            model=MODEL_NAME,
            max_tokens=4096,
            messages=[
                {"role": "user", "content": user_message},
                {"role": "assistant", "content": message.content},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "tool_result",
                            "tool_use_id": tool_use.id,
                            "content": str(save_note_response),
                        }
                    ],
                },
            ],
            tools=tools,
        )
    else:
        response = message

    final_response = next(
        (block.text for block in response.content if hasattr(block, "text")),
        None,
    )
    print(response.content)
    print(f"\nFinal Response: {final_response}")

    return final_response


# ## Step 7: Test the chatbot
# Let's test our chatbot with a sample query to save a note.

# In[26]:


chatbot_interaction("""
Can you save a private note with the following details?
Note: Remember to buy milk and eggs.
Author: John Doe (johndoe@gmail.com)
Priority: 4
""")


# In this example, we've created a tool that saves a note with the author and metadata. The chatbot uses the save_note tool to save the note, and Pydantic is used to validate the model's response when calling the tool. The Note, Author, and SaveNoteResponse models ensure that the tool input and the model's response conform to the expected schema.
# 
# By defining clear Pydantic models and using them to validate the model's response, we add an extra layer of reliability and safety when interacting with the chatbot and saving notes.

</file>
<file name="tool_use/vision_with_tools.ipynb">
#!/usr/bin/env python
# coding: utf-8

# # Using Vision with Tools

# In this recipe, we'll demonstrate how to combine Vision with tool use to analyze an image of a nutrition label and extract structured nutrition information using a custom tool.

# ## Setup
# First, let's install the necessary libraries and set up the Anthropic API client:

# In[ ]:


get_ipython().run_line_magic('pip', 'install anthropic IPython')


# In[2]:


from IPython.display import Image
from anthropic import Anthropic
import base64

client = Anthropic()
MODEL_NAME = "claude-3-opus-20240229"


# # Defining the Nutrition Label Extraction Tool
# Next, we'll define a custom tool called "print_nutrition_info" that extracts structured nutrition information from an image. The tool has properties for calories, total fat, cholesterol, total carbs, and protein:

# In[3]:


nutrition_tool = {
    "name": "print_nutrition_info",
    "description": "Extracts nutrition information from an image of a nutrition label",
    "input_schema": {
        "type": "object",
        "properties": {
            "calories": {"type": "integer", "description": "The number of calories per serving"},
            "total_fat": {"type": "integer", "description": "The amount of total fat in grams per serving"},
            "cholesterol": {"type": "integer", "description": "The amount of cholesterol in milligrams per serving"},
            "total_carbs": {"type": "integer", "description": "The amount of total carbohydrates in grams per serving"},
            "protein": {"type": "integer", "description": "The amount of protein in grams per serving"}
        },
        "required": ["calories", "total_fat", "cholesterol", "total_carbs", "protein"]
    }
}


# ## Analyzing the Nutrition Label Image
# Now, let's put it all together. We'll load a nutrition label image, pass it to Claude along with a prompt, and have Claude call the "print_nutrition_info" tool to extract the structured nutrition information into a nicely formatted JSON object:

# In[5]:


Image(filename='../images/tool_use/nutrition_label.png') 


# In[11]:


def get_base64_encoded_image(image_path):
    with open(image_path, "rb") as image_file:
        binary_data = image_file.read()
        base_64_encoded_data = base64.b64encode(binary_data)
        base64_string = base_64_encoded_data.decode('utf-8')
        return base64_string

message_list = [
    {
        "role": "user",
        "content": [
            {"type": "image", "source": {"type": "base64", "media_type": "image/png", "data": get_base64_encoded_image("../images/tool_use/nutrition_label.png")}},
            {"type": "text", "text": "Please print the nutrition information from this nutrition label image."}
        ]
    }
]

response = client.messages.create(
    model=MODEL_NAME,
    max_tokens=4096,
    messages=message_list,
    tools=[nutrition_tool]
)

if response.stop_reason == "tool_use":
    last_content_block = response.content[-1]
    if last_content_block.type == 'tool_use':
        tool_name = last_content_block.name
        tool_inputs = last_content_block.input
        print(f"=======Claude Wants To Call The {tool_name} Tool=======")
        print(tool_inputs)
            
else:
    print("No tool was called. This shouldn't happen!")
    


</file>
</source>